<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>01. Image Classification</title>
    <url>/2020/04/04/01-Image-Classification/</url>
    <content><![CDATA[<h1 id="General"><a href="#General" class="headerlink" title="General"></a>General</h1><ol>
<li>The conventional way to solve image classification problem: <br />Data-driven Approach: <br />&emsp;Collect a dataset of images and labels<br />&emsp;Use Machine Learning to train a classifier<br />&emsp;Evaluate the classifier on new images</li>
<li>The API has two main functions: <br />&emsp;”Train” function: input images and labels then output a model. <br />&emsp;”Predict” function: input model and images then output predictions. </li>
</ol>
<h1 id="Nearest-Neighbor"><a href="#Nearest-Neighbor" class="headerlink" title="Nearest Neighbor"></a>Nearest Neighbor</h1><h2 id="Train-and-Predict"><a href="#Train-and-Predict" class="headerlink" title="Train and Predict"></a>Train and Predict</h2><ol>
<li>In the training function, we memorize all data and labels. </li>
<li>In the prediction function, we predict the label of the most similar training image. </li>
<li>More specific, in prediction, we find the closest image and predict the label of the nearest image. </li>
<li>With $N$ example, the complexity of training is $O(1)$ and prediction is $O(N)$. This is bad because we want classifiers that are fast at prediction even if the training is slow</li>
<li>Another problem with this algorithm is the curse of dimensionality. As the data enter the higher dimension, they become sparse. So we need a lot more datas to make space dense, which is possibly out of control. </li>
</ol>
<h2 id="Compare-Images"><a href="#Compare-Images" class="headerlink" title="Compare Images"></a>Compare Images</h2><ol>
<li>In order to select the most similar image, we need to compare each image. So it is necessary to choose a compare function. </li>
<li>The first choice is the <code>L1 distance</code> or <code>Manhattan distance</code>. $d_1(I_1,I_2)=\displaystyle\sum_p|I_1^p-I_2^p|$. </li>
<li>Another choice is the <code>L2 distance</code> or <code>Euclidean distance</code>. $d_2(I_1,I_2)=\sqrt{\sum_p(I_1^p-I_2^p)^2}$. </li>
<li>The difference between the two choices is that $L1$ distance is coordinate-dependent wile $L2$ distance is coordinate-independent. If we rotate the coordinate frame, $L1$ distance will be changed while $L2$ distance remains the same. </li>
<li>Actually, distance matrices on pixels are not informative. </li>
</ol>
<h2 id="K-Nearest-Neighbors"><a href="#K-Nearest-Neighbors" class="headerlink" title="K-Nearest Neighbors"></a>K-Nearest Neighbors</h2><ol>
<li>The algorithm above determines the result with only one data. Therefore it is easily affected by noise. </li>
<li>To reduce the affection of noise, we use the more “democratic” way. We take majority vote from $K$-nearest neighbours. </li>
<li>The algorithm mentioned earlier is a $K=1$ algorithm. </li>
<li>We often take $K$ some odd number instead of an even number. </li>
<li>When $K$ is smaller than the number of classes of labels, some image may be unpredictable if the vote of all $K$-nearest neighbours is a tie. So we will make a random guess among the majority winners. </li>
</ol>
<h1 id="Hyperparameter"><a href="#Hyperparameter" class="headerlink" title="Hyperparameter"></a>Hyperparameter</h1><ol>
<li>Hyperparameter is choices about the algorithm that we set rather than learn. As the number of $K$ above, which distance we are using, they are both hyperparameters. </li>
<li>Hyperparameter is very problem-dependent. We must try them all out and see what works best. </li>
</ol>
<h2 id="Setting-Hyperparameters"><a href="#Setting-Hyperparameters" class="headerlink" title="Setting Hyperparameters"></a>Setting Hyperparameters</h2><ol>
<li>Mark that when setting hyperparameters, we never touch a finger on the test set. The test must be unseen from model and us. </li>
<li>So we must split data into a training set, a validation set and a test set. Choose hyperparameters on the validation set and evaluate on the test set. </li>
<li>Furthermore, we can use the cross-validation by splitting data into folds. Try each fold as validation and average the results. This is useful but takes much time. So we mostly use it on small datasets and seldom use it on large datasets. </li>
<li>In order to avoid bias on each dataset, we usually split data randomly. </li>
</ol>
<h1 id="Linear-Classification"><a href="#Linear-Classification" class="headerlink" title="Linear Classification"></a>Linear Classification</h1><ol>
<li>The parametric approach takes in the image as a vertical vector $\vec{x}$, and a parameter matrix (weight matrix) $W$ then outputs scores of each class. <br />For $\vec{x}$, we take the numbers in each image out in order and put them into a vertical vector. </li>
<li>In linear classification, $f(\vec{x},W)=W\vec{x}$. Sometimes, we might want to add a bias vector $\vec{b}$, which makes the function $f(\vec{x}, W)=W\vec{x}+\vec{b}$. </li>
<li>Each row of $W$ is a template of how each pixel in the image will affect each class. </li>
<li>The linear classification model splits the space into pieces with linear decision boundaries. Each class takes one piece. </li>
<li>We predict the label as the label of the highest class score. </li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>计算机视觉 (Stanford CS231n)</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>深度学习</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>01. Derivative, Slope</title>
    <url>/2020/02/08/01-Derivative-Slope/</url>
    <content><![CDATA[<h1 id="Interpretation"><a href="#Interpretation" class="headerlink" title="Interpretation"></a>Interpretation</h1><ol>
<li>Geomatric interpretation is to find the <code>tangent line</code> to <script type="math/tex">y=f(x)</script> at point <script type="math/tex">P=(x_0,y_0)</script>. </li>
<li>To find that tangent line, we have to find the equation <script type="math/tex">y-y_0=m(x-x_0)</script>. <br />This contains two part to solve: <br />&emsp;Point <script type="math/tex">y_0=f(x_0)</script><br />&emsp;Slope: <script type="math/tex">m=f'(x_0)</script>. </li>
<li>Definition of <code>derivative</code>: the slope of the tangent line. </li>
<li>As another point <script type="math/tex">Q</script> approaches the fixed point <script type="math/tex">P</script>, the slope of <script type="math/tex">QP</script> is approaching the slope of that tangent line. <br />So tangent line = limit of <code>secant line</code> <script type="math/tex">PQ</script> as <script type="math/tex">Q \rightarrow P</script> while <script type="math/tex">P</script> is fixed. </li>
<li>The slope of <script type="math/tex">PQ</script> is <script type="math/tex">\displaystyle\frac{\Delta f}{\Delta x}</script> (<script type="math/tex">\Delta f</script> is the difference of <script type="math/tex">Q</script> and <script type="math/tex">P</script> in y-axis, <script type="math/tex">\Delta x</script> is the difference of <script type="math/tex">Q</script> and <script type="math/tex">P</script> in x-axis). <br />So we get the <code>difference quotient</code>:  <script type="math/tex">m=f'(x_0)=\displaystyle\lim_{\Delta x\to 0}{\frac{\Delta f}{\Delta x}}=\displaystyle\lim_{\Delta x \to 0}{\frac{f(x_0+\Delta x)-f(x_0)}{\Delta x}}</script>. </li>
<li><code>Binomial theorem</code>: <script type="math/tex">(x+\Delta x)^n=x^n+nx^{n-1}\Delta+O((\Delta x)^2)</script>. <script type="math/tex">O((\Delta x)^2)</script> means terms with <script type="math/tex">(\Delta x)^2</script> or higher. <br /><script type="math/tex">\begin{equation}\begin{split}\displaystyle\frac{d}{dx}x^n&=\displaystyle\lim_{\Delta x\to 0}{\displaystyle\frac{(x+\Delta x)^n-x^n}{\Delta x}}=\displaystyle\lim_{\Delta x\to 0}{\displaystyle\frac{(x^n+nx^{n-1}\Delta x+O((\Delta x)^2))-x^n}{\Delta x}}\\&=\displaystyle\lim_{\Delta x\to 0}{\displaystyle\frac{nx^{n-1}\Delta x+O((\Delta x)^2)}{\Delta x}}=\displaystyle\lim_{\Delta x\to 0}{nx^{n-1}+\displaystyle\frac{O((\Delta x)^2)}{\Delta x}}\\&=nx^{n-1}\end{split}\end{equation}</script><br />This extends to polynomials. </li>
<li>Physical Interpretation is that <script type="math/tex">\displaystyle\frac{\Delta y}{\Delta x}</script> is the average rate of change while <script type="math/tex">\displaystyle\frac{dy}{dx}</script> is the instantaneous rate of change. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>单变量微积分 (MIT 18.01)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>01. Probability Models and Axioms</title>
    <url>/2020/03/04/01-Probability-Models-and-Axioms/</url>
    <content><![CDATA[<h1 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h1><ol>
<li>A <code>set</code> is a collection of objects which are the <code>elements of the set</code>. </li>
<li>If <script type="math/tex">S</script> is a set and <script type="math/tex">x</script> is an element of <script type="math/tex">S</script>, we write <script type="math/tex">x\in S</script>. If <script type="math/tex">x</script> is not an element of <script type="math/tex">S</script>, we write <script type="math/tex">x\notin S</script>. </li>
<li><code>Empty set</code>: a set has no elements, denoted by <script type="math/tex">\emptyset</script>. </li>
<li>If <script type="math/tex">S</script> contains a finite number of elements, we write it as a list of the elements in braces: <script type="math/tex">S=\{x_1,x_2,…,x_n\}</script><br />If <script type="math/tex">S</script> contains infinitely many elements which can be enumerated in a list, we write <script type="math/tex">S=\{x_1,x_2,…\}</script>. <script type="math/tex">S</script> is <code>countably infinite</code>. <br />If all <script type="math/tex">x</script>‘s in <script type="math/tex">S</script> have a certain property <script type="math/tex">P</script>, we write <script type="math/tex">S=\{x|x\ satisfies\ P\}</script>. <script type="math/tex">|</script> is to be read as “such that”. In this case, <script type="math/tex">x</script> take a continuous range of values, and cannot be written down in a list. So <script type="math/tex">S</script> is called uncountable. </li>
<li>If every element of <script type="math/tex">S</script> is also an element of <script type="math/tex">T</script>, <script type="math/tex">S</script> is a <code>subset</code> of <script type="math/tex">T</script>, <script type="math/tex">S\subset T</script>. </li>
<li>If <script type="math/tex">S\subset T</script> and <script type="math/tex">T\subset S</script>, two sets are <code>equal</code>, <script type="math/tex">S=T</script>. </li>
<li><code>Universal set</code> contains all objects that could conceivably be of interest in a particular context. It’s usually denoted by <script type="math/tex">\Omega</script>. </li>
<li>Sets <script type="math/tex">S</script> are subsets of <script type="math/tex">\Omega</script>. </li>
<li>The <code>complement of a set</code> <script type="math/tex">S</script>, <code>with respect to the universe</code> <script type="math/tex">\Omega</script>, is <script type="math/tex">\{x\in\Omega|x\notin S\}</script>. It’s denoted by <script type="math/tex">S^c</script>. </li>
<li><script type="math/tex">\Omega^c=\emptyset</script>. </li>
<li><code>Union</code> of <script type="math/tex">S</script> and <script type="math/tex">T</script>: <script type="math/tex">S\cup T=\{x|x\in S\ or\ x\in T\}</script></li>
<li><code>Intersection</code> of <script type="math/tex">S</script> and <script type="math/tex">T</script>: <script type="math/tex">S\cap T=\{x|x\in S\ and\ x\in T\}</script></li>
<li>Two sets are <code>disjoint</code> if <script type="math/tex">S\cap T=\emptyset</script>. Several sets are disjoint if no two of them have common element. </li>
<li>A collection of sets is a <code>partition</code> of a set <script type="math/tex">S</script> if the sets are disjoint and their union is <script type="math/tex">S</script>. </li>
<li>If <script type="math/tex">x</script> and <script type="math/tex">y</script> are two objects, we use <script type="math/tex">(x,y)</script> to denote the <code>ordered pair</code> of <script type="math/tex">x</script> and <script type="math/tex">y</script>. </li>
<li>The set of scalars (real number) is denoted by <script type="math/tex">R</script>. The <script type="math/tex">n</script>-dimensional space is denoted by <script type="math/tex">R^n</script>. </li>
<li><code>Venn diagrams</code> are used to visualize sets. </li>
<li>Algebra of sets: <br />&emsp;<script type="math/tex">\begin{equation}\begin{split}S\cup T&=T\cup S\\ S\cap(T\cup T)&=(S\cap T)\cup(S\cap U)\\ (S^c)^c&=S\\ S\cup\Omega&=\Omega\\ (\bigcup\limits_nS_n)^c&=\bigcap\limits_nS^c_n \end{split}\end{equation}</script> &emsp; <script type="math/tex">\begin{equation}\begin{split}S\cup(T\cup U)&=(S\cup T)\cup U\\S\cup(T\cap U)&=(S\cup T)\cap(S\cup U)\\S\cap S^c&=\emptyset\\S\cap\Omega&=S\\ (\bigcap\limits_nS_n)^c&=\bigcup\limits_nS^c_n \end{split}\end{equation}</script></li>
</ol>
<h1 id="Probabilistic-Models"><a href="#Probabilistic-Models" class="headerlink" title="Probabilistic Models"></a>Probabilistic Models</h1><h2 id="Sample-Space"><a href="#Sample-Space" class="headerlink" title="Sample Space"></a>Sample Space</h2><ol>
<li>Every probabilistic model invelves an underlying process, called the <code>experiment</code>, that will produce exactly one out of several possible outcomes. </li>
<li><code>Sample space</code> <script type="math/tex">\Omega</script> contains all possible outcomes of an experiment. </li>
<li><code>Event</code> is any collection of possible outcomes, including the entire sample sapce and the empty set. </li>
<li><code>Probabilistic model</code> must contain the sample space and the probability law. </li>
<li>In our formulation of a probabilistic model, there is only one experiment. </li>
<li>Three requirements of sample space: <br />&emsp;Sample space may consist of a finite or an infinite possible of outcomes. <br />&emsp;Different elements of the sample space should be distinct and mutually exclusive. <br />&emsp;The sample space chosen for a probabilistic model must be collectively exhaustive. <br />&emsp;The sample space should have enough detail to distinguish between all outcomes of interest to the modeler. </li>
<li>$0$ Probability doesn’t means impossible which only stands for extremely unlikely. $1$ Probability doesn’t means certain which only stands for extremely likely. $0$ probability events may happen while $1$ probability events may not occur. </li>
</ol>
<h2 id="Probability-Law"><a href="#Probability-Law" class="headerlink" title="Probability Law"></a>Probability Law</h2><ol>
<li>Probability law specifies the likelihood of any event. </li>
<li>The probability law assigns to every event $A$ a number $P(A)$, called probability of $A$. </li>
<li>Probability axioms: <br />&emsp;Nonnegativity: $P(A)≥0$, for every event $A$. <br />&emsp;Additivity: If $A$ and $B$ are two disjoint events, then $P(A\cup B)=P(A)+P(B)$. <br />&emsp;Normalization: The probability of the entire sample space is 1, $P(\Omega)=1$. </li>
<li>$P(\emptyset)=0$, for $1=P(\Omega)=P(\Omega\cup\emptyset)=P(\Omega)+P(\emptyset)=1+P(\emptyset)$. </li>
<li>If $A\subset B$, then $P(A)≤P(B)$. </li>
<li>$P(A\cup B)=P(A)+P(B)-P(A\cap B)≤P(A)+P(B)$</li>
<li>$P(A\cup B\cup C)=P(A)+P(A^c\cap B)+P(A^c\cap B^c\cap C)$</li>
</ol>
<h3 id="Discrete-Models"><a href="#Discrete-Models" class="headerlink" title="Discrete Models"></a>Discrete Models</h3><ol>
<li>Discrete probability law: If the sample space consists of a finite number of possible outcomes, $P(\{s_1,s_2,…,s_n\})=\displaystyle\sum^n_{i=1}P(s_i)$. Here $s_i$ is a single element. </li>
<li>Discrete Uniform Probability Law: If the sample space consists of $n$ possible outcomes which are equally likely (i.e. all single-element events have the same probability), the the probability of any event $A$ is given by <script type="math/tex">P(A)=\displaystyle\frac{number\ of\ elements\ of\ A}{n}</script>. </li>
</ol>
<h3 id="Continuous-Models"><a href="#Continuous-Models" class="headerlink" title="Continuous Models"></a>Continuous Models</h3><ol>
<li>The sample space of these models usually has infinite number of elements. </li>
<li>In continuous models, the probability of each single elements is $0$, but the probability of a event consisting several elements may be positive. </li>
<li>Normally these models are solved by graphs. <script type="math/tex">P(A)=\displaystyle\frac{integral\ of\ A}{integral\ of\ sample\ space}</script>. If the experiment is linear, the probability is $P(A)=\displaystyle\frac{\int_Adt}{\int_Sdt}$. If the experiment is 2-dimension, the probability is $P(A)=\displaystyle\frac{\iint_Adt}{\iint_Sdt}$. </li>
</ol>
<h1 id="Paradoxes-in-Probability"><a href="#Paradoxes-in-Probability" class="headerlink" title="Paradoxes in Probability"></a>Paradoxes in Probability</h1><p><strong><code>In probability, different mathods may give different answers, but all of the answers are correct.</code></strong></p>
<p>The difference between answers is most affected by the sample space they choose. </p>
]]></content>
      <categories>
        <category>数学</category>
        <category>概率论 (MIT 6.041)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>01. The Geometry of Linear Equations</title>
    <url>/2019/10/19/01-The-geometry-of-linear-equations/</url>
    <content><![CDATA[<h1 id="Linear-Combination"><a href="#Linear-Combination" class="headerlink" title="Linear Combination"></a>Linear Combination</h1><ol>
<li><code>Vector addition</code> : $\vec{c}=\vec{a}+\vec{b}     (c_i= a_i+b_i)$</li>
<li><code>Scalar multiplication</code>: $\vec{b}=c\vec{a}    (b_i=ca_i)$</li>
<li><code>Linear combination</code>: the sum of $c\vec{a}$ and $d\vec{b}$, i.e. $c\vec{a}+d\vec{b}$</li>
<li>Expressions of vectors: $\vec{x}=\left[\begin{matrix}a \ b \ …\end{matrix}\right]=(a, b, …)≠[a, b, …]$</li>
<li>For one vector $\vec{u}$, the only linear combination is the scalar multiplication $c\vec{u}$. </li>
<li>If all vectors are $\vec{0}$, every combination would be zero. </li>
<li>If $\vec{0}$ does not exist, all the combinations of $n$ independent vectors form an  $n$-dimensional space with $\vec{0}$ in it. </li>
<li>The picture of a vector is an arrow pointing from the origin point to the point with the coordination of the vector. Moreover, addition is merely following all the vectors and pointing from the origin to the final point. Multiplication is the arrow $c$ times longer. If $c&lt;0$, the arrow goes the other way. </li>
</ol>
<h1 id="Lengths-and-Dot-Products"><a href="#Lengths-and-Dot-Products" class="headerlink" title="Lengths and Dot Products"></a>Lengths and Dot Products</h1><ol>
<li><code>Dot product (Inner product)</code>: $\vec{v}\cdot \vec{w}=\sum{v_iw_i}$</li>
<li>If the dot product equals to 0, two vectors are perpendicular. The $\vec{0}$ is perpendicular to every vector. </li>
<li><code>Length of a vector</code>: $||\vec{v}||=\displaystyle\sqrt{\vec{v}\cdot \vec{v}}=\sqrt{\sum{v_i^2}}$</li>
<li>The length of a vector is the length of the arrow that represents the vector in the picture. </li>
<li>A unit vector $\vec{u}$ is a vector whose length is $1$. </li>
<li>We can create a unit vector by dividing a vector with its length, i.e. $\vec{u}=\displaystyle\frac{\vec{v}}{||\vec{v}||}$. </li>
<li>The standard unit vectors along the $x$ and $y$ axes are written $\vec{i}$ and $\vec{j}$. </li>
<li>$\vec{v}\cdot \vec{w} &gt; 0 \Longleftrightarrow \theta  &lt;\frac{\Pi}{2}$ <br />$\vec{v}\cdot \vec{w} &lt; 0 \Longleftrightarrow \theta &gt; \frac{\Pi}{2}$</li>
<li>For unit vectors, the dot product of two vectors is <script type="math/tex">cos\ \theta</script>. If not both vectors are unit vectors, divide them with their length to make them unit vectors. <script type="math/tex">cos\ \theta=\frac{\vec{u}\cdot \vec{v}}{||\vec{u}||\ ||\vec{v}||}</script></li>
<li><code>Schwarz Inequality</code>: <script type="math/tex">\displaystyle cos\ \theta=\frac{\vec{u}\cdot \vec{v}}{||\vec{u}||\ ||\vec{v}||}\ \Leftrightarrow\ \vec{u}\cdot \vec{v}=||\vec{u}||\ ||\vec{v}||\ cos\ \theta \Leftrightarrow \vec{u}\cdot \vec{v}≥||\vec{u}||\ ||\vec{v}||</script></li>
<li><code>Triangle Inequality</code>: $||\vec{v}+\vec{u}||≤||\vec{v}||+||\vec{u}||$. Because $\vec{v}+\vec{u}$ is the third side of the triangle of $\vec{u}$ and $\vec{v}$</li>
<li>For $2$-dimensional vectors $\vec{v}=(a, b)$ and $\vec{u}=(b, a)$, the Schwarz Inequality becomes $2ab ≤ a^2 + b^2$. If we let $x=a^2$ and $y=b^2$, $\displaystyle\sqrt{xy}≤\frac{x+y}{2}$, which is <code>Geometric mean ≤ Arithmetic mean</code></li>
</ol>
<h1 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a>Matrix</h1><h2 id="Matrix-Times-Vector"><a href="#Matrix-Times-Vector" class="headerlink" title="Matrix Times Vector"></a>Matrix Times Vector</h2><ol>
<li>For $A\vec{x}$, one way is to calculate by columns, and the other is by rows. </li>
<li>For columns, the result is the linear combination of each column. </li>
<li>For rows, the result is the dot product of each row and the vector. </li>
</ol>
<h2 id="Solve-Equations"><a href="#Solve-Equations" class="headerlink" title="Solve Equations"></a>Solve Equations</h2><ol>
<li>First, we need to make sure those equations are linear, which means that the unknowns are only multiplied by numbers. </li>
<li>For $A\vec{x}=\vec{b}$, we can solve this equation to $\vec{x}=A^{-1}\vec{b}$. Here $A^{-1}$ is the inverse of $A$. $A$ is called the <code>coefficient matrix</code>. </li>
<li>$A\vec{x}=\vec{b}$ has only one solution as long as $\vec{b}$ is in the column space of $A$. Alternatively, this system has either no solution or infinite solutions. </li>
<li><code>Independence</code>: If no combination of vectors is $\vec{0}$ except all the scalar is 0, this system of vectors is independent. <br /><code>Dependence</code>: If at least one combination of vectors is $\vec{0}$, this system of vectors is dependent. </li>
<li>If $A$ has independent columns, $A\vec{x}=\vec{0}$ has one solution. $A$ is an invertible matrix. <br />If $A$ has dependent columns, $A\vec{x}=\vec{0}$ has many solutions. $A$ is a singular matrix. </li>
</ol>
<h2 id="Two-ways-to-see-equations"><a href="#Two-ways-to-see-equations" class="headerlink" title="Two ways to see equations"></a>Two ways to see equations</h2><ol>
<li>For $n$ equations in $m$ unknowns, We can write them in equation form or the matrix form. </li>
<li>The matrix form has three matrices, the coefficient matrix A, the unknown matrix $\vec{x}$, and the right-hand side matrix $\vec{b}$. These make the system  $A\vec{x} = \vec{b}$. </li>
<li>The equation form is the usual form, like “$2x - y = 0$”, which is the row form of the matrix. </li>
<li>According to two ways to calculate the multiplication of matrix and vector, we have two ways to see a system of equations. </li>
</ol>
<h3 id="Row-Picture"><a href="#Row-Picture" class="headerlink" title="Row Picture"></a>Row Picture</h3><ol>
<li>In the row picture, we look at the coefficient matrix by rows. </li>
<li>Each row dot products with the unknown matrix and produces an equation which stands for a space. </li>
<li>Furthermore, the answer to the system is the intersection of all spaces. </li>
<li>The row picture of two equations in two unknowns shows two lines meeting at a single point (the solution). </li>
</ol>
<h3 id="Column-Picture"><a href="#Column-Picture" class="headerlink" title="Column Picture"></a>Column Picture</h3><ol>
<li>In the column picture, we look at the combination of the column vectors. </li>
<li>Each column, including the right-hand side vector, stands for a vector. </li>
<li>Moreover, the unknowns are the coefficients of the vectors in the linear combination to produce the right-hand-side vector. </li>
<li>The column picture combines the column vectors on the left side to produce the vector $\vec{b}$ on the right side. </li>
<li>The pictures of the higher dimension are hard to draw, even to imagine. Nevertheless, base on the column picture, we can solve other questions. </li>
<li>The question of solving equations is turned into finding linear combinations. </li>
<li>Furthermore, the existence of answers becomes a vector space problem, which becomes the rank problem. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>线性代数 (MIT 18.06)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>01. Vectors</title>
    <url>/2020/02/22/01-Vectors/</url>
    <content><![CDATA[<ol>
<li>Vector has both <code>direction</code> and <code>magnitude (length)</code>. </li>
<li><strong>a</strong><script type="math/tex">=\vec{a}=a_1\vec{i}+a_2\vec{j}+…=<a_1,a_2,…></script> (<script type="math/tex">\vec{i},\vec{j},…</script> are unit vectors going along the axises). </li>
<li><script type="math/tex; mode=display">|\vec{a}|$$ is a scalar equal to the length of $$\vec{a}$$. $$|\vec{a}|=\sqrt{a_1^2+a_2^2+…}</script></li>
<li><script type="math/tex">dir(\vec{a})</script> is the unit vector in the same direction of <script type="math/tex">\vec{a}</script>. We can aquire <script type="math/tex">dir(\vec{a})</script> by dividing <script type="math/tex">\vec{a}</script> with its length. </li>
<li>If a point <script type="math/tex">P(x,y,z)</script> is in the plane <script type="math/tex">P_1P_2P_3</script>, then <script type="math/tex">det(\vec{P_1P_2},\vec{P_1P_3},\vec{P_1P})=0</script> in other words <script type="math/tex">\vec{P_1P}</script> is perpendicular to <script type="math/tex">\vec{P_1P_2}\times\vec{P_1P_3}</script>. </li>
<li>The plane perpendicular to <script type="math/tex">\vec{N}=<a,b,c></script> is <script type="math/tex">ax+by+cz=0</script>, namely <script type="math/tex"><x,y,z>\cdot\vec{N}=0</script>.</li>
<li>The line through point <script type="math/tex">P_0</script> and parallel to <script type="math/tex">\vec{v}</script> is <script type="math/tex">P(t)=P_0+t\vec{v}</script>, namely <script type="math/tex">\left\{\begin{matrix}x=x_0+at\\y=y_0+bt\\z=z_0+ct \end{matrix}\right.</script>, which is a parametric equation. </li>
<li><script type="math/tex; mode=display">\displaystyle\frac{d}{dt}(\vec{a}\times\vec{b})=\frac{d\vec{a}}{dt}\vec{b}+\vec{a}\frac{d\vec{b}}{dt}</script></li>
<li>Velocity is a vector while speed is a scalar which equals to the length of velocity. </li>
<li><script type="math/tex; mode=display">\vec{v}=\displaystyle\Bigg|\frac{d\vec{r}}{dt}\Bigg|≠\frac{d|\vec{r}|}{dt}$$ and $$speed=\displaystyle\frac{ds}{dt}=|\vec{v}|</script></li>
<li><script type="math/tex">\displaystyle\vec{v}=\frac{d\vec{r}}{dt}=\frac{d\vec{r}}{ds}\frac{ds}{dt}=\vec{T}|\vec{v}|</script>. <script type="math/tex">\vec{T}</script> is the direction of velocity and tangent line of arclength. </li>
<li><script type="math/tex; mode=display">\displaystyle\vec{\Delta r}=\vec{T}\Delta s\Leftrightarrow\frac{\vec{\Delta r}}{\Delta t}=\vec{T}\frac{\Delta s}{\Delta t}\Leftrightarrow\frac{d\vec{r}}{dt}=\vec{T}\frac{ds}{dt}</script></li>
<li>Kepler’s second law: <br />&emsp;<script type="math/tex">Area\approx\displaystyle\frac{1}{2}|\vec{r}\times\vec{\Delta r}|\approx\frac{1}{2}|\vec{r}\times\vec{v}|\Delta t</script>. Since area is a constant, <script type="math/tex">|\vec{r}\times\vec{v}|</script> is a constant. <br />&emsp;<script type="math/tex">\displaystyle\frac{d}{dt}(\vec{r}\times\vec{v})=\frac{d\vec{r}}{dt}\times\vec{v}+\vec{r}\times\frac{d\vec{v}}{dt}=\vec{v}\times\vec{v}+\vec{r}\times\vec{a}=\vec{r}\times\vec{a}=0</script>. So <script type="math/tex">\vec{r}</script> and <script type="math/tex">\vec{a}</script> is parallel. So the orbit of a planet is in a plane. </li>
</ol>
<p>See more about vectors and matrices on <a href="http://www.laughingtree.cn/categories/Mathematics/Linear-Algebra-MIT-18-06/" target="_blank" rel="noopener">Linear Algebra (18.06)</a></p>
]]></content>
      <categories>
        <category>数学</category>
        <category>多变量微积分 (MIT 18.02)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>01. 概述</title>
    <url>/2020/04/24/01-%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<ol>
<li>计算机是什么：<br />&emsp;一种高速运行的电子设备<br />&emsp;用于进行数据的算术或逻辑运算<br />&emsp;可接受输入信息<br />&emsp;根据用户要求对信息进行加工<br />&emsp;输出结果</li>
<li>冯诺依曼机<br />&emsp;存储程序<br />&emsp;用二进制编码数据<br />&emsp;体系结构：控制器、运算器、存储器、输入、输出设备<br />&emsp;以运算器 (logic unit，LU)为核心</li>
<li>现代计算机<br />&emsp;功能部件：CPU (数据通道、控制器)、存储器、输入输出设备<br />&emsp;VLSI<br />&emsp;体系结构：流水技术 (PIPELINE)、层次存储系统、并行</li>
<li>计算机运行机制<br />&emsp;数据通道：完成算术和逻辑运算，通常包括其中的寄存器<br />&emsp;控制器：CPU的组成成分，它根据程序指令来指挥数据通道、存储器和输入输出设备运行，共同完成程序功能<br />&emsp;存储器：存放运行时程序及其所需要的数据的场所<br />&emsp;输入设备：信息进入计算机的设备<br />&emsp;输出设备：讲计算机结果展示给用户的设备</li>
<li>计算机的层次结构<br />&emsp;可运行高级语言的计算机 = 可运行汇编语言的计算机 + 编译器<br />&emsp;可运行汇编语言的计算机 = 可运行机器语言的计算机 + 汇编器<br />&emsp;可运行机器语言的计算机可以生成控制信号，由硬件实现</li>
<li>计算机系统<br />&emsp;硬件：中央处理器、存储器、外围设备<br />&emsp;软件：为了使用计算机而编写的各种系统的和用户的程序</li>
<li>评价计算机性能的指标<br />&emsp;吞吐率：单位时间内完成的任务数量，即完成的指令条数<br />&emsp;响应时间：完成任务的时间<br />&emsp;衡量性能的指标<br />&emsp;&emsp;MIPS (吞吐率 Million Instructions per Second，注意与指令系统区分)<br />&emsp;&emsp;CPI (每条指令完成的平均周期数，相对于周期长度)<br />&emsp;&emsp;CPU时间 (绝对时间)、CPU时钟 (绝对时间)<br />&emsp;综合测试程序</li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>计算机组成原理 (清华大学)</category>
      </categories>
      <tags>
        <tag>硬件</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>01. 编译概述</title>
    <url>/2020/04/26/01-%E7%BC%96%E8%AF%91%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="语言处理系统"><a href="#语言处理系统" class="headerlink" title="语言处理系统"></a>语言处理系统</h1><ol>
<li>编译程序就是为机器翻译程序语言 (描述计算的符号)的软件系统。一个编译程序就是一种翻译系统，把源语言翻译成目标语言的等价程序</li>
<li><strong>源程序</strong>先经过<code>预处理</code>变为<strong>修改后的源程序</strong><br /><strong>修改后的源程序</strong>经过<code>编译器</code>变为<strong>汇编代码</strong><br /><strong>汇编代码</strong>经过<code>汇编器</code>变为<strong>可重定位的机器代码</strong><br /><strong>可重定位的机器代码</strong>最后经过<code>连接器</code>变为<strong>目标机器代码</strong></li>
<li>源程序经过编译器编译，若没有错误，就得到目标程序；若有错误就得到错误信息。输入进入目标程序再得到输出</li>
<li>编译程序将源程序全部翻译成机器语言程序后，再执行机器语言程序。一次编译可以多次执行<br />解释程序将源程序的一条语句翻译成机器语言程序，并立即执行，再接着翻译。解释程序可交互，易于调试，可移植性好，编译一次执行一次，但是效率低</li>
<li>Java先经Java编译器编译得到一个字节码，再在JVM上解释</li>
</ol>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><ol>
<li>编译步骤<br />&emsp;词法分析：输入源程序，输出单词符号序列 (二元组序列)<br />&emsp;语法分析：输入单词符号序列，输出语法分析树<br />&emsp;语义分析：输入语法分析树，输出带语义的树<br />&emsp;中间代码生成：输入带语义的树，输出中间代码<br />&emsp;代码优化：输入原始中间代码，输出优化后的中间代码<br />&emsp;目标代码生成：输入优化后的中间代码，输出目标程序代码</li>
<li>词法分析把字符序列切分为有意义的单词。词法分析器的主要功能就是识别单词<br />识别关键字、标识符、数字等，并对每一个单词给出其类型，生成单词符号，表示为$&lt;单词词类, 单词值&gt;$。如果一个词类里只有一个单词，则可以省略单词词类<br />空格只是作为分隔符，忽略。过滤注释部分代码<br />每一个单词词类都有一个符号表，单词值指向符号表中的某一项</li>
<li>语法分析分析表达式、语句等。语法分析器的任务就是分析单词符号序列是如何构成语法单位的<br />语法树体现了单词符号序列的语法结，节点是单词符号或语法单元。<br />语法树的节点通常是操作符，而其子节点则是操作数</li>
<li>语义分析分析表达式或语句的操作内容。收集语义信息，类型检查和类型转换。验证语法结构合法的程序是否存在语义错误</li>
<li>中间代码称为三地址代码，每一条指令只执行一个操作。中间代码是一种面向抽象机器的代码结构，易于产生且易于翻译成目标语言</li>
<li>前端主要是分析工作，包括：词法分析、语法分析、语义分析、中间代码产生，以及部分代码优化工作，相关的错误处理和符号表的建立。前端依赖于源程序，并在很大程度上独立于目标机器</li>
<li>后端主要是综合工作，包括：代码优化、代码生成和相关错误处理。依赖于目标机器，因为涉及到指令选择</li>
<li>前端可以移植在不同的系统中，后端可以在不同语言中重用。若有$m$种语言，要在$n$个不同的平台中运行，需要的编译器就从原始的$O(nm)$个编译器变为$O(n+m)$个模块</li>
<li>把所有东西读一次并处理就是一遍，一次编译可能不止一遍。生成一次中间代码或目标代码必定是一遍</li>
<li>构造编译程序的工具：编译程序-编译程序、编译程序产生器、翻译程序书写系统<br />扫描器生成器：产生词法分析器<br />语法分析生成器<br />语法制导翻译引擎</li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>编译原理 (HDU / Stanford)</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>02. Contow Plot and Partial Derivatives</title>
    <url>/2020/02/23/02-Contow-Plot-and-Partial-Derivatives/</url>
    <content><![CDATA[<h1 id="Contow-Plot"><a href="#Contow-Plot" class="headerlink" title="Contow Plot"></a>Contow Plot</h1><ol>
<li>Normally a function can be represented by equations or graphs. </li>
<li>However, functions with multivariables are hard to draw on paper. For two-variablefunctions there is another way to draw is <code>Contow plot</code>: <br />&emsp;In Contow plot, we draw on an <script type="math/tex">x-y</script> plane where we link all points with the same <script type="math/tex">f(x,y)</script> value chosen at regular intevals. <br />&emsp;Namely, we slice the graph with horizontal planes <script type="math/tex">z=c</script>. </li>
<li>Every slice of <script type="math/tex">f(x,y)</script> by <script type="math/tex">z=c</script> is a lever curve of <script type="math/tex">f</script>.  </li>
<li>Contow plot tells us what <script type="math/tex">f</script> will increase or decrease when we move <script type="math/tex">x</script> or <script type="math/tex">y</script>, but it won’t tell how much or how fast. </li>
</ol>
<h1 id="Partial-Derivatives"><a href="#Partial-Derivatives" class="headerlink" title="Partial Derivatives"></a>Partial Derivatives</h1><ol>
<li>This is where <code>partial derivatives</code> come in. <script type="math/tex">\displaystyle\frac{\partial f}{\partial x}=\lim_{\Delta x\to 0}\frac{f(x+\Delta x,y)-f(x,y)}{\Delta x}</script>. Similarly we can define the partial derivative on other variables. </li>
<li>The partial derivative of <script type="math/tex">f(x,y)</script> at point <script type="math/tex">(x_0,y_0)</script> on <script type="math/tex">x</script> means the slope of <script type="math/tex">f(x,y)</script> at slice of <script type="math/tex">y=y_0</script> at <script type="math/tex">x=x_0</script>. </li>
<li>To compute <script type="math/tex">\displaystyle\frac{\partial f}{\partial x}=f_x</script>, we just see <script type="math/tex">x</script> as the only variable and see all others constants. </li>
<li>Linear approximation equation: <script type="math/tex">\Delta z\approx f_x\Delta x+f_y\Delta y</script><br />Quadratic approximation equation: <script type="math/tex">\Delta z\approx f_x(x-x_0)+f_y(y-y_0)+\displaystyle\frac{1}{2}f_{xx}(x-x_0)^2+f_{xy}(x-x_0)(y-y_0)+\frac{1}{2}(y-y_0)^2</script></li>
<li>The two tangent lines represented by <script type="math/tex">\displaystyle\frac{\partial f}{\partial x}=a</script> and <script type="math/tex">\displaystyle\frac{\partial f}{\partial y}=b</script> set the tangent plane of <script type="math/tex">f</script> at <script type="math/tex">(x_0,y_0)</script> whose equation is <script type="math/tex">z=z_0+a(x-x_0)+b(y-y_0)</script>. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>多变量微积分 (MIT 18.02)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>01. Introduction</title>
    <url>/2019/07/15/01.Introduction/</url>
    <content><![CDATA[<h1 id="Creat-a-UIButton"><a href="#Creat-a-UIButton" class="headerlink" title="Creat a UIButton"></a>Creat a UIButton</h1><h2 id="Creat-And-Edit-A-Button"><a href="#Creat-And-Edit-A-Button" class="headerlink" title="Creat And Edit A Button"></a>Creat And Edit A Button</h2><ol>
<li>Open the <code>Main.storyboard</code> file, and click the <code>libary</code> button to choose a UIView in it.</li>
<li>We can edit the content in the UIButton by double click the button</li>
<li>We can edit what the button looks like by choosing the button first and edit it at the <code>Attributes Inspector</code> when the top of it shows ‘button’ (if we click the background of the phone, it shows ‘view’)<a id="more"></a>
</li>
</ol>
<h2 id="Connect-the-Button-with-Code"><a href="#Connect-the-Button-with-Code" class="headerlink" title="Connect the Button with Code"></a>Connect the Button with Code</h2><ol>
<li>Choose the button</li>
<li>Hold on the ctrl key and drag from the button to the <code>viewController.swift</code> wherever you want to put the code</li>
<li>Then a window like below will show.<br>The first label is <code>connection</code>, where we will choose Action.<br>The second label is <code>Object</code>, which is view controller.<br>The third one is <code>name</code>.<br>The forth one is what kind of UIView is this, which is UIButton.<br>The fifth one is at what circumstances will the system triggle the button, which is touch up inside.<br>The sixth one is the <code>argument</code>, which can be <code>none</code>, <code>sender</code> or <code>sender and event</code>, at this case, we only want to know which the card is flipped over, so we choose sender(sender has every information about the button we just touched)</li>
<li>After that, a method is created in the ViewController class, and now we have creat a UIButton and connect the button to the controller.<br><img src="/img/01.Introduction01.png" width="30%"></li>
</ol>
<h1 id="Flip-the-Card"><a href="#Flip-the-Card" class="headerlink" title="Flip the Card"></a>Flip the Card</h1><p>We just need to define a function to change the status of the button every time we touch it to “flip” the card</p>
<h2 id="Argument-s-We-Need"><a href="#Argument-s-We-Need" class="headerlink" title="Argument(s) We Need"></a>Argument(s) We Need</h2><p>To change the status, we need a <code>target status</code> and we need to know <code>which button was touched</code>. So we need two argument, one is the target status type of String, one is the touched button type of UIButton</p>
<h2 id="Judge-Which-Face-of-the-Button-Is-Over"><a href="#Judge-Which-Face-of-the-Button-Is-Over" class="headerlink" title="Judge Which Face of the Button Is Over"></a>Judge Which Face of the Button Is Over</h2><p>Use the <code>button.currenTitle</code> to get the curren content of the button, if the content is empty, then we should change to the emoji face; if the content is the emoji, then we should change to the back of the card</p>
<h2 id="Change-the-Appearence-of-the-Button"><a href="#Change-the-Appearence-of-the-Button" class="headerlink" title="Change the Appearence of the Button"></a>Change the Appearence of the Button</h2><ol>
<li>Set the <code>string in the button</code> by <code>button.setTitle(_, for:)</code>. The first parametre is the string we want to set, the second parametre is UIControlState.normal. </li>
<li>Set the <code>background color</code> by setting <code>button.backgroundColor</code>. We can assign a color literal to it by typing <code>Color Literal</code> and choose a color. </li>
</ol>
<h2 id="Call-the-Method"><a href="#Call-the-Method" class="headerlink" title="Call the Method"></a>Call the Method</h2><p>In the button method we defined in the last step, we call the flip-method. We pass the sender as the button parameter. </p>
<h1 id="Show-the-flip-count"><a href="#Show-the-flip-count" class="headerlink" title="Show the flip count"></a>Show the flip count</h1><p>We don’t need to touch the flip count, so a UILabel will work. </p>
<h2 id="Creat-A-Label"><a href="#Creat-A-Label" class="headerlink" title="Creat A Label"></a>Creat A Label</h2><ol>
<li>Drag a label out of the library and put it in the place we want</li>
<li>Ctrl and drag the label to the code</li>
<li>This time, we don’t need a function to do something when we touch the button, so we will set the connection to <code>outlet</code>, which will creat an instance property</li>
</ol>
<h2 id="Update-the-Counter"><a href="#Update-the-Counter" class="headerlink" title="Update the Counter"></a>Update the Counter</h2><ol>
<li>First of all, we need to add one to the counter every time we touched a button</li>
<li>We also need to update what shows in the screen, so we assign a string to the <code>flipCountLabel.text</code></li>
</ol>
<h2 id="Update-the-flipCountLabel"><a href="#Update-the-flipCountLabel" class="headerlink" title="Update the flipCountLabel"></a>Update the flipCountLabel</h2><p>In every button method, we will increment the flipCount, should we write the code after that? If we do so, the code will be very long, so we choose to use the property observer</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> flipCount = <span class="number">0</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">didSet</span></span><br><span class="line">    &#123;</span><br><span class="line">        flipCountLabel.text = <span class="string">"Flips: \(flipCount)"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Less-button-methods"><a href="#Less-button-methods" class="headerlink" title="Less button methods"></a>Less button methods</h1><ol>
<li>If we only use the way introduced at the beginning, and we also want every button send different messages, we will have to creat button methods as many as buttons. That’s annoy. So we are going to do something about that.</li>
<li>The solution is to creat a button array.</li>
<li>Drag a button to the view controller, and this time, we will creat neither a method, nor an instance property, but an array, so the connection we choose is the outlet collection, which will creat a button array. </li>
<li>We connect all buttons to the button array and one button method. In that button method, we can use the index method to find the subscript of the touched button, and send the message in the message array with the correspond subscript </li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>Swift开发 (Stanford CS193p)</category>
      </categories>
      <tags>
        <tag>应用开发</tag>
        <tag>Swift</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>01. 绪论</title>
    <url>/2020/08/06/01-%E7%BB%AA%E8%AE%BA/</url>
    <content><![CDATA[<h1 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h1><ol>
<li><strong><em>数据</em></strong> (<strong><em>data</em></strong>) / <strong><em>示例</em></strong> (<strong><em>instance</em></strong>) / <strong><em>样本</em></strong> (<strong><em>sample</em></strong>)：关于一个事件或对象的描述</li>
<li><strong><em>属性</em></strong> (<strong><em>attribute</em></strong>) / <strong><em>特征</em></strong> (<strong><em>feature</em></strong>)：反映事件或对象在某方面的表现或性质的事项</li>
<li><strong><em>属性值</em></strong> (<strong><em>attribute value</em></strong>)：属性上的取值<br /><strong><em>属性空间</em></strong> (<strong><em>attribute space</em></strong>) / <strong><em>样本空间</em></strong> (<strong><em>sample space</em></strong>) / <strong><em>输入空间</em></strong> (<strong><em>input space</em></strong>)：属性张成的空间</li>
<li>每一个示例都是样本空间里的一个坐标向量，示例也称为<strong><em>特征向量</em></strong> (<strong><em>feature vector</em></strong>)</li>
<li><strong><em>数据集</em></strong> (<strong><em>data set</em></strong>)：数据记录的集合，有时整个数据集也被称为一个样本，因为是整个样本空间的采样</li>
<li>令$D=\{x_1,x_2,\dots,x_m\}$表示包含$m$个示例的数据集<br />每个示例由$d$个属性描述，则每个示例$x_i=(x_{i1},x_{i2},\dots,x_{id})$是$d$维样本空间中的一个向量<br />$x_{ij}$是$x_i$在第$j$个属性上的取值，$d$称为样本$x_i$的<strong><em>维数</em></strong> (<strong><em>dimensionality</em></strong>)</li>
<li><strong><em>模型</em></strong> (<strong><em>model</em></strong>)：在面对新的情况时，提供相应的判断<br />或称为<strong><em>学习器</em></strong> (<strong><em>learner</em></strong>)：学习算法在给定数据和参数空间上的实例化</li>
<li><strong><em>学习</em></strong> (<strong><em>learning</em></strong>) / <strong><em>训练</em></strong> (<strong><em>trainning</em></strong>)：从数据中获得模型的过程</li>
<li><strong><em>学习算法</em></strong> (<strong><em>learning algorithm</em></strong>)：从数据中产生模型的算法</li>
<li><strong><em>训练数据</em></strong> (<strong><em>training data</em></strong>)：训练过程使用的数据<br /><strong><em>训练样本</em></strong> (<strong><em>training sample</em></strong>) / <strong><em>训练示例</em></strong> (<strong><em>training instance</em></strong>)：训练数据中的每一个样本<br /><strong><em>训练集</em></strong> (<strong><em>training set</em></strong>)：训练样本组成的集合</li>
<li><strong><em>假设</em></strong> (<strong><em>hypothesis</em></strong>)：模型对应的关于数据的某种潜在的规律的猜想<br /><strong><em>真相</em></strong> / <strong><em>真实</em></strong> (<strong><em>ground-truth</em></strong>)：潜在规律自身<br />学习过程就是找出或逼近真相</li>
<li><strong><em>标记</em></strong> (<strong><em>label</em></strong>)：关于示例结果的信息<br /><strong><em>样例</em></strong> (<strong><em>example</em></strong>)：拥有了标记信息的示例<br /><strong><em>标记空间</em></strong> (<strong><em>label space</em></strong>) / <strong><em>输出空间</em></strong> (<strong><em>output space</em></strong>)：所有标记的集合<br />$(x_i,y_i)$表示第$i$个样例，$y_i$是示例$x_i$的标记<br />通过对训练样本的学习，建立一个从输入空间到输出空间的映射</li>
<li><strong><em>预测</em></strong> (<strong><em>prediction</em></strong>)：模型关于新情况判断的结果<br /><strong><em>分类</em></strong> (<strong><em>classification</em></strong>)：欲预测的值是离散值<br /><strong><em>回归</em></strong> (<strong><em>regression</em></strong>)：欲预测的值是连续值<br /><strong><em>二分类</em></strong> (<strong><em>binary classification</em></strong>)：只涉及两个类别的分类，其中一个类别为<strong><em>正类</em></strong> (<strong><em>positive class</em></strong>)，另一个为<strong><em>反类</em></strong> (<strong><em>negative class</em></strong>)<br /><strong><em>多分类</em></strong> (<strong><em>multi-class classification</em></strong>)：涉及多个类别的分类</li>
<li><strong><em>测试</em></strong> (<strong><em>testing</em></strong>)：学得模型后，用其进行预测的过程<br /><strong><em>测试样本</em></strong> (<strong><em>testing sample</em></strong>) / <strong><em>测试示例</em></strong> / <strong><em>测试试例</em></strong> (<strong><em>testing instance</em></strong>)：被预测的样本</li>
<li><strong><em>聚类</em></strong> (<strong><em>clustering</em></strong>)：将训练集中的数据分成若干组<br /><strong><em>簇</em></strong> (<strong><em>cluster</em></strong>)：每组数据一个簇</li>
<li><strong><em>监督学习</em></strong> (<strong><em>supervised learning</em></strong>)：有标记信息，如分类、回归<br /><strong><em>无监督学习</em></strong> (<strong><em>unsupervised learning</em></strong>)：无标记信息，如聚类</li>
<li><strong><em>泛化能力</em></strong> (<strong><em>generalization</em></strong>)：学得的模型适用于新样本的能力</li>
</ol>
<h1 id="假设空间"><a href="#假设空间" class="headerlink" title="假设空间"></a>假设空间</h1><ol>
<li>归纳 (induction)：从特殊到一般的泛化 (generalization)过程，从具体的事实归结出一般性规律<br />演绎 (deduction)：从一般到特殊的特化 (specialization)过程，从基础原理推演出具体状况<br />机器学习是从样例中学习的归纳过程</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>机器学习 (西瓜书)</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>02. Conditioning and Bayes&#39; rule</title>
    <url>/2020/03/10/02-Conditioning-and-Bayes-rule/</url>
    <content><![CDATA[<h1 id="Conditional-Probability"><a href="#Conditional-Probability" class="headerlink" title="Conditional Probability"></a>Conditional Probability</h1><ol>
<li>$P(A|B)$ means the conditional probability of $A$ given $B$. </li>
<li>$P(A|B)=\displaystyle\frac{P(A\cap B)}{P(B)}$, if $P(B)&gt;0$. If $P(B)=0$, the probability $P(A|B)$ is undefined. </li>
<li>Three probability laws: <br />&emsp;$P(A|B)&gt;0$<br />&emsp;$P(\Omega|B)=1$<br />&emsp;$P(A_1\cup A_2|B)=P(A_1|B)+P(A_2|B)$ if $A_1$ and $A_2$ are two disjoint sets. </li>
<li>For any two sets $A$ and $C$, $P(A\cup C|B)≤P(A|B)+P(C|B)$</li>
<li>$P(B|B)=\displaystyle\frac{P(B)}{P(B)}=1$</li>
<li>We might discard all possible outcomes outside $B$ and treat the conditional probabilities as a probability law defined on the new universe $B$. </li>
<li>Often $P(A\cap B)$ is not easy to calculate directly. But we can calculate $P(A|B)$ first and then use $P(A\cap B)=P(B)P(A|B)$ to get the answer. </li>
<li>Calculate various probabilities in conjunction with a tree-based sequential description of an experiment: <br />&emsp;First set up the tree so that an event of interest is associated with a leaf. <br />&emsp;Every node represents the probability of an event which is the conjunction of all passed events from root to it. <br />&emsp;Every path is the conditional probability of the next event given the conjunction of all the afore-passed events. </li>
<li>Multiplication rule: <br /><script type="math/tex">\begin{equation}\begin{split}P(\bigcap^n_{i=1}A_i)&=\displaystyle P(A_1)\frac{P(A_1\cap A_2)}{P(A_1)}\frac{P(A_1\cap A_2\cap A_3)}{P(A_1\cap A_2)}…\frac{P(\bigcap^n_{i=1}A_i)}{P(\bigcap^{n-1}_{i=1}A_i)} \\&=P(A_1)P(A_2|A_1)P(A_3|A_1\cap A_2)…P(A_n|\bigcap^{n-1}_{i=1}A_i)\end{split}\end{equation}</script></li>
</ol>
<h1 id="Total-Probability-Theorem-and-Bayes’-Rule"><a href="#Total-Probability-Theorem-and-Bayes’-Rule" class="headerlink" title="Total Probability Theorem and Bayes’ Rule"></a>Total Probability Theorem and Bayes’ Rule</h1><ol>
<li>A set of sets is a partition of the sample space if and only if each possible outcomes is included in exactly one of the sets. </li>
<li>Total probability theorem: Let $A_1,…,A_2$ be disjoint events that form a partion of the sample space and assume that $P(A_i)&gt;0$, for all $i$. <br />For any event $B$, <br /><script type="math/tex">\begin{equation}\begin{split}P(B)&=P(\Omega\cap B)=P((A_1\cup A_2\cup…\cup A_n)\cap B)\\&=P((A_1\cap B)\cup(A_2\cap B)\cup…\cup(A_n\cap B))\\&=P(A_1\cap B)+P(A_2\cap B)+…+P(A_n\cap B)\\&=P(A_1)P(B|A_1)+P(A_2)P(B|A_2)+…+P(A_n)P(B|A_n) \end{split}\end{equation}</script></li>
<li>We are partition the sample space into a number of scenarios. Then the probability that $B$ occurs is a weighted average of its conditional probability under each scenarios, where each scenario is weighted according to its unconditional probability. </li>
<li>Bayes’ rule: The condition of Bayes’ rule is the same as total probability theorem<br />Since $P(A_i\cap B)=P(B)P(A_i|B)=P(A_i)P(B|A_i)$<br /><script type="math/tex">\begin{equation}\begin{split}P(A_i|B)&=\displaystyle\frac{P(A_i)P(B|A_i)}{P(B)}\ \ \ \ \ \ \ \ Plug\ in\ total\ probability\ theorem\\&=\frac{P(A_i)P(B|A_i)}{P(A_1)P(B|A_1)+…+P(A_n)P(B|A_n)} \end{split}\end{equation}</script></li>
<li>Bayes’ rule is often used for inference. We observe the effect, and we wish to infer the cause.<br />The events $A_i$’s are associated with the causes and the event $B$ represents the effect. <br />The probability $P(B|A_i)$ that the effect will be observed when the cause is represent amounts to a probabilistic model of the cause-effect relation. <br />The probability $P(A_i|B)$ is the probability that the cause $A_i$ is present when the effect has been observed. <br />We refer $P(A_i|B)$ as the posterior probability of event $A_i$ given the information. $P(A_i)$ is called the prior probability. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>概率论 (MIT 6.041)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>02. Loss Functions and Optimization</title>
    <url>/2020/04/04/02-Loss-Functions-and-Optimization/</url>
    <content><![CDATA[<h1 id="Loss-Function"><a href="#Loss-Function" class="headerlink" title="Loss Function"></a>Loss Function</h1><p>A loss function tells how good our current classifier is. </p>
<h2 id="Data-Loss"><a href="#Data-Loss" class="headerlink" title="Data Loss"></a>Data Loss</h2><ol>
<li>Given a dataset of examples $\{(x_i,y_i)\}^N_{i=1}$ where $x_i$ is an image and $y_i$ is an integer label. Loss over the dataset is a sum of loss over examples: $L=\displaystyle\frac{1}{N}\sum_iL_i(f(x_i,W),y_i)$. </li>
<li>There are infinitely many $W$ to make $L=0$. </li>
</ol>
<h3 id="SVM-Classifier"><a href="#SVM-Classifier" class="headerlink" title="SVM Classifier"></a>SVM Classifier</h3><ol>
<li>Multiclass SVM loss (Hinge loss): $L_i=\displaystyle\sum_{j≠y_i}max(0,s_j-s_{y_i}+1)$. $s_i$ is the score of the $i$th class. </li>
<li>The minimum loss of SVM is $0$ when all prediction is correct. The maximum loss is infinity when the prediction is as wrong as possible. </li>
<li>If at initialization $W$ is small, so all $s\approx 0$, the loss will be <script type="math/tex">the\ number\ of\ class-1</script>. </li>
</ol>
<h3 id="Softmax-Classifier-Multinomial-Logistic-Regression"><a href="#Softmax-Classifier-Multinomial-Logistic-Regression" class="headerlink" title="Softmax Classifier (Multinomial Logistic Regression)"></a>Softmax Classifier (Multinomial Logistic Regression)</h3><ol>
<li>We can use the scores to calculate the probabilities of all labels given the condition of the image is $x_i$. </li>
<li>We exponentiate scores to make every term positive. So the probability of the actual label being $k$ is $P(Y=k|X=x_i)=\displaystyle\frac{e^{s_k}}{\sum_je^{s_j}}$, which is called the softmax function. </li>
<li>To maximize the log-likelihood, or to minimize the negative log-likelihood of the correct class. <script type="math/tex">L_i=-log\ P(Y=y_i|X=x_i)=-log\ \displaystyle\frac{e^{s_{y_i}}}{\sum_je^{s_j}}</script>. </li>
<li>The goal is to maximize the probability of the right label. It is easier to maximize the log function than the raw probability. Also, the loss function is describing how bad the model is, so we take the negative of it. </li>
<li>Three steps for softmax classifier: exponentiate the scores; normalize them; take the negative log of the correct label. </li>
<li>The minimum possible loss is $0$ when the model is totally right (the probability of the accurate label is $1$). The maximum is infinity when the model is entirely wrong (the probability of the correct label is $0$). However, these two situations will occur. </li>
<li>A slight change in a datapoint might when changing the loss of SVM if the label is right, but it will change the loss of softmax in any situation. </li>
</ol>
<h2 id="Regularization"><a href="#Regularization" class="headerlink" title="Regularization"></a>Regularization</h2><ol>
<li>The only thing we care about is the performance on the test set. So we need to tell our algorithm more than the performance on the training data. </li>
<li>To avoid overfitting the training data, we should add regularization to the loss, which will punish when the model is complicated. So the loss becomes $L=\displaystyle\frac{1}{N}\sum_iL_i(f(x_i,W),y_i)+\lambda R(W)$. $\lambda$ is a hyperparameter called regularization strength. </li>
<li>$L2$ regularization: $R(W)=\displaystyle\sum_k\sum_lW_{k,l}^2$<br />$L1$ regularization: $R(W)=\displaystyle\sum_k\sum_l|W_{k,l}|$<br />Elastic net $(L1+L2)$: $R(W)=\displaystyle\sum_k\sum_l\beta W_{k,l}^2+|W_{k,l}|$</li>
<li>The idea of regularization is to penalize the complexity of model rather than trying to fit the training data. </li>
<li>$L2$ regularization also corresponds MAP inference using a Gaussian prior on $W$. </li>
<li>The regularization function is a problem-dependent hyperparameter. </li>
<li>If at initialization $W$ is small so all $s\approx 0$, the loss will be <script type="math/tex">-log\ c</script>. $c$ is the number of classes. </li>
</ol>
<h1 id="Optimization"><a href="#Optimization" class="headerlink" title="Optimization"></a>Optimization</h1><ol>
<li>The strategy here is to follow the gradient of $f$. The opposite direction of the gradient is the greatest decrease in the function. </li>
<li>The numerical way to calculate the gradient to increase one component of $W$ a little bit, then use the formula $\displaystyle\frac{df}{dx}=\frac{f(x+h)-f(x)}{h}$ to get the corresponding component in the gradient. </li>
<li>The faster way to get the gradient is the analytic way. In practice, always use the analytic gradient, but check implementation with numerical gradient. This is called a gradient check. </li>
<li>Gradient descent: first calculate the gradient, then subtract the multiplication of learning rate and the gradient from the weight. </li>
<li>Calculation of the gradient can be slow, so in practice, we usually use the stochastic gradient descent, which only calculates the gradient of part of the training set. </li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>计算机视觉 (Stanford CS231n)</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>深度学习</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>02. 计算机的指令系统</title>
    <url>/2020/04/25/02-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="计算机程序"><a href="#计算机程序" class="headerlink" title="计算机程序"></a>计算机程序</h1><ol>
<li>计算机程序是程序员和计算机硬件之间交互的语言</li>
<li>分类：高级语言程序、汇编语言程序、机器语言程序</li>
<li>高级语言 (算法语言)为了让程序员着重注意在解决实际问题所用的算法，更贴近自然语言，让程序设计更为高效。且高级语言通用性更好，可移植性强</li>
<li>计算机硬件是由逻辑门组成的，而逻辑门是由信号驱动的，信号以高低电平区分。所以计算机硬件只能理解$01$二进制串</li>
<li>机器语言是计算机硬件能直接识别和运行的指令的集合，是二进制码组成的指令，用机器语言设计程序基本不可行，可读性几乎为零</li>
<li>汇编语言用英文单词或其缩写替代二进制的指令代码，更容易记忆和理解。存储单元由汇编程序分配而非程序员，达到基本可用标准</li>
<li>高级语言设计出来的程序，需要经过编译程序或解释程序，才能在计算机的硬件系统上予以执行。汇编程序要经过汇编器翻译成机器语言后方可运行</li>
</ol>
<h1 id="计算机指令"><a href="#计算机指令" class="headerlink" title="计算机指令"></a>计算机指令</h1><p>冯诺依曼计算机<br />&emsp;存储程序计算机：程序由指令构成，程序功能通过指令序列描述，指令在内存中顺序存放<br />&emsp;顺序执行指令：用PC指示当前被执行的指令，从存储器中读出指令执行，PC指向下一条指令(程序指定的下一条指令，若没指定，默认为物理地址上的下一条)</p>
<h2 id="指令是什么"><a href="#指令是什么" class="headerlink" title="指令是什么"></a>指令是什么</h2><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><ol>
<li>指令用于程序设计人员告知计算机执行一个最基本运算、处理功能。程序由一个序列的计算机指令组成，程序的最小单元是指令</li>
<li>指令是指挥计算机硬件运行的命令，是计算机硬件执行程序的最小单位</li>
<li>指令是由多个二进制位组成的位串，是计算机硬件可以直接识别和执行的信息体</li>
<li>指令中应指明指令所完成的操作，并明确操作对象</li>
</ol>
<h3 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h3><ol>
<li>指令系统：一台计算机提供的全部指令</li>
<li>指令系统层处在硬件系统和软件系统之间，是硬、软件间的接口部分<br />硬件系统：实现指令，解决指令间衔接关系。包括数字逻辑层和微体系结构层<br />软件系统：按一定规则组织起来的指令，完成一定的功能。包括操作系统层、汇编语言层、高级语言层</li>
<li>指令系统的优劣势一个计算机系统是否成功的关键因素</li>
</ol>
<h2 id="指令的分类"><a href="#指令的分类" class="headerlink" title="指令的分类"></a>指令的分类</h2><ol>
<li>数据运算指令：算数运算、逻辑运算</li>
<li>数据传输指令：内存到寄存器、寄存器到寄存器</li>
<li>输入输出指令：与输入输出端口的数据传输，这是一种特殊的数据传输指令</li>
<li>控制指令：无条件跳转、条件跳转、子程序的支持 (调用和返回)</li>
<li>其他指令：停机、开/关中断、空操作、特权指令、设置条件码</li>
</ol>
<h2 id="指令格式"><a href="#指令格式" class="headerlink" title="指令格式"></a>指令格式</h2><ol>
<li>指令格式指的是操作码、操作数地址的二进制分配方案</li>
<li>操作码：指令的操作功能，每条指令都有一个确定的操作码</li>
<li>操作数地址：操作数存放的地址，或操作数本身</li>
<li>指令字：完整的一条指令的二进制表示</li>
<li>指令字长：指令中二进制的代码的位数<br />机器字长：计算机能够直接处理的二进制数据的位数<br />指令字长为一个字节的倍数</li>
<li>根据指令字长是否固定，指令还可以分为定长指令字结构和变长指令字结构 (现在少用)<br />根据操作码长度是否固定，分为定长操作码和扩展操作码</li>
</ol>
<h2 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h2><ol>
<li>寻址方式 (编址方式)：确定本条指令的操作数地址和下一条要执行的指令的地址的方法</li>
<li>寻址方式的数目和功能依不同的计算机系统而定。不同的寻址方式实现的复杂程度和运行性能各不同</li>
<li>通常指令中每一个操作数都有一个地址字段表示其来源或去向的地址</li>
<li>形式地址：在指令中给出的操作数或指令的地址<br />实际地址：依据形式地址及一定的规则得到的一个数值</li>
<li>操作数地址字段可能要指出：<br />&emsp;运算器中累加器的编号或专用寄存器名称 (编号)<br />&emsp;输入/输出指令中用到的I/O设备的入出端口地址<br />&emsp;内存储器的一个存储单元 (或一个I/O设备)的地址</li>
</ol>
<h2 id="MIPS指令系统"><a href="#MIPS指令系统" class="headerlink" title="MIPS指令系统"></a>MIPS指令系统</h2><ol>
<li>MIPS：Microprocessor without interlocked piped stages 无内部互锁流水级的微处理器</li>
<li>为RISC芯片设计的指令系统</li>
<li>MIPS32所有的指令都是32位字长，有3种指令格式：寄存器型，立即数型，和转移型<br />MIPS64是面向54位处理器的指令系统</li>
<li>操作数寻址：基址加16位偏移的访存寻址、立即数寻址和寄存器寻址</li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>计算机组成原理 (清华大学)</category>
      </categories>
      <tags>
        <tag>硬件</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>02. 形式文法与形式语言</title>
    <url>/2020/05/07/02-%E5%BD%A2%E5%BC%8F%E6%96%87%E6%B3%95%E4%B8%8E%E5%BD%A2%E5%BC%8F%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<h1 id="符号串和语言"><a href="#符号串和语言" class="headerlink" title="符号串和语言"></a>符号串和语言</h1><h2 id="符号串"><a href="#符号串" class="headerlink" title="符号串"></a>符号串</h2><ol>
<li>符号：可以相互区分的记号或元素</li>
<li>字母表$\Sigma$：符号的有限集合</li>
<li>符号串：字母表上的符号的有穷序列</li>
<li>空符号串$\epsilon$是不包含任何符号的符号串，是任何$\Sigma$上的符号串，相当于符号串这个群的单位元</li>
<li>连接：符号串$\alpha$、$\beta$的连接，是把$\beta$的符号写在$\alpha$的符号之后得到的符号串$\alpha\beta$。$\epsilon\alpha=\alpha\epsilon=\alpha$。不满足交换律，是偏序关系</li>
<li>幂：符号串$\alpha$自身连接$n$次得到的符号串，$\alpha^n$。$\alpha^0=\epsilon$，$\alpha^1=\alpha$</li>
<li>符号串的长度表示符号串中包含符号的个数。$|\epsilon|=0$</li>
<li>子串：符号串中的连续子序列</li>
<li>前缀：符号串中从第一位开始的子序列<br />后缀：符号串中以最后一位结尾的子序列<br />真前/后缀：与原串不同的前/后缀</li>
<li>符号串集合<br />并集：<script type="math/tex">A+B=\{w|w\in A\ or\ w\in B\}</script><br />连接：<script type="math/tex">A\cdot B=\{xy|x\in A\ and\ y\in B\}</script><br />幂次：$A^0=\{\epsilon\}$，$A^n=A^{n-1}A$<br />$Kleene$闭包 (星闭包)：$\Sigma^* $表示由字母表中的符号组成的符号串集合。<br />正闭包：$\Sigma^+=\Sigma^*-\{\epsilon\}$，即长度大于$1$的符号串的集合</li>
</ol>
<h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><ol>
<li>定义：某个字母表上的符号串的集合</li>
<li>任何一个语言都是$\Sigma^*$的一个子集</li>
<li>描述方法<br />&emsp;有穷：直接列出<br />&emsp;无穷：给出生成方式 (文法)或识别方式 (自动机)</li>
</ol>
<h1 id="文法"><a href="#文法" class="headerlink" title="文法"></a>文法</h1><p>主要用到的是上下文无关文法和正规文法 (正则文法)</p>
<h2 id="文法-1"><a href="#文法-1" class="headerlink" title="文法"></a>文法</h2><ol>
<li>文法$G$是一个四元组$G=(V_T,V_N,S,P)$<br />&emsp;$V_T$是终结符号集，即最终出现在句子中，在字母表中的单词符号<br />&emsp;$V_N$是非终结符号集，即推导过程中出现，但不在字母表中，不会在最后的句子中出现的符号<br />&emsp;$S$是开始符号，$S\in V_N$，表示最大的语法单位<br />&emsp;$P$是产生式规则集合。$P=\{\alpha\to\beta|\alpha至少包含一个非终结符号\}$</li>
<li>从文法生成串：从开始符号$S$开始，利用规则$P$重写所有非终结符号，直到每一个符号都是终结符号为止</li>
<li>$P\to\alpha_1,P\to\alpha_2,…,P\to\alpha_n$缩写为$P\to\alpha_1|\alpha_2|…|\alpha_n$</li>
<li>只有四个元素都完全一样的两个文法才是相同的文法，否则即使产生的语言一样也不相同</li>
<li>直接推导：用一条规则把左部的一个非终结符号直接替换为一个终结符号或另一个非终结符号<br />推导：$0$步或多步直接推导，$\alpha\Rightarrow…\Rightarrow\beta$等价于$\alpha\Rightarrow^*\beta$<br />用$\Rightarrow^+$表示至少$1$步的推导</li>
<li>最左推导：每一步的推导都施加在句型的最左边的非终结符号上，记为$\Rightarrow_{lm}$，生成的句型称为左句型<br />最右推导：施加在最右边的非终结符号上，记为$\Rightarrow_{rm}$，生成的句型称为右句型。也称为规范推导</li>
<li>归约：用产生式的左部替代右部的过程，是识别串的方式，是推导的逆过程。如果$A\to\gamma$是产生式规则，记为$\alpha\gamma\beta\Leftarrow\alpha A\beta$<br />最左归约：每一步归约都施加在句型最左边的可归约串上，规范归约，是最右推导的逆过程 (因此最右推导是规范推导)<br />最右归约：施加在最右边的可归约串上，是最左推导的逆过程</li>
<li>文法$G[S]:…$中，$G$是文法的名字，$S$是开始符号，后面跟的是产生式规则集，产生式规则集中左部都是非终结符号，其他的都是终结符号</li>
<li>乔姆斯基文法的四种类型 ($G=(V_T,V_N,S,P),\alpha\to\beta\in P$)<br />&emsp;0型，短语结构文法 (PSG)：$|\alpha|≠0$，识别系统是图灵机<br />&emsp;1型，上下文有关文法 (CSG)：$|\alpha|≤|\beta|$，识别系统是线性有界自动机<br />&emsp;2型，上下文无关文法 (CFG)：$|\alpha|=1,\alpha\in V_N$，识别系统是下推自动机<br />&emsp;3型，正规文法 (RG)：右部最多一个非终结符号且在所有可选项中非终结符号都在终结符号的同一侧，在左边的是左线性文法，在右边的是右线性文法。识别系统是有限自动机</li>
</ol>
<h2 id="语言-1"><a href="#语言-1" class="headerlink" title="语言"></a>语言</h2><ol>
<li>句型：若存在$S\Rightarrow^*\alpha$，则$\alpha$是一个句型。必须从开始符号出发推导<br />句子：$\alpha$是一个句型，且$\alpha$只包含终结符号</li>
<li>文法产生的语言$L(G)=\{\alpha|\alpha是G的句子\}$。即语言是文法$G$推导出的所有句子组成的集合。$L(G)=\{\alpha|S\Rightarrow^*\alpha且\alpha\in V_T^*\}$</li>
<li>文法产生的语言只有一个，但是一个语言可以由多种文法产生。如果两个文法生成同一个语言，则这两个文法等价</li>
<li>产生式集合、终结符号、非终结符号有限，但是在有递归的情况下可以导出无穷多个句子</li>
</ol>
<h2 id="分析树"><a href="#分析树" class="headerlink" title="分析树"></a>分析树</h2><ol>
<li>一个节点一个符号，用于展示推导过程</li>
<li>根结点是开始符号</li>
<li>叶子节点按中序遍历中的相对顺序从左到右构成这一棵推导树的结果句型</li>
<li>内部结点都是非终结符号。但是非终结符号也可能出现在叶子节点，这棵推导树的结果是句型不是句子</li>
<li>每一个结点及其所有子节点对应一条产生式规则，其中的父节点是左部，子节点从左到右排列构成右部</li>
<li>分析树忽略了推导过程中非终结符号的替换顺序，所以一棵树可以对应多个推导。但一棵树只能对应一个最左推导 (上到下，左到右)，以及一个最右推导 (上到下，右到左)</li>
<li>二义：一个文法的句子有不止一棵的分析树<br />又最左(右)推导与分析树一一对应，故句子二义说明有不止一个最左(右)推导</li>
<li>如果一个文法包含二义性句子，则这个文法是二义性的<br />产生某上下文无关语言的每一个文法都是二义的，则语言是先天二义的</li>
<li>文法的无二义性是不可判定的，因为不可能穷举文法的所有句子。只能判断有二义性</li>
<li>如果产生式集中一个非终结符号既存在左递归，又存在右递归，那该文法就是二义的</li>
<li>程序设计语言中二义文法的解决方法：<br />&emsp;改写为等价无二义文法<br />&emsp;设定优先顺序，限制可选分析树</li>
</ol>
<h2 id="句型分析"><a href="#句型分析" class="headerlink" title="句型分析"></a>句型分析</h2><ol>
<li>短语：$\alpha\beta\delta$是文法$G[S]$的一个句型，若存在推导$S\Rightarrow^*\alpha A\delta$且$A\Rightarrow^+\beta$，则称$\beta$是句型$\alpha\beta\delta$相对于非终结符号$A$的短语。<br />即，句型中一个可以独立由某个非终结符号生成的子串就是句型相对于非终结符号的短语<br />短语也是分析树中以非终结符号为子树根节点的最右叶子节点序列</li>
<li>直接短语：一步推导就能得到的短语，在分析树中，子树只有两层，短语是非终结符号的子节点</li>
<li>句柄：最左边的直接短语</li>
<li>素短语：至少包含一个终结符，不含更小带终结符的短语的短语</li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>编译原理 (HDU / Stanford)</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>02. Limits, continuity</title>
    <url>/2020/02/10/02-Limits-continuity/</url>
    <content><![CDATA[<h1 id="Limits"><a href="#Limits" class="headerlink" title="Limits"></a>Limits</h1><ol>
<li>Easy limits: this is the limits that only need to plug in the variable. </li>
<li>Derivatives are always harder. We need cancellation to make it work. </li>
<li><code>Right-hand limit</code>: variable approaches the constant from the right-hand side of the x-axis. <script type="math/tex">x\to x_0^+=\left\{\begin{array}{lr}x\to x_0\\x>x_0\end{array}\right.</script>. <br /><code>Left-hand limit</code>: variable approaches the constant from the left-hand side of the x-axis. <script type="math/tex">x\to x_0^-=\left\{\begin{array}{lr}x\to x_0\\x<x_0\end{array}\right.</script>. </li>
</ol>
<h1 id="Continuity"><a href="#Continuity" class="headerlink" title="Continuity"></a>Continuity</h1><ol>
<li><script type="math/tex">f</script> is <code>continuous</code> at <script type="math/tex">x_0</script> means <script type="math/tex">\displaystyle\lim_{x\to x_0}f(x)=f(x_0)</script>. <br />&emsp;The limit exists from both left and right hand side and <script type="math/tex">\displaystyle\lim_{x\to x_0^+}f(x)=\displaystyle\lim_{x\to x_0^-}f(x)</script>. <br />&emsp;<script type="math/tex">f(x_0)</script> is defined. <br />&emsp;They are equal. </li>
<li>The continuous can also be expressed by <script type="math/tex">\displaystyle\lim_{x\to x_0}{f(x)-f(x_0)}=0</script>. </li>
<li><code>Jump discontinuity</code>: the limit from left and right exist but not equal. </li>
<li><code>Removable discontinuity</code>: the limit from left and right are equal but <script type="math/tex">f(x_0)</script> is not defined. </li>
<li><code>Infinite discontinuity</code>: the limit from left and right approaches to infinity, not necessarily equal. </li>
<li><code>Other discontinuities</code>: no left or right limits. </li>
<li>If <script type="math/tex">f</script> is differentiable at <script type="math/tex">x_0</script>, then <script type="math/tex">f</script> is continuous at <script type="math/tex">x_0</script>. <br />Proof: <script type="math/tex">\displaystyle\lim_{x\to x_0}{f(x)-f(x_0)}=\displaystyle\lim_{x\to x_0}{\displaystyle\frac{f(x)-f(x_0)}{x-x_0}(x-x_0)}=f'(x_0)\cdot 0=0</script>. </li>
</ol>
<h1 id="Two-Important-Equations"><a href="#Two-Important-Equations" class="headerlink" title="Two Important Equations"></a>Two Important Equations</h1><ol>
<li><script type="math/tex">\displaystyle\lim_{x\to 0}{\displaystyle\frac{sin\ x}{x}}=1</script><br />&emsp;Geometric proof: <br />&emsp;&emsp;In the graph below is a unit circle. The green line is <script type="math/tex">2sin\ \theta</script> and the red curve is <script type="math/tex">2\theta</script>. <br />&emsp;&emsp;So the limit is <script type="math/tex">\displaystyle\frac{length\ of\ straight\ line}{length\ of\ curve}</script> as <script type="math/tex">\theta</script> approaches to <script type="math/tex">0</script>. <br />&emsp;&emsp;And the result is the curve become more and more like a straight line which equals to the line. <br />&emsp;&emsp;So the limit is <script type="math/tex">1</script>. <br />&emsp;&emsp;<img src="/img/02.Limitscontinuity01.png" width="15%"></li>
<li><script type="math/tex">\displaystyle\lim_{x\to 0}{\displaystyle\frac{1-cos\ x}{x}}=0</script><br />&emsp;&emsp;Geometric proof: <br />&emsp;&emsp;In the graph below, that green line is <script type="math/tex">1-cos\ \theta</script>. The red line is <script type="math/tex">\theta</script>. <br />&emsp;&emsp;So the limit is <script type="math/tex">\displaystyle\frac{length\ of\ straight\ line}{length\ of\ curve}</script> as <script type="math/tex">\theta</script> approaches to <script type="math/tex">0</script>. <br />&emsp;&emsp;And as <script type="math/tex">\theta</script> approaching, that green line decays way faster than the red line. <br />&emsp;&emsp;So the limit is <script type="math/tex">0</script>. <br />&emsp;&emsp;<img src="/img/02.Limitscontinuity02.png" width="15%"></li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>单变量微积分 (MIT 18.01)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>02. MVC</title>
    <url>/2019/07/16/02-MVC/</url>
    <content><![CDATA[<h1 id="What-is-MVC"><a href="#What-is-MVC" class="headerlink" title="What is MVC"></a>What is MVC</h1><h2 id="Conception"><a href="#Conception" class="headerlink" title="Conception"></a>Conception</h2><ol>
<li>MVC is a design paradigm, which divid all objects in program into 3 camps</li>
<li>M: Model,  UI independent, define <code>what the app is</code>, contain the knowledge of the app ( e.g. in the concentration demo, it’s how cards get chosen and matched)</li>
<li>V: View, Controller’s minions. </li>
<li>C: Controller, <code>how the Model is presented</code> to the user (UI logic)<a id="more"></a>
</li>
</ol>
<h2 id="Relationship-between-three-camps"><a href="#Relationship-between-three-camps" class="headerlink" title="Relationship between three camps"></a>Relationship between three camps</h2><ol>
<li>Controller can connect to Model, because Controller presents Model</li>
<li>Controller can also connect to View by outlet properties, because Controller needs to control what shows in the View</li>
<li>Model and View cannot connect to each other, because Model is UI independent while View is UI only (buttons and labels)</li>
<li>View can connect to Controller only if the Controller has dropped a target (Action button function) on itself</li>
<li>View can also delegate the Controller to controll the scroll view in the View by the property observer(will, did, should)</li>
<li>View does not own the data they display, so View has to get data from the Controller, Controller is the data source of View</li>
<li>Controller interpret / format Model information for the View</li>
<li>Model cannot connect to Controller directly, but Model can have a KVO(Key Value Observing), which will send a message to the Controller when one key value is changed, then Controller will connect to Model to get the data to update<br><img src="/img/02.MVC01.jpg"></li>
</ol>
<h2 id="Multiple-MVCs"><a href="#Multiple-MVCs" class="headerlink" title="Multiple MVCs"></a>Multiple MVCs</h2><ol>
<li>One set of MVC can only control one screen, if there are multiple screens, it needs multiple MVCs</li>
<li>When one MVC is going to talk to other MVCs, it always sees others as its View</li>
</ol>
<h1 id="Build-a-Model"><a href="#Build-a-Model" class="headerlink" title="Build a Model"></a>Build a Model</h1><h2 id="What-does-it-need-in-the-Model"><a href="#What-does-it-need-in-the-Model" class="headerlink" title="What does it need in the Model?"></a>What does it need in the Model?</h2><p>Since Model defines the app, in the game Concentration, Model needs to know how to flip the card, and how to match two cards. To do so, we also need a type of card to record the status of each card, so we’ll creat another <code>struct</code> to record. Conclusively, in this game, Model has two files, Concentration and Card. </p>
<h2 id="What’s-in-the-Card"><a href="#What’s-in-the-Card" class="headerlink" title="What’s in the Card?"></a>What’s in the Card?</h2><p>Card is going to record a card’s status, so we should mark if it is face up, if it is matched, and its identifier. Specifically, we don’t add emoji at this position, becaus Model is UI independent and emoji is what shows in the screen.</p>
<h2 id="What’s-in-the-Concentration"><a href="#What’s-in-the-Concentration" class="headerlink" title="What’s in the Concentration?"></a>What’s in the Concentration?</h2><ol>
<li>We need an array of Card to record the status of every card. Specifically, we need to use syntax <code>var card = [Card]()</code> to initialize an array. </li>
<li>In Concentration, we need to creat card status by using Card initializer in a for-loop. So the initializer of Concentration will have a parametre of the number of cards</li>
<li>Concentration also needs to do something when a card is chosen. When a card is chosen, there are three situations, no card is face up, one card is face up or two cards are face up, to distinguish the three situation, we have to declare an <code>Int?</code> to record the one and only card that is faced up. If there is only one card faced up, we set it as the index of that card, and if there is no card or more than two cards faced up, we set it as nil. In the method <code>chooseCard</code>, if that value is nil, than we will flip all cards face down and flip the chosen card face up. If it’s not nil, we will try to match the faced-up card with the chosen card, and flip it over then set its value to nil </li>
</ol>
<h1 id="Build-a-Controller"><a href="#Build-a-Controller" class="headerlink" title="Build a Controller"></a>Build a Controller</h1><p>First of all, we need to connect to the Model by Creating an instance of Concentration class (This shows why the relationship between 3 camps is directed instead of undirected). </p>
<h2 id="How-are-we-going-to-present-the-Model-in-the-View"><a href="#How-are-we-going-to-present-the-Model-in-the-View" class="headerlink" title="How are we going to present the Model in the View?"></a>How are we going to present the Model in the View?</h2><ol>
<li>The chooseCard function of instance of Concentration will be called in the button function. </li>
<li>We build a function named <code>updateViewFromModel</code>, which will be called in the button function after the chooseCard function is called.  </li>
<li>In that update function, we need to iterate all cards’ status in the Concentration instance, and update the buttons to correspond them</li>
<li>In order to make the emoji showed in every button be random, we creat a Dictionary of emoji, which associates the emoji with the card identifier in each card in the Model. </li>
<li>To make it happen, we first creat a String array of emojis, and a function to get the corresponding emoji with a parametre of Card. Every time we call this function with a new index, we assign a random emoji to the card’s identifier with a random function <code>arc4random_uniform</code></li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>Swift开发 (Stanford CS193p)</category>
      </categories>
      <tags>
        <tag>应用开发</tag>
        <tag>Swift</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>03. Backpropagation and Neural Networks</title>
    <url>/2020/04/04/03-Backpropagation-and-Neural-Networks/</url>
    <content><![CDATA[<h1 id="Backpropagation"><a href="#Backpropagation" class="headerlink" title="Backpropagation"></a>Backpropagation</h1><ol>
<li>Backpropagation is used for calculating the gradient. </li>
<li>In each gradient, we need to calculate the derivative of $f$ with respect to each component. </li>
<li>Any function $f$ can be decomposed into a computational graph, which contains several nodes. Each node represents one single simple calculation with some inputs and one output. </li>
<li>We can easily calculate the local gradient for each node function $q$, $\displaystyle\frac{\partial q}{\partial x_i}$. </li>
<li>With the chain rule, we can multiply each local gradient to get $\displaystyle\frac{\partial f}{\partial x_i}$. </li>
<li>In programming, we usually start from the end of the computational graph, namely $f=f$. Its local gradient is $\displaystyle\frac{\partial f}{\partial f}=1$. <br />Then we calculate backwardly the last but one node. <br />Each node except the last one multiplies the previously calculated gradient to get the global gradient. <br />The global gradients of the leaf nodes are the gradient we want. <br /><img src="/img/03.BackpropagationandNeuralNetworks01.png" width="40%">$\displaystyle\frac{\partial f}{\partial q},\frac{\partial q}{\partial W},\frac{\partial q}{\partial X},\frac{\partial f}{\partial b}$ are all local gradients, while $\displaystyle1.0,\frac{\partial f}{\partial q}\times1.0,\frac{\partial q}{\partial W}\frac{\partial f}{\partial q},\frac{\partial q}{\partial X}\frac{\partial f}{\partial q},\frac{\partial f}{\partial b}\times1.0$ are all global gradients. </li>
<li>We can also group some nodes to form a complicated node as long as we can write down the local gradient. </li>
<li>Add gate distributes the global gradient of the output as the global gradient of each input. <br />Max gate gives the output local gradient to the larger input as its global gradient and gives $0$ to another input. <br />Multiplication gate switches the values of inputs as their local gradient. </li>
<li>If inputs are vectors, the local gradients are the Jacobian matrices; namely, we need to calculate each element of the output with respect to each element of the input. Given the property of partial derivative, the Jacobian matrices are diagonal. </li>
<li>Always check: The gradient with respect to a variable should have the same shape as the variable. </li>
<li>In implement, we can make each gate a class with a forward function and a backward function. The forward function takes in the inputs and returns the forward calculation output. The backward function takes in the previous gradient and returns the gradients with respect to each component. </li>
</ol>
<h1 id="Neural-Network"><a href="#Neural-Network" class="headerlink" title="Neural Network"></a>Neural Network</h1><ol>
<li>Instead of using a single linear score function, we use multiple linear functions in neural networks with nonlinear functions in between. </li>
<li>The nonlinear functions are called the activation function. </li>
<li>There are many kinds of activation functions: <br />&emsp;Sigmoid: $\sigma(x)=\displaystyle\frac{1}{1+e^{-x}}$<br />&emsp;tanh: $tanh(x)$<br />&emsp;ReLu: $max(0,x)$<br />&emsp;Leaky ReLu: $max(0.1x,x)$<br />&emsp;Maxout: $max(w_1^Tx+b_1,w^T_2x+b_2)$<br />&emsp;ELU: $\left\{\begin{array}{}x&amp;x≥0\\\alpha(e^x-1)&amp;x&lt;0 \end{array}\right.$</li>
<li>The layers which take in the output of the previous layer and do one linear calculation and one nonlinear calculation is called fully-connected layers. </li>
<li>The first layer is the input layer, which takes in the input and calculate. So it is a fully-connected layer. <br />The last layer is the output layer, which does no calculation, simply outputs the result. So it is not a fully-connected layer. <br />All layers except these two layers are hidden layers. </li>
<li>What we called “$2$-layer Neural Network” is “$2$-fully-connected-layer Neural Network” or “$1$-hidden-layer Neural Network”. </li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>计算机视觉 (Stanford CS231n)</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>深度学习</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>03. Derivative Rules and Formulas</title>
    <url>/2020/02/10/03-Derivative-Rules-and-Formulas/</url>
    <content><![CDATA[<h1 id="Derivative-Rules"><a href="#Derivative-Rules" class="headerlink" title="Derivative Rules"></a>Derivative Rules</h1><ol>
<li>General formulas: <br />&emsp;<script type="math/tex">(u+v)'=u'+v'</script><br />&emsp;<script type="math/tex">(cu)'=cu'</script><br />&emsp;Product rule: <script type="math/tex">(uv)'=u'v+uv'</script><br />&emsp;&emsp;Proof: <br />&emsp;&emsp;<script type="math/tex">\begin{equation}\begin{split}\displaystyle\lim_{\Delta x\to 0}{\displaystyle\frac{\Delta (uv)}{\Delta x}}&=\displaystyle\lim_{\Delta x\to 0}{\displaystyle\frac{u(x+\Delta x)v(x+\Delta x)-u(x)v(x)}{\Delta x}}\\&=\displaystyle\lim_{\Delta x\to0}\displaystyle\frac{[u(x+\Delta x)-u(x)]v(x+\Delta x)+[v(x+\Delta x)-v(x)]u(x)}{\Delta x}\\&=\displaystyle\lim_{\Delta x\to 0}{\displaystyle\frac{u(x+\Delta x)-u(x)}{\Delta x}\cdot v(x+\Delta x)+\displaystyle\frac{v(x+\Delta x)-v(x)}{\Delta x}\cdot u(x)}\\&=u'v+uv'\end{split}\end{equation}</script><br />&emsp;Quotient rule: <script type="math/tex">(\displaystyle\frac{u}{v})'=\displaystyle\frac{u'v-uv'}{v^2}</script><br />&emsp;&emsp;Proof:<br />&emsp;&emsp; <script type="math/tex">\begin{equation}\begin{split}\displaystyle\lim_{\Delta x\to 0}{\displaystyle\frac{\Delta (\frac{u}{v})}{\Delta x}}&=\displaystyle\lim_{\Delta x\to 0}{\displaystyle\frac{\frac{u+\Delta u}{v+\Delta v}-\frac{u(x)}{v(x)}}{\Delta x}}\\&=\displaystyle\lim_{\Delta x\to 0}{\displaystyle\frac{\frac{uv+(\Delta u)v-uv-u(\Delta v)}{(v+\Delta v)v}}{\Delta x}}\\&=\displaystyle\lim_{\Delta x\to 0}{\displaystyle\frac{\frac{(\Delta u)v-u(\Delta v)}{(v+\Delta v)v}}{\Delta x}}\\&=\displaystyle\lim_{\Delta x\to 0}\displaystyle\frac{\frac{\Delta u}{\Delta x}v+u\frac{\Delta v}{\Delta x}}{(v+\Delta v)v}\\&=\displaystyle\frac{u'v-uv'}{v^2} \end{split}\end{equation}</script></li>
<li><code>Composition Rule (Chain Rule)</code>: <script type="math/tex">[f(g(x))]'=g'(x)\cdot f'(g(x))</script><br />&emsp;Proof: <script type="math/tex">\displaystyle\frac{df}{dx}=\frac{df}{dt}\cdot\frac{dt}{dt}</script>. Let <script type="math/tex">t=g(x)</script>. </li>
<li>Higher derivative: <br />&emsp;First derivative is <script type="math/tex">u'</script> or <script type="math/tex">\displaystyle\frac{du}{dx}</script><br />&emsp;Second derivative is <script type="math/tex">u''=(u')'</script>, or <script type="math/tex">\displaystyle\frac{d}{dx}\frac{du}{dx}=\frac{d^2u}{dx^2}</script><br />&emsp;Third derivative is <script type="math/tex">u'''=(u'')'</script>, or <script type="math/tex">\displaystyle\frac{d^3u}{dx^3}</script><br />&emsp;<script type="math/tex">nth</script> derivative (<script type="math/tex">n>3</script>) is <script type="math/tex">u^{(n)}</script></li>
<li><script type="math/tex">\displaystyle\frac{d}{dx}</script> is the operator of derivative and can be denoted as <script type="math/tex">D</script>. So <script type="math/tex">Dy</script> is the derivative of <script type="math/tex">y</script>, while <script type="math/tex">D^{n}y</script> is the <script type="math/tex">nth</script> derivative of <script type="math/tex">y</script>. </li>
</ol>
<h1 id="Formulas"><a href="#Formulas" class="headerlink" title="Formulas"></a>Formulas</h1><ol>
<li><script type="math/tex; mode=display">\begin{equation}\begin{split}\displaystyle\frac{d}{dx}sin\ x&=\displaystyle\lim_{\Delta x\to 0}\displaystyle\frac{sin(x+\Delta x)-sin\ x}{\Delta x}\\&=\displaystyle\lim_{\Delta x\to 0}\displaystyle\frac{sin\ x\cdot cos\ \Delta x+cos\ x\cdot sin\ \Delta x-sin\ x}{\Delta x}\\&=\displaystyle\lim_{\Delta x\to 0}{sin\ x(\frac{cos\ \Delta x-1}{\Delta x})+cos\ x(\displaystyle\frac{sin\ \Delta x}{\Delta x})}\\&=cos\ x\end{split}\end{equation}</script></li>
<li><script type="math/tex; mode=display">\begin{equation}\begin{split}\displaystyle\frac{d}{dx}cos\ x&=\displaystyle\lim_{\Delta x\to 0}{\displaystyle\frac{cos(x+\Delta x)-cos\ x}{\Delta x}}\\&=\displaystyle\lim_{\Delta x\to 0}{\displaystyle\frac{cos\ x\cdot\ cos\ \Delta x-sin\ x\cdot sin\ \Delta x-cos\ x}{\Delta x}}\\&=\displaystyle\lim_{\Delta x\to 0}{cos\ x(\displaystyle\frac{cos\ \Delta x-1}{\Delta x})+sin\ x(\displaystyle\frac{sin\ \Delta x}{\Delta x})}\\& =-sin\ x \end{split}\end{equation}</script></li>
<li><script type="math/tex; mode=display">\begin{equation}\begin{split}\displaystyle\frac{d}{dx}tan\ x &=\frac{d}{dx}\frac{sin\ x}{cos\ x}\\&=\frac{cos^2x+sin^2x}{cos^2x}\\&=\frac{1}{cos^2x}\end{split}\end{equation}</script></li>
<li><script type="math/tex; mode=display">\begin{equation}\begin{split}\displaystyle\frac{d}{dx}{\displaystyle\frac{1}{x}}&=\displaystyle\lim_{\Delta x\to 0}{\displaystyle\frac{\frac{1}{x-\Delta x}-\frac{1}{x}}{\Delta x}}\\&=\displaystyle\lim_{\Delta x\to 0}{\displaystyle\frac{1}{\Delta x}(\displaystyle\frac{-\Delta x}{x^2-x\Delta x})} \\&=-\displaystyle\frac{1}{x^2}\end{split}\end{equation}</script></li>
<li><script type="math/tex; mode=display">\displaystyle\frac{d}{dx}x^n=nx^{n-1}\ \ (n≥0)</script></li>
<li><script type="math/tex">\displaystyle\frac{d}{dx}x^{-n}=\displaystyle\frac{d}{dx}\frac{1}{x^{n}}=\frac{0\cdot x^{n}-1\cdot nx^{n-1}}{x^{2n}}=\frac{-n}{x^{n+1}}</script>, let <script type="math/tex">n=-n</script>, <script type="math/tex">\displaystyle\frac{d}{dx}x^n=nx^{n-1}</script>. </li>
<li><script type="math/tex; mode=display">\displaystyle\frac{d}{dx}x^n=nx^{n-1}\ \ (x\in Z)</script></li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>单变量微积分 (MIT 18.01)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>03. Independence</title>
    <url>/2020/03/12/03-Independence/</url>
    <content><![CDATA[<h1 id="Independence"><a href="#Independence" class="headerlink" title="Independence"></a>Independence</h1><ol>
<li>$A$ is independent of $B$ if $P(A|B)=P(A)$. The occurrence of $B$ provides no such information and does not alter the probability that $A$ has occurred. </li>
<li>$P(A|B)=\displaystyle\frac{P(A\cap B)}{P(B)}$. So if $A$ is independent of $B$, $P(A\cap B)=P(A|B)P(B)=P(A)P(B)$. </li>
<li>We take $P(A\cap B)=P(A)P(B)$ as the definition of independent, because it can be used even when $P(B)=0$. </li>
<li>For $A$ and $B$, the definition is a symmetric property. If $A$ is independent of $B$, then $B$ is independent of $A$, and we can unambiguously say that $A$ and $B$ are independent events. </li>
<li>Disjoint sets definitely not independent. </li>
<li>If $A$ and $B$ are independent, the same holds true for $A$ and $B^c$. </li>
</ol>
<h1 id="Conditional-Independence"><a href="#Conditional-Independence" class="headerlink" title="Conditional Independence"></a>Conditional Independence</h1><ol>
<li>Given an event $C$, the events $A$ and $B$ are called conditionally independent if $P(A\cap B|C)=P(A|C)P(B|C)$. </li>
<li>$\begin{equation}\begin{split}P(A\cap B|C)&amp;=\displaystyle\frac{P(A\cap B\cap C)}{P(C)}\\&amp;=\frac{P(C)\frac{P(B\cap C)}{P(C)}\frac{P(A\cap B\cap C)}{P(B\cap C)}}{P(C)}\\&amp;=\frac{P(C)P(B|C)P(A|B\cap C)}{P(C)}\\&amp;=P(B|C)P(A|B\cap C)\end{split}\end{equation}$</li>
<li>Also $P(A\cap B|C)=P(A|C)P(B|C)$. So we see the conditional independence is the same as the condition $P(A|B\cap C)=P(A|C)$</li>
<li>This relation states that is $C$ is known to have occurred, the additional knowledge that $B$ also occurred does not change the probability of $A$. </li>
<li>Independence of two events $A$ and $B$ with respect to the unconditional probability law does not imply conditional independence and vice versa. </li>
</ol>
<h1 id="Independence-of-a-Collection-of-Events"><a href="#Independence-of-a-Collection-of-Events" class="headerlink" title="Independence of a Collection of Events"></a>Independence of a Collection of Events</h1><ol>
<li>Events $A_1,…,A_n$ are independent if $\displaystyle P(\bigcap_{i\in S}A_i)=\prod_{i\in S}P(A_i)$, for every subset $S$ of $\{1,2,…,n\}$</li>
<li>Distinguish from pairwise independence which is defined as any two events are independent. </li>
<li>We can substitute any set with its complement with the independence true. </li>
</ol>
<h1 id="Independent-Trials-and-Binomial-Probabilities"><a href="#Independent-Trials-and-Binomial-Probabilities" class="headerlink" title="Independent Trials and Binomial Probabilities"></a>Independent Trials and Binomial Probabilities</h1><ol>
<li>If an experiment involves a sequence of independent but identical stages, we say that we have a sequence of independent trials. </li>
<li>In the special case where there are only two possible results at each stage, we say that we have a sequence of independent Bernoulli trials. </li>
<li>Two possible results $A$ and $B$, and the probability of $A$ is $p$. In $n$ experiments, the probability that $A$ occurs $k$ times is $p(k)=\big(^n_k\big)p^k(1-p)^{n-k}$. <br />$\big(^n_k\big)=\displaystyle\frac{n!}{k!\cdot(n-k)!}$</li>
<li>The sum of probabilities of each possible outcomes should be $1$. <br />Binomial formula: $\displaystyle\sum^n_{k=0}\big(^n_k\big)p^k(1-p)^{n-k}=1$<br />When $p=\displaystyle\frac{1}{2}$, $\displaystyle\sum^n_{k=0}\big(^n_k\big)=2^2$</li>
<li>A similar coefficient is the multinomial coefficient: <br />$\begin{equation}\begin{split}\big(^{     n}_{n_1n_2…n_r}\big)&amp;=\big(^n_{n_1}\big)\big(^{n-n_1}_{  n_2}\big)\big(^{n-n_1-n_2}_{    n_3})…\big(^{n-n_1-…-n_{r-1}}_{          n_r})\\&amp;=\displaystyle\frac{n!}{n_1!(n-n_1)!}\frac{(n-n_1)!}{n_2!(n-n_1-n_2!)}…\frac{(n-n_1-…-n_{r-1})!}{n_r!(n-n_1-…-n_r)!}\\&amp;=\frac{n!}{n_1!n_2!…n_r!}\end{split}\end{equation}$</li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>概率论 (MIT 6.041)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>03&amp;04. Swift Programming Language</title>
    <url>/2019/07/18/03&amp;04.Swift-Programming-Language/</url>
    <content><![CDATA[<h1 id="Teaser-of-Autolayout"><a href="#Teaser-of-Autolayout" class="headerlink" title="Teaser of Autolayout"></a>Teaser of Autolayout</h1><h2 id="How-to-set-constraints-of-a-button-or-label-in-the-View"><a href="#How-to-set-constraints-of-a-button-or-label-in-the-View" class="headerlink" title="How to set constraints of a button or label in the View?"></a>How to set constraints of a button or label in the View?</h2><p>Hold on Ctrl and drag from the button or label to the View, and select the kind of constraints we need.</p>
<h2 id="How-to-keep-a-group-of-members-change-their-sizes-to-adopt-the-change-of-screen-size"><a href="#How-to-keep-a-group-of-members-change-their-sizes-to-adopt-the-change-of-screen-size" class="headerlink" title="How to keep a group of members change their sizes to adopt the change of screen size?"></a>How to keep a group of members change their sizes to adopt the change of screen size?</h2><ol>
<li>Embed them into a stack view. Mark thar a stack view cannot fix in both axises, so we usually creat stack in one direction and create a stack of those stacks in a different axises.</li>
<li>After that, we can set some datas of the stacks. The window just like below.<a id="more"></a>
The first selection is the way to keep members in order, to lie them all horizantally or vertically.<br>The second selection is the way the whole stack view shows, fill the whole allowed space or in a peticular space.<br>The third one is the way to distribute the size of the members.<br>The forth one is the space between each members<br><img src="/img/03&04.SwiftProgrammingLanguage01.png" width="30%"><br>How to choose what kind of constraint we want?</li>
<li>Pin to the top: Top space to safe area<br>Pin to the buttom: Buttom space to safe area<br>Pin to the left: Leading space to safe area<br>Pin to the right: Trailing space to safe area</li>
<li>If want to keep in the center, choose “Center xxx in safe area”</li>
<li>If want to keep a certain distance between to members, drag to the other member and choose the vertical spacing or horizantal spacing</li>
<li>We can even change the parameter of the constraints by click the blue line represents the constraint. There are two important parameters, the Relation(second one) and the Constant(the forth one). They mark the constraint between the First Item and the Second Item<br><img src="/img/03&04.SwiftProgrammingLanguage02.png" width="30%"></li>
</ol>
<h1 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h1><h2 id="When-will-we-use-the-Computed-Properties"><a href="#When-will-we-use-the-Computed-Properties" class="headerlink" title="When will we use the Computed Properties?"></a>When will we use the Computed Properties?</h2><p>If one property is derived(calculated) from other state, then we will make it Computed Property. We do that to make sure those properties are synced, to prevent we forget to sync them. For example, the <code>Int?</code> we used in the Consentrationg to record if there is one and only card that is faced up. Its value is derived from the Card array.</p>
<h2 id="Access-Control"><a href="#Access-Control" class="headerlink" title="Access Control"></a>Access Control</h2><ol>
<li><code>internal</code>: this is the default, we don’t need to write it down. It means “usable by any object in my app or framework” private - this means “only callable from within this object”</li>
<li><code>private(set)</code>: this means “this property is readable outside this object, but not settable” fileprivate - accessible by any code in this source file</li>
<li><code>public</code>: (for frameworks only) this can be used by objects outside my framework</li>
<li><code>open</code>: (for frameworks only) public and objects outside my framework can subclass this</li>
<li>Mark everything private by default. Then remove the private designation when that API is ready to be used by other code.</li>
</ol>
<h2 id="When-to-use-an-asserion"><a href="#When-to-use-an-asserion" class="headerlink" title="When to use an asserion?"></a>When to use an asserion?</h2><p>We can use an assertion to protect our API from inproper callings by the syntax<code>assert(condition, output)</code>. It will print output and terminate the whole process when the condition is <code>false</code></p>
<h2 id="Extension"><a href="#Extension" class="headerlink" title="Extension"></a>Extension</h2><ol>
<li>The properties you add can have no storage associated with them (computed only).</li>
<li>We use extension if and only if the extension makes this class a better class and the new property is concerned with that class.</li>
<li>In extension, we can still use <code>self</code> key word to acces the instance that called the property. In the Int class or some other basic classes, self refer to the literal value self</li>
</ol>
<h2 id="Automatic-Reference-Counting"><a href="#Automatic-Reference-Counting" class="headerlink" title="Automatic Reference Counting"></a>Automatic Reference Counting</h2><h3 id="Mechanism"><a href="#Mechanism" class="headerlink" title="Mechanism"></a>Mechanism</h3><ol>
<li>Reference types (classes) are stored in the heap.</li>
<li>How does the system know when to reclaim the memory for these from the heap?<br>It “counts references” to each of them and when there are zero references, they get tossed. This is done automatically.</li>
<li>It is known as “Automatic Reference Counting” and it is NOT garbage collection.<h3 id="Influencing-ARC"><a href="#Influencing-ARC" class="headerlink" title="Influencing ARC"></a>Influencing ARC</h3></li>
<li>strong<br>strong is “normal” reference counting<br>As long as anyone, anywhere has a strong pointer to an instance, it will stay in the heap</li>
<li>weak<br>weak means “if no one else is interested in this, then neither am I, set me to nil in that case” Because it has to be nil-able, weak only applies to Optional pointers to reference types<br>A weak pointer will NEVER keep an object in the heap<br>Great example: outlets (strongly held by the view hierarchy, so outlets can be weak)</li>
<li>unowned<br>unowned means “don’t reference count this; crash if I’m wrong”<br>This is very rarely used<br>Usually only to break memory cycles between objects (more on that in a little while)</li>
</ol>
<h2 id="How-to-make-optional-methods-in-a-Protocol"><a href="#How-to-make-optional-methods-in-a-Protocol" class="headerlink" title="How to make optional methods in a Protocol?"></a>How to make optional methods in a Protocol?</h2><p>Swift doesn’t provide this kind of methods, but we can accomplish it by make it an Objective-C Protocol. We need to add <code>@objc</code> before the <code>protocol</code> key word to mark that this is an Objective-C Protocol, and add <code>optional</code> key word in front of any methods we want to make optional.</p>
<h2 id="NSAttributedString"><a href="#NSAttributedString" class="headerlink" title="NSAttributedString"></a>NSAttributedString</h2><p>NSAttributedString is another kind of String, which we can set its font, color… in code. To implement an NSAttributedString, we need to build a <code>[NSAttributedStringKey : Any]</code> dictionary first, the value of each key do not have a specific type, totally depend on the key. After that, we declare an NSAttributedString with its initializer <code>NSAttributedString(String, [NSAttributedStringKey : Any])</code>. Then we can assign this NSAttributedString to the attributedText or attributedLabel of a UILabel or a UIButton</p>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>Swift开发 (Stanford CS193p)</category>
      </categories>
      <tags>
        <tag>应用开发</tag>
        <tag>Swift</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>03. Max-min Problems and Least Squares</title>
    <url>/2020/02/23/03-Max-min-Problems-and-Least-Squares/</url>
    <content><![CDATA[<h1 id="Max-min-Problems"><a href="#Max-min-Problems" class="headerlink" title="Max-min Problems"></a>Max-min Problems</h1><ol>
<li>At a local min or max <script type="math/tex">f_x=0</script> and <script type="math/tex">f_y=0</script>. <br />According to the approximation equation <script type="math/tex">\Delta z\approx f_x\Delta x+f_y\Delta y</script> we know this is right. </li>
<li>Max or min also means the tangent plane is horizontal. </li>
<li><script type="math/tex">(x_0,y_0)</script> is a critical point of <script type="math/tex">f</script> if <script type="math/tex">f_x(x_0,y_0)=0</script> and <script type="math/tex">f_y(x_0,y_0)=0</script>. </li>
<li>A critical point can be a <code>local min</code>, a <code>local max</code> or a <code>saddle point</code>. </li>
<li>A global min/max occurs either at a critical point or on boundary / at infinity. </li>
<li><code>Second derivative test</code>: <br />&emsp;There are three second derivatives <script type="math/tex">\displaystyle\frac{\partial^2f}{\partial x^2}=f_{xx}</script>, <script type="math/tex">f_{xy}=\displaystyle\frac{\partial^2f}{\partial x\partial y}=\frac{\partial^2f}{\partial y\partial x}=f_{yx}</script> and <script type="math/tex">\displaystyle\frac{\partial^2f}{\partial y^2}=f_{yy}</script>. <br />&emsp;At a critical point <script type="math/tex">P(x_0,y_0)</script> of <script type="math/tex">f</script>, let <script type="math/tex">A=f_{xx}(x_0,y_0),B=f_{xy}(x_0,y_0)</script> and <script type="math/tex">C=f_{yy}(x_0,y_0)</script>. <br />&emsp;If <script type="math/tex">AC-B^2>0</script> and <script type="math/tex">A>0</script>, <script type="math/tex">P</script> is a local minimum. <br />&emsp;If <script type="math/tex">AC-B^2>0</script> and <script type="math/tex">A<0</script>, <script type="math/tex">P</script> s a local maximum. <br />&emsp;If <script type="math/tex">AC-B^2<0</script>, <script type="math/tex">P</script> s a saddle point. <br />&emsp;If <script type="math/tex">AC-B^2=0</script>, cannot conclude. </li>
</ol>
<h1 id="Least-Square"><a href="#Least-Square" class="headerlink" title="Least Square"></a>Least Square</h1><ol>
<li>Given some datas, find best fit line <script type="math/tex">y=ax+b</script>. In this equation, <script type="math/tex">a</script> and <script type="math/tex">b</script> are unknowns instead of <script type="math/tex">x</script> and <script type="math/tex">y</script>. </li>
<li>Best means minimizing total square deviation. </li>
<li>Deviation for each data point is <script type="math/tex">y_i-(ax_i+b)</script>. </li>
<li>So we are trying to minimize <script type="math/tex">D=\displaystyle\sum^n_{i=1}[y_i-(ax_i+b)]^2</script></li>
<li><script type="math/tex">\begin{equation}\begin{split}&\left\{\begin{array}{}\frac{\partial D}{\partial a}=\sum^n_{i=1}2(y_i-(ax_i+b))(-x_i)=0\\\frac{\partial D}{\partial b}=\sum^n_{i=1}2(y_i-(ax_i+b))(-1)=0 \end{array}\right.\\\Leftrightarrow&\left\{\begin{array}{}\sum^n_{i=1}(x_i^2a+x_ib-x_iy_i)=0\\\sum^n_{i=1}(x_ia+b-y)=0 \end{array}\right.\\\Leftrightarrow&\left\{\begin{array}{}(\sum^n_{i=1}x_i^2)a+(\sum^n_{i=1}x_i)b=\sum^n_{i=1}x_iy_i\\(\sum^n_{i=1}x_i)a+nb=\sum^n_{i=1}y_i \end{array}\right. \end{split}\end{equation}</script><br />This is a <script type="math/tex">2\times2</script> linear equation of <script type="math/tex">a</script> and <script type="math/tex">b</script>. </li>
<li>If the best explanation of a set of datas is <script type="math/tex">y=ce^{ax}</script>, we can make it <script type="math/tex">ln\ y=ln\ c+ax</script> so that it becomes linear again. </li>
<li>Similarly we can define the best quadratic <script type="math/tex">y=ax^2+bx+c</script> with the same deviation. </li>
</ol>
<p>See the linear algebra version of least square: <a href="http://www.laughingtree.cn/2020/02/01/13-Least-Squares/" target="_blank" rel="noopener">Least square</a></p>
]]></content>
      <categories>
        <category>数学</category>
        <category>多变量微积分 (MIT 18.02)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>03. How to Talk About Personality Types</title>
    <url>/2020/07/25/03-How-to-Talk-About-Personality-Types/</url>
    <content><![CDATA[<style>
table th:first-of-type {
    width: 150px;
}
</style>

<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Words</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">egoist</td>
</tr>
<tr>
<td style="text-align:center">egotist</td>
</tr>
<tr>
<td style="text-align:center">altruist</td>
</tr>
<tr>
<td style="text-align:center">introvert</td>
</tr>
<tr>
<td style="text-align:center">extrovert</td>
</tr>
<tr>
<td style="text-align:center">ambivert</td>
</tr>
<tr>
<td style="text-align:center">misanthrope</td>
</tr>
<tr>
<td style="text-align:center">misogynist</td>
</tr>
<tr>
<td style="text-align:center">misogamist</td>
</tr>
<tr>
<td style="text-align:center">ascetic</td>
</tr>
</tbody>
</table>
</div>
<h1 id="ego-I"><a href="#ego-I" class="headerlink" title="ego: I"></a>ego: I</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ego</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ego·ist</td>
<td style="text-align:center">obnoxious</td>
</tr>
<tr>
<td style="text-align:center">ego·tist</td>
<td style="text-align:center">The extra ‘t’ is ‘talk’. <br />obnoxious</td>
</tr>
<tr>
<td style="text-align:center">ego·centric</td>
<td style="text-align:center"><strong><em>an extreme form of the egoist</em></strong><br />intolerable<br />both a noun and an adjective<br /><code>centrum: center</code></td>
</tr>
<tr>
<td style="text-align:center">ego·maniac</td>
<td style="text-align:center"><strong><em>carry egoism to such an extreme maniac</em></strong><br />dangerous and slightly mad<br /><code>mania: madness</code></td>
</tr>
<tr>
<td style="text-align:center">ego·maniac·al</td>
<td style="text-align:center">the adjective form of egomaniac<br /><code>-al: adjective suffix</code></td>
</tr>
</tbody>
</table>
</div>
<h1 id="alter-other"><a href="#alter-other" class="headerlink" title="alter: other"></a>alter: other</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">alter</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">altru·ism</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">altru·ist</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">altru·istic</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">alter·nate</td>
<td style="text-align:center"><strong><em>skip one and take the other</em></strong><br /><strong><em>The other one that will take over.</em></strong></td>
</tr>
<tr>
<td style="text-align:center">alter·native</td>
<td style="text-align:center"><strong><em>a choice</em></strong></td>
</tr>
<tr>
<td style="text-align:center">alter ego</td>
<td style="text-align:center"><strong><em>the other me</em></strong></td>
</tr>
<tr>
<td style="text-align:center">alter·cation</td>
<td style="text-align:center"><strong><em>a verbal dispute</em></strong><br />stronger than quarrel or dispute</td>
</tr>
<tr>
<td style="text-align:center">alter·ation</td>
<td style="text-align:center"><strong><em>making into something other</em></strong><br />a change</td>
</tr>
</tbody>
</table>
</div>
<h1 id="vert-to-turn"><a href="#vert-to-turn" class="headerlink" title="vert: to turn"></a>vert: to turn</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">intro·vert</td>
<td style="text-align:center"><strong><em>thoughts are turned inward</em></strong><br /><code>intro: inward</code></td>
</tr>
<tr>
<td style="text-align:center">extro·vert</td>
<td style="text-align:center"><strong><em>thoughts are turned outward</em></strong><br /><code>extro: ouward</code></td>
</tr>
<tr>
<td style="text-align:center">ambi·vert</td>
<td style="text-align:center"><strong><em>thoughts are turned in both direction</em></strong><br /><code>ambi: both</code></td>
</tr>
<tr>
<td style="text-align:center">ambi·dextr·ous</td>
<td style="text-align:center"><strong><em>able to use both hands with equal skill</em></strong></td>
</tr>
<tr>
<td style="text-align:center">dexter·ous</td>
<td style="text-align:center"><strong><em>skillful</em></strong><br /><code>-ous: adjective suffix</code><br /><code>dexter: Latin word for right hand</code></td>
</tr>
<tr>
<td style="text-align:center">dexter·ity</td>
<td style="text-align:center"><strong><em>skill</em></strong><br /><code>-ity: noun suffix</code></td>
</tr>
<tr>
<td style="text-align:center">left-handed</td>
<td style="text-align:center"><strong><em>awkward</em></strong><br />traditionally right hand is the more skillful one</td>
</tr>
<tr>
<td style="text-align:center">sinister</td>
<td style="text-align:center"><strong><em>threatening, evil or dangerous</em></strong><br /><code>the Latin word for the left hand</code></td>
</tr>
<tr>
<td style="text-align:center">gauche</td>
<td style="text-align:center"><strong><em>clumsiness</em></strong><br /><code>the French word for the left hand</code><br />social rather than physical</td>
</tr>
<tr>
<td style="text-align:center">gaucherie</td>
<td style="text-align:center"><strong><em>an awkward, clumsy, tactless, embarrassing way of saying things or of handling situations</em></strong></td>
</tr>
<tr>
<td style="text-align:center">a·droit</td>
<td style="text-align:center"><strong><em>skillful, especially in the exercise of the mental facilities</em></strong><br /><code>droit: the French word for the right hand</code><br />is used figuratively, socially</td>
</tr>
<tr>
<td style="text-align:center">a·droit·ness</td>
<td style="text-align:center">the noun of adroit</td>
</tr>
</tbody>
</table>
</div>
<h1 id="misein-to-hate"><a href="#misein-to-hate" class="headerlink" title="misein: to hate"></a>misein: to hate</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">mis·anthrope</td>
<td style="text-align:center"><strong><em>hates mankind</em></strong><br /><code>Greek anthoropos, mankind</code></td>
</tr>
<tr>
<td style="text-align:center">mis·o·gyn·ist</td>
<td style="text-align:center"><strong><em>hates women</em></strong><br /><code>Greek gyne, women</code></td>
</tr>
<tr>
<td style="text-align:center">mis·o·gam·ist</td>
<td style="text-align:center"><strong><em>hates marriage</em></strong><br /><code>Greek gamos, marriage</code></td>
</tr>
<tr>
<td style="text-align:center">anthrop·ology</td>
<td style="text-align:center"><strong><em>the study of the development of the human race</em></strong></td>
</tr>
<tr>
<td style="text-align:center">phil·anthrop·ist</td>
<td style="text-align:center"><strong><em>one who loves mankind, and shows such love by making substantial financial contributions to charitable organizations or by donating time and energy to helping those in need</em></strong></td>
</tr>
<tr>
<td style="text-align:center">gyne·cologist</td>
<td style="text-align:center"><strong><em>the medical specialist who treats female disorders</em></strong></td>
</tr>
<tr>
<td style="text-align:center">mono·gam·y</td>
<td style="text-align:center"><strong><em>the custom of only one marriage (at a time)</em></strong><br /><code>mono: one</code></td>
</tr>
<tr>
<td style="text-align:center">bi·gam·y</td>
<td style="text-align:center"><strong><em>the unlawful act of two marriages at a time</em></strong><br /><code>bi: two</code></td>
</tr>
<tr>
<td style="text-align:center">poly·gam·y</td>
<td style="text-align:center"><strong><em>the custom which allows plural marriage for either males or females</em></strong><br /><code>poly: many</code></td>
</tr>
<tr>
<td style="text-align:center">poly·gyn·y</td>
<td style="text-align:center"><strong><em>a male has many wives</em></strong><br />the correct, but rarely used, term for polygamy</td>
</tr>
<tr>
<td style="text-align:center">poly·andr·y</td>
<td style="text-align:center"><strong><em>a female has many husbands</em></strong><br /><code>Greek andros, male</code></td>
</tr>
</tbody>
</table>
</div>
<h1 id="Suffixes"><a href="#Suffixes" class="headerlink" title="Suffixes"></a>Suffixes</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Person</th>
<th style="text-align:center">Practice, etc.</th>
<th style="text-align:center">Adjective</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">misanthrope<br />misanthropist</td>
<td style="text-align:center">misanthropy</td>
<td style="text-align:center">misanthropic</td>
</tr>
<tr>
<td style="text-align:center">misogynist</td>
<td style="text-align:center">misogyny</td>
<td style="text-align:center">misogynous<br />misogynistic</td>
</tr>
<tr>
<td style="text-align:center">gynecologist</td>
<td style="text-align:center">gynecology</td>
<td style="text-align:center">gynecological</td>
</tr>
<tr>
<td style="text-align:center">monogamist</td>
<td style="text-align:center">monogamy</td>
<td style="text-align:center">monogamous</td>
</tr>
<tr>
<td style="text-align:center">bigamist</td>
<td style="text-align:center">bigamy</td>
<td style="text-align:center">bigamous</td>
</tr>
<tr>
<td style="text-align:center">polygamist</td>
<td style="text-align:center">polygamy</td>
<td style="text-align:center">polygamous</td>
</tr>
<tr>
<td style="text-align:center">polygynist</td>
<td style="text-align:center">polygyny</td>
<td style="text-align:center">polygynous</td>
</tr>
<tr>
<td style="text-align:center">polyandrist</td>
<td style="text-align:center">polyandry</td>
<td style="text-align:center">polyandrous</td>
</tr>
<tr>
<td style="text-align:center">philanthropist</td>
<td style="text-align:center">philanthropy</td>
<td style="text-align:center">philanthropic</td>
</tr>
<tr>
<td style="text-align:center">anthropologist</td>
<td style="text-align:center">anthropology</td>
<td style="text-align:center">anthropological</td>
</tr>
</tbody>
</table>
</div>
<p><code>-ist</code> is a common suffix for a person</p>
<p><code>-y</code> for a practice, attitude, etc. </p>
<p><code>-ic</code> or <code>-ous</code> for an adjective</p>
<h1 id="asketes-monk-or-hermit"><a href="#asketes-monk-or-hermit" class="headerlink" title="asketes: monk or hermit"></a>asketes: monk or hermit</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ascet·ic</td>
<td style="text-align:center"><strong><em>a monk</em></strong><br />both a noun and an adjective</td>
</tr>
<tr>
<td style="text-align:center">ascetic·ism</td>
<td style="text-align:center"><strong><em>the practice of ascetic</em></strong></td>
</tr>
</tbody>
</table>
</div>
<h1 id="Amateur-Etymologist"><a href="#Amateur-Etymologist" class="headerlink" title="Amateur Etymologist"></a>Amateur Etymologist</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">anthropo·centr·ic</td>
<td style="text-align:center"><strong><em>thinking, assumptions, reasoning, etc. that see mankind as the central fact, or ultimate aim, of the universe</em></strong><br />noun form: anthropocentrism / anthropocentricity</td>
</tr>
<tr>
<td style="text-align:center">andro·mania</td>
<td style="text-align:center"><strong><em>an obsession with males</em></strong><br />person: andromaniac<br />adjective: andromaniacal</td>
</tr>
<tr>
<td style="text-align:center">gyn·andr·ous<br />andro·gyn·ous</td>
<td style="text-align:center"><strong><em>a. plants in which the male and female organs are united in the same column</em></strong><br /><strong><em>b. people who physically have both male and female sexual organs, often one or both in rudimentary form</em></strong><br /><strong><em>c. people who exhibit, or are will to own up to, the male and female emotional characteristics that everyone possesses</em></strong><br />noun form: gynandry / androgyny<br />individual plant: andrognye</td>
</tr>
<tr>
<td style="text-align:center">herm·aphrodit·ic</td>
<td style="text-align:center"><code>Hermes: the Greek god who served as messenger or herald (or, in Roman mythology, known as Mercury)</code><br /><code>Aphrodite: the Greek goddes of love and beauty (or, in Roman mythology, Venus)</code><br /><strong><em>a. plants in which the male and female organs are united in the same column</em></strong><br /><strong><em>b. people who physically have both male and female sexual organs, often one or both in rudimentary form</em></strong><br />noun form: hermaphroditism<br />plant or person: hermaphrodite</td>
</tr>
<tr>
<td style="text-align:center">mono·mania</td>
<td style="text-align:center"><strong><em>an obsession with one thing, or obsessiveness in one area</em></strong><br />person: monomaniac<br />adjective: monomaniacal</td>
</tr>
<tr>
<td style="text-align:center">mis·andr·ist</td>
<td style="text-align:center">hates men<br />noun form: misandry<br />adjective form: misandrous</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>英语</category>
        <category>Word Power Made Easy</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>单词</tag>
      </tags>
  </entry>
  <entry>
    <title>02. Elimination with Matrices</title>
    <url>/2019/10/23/02-Elimination-with-Matrices/</url>
    <content><![CDATA[<h1 id="Elimination"><a href="#Elimination" class="headerlink" title="Elimination"></a>Elimination</h1><ol>
<li>To solve a system, we can eliminate it to make it an upper-triangular form. The goal of elimination is to produce an upper triangular system. </li>
<li>Before every elimination, choose a pivot. <code>Zero will never be accepted as a pivot</code>.  Pivots are the coefficients in the diagonal of the system. </li>
<li>We can <code>multiply</code> a specific multiplier to the main equation and <code>subtract</code> it from another equation to eliminate. </li>
<li>Pivot is the first nonzero in the row that does the elimination. <br />The multiplier is the entry to eliminate divided by pivot. </li>
<li>When solving the system, right-hand side vector and the coefficients act the same. So it is convenient to add it to the coefficient matrix. The matrix with the right-hand side vector is called <code>the augmented matrix</code>, written as <script type="math/tex">[E\ \vec{b}]</script>. </li>
<li>After elimination, we <code>back substitute</code> from bottom to top to solve each unknowns. </li>
<li>Elimination can fail when we do not get $n$ pivots. This could lead to either no solution or infinitely many solutions. However, if there is  a nonzero below the zero in the pivot, we can exchange them to correct the system. </li>
</ol>
<h1 id="Matrix-Elimination"><a href="#Matrix-Elimination" class="headerlink" title="Matrix Elimination"></a>Matrix Elimination</h1><h2 id="Operation-by-Rows-or-Columns"><a href="#Operation-by-Rows-or-Columns" class="headerlink" title="Operation by Rows or Columns"></a>Operation by Rows or Columns</h2><ol>
<li>Every matrix is a series of row vectors or column vectors. When multiplying two matrices, we can multiply them separately. We can multiply the first matrix to every column vector in the second matrix or multiply the second matrix to every row vector in the first matrix</li>
<li>This gives us a hint of row operations and column operations. The first matrix can change the second matrix on rows while the second matrix changes the first matrix on columns. </li>
<li>In the multiplication of $LR = A$, the $i$th row of $A$ is $L$ times the $i$th row of $R$ while the $i$th column of $A$ is the $i$th column of $L$ times $R$. </li>
<li>More specifically, the $i$th row of $A$ is the linear combination of all row vectors in $R$ whose coefficients are the $i$th row of $L$. The $i$th column of $A$ is the linear combination of all column vectors in $L$ whose coefficients are the $i$th column of $R$. </li>
</ol>
<h2 id="Elimination-with-Matrices"><a href="#Elimination-with-Matrices" class="headerlink" title="Elimination with Matrices"></a>Elimination with Matrices</h2><ol>
<li>With the basic of matrices multiplication, we can eliminate the system with that. </li>
<li>Based on the identity matrix, we make the elimination matrix <script type="math/tex">E</script>. <script type="math/tex">E_{ij}</script> is to produce a zero in the <script type="math/tex">(i,\ j)</script> position of the matrix. Furthermore, <script type="math/tex">the\ (i,\ j)\ entry\ of\ E_{ij}=-l</script> (<script type="math/tex">l</script> is the multiplier to do the elimination). </li>
<li>We usually do the row operations when eliminating. So <script type="math/tex">E</script> is usually the left matrix. </li>
<li>When multiple eliminations are necessary, we write those elimination matrices from right to left opposite to the sequence of elimination. </li>
<li>Though we can move parentheses, we cannot change the relative position of the matrices. </li>
<li>The elimination matrices will not change the solution, because the final equation will be <script type="math/tex">EA\vec{x}=E\vec{b}</script>. For augmented matrix the final result is <script type="math/tex">[EA\ E\vec{b}]</script></li>
<li>When we need a row exchange, a permutation matrix is multiplied. The permutation matrix <script type="math/tex">P_{ij}</script> is the identity matrix with rows <script type="math/tex">i</script> and <script type="math/tex">j</script> reversed to exchange rows <script type="math/tex">i</script> and <script type="math/tex">j</script> of the original matrix.  </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>线性代数 (MIT 18.06)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>03. 数据表示和检查纠错</title>
    <url>/2020/04/26/03-%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA%E5%92%8C%E6%A3%80%E6%9F%A5%E7%BA%A0%E9%94%99/</url>
    <content><![CDATA[<h1 id="数据表示"><a href="#数据表示" class="headerlink" title="数据表示"></a>数据表示</h1><p>1. </p>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>计算机组成原理 (清华大学)</category>
      </categories>
      <tags>
        <tag>硬件</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>03. 词法分析</title>
    <url>/2020/05/10/03-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="词法分析程序设计"><a href="#词法分析程序设计" class="headerlink" title="词法分析程序设计"></a>词法分析程序设计</h1><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><ol>
<li>读入源程序字符序列</li>
<li>对源程序预处理</li>
<li>识别源程序中的单词，创建符号表并在相应的符号表中登录信息</li>
<li>把单词和行号关联，以便编译器将错误信息与源程序位置联系起来</li>
<li>输出单词序列</li>
<li>组织：<br />&emsp;作为独立的一遍：源程序完整文件转换为单词符号序列文件<br />&emsp;与语法分析器合在一起作为一遍：词法分析是语法分析的子程序，语法分析调用词法分析获得单词符号二元式</li>
</ol>
<h2 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h2><ol>
<li>单词：具有独立含义的最小语法单位</li>
<li>分类：标识符 (变量名)、关键字、常数、运算符、分界符、字符串</li>
<li>词法分析程序根据词类划分源码，输出二元式$&lt;类别,单词属性值&gt;$ (称为单词符号)。一类一码可以把类别省略，但本质还是二元组</li>
<li>模式：一个单词的可能形式，定义类别为某一个类的单词的形式</li>
<li>词素：源程序的一个字符序列，是单词符号的实例。单词属性值不一定是词素。比如源码中的变量名就是一个词素，但是在二元组中，单词属性值可能是$1$</li>
</ol>
<h2 id="正规表达式"><a href="#正规表达式" class="headerlink" title="正规表达式"></a>正规表达式</h2><ol>
<li>正规表达式是表示字符串格式的模式，可以用来描述单词的结构</li>
<li>正规集：正规式$(r)$所匹配的所有字符串的集合，实际上是一个正规语言，记为$L(r)$</li>
<li>正则表达式定义：<br />&emsp;$\epsilon$是正规式，其匹配语言是$L(\epsilon)=\{\epsilon\}$<br />&emsp;如果$a\in\Sigma$，则$a$是一个正规式，其匹配语言是$L(a)=\{a\}$<br />&emsp;如果$r$和$s$都是正规式，则有：<br />&emsp;&emsp;$(r)|(s)$也是正规式，表示语言$L(r)\displaystyle\cup L(s)$<br />&emsp;&emsp;$(r)(s)$也是正规式，表示语言$L(r)\cdot L(s)$<br />&emsp;&emsp;$(r)^*$也是正规式，表示语言$(L(r))^*$<br />&emsp;&emsp;$(r)$也是正规式，表示语言$L(r)$</li>
<li>运算符号优先级：$*=+&gt;\cdot&gt;|$</li>
<li>或运算具有交换律和结合律，连接运算具有结合律和对或运算的分配律</li>
<li>$\epsilon$是连接运算的单位元</li>
</ol>
<h1 id="有限状态自动机"><a href="#有限状态自动机" class="headerlink" title="有限状态自动机"></a>有限状态自动机</h1><ol>
<li>状态：区分事物的标识</li>
<li>有限状态自动机是离散状态系统</li>
<li>定义：具有离散输入与离散输出的一种数学模型，用于识别输入的符号串是否属于某个语言的合法句子</li>
<li>输入为符号串，输出为是或者否</li>
<li>分类<br />&emsp;确定性有限自动机 (DFA)：输入符号定，下一动作定<br />&emsp;非确定性有限自动机 (NFA)：输入符号定，下一动作不定</li>
<li>组成：字母表 (输入符号)、状态 (开始状态、接受或终结状态)、转移函数</li>
<li>开始状态用一个箭头空指向该状态，也可以再加一个“start”</li>
<li>接受状态，也称为终结状态，表示该串是可识别串，用两个圆圈表示</li>
<li>转移函数有两个参数，当前状态和输入符号。输出下一状态</li>
<li>从开始状态到终结状态之间的输入符号按顺序组成的串就是可识别的串</li>
</ol>
<h2 id="确定性有限自动机"><a href="#确定性有限自动机" class="headerlink" title="确定性有限自动机"></a>确定性有限自动机</h2><ol>
<li>DFS表示为一个五元组$M=(Q,\Sigma,q_0,F,\delta)$<br />&emsp;$Q$表示有限状态集<br />&emsp;$\Sigma$表示字符表<br />&emsp;$q_0$表示初始状态，只能有一个$q_0\in Q$<br />&emsp;$F$表示接受或终止状态集，可以有多个元素$F\subseteq Q$<br />&emsp;$\delta$表示转移函数，$Q\times\Sigma\to Q$</li>
<li>表示方法：状态转换图和状态转换表</li>
<li>状态转换表中开始状态加$\to$，终结状态加$*$</li>
</ol>
<h2 id="非确定性有限自动机"><a href="#非确定性有限自动机" class="headerlink" title="非确定性有限自动机"></a>非确定性有限自动机</h2><ol>
<li>NFA也是由五元组表示，但是转移函数的值域不同。</li>
<li>NFA的转移函数也是一个当前状态+一个输入符号的定义域，但是值域不是一个状态，而是状态的集合。所以对$\delta$有$Q\times(\Sigma\cup\{\epsilon\})\to 2^Q$</li>
<li>在非确定性有限自动机中，输入符号可以是$\epsilon$，表示两个状态识别的串是同一个串</li>
<li>NFA的不确定性体现在两个方面<br />&emsp;第一种情况是识别一个符号的时候有两条路径可走<br />&emsp;第二种是$\epsilon$边的存在，使得同一个子串可以由两个不同的状态</li>
<li>DFA是NFA的一个特例，但两种自动机识别语言的能力是一样的，即如果一个语言可以被DFA识别，则一定存在一个NFA可以识别该语言，反之亦然</li>
<li>正规表达式直接转化成DFA比较难，一般是先转化为NFA，再把NFA转化为DFA</li>
</ol>
<h2 id="NFA到DFA的转换"><a href="#NFA到DFA的转换" class="headerlink" title="NFA到DFA的转换"></a>NFA到DFA的转换</h2><ol>
<li>将NFA中一个状态输入同一个符号的所有下一状态作为DFA中的一个集合，以消除第一种不确定性</li>
<li>$\epsilon$闭包：$t$是一个状态，则$\epsilon-closure(t)$是从状态$t$只经过$\epsilon$转换可以到达的状态集；$T$是一个状态集，$\epsilon-closure(T)$是从$T$中任一状态只经过$\epsilon$边就可以达到的状态集<br />$t$本身以及$T$中的所有状态都属于他们的$\epsilon$闭包<br />利用$\epsilon$闭包可以消除第二种不确定性</li>
<li>定义$move(t,a)$表示从状态$t$经过$a$边能到达的状态集；$move(T,a)$表示从状态集$T$中的状态经非空的$a$转换可达到的状态集</li>
<li>子集构造法<br />&emsp;DFA的开始状态是$\epsilon-closure(s_0)$，这就是第一个稳定的状态<br />&emsp;其余状态由$\epsilon-closure(move(T,a))$生成<br />&emsp;DFA的终态是包含原来终态的状态</li>
<li>子集构造算法流程<br />&emsp;先获得开始状态$\epsilon-closure(s_0)$<br />&emsp;对每一个状态，先找到它在每一个输入下的稳定次态，即，枚举$\epsilon-colosure(move(T,a))$，对每一个可能的$a$<br />&emsp;每次找到一个新的状态，就加入DFA的状态集中，并在未来也对这个新状态进行枚举</li>
</ol>
<h2 id="从正规式到NFA的转换"><a href="#从正规式到NFA的转换" class="headerlink" title="从正规式到NFA的转换"></a>从正规式到NFA的转换</h2><ol>
<li>直接从正规式的定义出发来定义正规式对应的NFA</li>
<li>对$r=\epsilon$<br /><img src="/img/03.词法分析01.png" width="30%"></li>
<li>对$r=a$<br /><img src="/img/03.词法分析02.png" width="30%"></li>
<li>对$r=s|t$<br /><img src="/img/03.词法分析03.png" width="30%"></li>
<li>对$r=st$，$s$和$t$有一个公用节点，表示$s$的接受状态和$t$的开始状态<br /><img src="/img/03.词法分析04.png" width="30%"></li>
<li>对$r=(s)^*$<br /><img src="/img/03.词法分析05.png" width="30%"></li>
<li>$r=(s)$的NFA和$r=s$的一样</li>
<li>得到的NFA的性质<br />&emsp;$N(r)$的状态数最多是$r$中符号和算符总数的两倍<br />&emsp;$N(r)$只有一个开始状态和一个接受状态，接受状态没有向外的转换<br />&emsp;$N(r)$的每个状态有一个不是$\epsilon$边的指向其他状态的边，或者最多只有两条$\epsilon$边</li>
</ol>
<h2 id="DFA的化简"><a href="#DFA的化简" class="headerlink" title="DFA的化简"></a>DFA的化简</h2><ol>
<li>任何DFA或NFA都存在唯一一个最简DFA与之等价，且任何DFA或NFA都可以转换为该最简DFA</li>
<li>等价状态<br />&emsp;一致性：两个状态必须同为接受状态或非接受状态<br />&emsp;蔓延性：对所有输入符号，两个状态转移到等价状态</li>
<li>寻找等价状态：隐含表法 (求同法)<br />&emsp;横少尾，纵少头的阶梯表<br />&emsp;可以直接确定等价的打钩，直接确定不等价的画叉<br />&emsp;取决于次态的写上次态，第一轮比完后再一一比较次态，直至全部判断完毕<br />&emsp;如果遇到相互依赖，循环不定的情况，默认他们都等价</li>
<li>寻找等价状态：求异法<br />&emsp;先将状态划分为接受状态和非接受状态，再逐步划分精细化，最后得到不可在细分的划分<br />&emsp;考察每一个划分，要求其中的每一个元素在所有输入的情况下的次态组成的集合是该划分的子集<br />&emsp;如果有元素存在某一个输入对应的次态不是原划分的元素，就把该元素从原划分中剥离出去，直到没有元素应该被剥离</li>
<li>在找到了等价状态之后，重新命名各个等效状态集，并把转移函数的输入中的状态改为原输入状态所属的等效状态，把输出状态改为原输出状态所属的等效状态</li>
</ol>
<h2 id="有限自动机到正规文法"><a href="#有限自动机到正规文法" class="headerlink" title="有限自动机到正规文法"></a>有限自动机到正规文法</h2><ol>
<li>任意一个FA识别的语言都能用正规文法来生成</li>
<li>每一个状态代表一个非终结符号</li>
<li>如果状态$i$是一个接受状态，则设规则$A_i\to\epsilon$</li>
<li>如果状态$i$是一个开始状态，则$A_i$是开始符号</li>
<li>其他情况，如下图，则设规则$A_i\to aA_j$<br /><img src="/img/03.词法分析06.png" width="30%"></li>
</ol>
<h1 id="词法分析器的自动构造"><a href="#词法分析器的自动构造" class="headerlink" title="词法分析器的自动构造"></a>词法分析器的自动构造</h1><ol>
<li>先用正规式表示出单词的结构，再由正规式生成NFA，最后再化简得到最简DFA</li>
<li>给每个正规式构造相应的NFA，将所有的NFA用或运算并联起来</li>
<li>当存在多个匹配的时候，可以选择最长匹配，或规定优先顺序</li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>编译原理 (HDU / Stanford)</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>03. Multiplication and Inverse Matrices</title>
    <url>/2019/10/29/03-Multiplication-and-Inverse-Matrices/</url>
    <content><![CDATA[<h1 id="Multiplication"><a href="#Multiplication" class="headerlink" title="Multiplication"></a>Multiplication</h1><ol>
<li>$A_{m\times n}B_{n\times p}=C_{m\times p}$</li>
<li>Dot Product: <script type="math/tex">(AB)_{ij} = (row \ i \ of \ A) \cdot (column \ j \ of \ B) = \displaystyle \sum^{n}_{k=1}A_{ik}B_{kj}</script></li>
<li>Matrix multiplies columns: $AB=\left[\begin{matrix}Ab_1&amp;Ab_2&amp;…&amp;Ab_n\end{matrix}\right]$<br />It can also be seen as matrix $A$ times every column of $B$. So columns of $C$ are combinations of columns of $A$. </li>
<li>Rows multiply matrix: <script type="math/tex">AB=\left[\begin{matrix}a_1B\\a_2B\\…\\a_nB\end{matrix}\right]</script><br />And naturally, it can be seen as rows of $A$ times matrix $B$. So rows of $C$ are combinations of rows of $B$.  </li>
<li>Sum of matrices: <script type="math/tex">AB = \displaystyle \sum^{n}_{k = 1}(column \ k \ of \ A) \cdot (row \ k \ of \ B)</script> <br />It can also be columns times rows. The sum of each column of $A$ times corresponding rows of $B$. </li>
<li>Multiplication can also be done by blocks. </li>
<li>In matrices multiplication, <br />&emsp;Associative law is valid: <script type="math/tex">A(BC)=(AB)C</script><br />&emsp;Distributive law is correct: <script type="math/tex">A(B+C)=AB+AC\ \ (A+B)C=AC+BC</script>   <br />&emsp;Commutative law is false: <script type="math/tex">AB≠BA</script></li>
<li>The complexity of matrix multiplication is <script type="math/tex">O(nmp)</script>. The result is an <script type="math/tex">n\times p</script> matrix and to get each entry, we need <script type="math/tex">m</script> multiplications and add them together. </li>
<li>Matrices have exponents too. <script type="math/tex">A^p=AAA…A\ (p\ factors)</script></li>
<li>$(A^p)(A^q)=A^{p+q}$<br /><script type="math/tex">(A^p)^q=A^{pq}</script><br /><script type="math/tex">A^0=I</script><br /><script type="math/tex">A^{-p}=(A^{-1})^p\ \ \ (p > 0)</script></li>
<li>Matrices can be cut into blocks (smaller matrices). When addition or multiplication (both with scalar or another matrix) happen, the blocks act as numbers. </li>
<li>Block elimination: <script type="math/tex">\left[\begin{matrix}I & 0 \\ -CA^{-1} & I\end{matrix}\right] \left[\begin{matrix}A&B\\C&D\end{matrix}\right]=\left[\begin{matrix}A&B\\0&D-CA^{-1}B\end{matrix}\right]</script><br /><script type="math/tex">D-CA^{-1}B</script> is called <code>Schur complement</code>. </li>
<li>For square matrices, we can do better by breaking <script type="math/tex">n</script> by <script type="math/tex">n</script> matrices into $2$ by $2$ blocks. Instead of <script type="math/tex">O(n^3)</script>, this complexity is <script type="math/tex">O(n^{2.376})</script></li>
</ol>
<h1 id="Inverses"><a href="#Inverses" class="headerlink" title="Inverses"></a>Inverses</h1><h2 id="Does-It-Have-Inverse"><a href="#Does-It-Have-Inverse" class="headerlink" title="Does It Have Inverse"></a>Does It Have Inverse</h2><ol>
<li>Define the <code>inverse</code> of $A$ is <script type="math/tex">AA^{-1}=A^{-1}A = I</script>. Here <script type="math/tex">A^{-1}</script>is the inverse of $A$. </li>
<li>Only square matrices have inverses. </li>
<li>Those with inverses are called invertible while the ones without inverses are called singular. </li>
<li>A matrix is invertible <strong>if and only if</strong><br />&emsp;elimination produces $n$ pivots<br />&emsp;the only solution to <script type="math/tex">A\vec{x}=\vec{b}</script> is <script type="math/tex">\vec{x}=A^{-1}\vec{b}</script><br />&emsp;<script type="math/tex">A\vec{x}=\vec{0}</script> can only have the zero solution <script type="math/tex">\vec{x}=\vec{0}</script><br />&emsp;the determinant of <script type="math/tex">A</script> is not zero, because we need to divide it</li>
<li>A $2$ by $2$ matrix is invertible if and only if <script type="math/tex">ad-bc</script> is not zero. <br /><script type="math/tex">\left[\begin{matrix}a&b\\c&d\end{matrix}\right]^{-1}=\displaystyle\frac{1}{ad-bc}\left[\begin{matrix}d&-b\\-c&a\end{matrix}\right]</script></li>
<li>A diagonal matrix has an inverse if and only if  no diagonal entries are zero. <br /><script type="math/tex">\left[\begin{matrix}d_1\\&d_2\\&&\ddots\\&&&d_n\end{matrix}\right]^{-1}=\left[\begin{matrix}\frac{1}{d_1}\\&\frac{1}{d_2}\\&&\ddots\\&&&\frac{1}{d_n}\end{matrix}\right]</script><br />Furthermore, a triangular matrix is invertible if and only if no diagonal entries are zero. </li>
<li><script type="math/tex">AB</script> is invertible if and only if <script type="math/tex">A</script> and <script type="math/tex">B</script> are separately invertible and have the same size. </li>
<li>Diagonally dominant matrices are invertible. Each $a_{ii}$ on the diagonal is larger than the total sum along the rest of row $i$. On every row, $|a_{ii}|&gt;\displaystyle\sum_{j≠i}|a_{ij}|$. </li>
</ol>
<h2 id="What-Is-The-Inverse"><a href="#What-Is-The-Inverse" class="headerlink" title="What Is The Inverse"></a>What Is The Inverse</h2><ol>
<li>To get the inverse, we need to solve the system of <script type="math/tex">AE = I</script>. <script type="math/tex">E</script> is completely unknown. So we can use the Gauss elimination to solve all entries of $E$ at the same time, which makes us solve <script type="math/tex">\left[\begin{matrix}A&I\end{matrix}\right]</script> as a “super” augmented matrix. </li>
<li>In the end, we can eliminate to get <script type="math/tex">\left[\begin{matrix}I&E\end{matrix}\right]</script>. As is known to all that only <script type="math/tex">A^{-1} \left[\begin{matrix}A&I\end{matrix}\right] = \left[\begin{matrix}I&A^{-1}\end{matrix}\right]</script>, so we can know that $E$ is the inverse. </li>
<li>This is the <code>Gauss-Jordan</code> way. </li>
<li>$(AB)^{-1}=B^{-1}A^{-1}$. <br />$(AB)(B^{-1}A^{-1})=A(BB^{-1})A^{-1}=AIA^{-1}=AA^{-1}=I$</li>
<li>For square matrices, an inverse on one side is automatically the inverse on the other side. </li>
<li>Because inverse undoes whatever the original matrix does, for elimination matrices, the entry of <script type="math/tex">(i,\ j)</script> in the inverse matrix is <script type="math/tex">l</script> while in the original matrix <script type="math/tex">-l</script></li>
<li>If the original matrix is symmetric, so is its inverse. </li>
<li>The inverse of a band matrix is generally a dense matrix. </li>
<li>If <script type="math/tex">A</script> is invertible and upper triangular, so is <script type="math/tex">A^{-1}</script>. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>线性代数 (MIT 18.06)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>04. Differentials and Gradient</title>
    <url>/2020/02/25/04-Differentials-and-Gradient/</url>
    <content><![CDATA[<h1 id="Differential"><a href="#Differential" class="headerlink" title="Differential"></a>Differential</h1><ol>
<li>For <script type="math/tex">f(x, y, z)</script>, <script type="math/tex">df=f_xdx+f_ydy+f_zdz</script>. </li>
<li><script type="math/tex">df</script> is not <script type="math/tex">\Delta f</script>. </li>
<li>It encodes how changes in <script type="math/tex">x,y,z</script> affect <script type="math/tex">f</script>. </li>
<li>It’s a placeholder for smal variations <script type="math/tex">\Delta x,\Delta y, \Delta z</script> to get approximation formula <script type="math/tex">\Delta f\approx f_x\Delta x+f_y\Delta y+f_z\Delta z</script>. </li>
<li><code>Chain rule</code>: When <script type="math/tex">x=x(t),y=y(t),z=z(t)</script>, it can be divided by something like <script type="math/tex">dt</script> to get a rate of change. <br /><script type="math/tex">\displaystyle\frac{df}{dt}=f_x\frac{dx}{dt}+f_y\frac{dy}{dt}+f_z\frac{dz}{dt}</script></li>
<li><script type="math/tex; mode=display">d(uv)=f_udu+f_vdv=vdu+udv$$ and $$\displaystyle\frac{d(uv)}{dt}=v\frac{du}{dt}+u\frac{dv}{dt}</script></li>
<li><script type="math/tex; mode=display">\displaystyle d(\frac{u}{v})=f_udu+f_vdc=\frac{1}{v}du+\frac{-u}{v^2}dv$$ and $$\displaystyle\frac{d(\frac{u}{v})}{dt}=\frac{1}{v}\frac{du}{dt}+\frac{-u}{v^2}\frac{dv}{dt}</script></li>
<li><code>Chain rule with more variables</code>: <script type="math/tex">f=f(x,y),x=x(u,v),y=y(u,v)</script><br /><script type="math/tex">\begin{equation}\begin{split}df&=f_xdx+f_ydy\\&=f_x(x_udu+x_vdv)+f_y(y_udu+y_vdv)\\&=(f_xx_u+f_yy_u)du+(f_xx_v+f_yy_u)dv\\&=f_udu+f_vdv\end{split}\end{equation}</script><br />Here we also knows <script type="math/tex">\displaystyle\frac{\partial f}{\partial u}=\frac{\partial f}{\partial x}\frac{\partial x}{\partial u}+\frac{\partial f}{\partial y}\frac{\partial y}{\partial u}</script></li>
</ol>
<h1 id="Gradient"><a href="#Gradient" class="headerlink" title="Gradient"></a>Gradient</h1><ol>
<li>The differential of <script type="math/tex">w=w(x,y,z)</script> and <script type="math/tex">x=x(t),y=y(t),z=z(t)</script> is <script type="math/tex">\displaystyle\frac{dw}{dt}=f_x\frac{dx}{dt}+f_y\frac{dy}{dt}+f_z\frac{dz}{dt}</script>. We define <script type="math/tex">\displaystyle\frac{dw}{dt}=\triangledown w\cdot\frac{d\vec{r}}{dt}</script>. </li>
<li>So <script type="math/tex">\triangledown w=<f_x,f_y,f_z></script> and <script type="math/tex">\displaystyle\frac{d\vec{r}}{dt}=<\frac{dx}{dt},\frac{dy}{dt},\frac{dz}{dt}></script>. </li>
<li><script type="math/tex">\triangledown w</script> is perpendicular to level surface <script type="math/tex">w=c</script> and points towards higher values of <script type="math/tex">w</script>. <br />Take a curve <script type="math/tex">\vec{r}=\vec{r}(t)</script> that stays on the level <script type="math/tex">w=c</script>, so the velocity along that direction is <script type="math/tex">\vec{v}=\displaystyle\frac{d\vec{r}}{dt}</script> which is tangent to the level. <br />By the chain rule, <script type="math/tex">\displaystyle\frac{dw}{dt}=\triangledown w\cdot \frac{d\vec{r}}{dt}=\triangledown w\cdot\vec{v}=0</script>, since <script type="math/tex">w=c</script> is a constant. So <script type="math/tex">\triangledown w\perp\vec{v}</script> <br />Further more, <script type="math/tex">\triangledown w</script> is perpendicular to any vector tangent to level <script type="math/tex">w=c</script>. <br />This is an important way to find the tangent plane of a level surface, since <script type="math/tex">\triangledown w</script> is the normal vector of that plane. </li>
<li>The partial derivatives can tells us how <script type="math/tex">w</script> changes when we move along the axises. If we want to know the answer when we move in direction of unit vector <script type="math/tex">\vec{u}</script>, we need the directional derivatives. </li>
<li>The directional derivative of <script type="math/tex">w</script> at the direction of <script type="math/tex">\vec{u}</script> at point <script type="math/tex">(x,y)</script> is the slope of graph by a vertical plane parallel to <script type="math/tex">\vec{u}</script>. </li>
<li>This represent the changing rate of <script type="math/tex">w</script> at different direction. </li>
<li><script type="math/tex">\displaystyle\frac{dw}{ds}\Big|_{\vec{u}}=\triangledown w\frac{d\vec{r}}{ds}=\triangledown w\cdot \vec{u}</script>. This is the component of <script type="math/tex">\triangledown w</script> in direction of <script type="math/tex">\vec{u}</script>. <script type="math/tex">s</script> is the distance we move along <script type="math/tex">\vec{u}</script>. Since the velocity is <script type="math/tex">1</script>, this is <script type="math/tex">t</script>. </li>
<li><script type="math/tex">\displaystyle\frac{dw}{ds}\Big|_{\vec{u}}=|\triangledown w||\vec{u}|cos\ \theta=|\triangledown w|cos\ \theta</script>. <script type="math/tex">\theta</script> is the angle between <script type="math/tex">\vec{u}</script> and <script type="math/tex">\triangledown w</script><br />When <script type="math/tex">\theta</script> is <script type="math/tex">0</script>, <script type="math/tex">\displaystyle\frac{dw}{ds}\Big|_{\vec{u}}=|\triangledown w|</script>, this is the fastest increase of <script type="math/tex">w</script>. <br />When <script type="math/tex">\theta = \pi</script>, <script type="math/tex">\displaystyle\frac{dw}{ds}\Big|_{\vec{u}}=-|\triangledown w|</script>, this is the fastest decrease of <script type="math/tex">w</script>. <br />When <script type="math/tex">\theta=\displaystyle\frac{\pi}{2}</script>, <script type="math/tex">\displaystyle\frac{dw}{ds}\Big|_{\vec{u}}=0</script>, <script type="math/tex">\vec{u}</script> is tangen to the level curve and this is where <script type="math/tex">w</script> doesn’t change. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>多变量微积分 (MIT 18.02)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>04. Convolutional Neural Networks</title>
    <url>/2020/04/05/04-Convolutional-Neural-Networks/</url>
    <content><![CDATA[<h1 id="Convolution-Layer"><a href="#Convolution-Layer" class="headerlink" title="Convolution Layer"></a>Convolution Layer</h1><ol>
<li>Fully-connected layer extracts pixels of an image into a one-dimensional vector. However, the convolution layer tends to preserve the spatial structure of that image. </li>
<li>In the convolution layer, we convolve a smaller filter with the image; namely, we slide it over the image spatially, computing dot products. </li>
<li>The size of the matrix of an image is usually $N\times N\times z$. The filter we choose can have random $F$, but the $z$ must be maintained. So the filter can be anything in the form of $F\times F\times z$. </li>
<li>Every filter is a weighted matrix. We use it to cover up some location of the image, then calculate the sum of the products of the corresponding numbers. <br />This process is the same as we stretch the filter and the covered area into two one-dimensional vectors and calculate the dot product of these two vectors. </li>
<li>After each dot product, we get a number $w^Tx+b$ instead of a vector. So each filter can produce an $F’\times F’\times1$ activation map. Furthermore, we can use multiple filters to create multiple activation maps. With $k$ filters, the activation matrix will be $F’\times F’\times k$. </li>
<li>The earlier convolution layers will learn lower-level features while the later ones will learn higher-level features. </li>
<li>One thing that will affect the size of the activation map is the stride we choose when the filter is slid around the image. If the stride is $S$, the size will be $\displaystyle(\frac{N-F}{S}+1)\times(\frac{N-F}{S}+1)\times n$. <br />Stride can be any integer as long as $N-F$ is dividable by it. </li>
<li>Another common phenomenon is padding. When we say “zero pad with $P$”, we mean that add $a$ laps zero bounds around the original matrix. <br />So the actual size of a matrix which pad with $P$ we need to slide is $(N+2P)\times (N+2P)\times z$. <br />The padding is used to maintain the input size. So in convolution layer, we often pad the image with $\displaystyle\frac{F-1}{2}$ laps of zero pixel border. Nevertheless, the pad is not necessary; sometimes we do not use padding; sometimes we pad less, sometimes we pad more. </li>
</ol>
<h1 id="Other-layers"><a href="#Other-layers" class="headerlink" title="Other layers"></a>Other layers</h1><ol>
<li>Pooling layer makes the representations smaller and more manageable. It operates over each activation map independently and downsamples them. </li>
<li>The pooling layer also has a filter, but instead of doing a dot product, it may take the maximum of the numbers (Max Pooling Layer). </li>
<li>In convention, we do not want any overlap in pooling layer, unlike in the convolution layer. </li>
<li>Typically, the last layer of a convolution neural network will be a fully-connected layer, which connects the class labels to the input. </li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>计算机视觉 (Stanford CS231n)</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>深度学习</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>04. How to talk about doctors</title>
    <url>/2020/08/11/04-How-to-talk-about-doctors/</url>
    <content><![CDATA[<style>
table th:first-of-type {
    width: 150px;
}
</style>

<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">internist</td>
</tr>
<tr>
<td style="text-align:center">gyncologist</td>
</tr>
<tr>
<td style="text-align:center">obstetrician</td>
</tr>
<tr>
<td style="text-align:center">pediatrician</td>
</tr>
<tr>
<td style="text-align:center">dermatologist</td>
</tr>
<tr>
<td style="text-align:center">ophthalmologist</td>
</tr>
<tr>
<td style="text-align:center">orthopedist</td>
</tr>
<tr>
<td style="text-align:center">cardiologist</td>
</tr>
<tr>
<td style="text-align:center">neurologist</td>
</tr>
<tr>
<td style="text-align:center">psychiatrist</td>
</tr>
</tbody>
</table>
</div>
<h1 id="Latin-internus-inside"><a href="#Latin-internus-inside" class="headerlink" title="Latin internus: inside"></a>Latin internus: inside</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">intern·al</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">intern·ist</td>
<td style="text-align:center"><strong><em>a specialist in internal medicine, in the exploration of your insides</em></strong></td>
</tr>
<tr>
<td style="text-align:center">intern<br />interne</td>
<td style="text-align:center"><strong><em>a medical graduate serving an apprenticeship inside a hospital</em></strong></td>
</tr>
</tbody>
</table>
</div>
<h1 id="logos-science"><a href="#logos-science" class="headerlink" title="logos: science"></a>logos: science</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">gyne·cologist</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gyne·cological</td>
<td style="text-align:center">&emsp;</td>
</tr>
</tbody>
</table>
</div>
<h1 id="Latin-obstetrix-midwife"><a href="#Latin-obstetrix-midwife" class="headerlink" title="Latin obstetrix: midwife"></a>Latin obstetrix: midwife</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">obstetr·ician</td>
<td style="text-align:center"><code>-ician: expert</code></td>
</tr>
<tr>
<td style="text-align:center">obstetr·ics</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">obstetr·ic<br />obstetr·ical</td>
<td style="text-align:center">&emsp;</td>
</tr>
</tbody>
</table>
</div>
<h1 id="Greek-paidos-child"><a href="#Greek-paidos-child" class="headerlink" title="Greek paidos: child"></a>Greek paidos: child</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ped·iatr·ician</td>
<td style="text-align:center"><code>iatreia: medical healing</code></td>
</tr>
<tr>
<td style="text-align:center">ped·iatr·ics</td>
<td style="text-align:center"><strong><em>the medical healing of a child</em></strong></td>
</tr>
<tr>
<td style="text-align:center">ped·iatr·ic</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">geriatrics</td>
<td style="text-align:center"><strong><em>the particular medical needs of the elderly</em></strong><br /><code>Greek geras: old age</code></td>
</tr>
<tr>
<td style="text-align:center">ped·estal</td>
<td style="text-align:center"><code>Latin pedis: foot</code></td>
</tr>
<tr>
<td style="text-align:center">ped·al</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ped·estr·ian</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ped·agogy</td>
<td style="text-align:center"><code>agogos: leading</code><br />the leading of children to learn<br /><strong><em>the principles and methods of teaching</em></strong></td>
</tr>
<tr>
<td style="text-align:center">ped·agog·ical</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ped·agogue</td>
<td style="text-align:center">versed in pedagogy<br /><strong><em>Originally, it is the neutral meaning of teacher</em></strong><br /><strong><em>Now, it has deteriorated to the point whiere it refers to a narrow-minded, strait-laced, old-fashion, dogmatic teacher.</em></strong> <br />It’s a word of contempt and should be used with caution.</td>
</tr>
<tr>
<td style="text-align:center">dem·agogue</td>
<td style="text-align:center"><code>demos: people</code><br /><strong><em>Originally, it means a learder of the people</em></strong><br /><strong><em>Today, it’s one who attempts, in essence, to mislead the people, a politician who foments discontent among the masses, rousing them to fever pitch by wild oratory, in an attempt to be voted into office. </em></strong></td>
</tr>
<tr>
<td style="text-align:center">dem·agogue·ry</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">dem·agog·ic</td>
<td style="text-align:center">&emsp;</td>
</tr>
</tbody>
</table>
</div>
<h1 id="Greek-derma-skin"><a href="#Greek-derma-skin" class="headerlink" title="Greek derma: skin"></a>Greek derma: skin</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">dermato·log·ist</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">dermato·log·y</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">dermato·log·ical</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">hypo·derm·ic</td>
<td style="text-align:center"><code>Greek, hypos: under</code><br /><strong><em>needle penetrates under the skin</em></strong></td>
</tr>
<tr>
<td style="text-align:center">epi·derm·is</td>
<td style="text-align:center"><strong><em>the outermost layer of skin</em></strong></td>
</tr>
<tr>
<td style="text-align:center">taxi·derm·y</td>
<td style="text-align:center"><strong><em>prepares, stuffs, and mounts the skins of animals</em></strong></td>
</tr>
<tr>
<td style="text-align:center">taxi·derm·ist</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">pachy·derm</td>
<td style="text-align:center"><strong><em>an animal with an unusually thick skin, like an elephant, hippopotamus or rhinoceros</em></strong></td>
</tr>
<tr>
<td style="text-align:center">derma·titis</td>
<td style="text-align:center"><strong><em>the general name for any skin inflammation, irritation, or infection</em></strong></td>
</tr>
</tbody>
</table>
</div>
<h1 id="Greek-ophthalms-eye"><a href="#Greek-ophthalms-eye" class="headerlink" title="Greek ophthalms: eye"></a>Greek ophthalms: eye</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ophthalm·olog·ist</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ophthalm·olog·y</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ophthalm·olog·ical</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ocul·ist</td>
<td style="text-align:center"><code>Latin oculus: eye</code><br /><strong><em>earlier title for ophthalmologist</em></strong></td>
</tr>
<tr>
<td style="text-align:center">ocul·ar</td>
<td style="text-align:center"><strong><em>an adjective that refers to the eye</em></strong></td>
</tr>
<tr>
<td style="text-align:center">mon·ocle</td>
<td style="text-align:center"><strong><em>a lens for one eye, symbol of the British so-called upper class</em></strong></td>
</tr>
<tr>
<td style="text-align:center">bi·n·ocular·s</td>
<td style="text-align:center"><strong><em>field glasses that increase the range to two eyes</em></strong></td>
</tr>
<tr>
<td style="text-align:center">in·ocul·ate</td>
<td style="text-align:center"><strong><em>an “eye”, puncture, or hole is made in skin, through which serum is injected to against a disease</em></strong></td>
</tr>
<tr>
<td style="text-align:center">opto·metr·ist</td>
<td style="text-align:center"><code>Greek opsis, optikos: sight or vision</code><br /><code>metron: measurement</code><br /><strong><em>one who measures vision, tests for glaucoma, and prescribes and fits glasses</em></strong></td>
</tr>
<tr>
<td style="text-align:center">opto·metr·y</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">opto·metr·ic<br />opto·metr·ical</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">opt·ician</td>
<td style="text-align:center"><strong><em>one who fills an optometrist’s or ophthalmologist’s prescription, grinding lenses according to specifications. Doesn’t examine patients. </em></strong></td>
</tr>
<tr>
<td style="text-align:center">opt·ics</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">opt·ical</td>
</tr>
</tbody>
</table>
</div>
<h1 id="Greek-orthos-straight-or-correct"><a href="#Greek-orthos-straight-or-correct" class="headerlink" title="Greek orthos: straight or correct"></a>Greek orthos: straight or correct</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ortho·ped·ist</td>
<td style="text-align:center">straightens children<br />At that time, the correction of spinal curvature in children was a main concern of practitioners of orthopedics</td>
</tr>
<tr>
<td style="text-align:center">ortho·ped·ics</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ortho·ped·ic</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ortho·dont·ia</td>
<td style="text-align:center"><strong><em>the straightening of teeth</em></strong><br /><code>odontos: tooth</code></td>
</tr>
<tr>
<td style="text-align:center">ortho·dont·ic</td>
<td style="text-align:center">&emsp;</td>
</tr>
</tbody>
</table>
</div>
<h1 id="Greek-kardia-heart"><a href="#Greek-kardia-heart" class="headerlink" title="Greek kardia: heart"></a>Greek kardia: heart</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">cardio·log·ist</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">cardio·log·y</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">cardio·log·ical</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">cardiac</td>
<td style="text-align:center"><strong><em>some malfunctioning of the heart</em></strong></td>
</tr>
<tr>
<td style="text-align:center">cardio·gram</td>
<td style="text-align:center"><strong><em>an electrically produced record of the heartbeat</em></strong></td>
</tr>
<tr>
<td style="text-align:center">cardio·graph</td>
<td style="text-align:center"><strong><em>the instrument that produces cardiogram</em></strong></td>
</tr>
</tbody>
</table>
</div>
<h1 id="Greek-neuron-nerve"><a href="#Greek-neuron-nerve" class="headerlink" title="Greek neuron: nerve"></a>Greek neuron: nerve</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">neuro·log·ist</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">neuro·log·y</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">neuro·log·ical</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">neur·algia</td>
<td style="text-align:center"><strong><em>acute pain along the nerves and their branches</em></strong><br /><code>algos: pain</code></td>
</tr>
<tr>
<td style="text-align:center">neuritis</td>
<td style="text-align:center"><strong><em>the inflammation of the nerves</em></strong></td>
</tr>
<tr>
<td style="text-align:center">neur·osis</td>
<td style="text-align:center"><code>-osis: a suffix meaning abnormal or diseased condition</code><br /><strong><em>a relatively mild mental illness that is not caused by organic disease, involving symptoms of stress (depression, anxiety, obsessive behaviour, hypochondria) but not a radical loss of touch with reality. </em></strong></td>
</tr>
<tr>
<td style="text-align:center">neurotic</td>
<td style="text-align:center"><strong><em>both the adjective form and the term for a person suffering from neurosis</em></strong></td>
</tr>
</tbody>
</table>
</div>
<h1 id="Greek-psyche-spirit-soul-or-mind"><a href="#Greek-psyche-spirit-soul-or-mind" class="headerlink" title="Greek psyche: spirit, soul, or mind"></a>Greek psyche: spirit, soul, or mind</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">psych·osis</td>
<td style="text-align:center"><strong><em>a full-blown mental disorder</em></strong><br />a true psychotic has lost contact with reality<br />both a noun and an adjective</td>
</tr>
<tr>
<td style="text-align:center">psych·iatr·ist</td>
<td style="text-align:center"><strong><em>mind-healer</em></strong></td>
</tr>
<tr>
<td style="text-align:center">psych·iatr·y</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">psych·iatr·ic</td>
<td style="text-align:center">&emsp;</td>
</tr>
</tbody>
</table>
</div>
<h1 id="Amateur-Etymologist"><a href="#Amateur-Etymologist" class="headerlink" title="Amateur Etymologist"></a>Amateur Etymologist</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">pedodontia</td>
<td style="text-align:center"><strong><em>the specialty of child dentistry</em></strong></td>
</tr>
<tr>
<td style="text-align:center">pedodontist</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">pedodontic</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">cardialgia</td>
<td style="text-align:center"><strong><em>heart pain</em></strong></td>
</tr>
<tr>
<td style="text-align:center">odontalgia</td>
<td style="text-align:center"><strong><em>toothache</em></strong></td>
</tr>
<tr>
<td style="text-align:center">nostalgia</td>
<td style="text-align:center"><code>Greek nostos: Home</code><br /><strong><em>homesickness</em></strong></td>
</tr>
<tr>
<td style="text-align:center">nostalgic</td>
<td style="text-align:center">&emsp;</td>
</tr>
</tbody>
</table>
</div>
<h1 id="Intermission"><a href="#Intermission" class="headerlink" title="Intermission"></a>Intermission</h1><ol>
<li><em>Get</em> has two meanings — namely, obtain and become</li>
<li><em>Have got</em> can be a substitute for <em>have</em></li>
<li><em>Lay</em> means to place, as in “Lay your hand on mine”. <em>Lie</em> means recline</li>
<li>When “neither of” means “neither one of”, “is” is the preferable verb, instead of “are”</li>
<li>A picture is <em>hung</em>, but a person is <em>hanged</em></li>
<li>The plurals of <em>spoonful</em> and <em>cupful</em> are <em>spoonfuls</em> and <em>cupfuls</em>. You prefer to take in one spoon and filling it more times, instead of using two separate spoons. </li>
<li>Male graduates are <em>alumni</em> while women graduates are <em>alumnae</em></li>
</ol>
]]></content>
      <categories>
        <category>英语</category>
        <category>Word Power Made Easy</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>单词</tag>
      </tags>
  </entry>
  <entry>
    <title>04. Factorization into A = LU</title>
    <url>/2020/01/14/04-Factorization-into-A-LU/</url>
    <content><![CDATA[<h1 id="Factorization"><a href="#Factorization" class="headerlink" title="Factorization"></a>Factorization</h1><ol>
<li>According to Gauss Elimination, we can know that <script type="math/tex">E_{nn-1}…E_{ij}…E_{21}A = U</script>. We denote this equation as <script type="math/tex">L'A = U</script></li>
<li>So it is natural that <script type="math/tex">A = E_{21}^{-1}…E_{ij}^{-1}…E_{nn-1}^{-1}U</script></li>
<li>We denote <script type="math/tex">E_{21}^{-1}…E_{ij}^{-1}…E_{nn-1}^{-1}</script> as <script type="math/tex">L</script>, which makes <script type="math/tex">A = LU</script></li>
<li>Every time a multiplier multiplies a row with a pivot. What is changed is the rows below it. Whatever is above that row (including that row) remains unchanged. So the multipliers in the elimination work on $U$, instead of $A$. </li>
<li>What happens to $A$ is a lot more complicated than $U$. That means <script type="math/tex">L'</script> is a lot more complicated than <script type="math/tex">L</script>. </li>
<li>When the matrix multiplication messed up all numbers in <script type="math/tex">L'</script>, while, amazingly, all entries of <script type="math/tex">L</script> is precisely the multiplier. Each multiplier goes directly into its <script type="math/tex">(i,\ j)</script> position in <script type="math/tex">L</script>. </li>
<li>We can even take a further step to divide each row of <script type="math/tex">U</script> by their pivots to extract the pivots in another matrix <script type="math/tex">D</script>. All pivots in $D$ are in their old place in <script type="math/tex">U</script>. This makes the equation <script type="math/tex">A = LDU</script>. Furthermore, both <script type="math/tex">L</script> and <script type="math/tex">U</script> have $1$s in diagonal. </li>
<li>Now we can solve the equation in two steps: <script type="math/tex">L\vec{c}=\vec{b}</script> and <script type="math/tex">U\vec{x}=\vec{c}</script></li>
</ol>
<h1 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h1><ol>
<li>To factorize <script type="math/tex">A</script> into <script type="math/tex">LU</script>, how many operations we have to take? The answer is the number of operations we have to take to eliminate. </li>
<li>To get the first pivot, we have to eliminate the first column. This stage needs to eliminate <script type="math/tex">n-1</script> elements. Each element needs <script type="math/tex">n</script> subtractions and <script type="math/tex">n</script> multiplications-totally <script type="math/tex">2n(n - 1) = 2n^2 - 2n = O(n^2)</script> operations. </li>
<li>To get <script type="math/tex">U</script>, we have to eliminate each column as the first column while the size of each column is $1$ less than the former one. So totally about <script type="math/tex">n^2 + (n-1)^2 +…+1^2 = \frac{1}{3}n(n-\frac{1}{2})(n-1) = O(n^3)</script></li>
<li>For the right side, when eliminating the first row, it needs <script type="math/tex">n-1</script> multiplications and <script type="math/tex">n-1</script> subtractions. So totally <script type="math/tex">2(n-1)+2(n-2)+…+2=O(n^2)</script></li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>线性代数 (MIT 18.06)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>04. Implicit differentiation, inverses</title>
    <url>/2020/02/10/04-Implicit-differentiation-inverses/</url>
    <content><![CDATA[<h1 id="Implicit-Differentiation"><a href="#Implicit-Differentiation" class="headerlink" title="Implicit Differentiation"></a>Implicit Differentiation</h1><ol>
<li>An implicit function is a function that <script type="math/tex">y</script> cannot be expressed by <script type="math/tex">x</script> explicitly. </li>
<li>The way to find its defferentiation is to defferentiate both side of the equation at the same time. Inevitably, we need to solve <script type="math/tex">\displaystyle\frac{d}{dx}g(x)</script>, with the chain rule, this is <script type="math/tex">\displaystyle\frac{d}{dy}g(x)\frac{dy}{dx}</script>. And <script type="math/tex">\displaystyle\frac{dy}{dx}</script> is our target. </li>
<li>The defferentiation of <script type="math/tex">y=x^{\frac{a}{b}}</script><br />This equals to the defferentiation of <script type="math/tex">y^b=x^a</script>. <br />This is an implicit equation. <br /><script type="math/tex">\begin{equation}\begin{split}\displaystyle\frac{d}{dx}y^b&=\frac{d}{dx}x^a\\\frac{d}{dy}y^b\frac{dy}{dx}&=ax^{a-1}\\by^{b-1}\frac{dy}{dx}&=ax^{a-1}\\\frac{dy}{dx}&=\frac{a}{b}\frac{x^{a-1}}{y^{b-1}}\\&=\frac{a}{b}\frac{x^{a-1}}{x^{\frac{a}{b}(b-a)}}\\&=\frac{a}{b}x^{\frac{a}{b}-1} \end{split}\end{equation}</script><br />Assign <script type="math/tex">\displaystyle\frac{a}{b}=n</script>, <script type="math/tex">\displaystyle\frac{d}{dx}x^n=nx^{n-1}\ \ (n\in R)</script></li>
</ol>
<h1 id="Inverse"><a href="#Inverse" class="headerlink" title="Inverse"></a>Inverse</h1><ol>
<li>Inverse function: for <script type="math/tex">y=f(x)</script>, <script type="math/tex">g(y)=x</script> is the inverse of <script type="math/tex">f</script>, denoted as <script type="math/tex">f^{-1}</script>. For all inverse function, <script type="math/tex">g(f(x))=x</script>. </li>
<li>The inverse function is always symmetric to the origin function and the mirror line is <script type="math/tex">y=x</script>. </li>
<li>Implicit defferentiation allows us to find the derivative of any inverse function provided we know the derivative of function. </li>
<li>We can restore the given equation <script type="math/tex">y=f^{-1}(x)</script> to the origin function <script type="math/tex">f(y)=x</script> and then defferentiate. </li>
<li>To calculate the defferentiation of <script type="math/tex">y=sin^{-1}\ x</script>, we just calculate the  derivative of <script type="math/tex">sin\ y=x</script>. <br />Use the implicit differentiation to get <script type="math/tex">y'cos\ y=1</script>. So <script type="math/tex">y'=\displaystyle\frac{1}{cos\ y}=\frac{1}{\sqrt{1-sin^2y}}=\frac{1}{\sqrt{1-x^2}}</script>. </li>
<li><script type="math/tex">y=tan^{-1}x</script>. <br />Take the original equation: <script type="math/tex">tan\ y=x</script><br />Differentiate both side of equation: <script type="math/tex">\displaystyle\frac{d}{dx}tan\ y=1</script><br />Use the chain rule: <script type="math/tex">\displaystyle\frac{y'}{cos^2y}=1</script><br />So we get <script type="math/tex">y'=cos^2y</script><br />From the picture we can know that <script type="math/tex">cos^2y=\displaystyle\frac{1}{x^2+1}</script>. Finally <script type="math/tex">y'=\displaystyle\frac{1}{x^2+1}</script><br /><img src="/img/04.Implicitdifferentiation,inverses01.png" width="15%"></li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>单变量微积分 (MIT 18.01)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>04. Discrete Random Variables; Probability Mass Functions; Expectations</title>
    <url>/2020/03/12/04-Discrete-Random-Variables-Probability-Mass-Functions-Expectations/</url>
    <content><![CDATA[<h1 id="Random-Variables"><a href="#Random-Variables" class="headerlink" title="Random Variables"></a>Random Variables</h1><ol>
<li>Sometimes we can use a random variable to associate the (numerical) value with each outcome. </li>
<li>A random variable is a real valued function of the experimental outcome. </li>
<li>A function of a random variable defines another random variable. </li>
<li>A random variable can be conditioned on an event or on another random variable. </li>
<li>A random variable can be independent of an event or from another random variable. </li>
<li>A random variable is called discrete if its range is either finite or countably infinite. </li>
<li>If $Y=g(X)$ is a function of a random variable $X$, then $Y$ is also a random variable. </li>
</ol>
<h1 id="Probability-Mass-Function"><a href="#Probability-Mass-Function" class="headerlink" title="Probability Mass Function"></a>Probability Mass Function</h1><ol>
<li>Probability mass function (PMF) of a discrete random variable $X$ can capture the probabilities of the values that it can take. PMF of $X$ is denoted $p_X$. </li>
<li>If $x$ is any possible value of $X$, the probability mass of $x$ denoted $p_X(x)$ is the probability of the event $\{X=x\}$ consisting of all outcomes that give rise to a value of $X$ equal to $x$: $p_X(x)=P(\{X=x\})$ or $p_X(x)=P(X=x)$. </li>
<li>Convention: upper case characters denote random variables and lower case characters denote real numbers such as the numerical values of a random variable. </li>
<li>The events $\{X=x\}$ are disjoint and form a partition of the sample space. So: $\displaystyle\sum_xp_X(x)=1$ and $P(X\in S)=\displaystyle\sum_{x\in S}p_X(x)$. </li>
<li>$p_X(x)$ equals the sum of the probabilities of all outcomes that give rise to event $\{X=x\}$. </li>
<li>If $Y=g(X)$, $p_Y(y)=\displaystyle\sum_{\{x|g(x)=y\}}p_X(x)$. </li>
</ol>
<h1 id="Special-Random-Variable"><a href="#Special-Random-Variable" class="headerlink" title="Special Random Variable"></a>Special Random Variable</h1><ol>
<li>The Bernoulli random variable takes the two values $1$ and $0$. And its PMF is <script type="math/tex">p_X(x)=\left\{\begin{array}{}p&if\ x=1\\1-p&if\ x=0 \end{array}\right.</script></li>
<li>The Binomial random variable: In $n$ times of Bernoulli experiment, $x=1$ has happened $k$ times. Its PMF is $p_X(k)=P(X=k)=\big(^n_k\big)p^k(1-p)^{n-k}$. </li>
<li>The geometric random variable: In $n$ times of Bernoulli experiment, $x=1$ haven’t occurred until $k$th time. Its PMF is $p_X(k)=(1-p)^{k-1}p$. </li>
<li>The Poisson random variable has PMF of $p_X(k)=e^{-\lambda}\displaystyle\frac{\lambda^k}{k!}$. This is a binomial random variable with very small $p$ and very large $n$. $e^{-\lambda}\displaystyle\frac{\lambda^k}{k!}\approx\big(^n_k\big)p^k(1-p)^{n-k}$. $\lambda=np$</li>
</ol>
<h1 id="Expectation-and-Variance"><a href="#Expectation-and-Variance" class="headerlink" title="Expectation and Variance"></a>Expectation and Variance</h1><ol>
<li>The expectation of $X$ is a weighted average of the possible values of $X$. $E[X]=\displaystyle\sum_xxp_X(x)$. </li>
<li>The expectationid well-defined if $\displaystyle\sum_x|x|p_X(x)&lt;\infty$. In this case, it’s known that the infinite sum converges to a finite value that is independent of the order in which the various terms are summed. </li>
<li>The expectation is the center of gravity of the PMF. The sum of the torques from the weights to its left is equal to the sum of the torques from the weights to its right. $\displaystyle\sum_x(x-c)p_X(x)=0$. </li>
<li>The $n$th moment as $E[X^n]=\displaystyle\sum_xx^np_X(x)$. </li>
<li>The variance of $X$ is $var(X)=E[(X-E[X])^2]$. </li>
<li>The variance provides a measure of dispersion of $X$ around its mean. </li>
<li>Another measure of dispersion is the standard deviation of $X$, $\sigma_X=\sqrt{var(X)}$. </li>
<li>The PMF of $(X-E[X])^2$ is not alway the same PMF of $X$. </li>
<li>Expected value rule for functions of random variables: $E[g(X)]=\displaystyle\sum_xg(x)p_X(x)$. <br />So the variance: $var(X)=E[(X-E[x])^2]=\displaystyle\sum_x(x-E[x])^2p_X(x)$. <br />The $n$th moment: $E[X^n]=\displaystyle\sum_xx^np_X(x)$. </li>
<li>Variance is zero if and only if all $x=E[X]$. </li>
<li>In general, $E[g(X)]≠g(E[X])$</li>
</ol>
<h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><ol>
<li>The expectation of a constant is itself. $E[c]=c$. </li>
<li>Define $Y=aX+b$, $E[Y]=\displaystyle\sum_x(ax+b)p_X(x)=a\sum_xxp_X(x)+b\sum_xp_X(x)=aE[x]+b$<br />$\begin{equation}\begin{split}var(Y)&amp;=\displaystyle\sum_x(ax+b-E[aX+b])^2p_X(x)\\&amp;=\sum_x(ax+b-aE[x]-b)^2p_X(x)\\&amp;=a^2\sum_x(x-E[x])^2p_X(x)\\&amp;=a^2var(X) \end{split}\end{equation}$</li>
<li><br />$\begin{equation}\begin{split}var(X)&amp;=\sum_x(x-E[X])^2p_X(x)\\&amp;=\sum_x(x^2-2xE[X]+(E[X])^2)p_X(x)\\&amp;=\sum_xx^2p_X(x)-2E[x]\sum_xxp_X(x)+(E[X])^2\sum_xp_X(x)\\&amp;=E[X^2]-2(E[X])^2+(E[X])^2\\&amp;=E[X^2]-(E[X])^2 \end{split}\end{equation}$</li>
<li>For discrete uniform over $[a,b]$: <br />$p_X(k)=\left\{\begin{array}{}\displaystyle\frac{1}{b-a+1}&amp;if k=a,a+1,…b\\0&amp;otherwise \end{array}\right.$<br />$E[X]=\displaystyle\frac{a+b}{2}$, $var(X)=\displaystyle\frac{(b-a)(b-a+2)}{12}$</li>
<li>For Bernoulli random variable: <br />$E[X]=1\cdot p+0\cdot(1-p)=p$<br />$E[X^2]=1^2\cdot p+0^2\cdot(1-p)=p$<br />$var(X)=E[X^2]-(E[X])^2=p-p^2=p(1-p)$</li>
<li>For Poisson random variable: <br />$\begin{equation}\begin{split}E[X]&amp;=\displaystyle\sum_{k=0}^\infty ke^{-\lambda}\frac{\lambda^k}{k!}\\&amp;=\sum^\infty_{k=1}ke^{-\lambda}\frac{\lambda^k}{k!}\\&amp;=\lambda\sum^\infty_{k=1}e^{-\lambda}\frac{\lambda^{k-1}}{(k-1)!}\\&amp;=\lambda\sum^\infty_{m=0}e^{-\lambda}\frac{\lambda^m}{m!}\\&amp;=\lambda \end{split}\end{equation}$</li>
<li>For Binomial random variable:  $E[X]=\displaystyle\sum_{i=1}^nE[X_i]=\sum^n_{i=1}p=np$</li>
</ol>
<h1 id="Other-PMF-Models"><a href="#Other-PMF-Models" class="headerlink" title="Other PMF Models"></a>Other PMF Models</h1><h2 id="Joint-PMF"><a href="#Joint-PMF" class="headerlink" title="Joint PMF"></a>Joint PMF</h2><ol>
<li>The probability of the values that $X$ and $Y$ can take are captured by the joint PMF of $X$ and $Y$, denoted $p_{X,Y}$. $p_{X,Y}(x,y)=P(X=x,Y=y)$. </li>
<li>$P((X,Y)\in A)=\displaystyle\sum_{(x,y)\in A}p_{X,Y}(x,y)$</li>
<li>Sometimes, we refer to $p_X$ and $p_Y$ as the marginal PMFs. And we can calculate the marginla PMFs by using the tabular method, $p_X(x)=\displaystyle\sum_{y}p_{X,Y}(x,y)$</li>
<li>If $Z=g(X,Y)$, $p_Z(z)=\displaystyle\sum_{\{(x,y)|g(x,y=z)\}}p_{X,Y}(x,y)$</li>
<li>The expected value rule: $E[g(X,Y)]=\displaystyle\sum_x\sum_yg(x,y)p_{X,Y}(x,y)$</li>
<li>$E[aX+bY+c]=aE[X]+bE[Y]+c$</li>
</ol>
<h2 id="Conditional-PMF"><a href="#Conditional-PMF" class="headerlink" title="Conditional PMF"></a>Conditional PMF</h2><ol>
<li>$p_{X|A}(x)=P(X=x|A)=\displaystyle\frac{P(\{X=x\}\cap A)}{P(A)}=\frac{P(\{X=x\}\cap A)}{\sum_xP(\{X=x\}\cap A)}$</li>
<li>$E[X|A]=\displaystyle\sum_xxp_{X|A}(x)$<br />$E[X|Y=y]=\displaystyle\sum_xxp_{X|Y}(x|y)$</li>
<li>$p_{X|Y}(x|y)=P(X=x|Y=y)=\displaystyle\frac{p_{X,Y}(x,y)}{p_Y(y)}$</li>
<li>$p_{X,Y}(x,y)=p_{X|Y}(x|y)\cdot p_Y(y)=p_{Y|X}(y|x)\cdot p_X(x)$</li>
<li>Partition of sample space into disjoint events $A_1,A_2,…,A_n$. <br />$p_X(x)=\displaystyle\sum_{i=1}^nP(A_i)p_{X|A_i}(x)$<br />$p_{X|B}(x)=\displaystyle\sum^n_{i=1}P(A_i|B)p_{X|A_i\cap B}(x)$<br /> Total expectation theorem: $E[X]=\displaystyle\sum^n_{i=1}P(A_i)E[X|A_i]$<br />$E[X|B]=\displaystyle\sum^n_{i=1}P(A_i|B)E[X|A_i\cap B]$</li>
<li>$E[g(X)|A]=\displaystyle\sum_xg(x)p_{X|A}(x)$</li>
<li>$E[X]=\displaystyle\sum_yp_Y(y)E[X|Y=y]$</li>
<li>Geometric random variable: <br />$E[X]=P(X=1)E[X|X=1]+P(X&gt;1)E[X|X&gt;1]$<br />$E[X|X&gt;1]=E[X-1|X-1&gt;0]+1=E[X]+1$<br />So $E[X]=p\cdot 1+(1-p)(E(x)+1)$. <br />$E[X]=\displaystyle\frac{1}{p}$<br />Similarly, we can obtain $E[X^2|X&gt;1]=E[(1+X)^2|X+1&gt;1]=E[(1+X)^2]=1+2E[X]+E[X^2]$<br />So that $E[X^2]=p\cdot 1+(1-p)(1+2E[X]+E[X^2])$ from which we obtain $E[X^2]=\displaystyle\frac{2}{p^2}-\frac{1}{p}$. <br />$var(X)=E[X^2]-(E[X])^2=\displaystyle\frac{1-p}{p^2}$</li>
</ol>
<h1 id="Independence"><a href="#Independence" class="headerlink" title="Independence"></a>Independence</h1><ol>
<li>The random variable $X$ is independent of the event $A$ if <script type="math/tex">P(X=x\ and\ A)=P(X=x)P(A)=p_X(x)P(A)</script> for all $x$. </li>
<li><script type="math/tex; mode=display">P(X=x\ and\ A)=p_{X|A}(x)P(A)</script></li>
<li>$p_{X|A}(x)=p_X(x)$ for all $x$</li>
<li>Two random variables $X$ and $Y$ are independent if $p_{X,Y}(x,y)=p_X(x)p_Y(y)$, for all $x,y$. </li>
<li>$X$ and $Y$ are said to be conditionally independent, given a positive probability event $A$, if $P(X=x,Y=y|A)=P(X=x|A)P(Y=y|A)$ or $p_{X,Y|A}(x,y)=p_{X|A}(x)p_{Y|A}(y)$, for all $x$ and $y$. </li>
<li>If $X $ and $Y$ are independent random variables, then <br />$g(X)$ and $h(Y)$ are also independent. <br />$E[XY]=E[X]E[Y]$ and $E[g(X)h(Y)]=E[g(X)]E[h(Y)]$<br />$var(X+Y)=var(X)+var(Y)$</li>
<li>Three  random variables $X,Y,Z$ are said to be independent if $p_{X,Y,Z}(x,y,z)=p_X(x)p_Y(y)p_Z(z)$ for all $x,y,z$</li>
<li>If $X,Y,Z$ are independent, then <br />$f(X),g(Y),h(Z)$ are also independent and $g(X,Y)$ and $h(Z)$ are independent. <br />$var(\displaystyle\sum^n_{i=1}X_i)=\sum^n_{i=1}var(X_i)$</li>
<li>For Binomial random variable: <br />For each toss, we let $X_i$ be the random variable which is equal to 1 if the $i$th toss comes up a head. Then $X=\displaystyle\sum^n_{i=1}X_i$<br />$var(X)=\displaystyle\sum^n_{i=1}v ar(X_i)=np(1-p)$</li>
<li>For Poisson random variable: <br />$E[Y]=\lambda$<br />$\begin{equation}\begin{split}E[Y^2]&amp;=\displaystyle\sum^\infty_{k=1}k^2e^{-\lambda}\frac{\lambda^k}{k!}\\&amp;=\lambda\sum^\infty_{k=1}k\frac{e^{-\lambda}\lambda^{k-1}}{(k-1)!}\\&amp;=\lambda\sum^\infty_{m=0}(m+1)\frac{e^{-\lambda}\lambda^m}{m!}\\&amp;=\lambda(E[Y]+1)\\&amp;=\lambda(\lambda+1) \end{split}\end{equation}$<br />$var(Y)=E[Y^2]-(E[Y])^2=\lambda(\lambda+1)-\lambda^2=\lambda$</li>
<li>For Bernoulli random variable: <br />Let $X=1$ is event occurred. Then $E[X]=p,var(X)=p(1-p)$<br />Sample mean $S_n=\displaystyle\frac{X_1+X_2+…+X_n}{n}$<br />$E[S_n]=\displaystyle\sum^n_{i=1}\frac{1}{n}E[X_i]=p$<br />$var(S_n)=\displaystyle\sum^n_{i=1}\frac{1}{n^2}var(X_i)=\frac{p(1-p)}{n}$<br />Not only for Bernoulli experiments, $var(S_n)=\displaystyle\frac{var(X)}{n}$ as long as $X_i$ are independent, with common mean $E[X]$ and variance $var(X)$. <br />The sample mean $S_n$ can be viewed as a good estimate of the probability of $X=1$. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>概率论 (MIT 6.041)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>05. Continuous Random Variables</title>
    <url>/2020/03/14/05-Continuous-Random-Variables/</url>
    <content><![CDATA[<h1 id="Continuous-Random-Variables"><a href="#Continuous-Random-Variables" class="headerlink" title="Continuous Random Variables"></a>Continuous Random Variables</h1><ol>
<li>A random variable $X$ is called continuous if there is a nonnegative function $f_X$, called the probability density function (PDF) of $X$, such that $P(X\in B)=\displaystyle\int_Bf_X(x)dx$ for every subset $B$  of the real line. </li>
<li>In particular, the probability that the value of $X$ falls within an interval is $P(a≤X≤b)=\displaystyle\int^b_af_X(x)dx$. </li>
<li>The probability can be interpreted as the area under the graph of the PDF. </li>
<li>For any single value $a$, we have $P(X=a)=\displaystyle\int^a_af_X(x)dx=0$. <br />So including or excluding the nedpoints of an interval has no effect on its probability. $P(a≤X≤b)=P(a≤X&lt;b)=P(a&lt;X≤b)=P(a&lt;X&lt;b)$</li>
<li>$P(a≤X≤b)=P(X≤b)-P(X≤a)$</li>
<li>$\displaystyle\int^\infty_{-\infty}f_X(x)dx=1$</li>
<li>$P([x,x+\delta])=\displaystyle\int^{x+\delta}_xf_X(t)dt\approx f_X(x)\cdot\delta$. So we can view $f_X(X)$ as the probability mass per unit length near $x$. Even though a PDF is used to calculate event probabilities, $f_X(x)$ is not the probability of any particular event. </li>
<li>$f_X(x)$ is not restricted to be less than or equal to one. </li>
<li>If a random variable $X$ takes values in an interval $[a,b]$ and any two subintervals of the same length have the same probability, we refer to this type of random variable as uniform or uniformly distributed. <br /><script type="math/tex">f_X(x)=\left\{\begin{array}{}\displaystyle\frac{1}{b-a}&if\ a≤x≤b\\0&otherwise \end{array}\right.</script></li>
<li>The expected value of a continuous random variable $X$ is defined by $E[X]=\displaystyle\int^\infty_{-\infty}xf_X(x)dx$. </li>
<li>If $X$ is a continuous random variable, $Y=g(X)$ is also a random variable but may be a decrete one. But $E[g(X)]=\displaystyle\int^\infty_{-\infty}g(x)f_X(x)dx$ is true for any kind of $Y$, descrete or continuous. </li>
<li>The variance is still $var(X)=E[(X-E[X])^2]=\displaystyle\int_{-\infty}^\infty(x-E[X])^2f_X(x)dx$. <br />And $var(X)=E[(X-E[X])^2]$ still stands. </li>
<li>For uniform random variable: <br />$E[X]=\displaystyle\int^\infty_{-\infty}xf_X(x)dx=\int^b_ax\frac{1}{b-a}dx=\frac{a+b}{2}$<br />$E[X^2]=\displaystyle\int^\infty_{-\infty}x^2f_X(x)dx=\int^b_a\frac{x^2}{b-a}dx=\frac{b^3-a^3}{3(b-a)}=\frac{a^2+ab+b^2}{3}$<br />$var(X)=E[X^2]-(E[X])^2=\displaystyle\frac{a^2+ab+b^2}{3}-\frac{(a+b)^2}{4}=\frac{(b-a)^2}{12}$</li>
<li>Exponential random variable: <br />PDF: $f_X(x)=\left\{\begin{array}{}\lambda e^{-\lambda x}&amp;if x≥0\\0&amp;otherwise \end{array}\right.$<br />$P(X≥a)=\displaystyle\int^\infty_a\lambda e^{-\lambda x}dx=e^{-\lambda a}$<br />$\begin{equation}\begin{split}E[X]&amp;=\displaystyle\int^\infty_0x\lambda e^{-\lambda x}dx\\&amp;=(-xe^{-\lambda x})\Big|^\infty_0+\int^\infty_0e^{-\lambda x}dx\\&amp;=\frac{1}{\lambda} \end{split}\end{equation}$<br />$\begin{equation}\begin{split}E[X^2]&amp;=\displaystyle\int^\infty_0x^2\lambda e^{-\lambda x}dx\\&amp;=(-x^2e^{-\lambda x})\Big|^\infty_0+\int^\infty_02xe^{-\lambda x}dx\\&amp;=0+\frac{2}{\lambda}E[X]\\&amp;=\frac{2}{\lambda^2} \end{split}\end{equation}$<br />$var(X)=E[X^2]-(E[X])^2=\displaystyle\frac{1}{\lambda^2}$</li>
</ol>
<h1 id="Cumulative-Distribution-Functions"><a href="#Cumulative-Distribution-Functions" class="headerlink" title="Cumulative Distribution Functions"></a>Cumulative Distribution Functions</h1><ol>
<li>The cumulative distribution function (CDF) of a random variable $X$ is denoted by $F_X$ and provides probability $P(X≤x)$. <br /><script type="math/tex">F_X(x)=P(X≤x)=\left\{\begin{array}{}\displaystyle\sum_{k≤x}p_X(k)&if\ X\ is\ discrete\\\int^x_{-\infty}f_X(t)dt&if\ X\ is\ continuous \end{array}\right.</script></li>
<li>CDF accumulates probability up to the value $x$. </li>
<li>The graph of CDF of a descrete random variable has a staircase form at the values of probability mass. At the points where a jump occurs, the value of $F_X$ is the larger of the two corresponding value, i.e. $F_X$ is continuous from the right. </li>
<li>$F_X$ is monotonically nondecreasing: if $x≤y$, then $F_X(x)≤F_X(y)$. </li>
<li>$\displaystyle\lim_{x\to-\infty}F_X=0$ and $\displaystyle\lim_{x\to\infty}F_X=1$</li>
<li>If $X$ is discrete, then $F_X(x)$ is a piecewise constant function of $x$. If $X$ is continuous, then $F_X(x)$ is a continuous function of $x$. </li>
<li>If $X$ is descrete, $p_X(k)=P(X≤k)-P(X≤k-1)=F_X(k)-F_X(k-1)$. If $X$ is continuous, $f_X(x)=\displaystyle\frac{dF_X}{dx}(x)$. </li>
<li>If $X_1,X_2,…,X_n$ are independent, $F_X(x)=F_{X_1}(x)…F_{X_n}(x)$</li>
<li>For geometric random variable, $F_{geo}(n)=\displaystyle\sum^n_{k=1}p(1-p)^{k-1}=1-(1-p)^2$<br />For exponential random variable, $F_{exp}(x)=\displaystyle\int^x_0\lambda e^{-\lambda t}dt=1-e^{-\lambda x}$ for $x&gt;0$ and $F_X(x)=0$, for $x≤0$. <br />$F_{geo}=F_{exp}$ when $x=n\delta$ ($\delta=-\displaystyle\frac{-ln(1-p)}{\lambda}$), with $n=1,2,…$. </li>
</ol>
<h1 id="Normal-Random-Variables"><a href="#Normal-Random-Variables" class="headerlink" title="Normal Random Variables"></a>Normal Random Variables</h1><ol>
<li>A continuous random variable $X$ is said to be normal or Gaussian if it has a PDF of the form $f_X(x)=\displaystyle\frac{1}{\sqrt{2\pi}\sigma}e^{-\frac{(x-\mu)^2}{2\sigma^2}}$, where $\mu$ and $\sigma$ are two scalar parameters characterizing the PDF with $\sigma&gt;0$. </li>
<li>The PDF is symmetric around $\mu$. So its mean $E[X]$ has to be $\mu$. </li>
<li><br />$\begin{equation}\begin{split}var(X)&amp;=\displaystyle\frac{1}{\sqrt{2\pi}\sigma}\int^\infty_{-\infty}(x-\mu)^2e^{-\frac{(x-\mu)^2}{2\sigma^2}}dx\\&amp;=\frac{\sigma^2}{\sqrt{2\pi}}\int^\infty_{-\infty}y^2e^{-\frac{y^2}{2}}dy                         y=\frac{x-\mu}{\sigma}\\&amp;=\frac{\sigma^2}{\sqrt{2\pi}}\Bigg[(-ye^{-\frac{y^2}{2}})\bigg|^\infty_{-\infty}+\int^\infty_{-\infty}e^{-\frac{y^2}{2}}dy\Bigg]\\&amp;=\sigma^2 \end{split}\end{equation}$</li>
<li>The standard normal random variable is a normal random variable with zero mean and unit variance. CDF: $\Phi(y)=P(Y≤y)=\displaystyle\frac{1}{\sqrt{2\pi}}\int^y_{-\infty}e^{-\frac{t^2}{2}}dt$</li>
<li>In standard normal random variable, for $y&lt;0$, $\Phi(y)=P(Y≤y)=P(Y≥-y)=1-P(Y≤-y)=1-\Phi(-y)$</li>
<li>For any $X$, we can standardize by $Y=\displaystyle\frac{X-\mu}{\sigma}$. And in reverse, any $X=\sigma Y+\mu$. So $P(X≤x)=P(\displaystyle\frac{X-\mu}{\sigma}≤\frac{x-\mu}{\sigma})=P(Y≤\frac{x-\mu}{\sigma})=\Phi(\frac{x-\mu}{\sigma})$</li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>概率论 (MIT 6.041)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>05. Exponential and Logarithm</title>
    <url>/2020/02/10/05-Exponential-and-Logarithm/</url>
    <content><![CDATA[<h1 id="Exponential"><a href="#Exponential" class="headerlink" title="Exponential"></a>Exponential</h1><ol>
<li><script type="math/tex">y=a^x</script>, <script type="math/tex">a</script> is a constant, and <script type="math/tex">a>0</script>. </li>
<li><script type="math/tex; mode=display">\displaystyle\frac{d}{dx}y=\lim_{\Delta x\to 0}\frac{a^{x+\Delta x}-a^x}{\Delta x}=\lim_{\Delta x\to 0}{\frac{a^x\cdot a^{\Delta x}-a^x}{\Delta x}}=a^x\lim_{\Delta x\to 0}{\frac{a^{\Delta x}-1}{\Delta x}}</script></li>
<li>The limit <script type="math/tex">\displaystyle\lim_{\Delta x\to 0}\frac{a^{\Delta x}-1}{\Delta x}</script> is not easy to calculate. We can know that this is a constant associate with <script type="math/tex">a</script> only and assign <script type="math/tex">M(a)</script> equals that limit. </li>
<li>Plug in <script type="math/tex">x=0</script>, <script type="math/tex">\displaystyle\frac{d}{dx}y\bigg|_{x=0}=a^0M(a)=M(a)</script>. So <script type="math/tex">M(a)</script> is the slope of graph at <script type="math/tex">x=0</script>. </li>
<li>Assume there exists an <script type="math/tex">e</script> that <script type="math/tex">M(e)=1</script>. <br />&emsp;Proof: <script type="math/tex">\displaystyle\frac{d}{dx}a^{kx}=\frac{d}{dx}(a^k)^x=M(a^k)a^{kx}=kM(a)a^{kx}</script><br />&emsp;Assign <script type="math/tex">a^k=e</script>, <script type="math/tex">M(e)a^{kx}=kM(a)a^{kx}</script>, so <script type="math/tex">k=\displaystyle\frac{1}{M(a)}</script>. </li>
<li>So when <script type="math/tex">a=e</script>, <script type="math/tex">\displaystyle\frac{d}{dx}y=e^xM(e)=e^x</script>. Use this, we can define the inverse function of exponential, logarithm, and find its inverse easily. </li>
<li>With the help of logarithm (see below), we have two way to get the derivative of exponential. <br />&emsp;Method 1 (<code>base e</code>): <script type="math/tex">\displaystyle\frac{d}{dx}a^x=\frac{d}{dx}(e^{ln\ a})^x=\frac{d}{dx}e^{xln\ a}=ln\ a\cdot e^{xln\ a}=ln\ a\cdot a^x</script><br />&emsp;Method 2 (<code>logarithm differentialtion</code>): <script type="math/tex">\displaystyle\frac{d}{dx}ln\ y=\frac{1}{y}\frac{dy}{dx}</script>. So <script type="math/tex">(ln\ y)'=(ln\ a^x)'=(xln\ a)'=ln\ a=\displaystyle\frac{y'}{y}</script>. <br />&emsp;&emsp;So <script type="math/tex">y'=yln\ a=a^xln\ a</script><br />These two methods always work together. </li>
<li><script type="math/tex; mode=display">y=x^x$$<br />So $$ln\ y=ln\ x^x=xln\ x$$<br />$$\begin{equation}\begin{split}\displaystyle\frac{d}{dx}ln\ y&=\frac{d}{dx}xln\ x\\\frac{y'}{y}&=ln\ x+1\\y'&=x^x(ln\ x+1)\end{split}\end{equation}</script></li>
<li><script type="math/tex; mode=display">y=x^n\ \ (n\in R)$$<br />$$\displaystyle\frac{d}{dx}x^n=\frac{d}{dx}(e^{ln\ x})^n=\frac{d}{dx}e^{nln\ x}=\frac{n}{x}e^{nln\ x}=nx^{n-1}$$<br />$$\displaystyle\frac{d}{dx}x^n=\frac{d}{dx}e^{ln\ x^n}=\frac{d}{dx}e^{nln\ x}=nx^{n-1}</script></li>
</ol>
<h1 id="Logarithm"><a href="#Logarithm" class="headerlink" title="Logarithm"></a>Logarithm</h1><ol>
<li>Logarithm is the inverse function of exponential. </li>
<li>The inverse of <script type="math/tex">y=e^x</script> is <script type="math/tex">u=ln\ x</script>. </li>
<li>So <script type="math/tex">x=e^u</script>. <br /><script type="math/tex">\begin{equation}\begin{split}\displaystyle\frac{d}{dx}e^u&=\frac{d}{dx}x\\\frac{d}{du}e^u\frac{du}{dx}&=1\\e^u\frac{du}{dx}&=1\\u'&=\frac{1}{e^u} \end{split}\end{equation}</script><br />Conclusion, <script type="math/tex">\displaystyle\frac{d}{dx}ln\ x=\frac{1}{x}</script></li>
<li><script type="math/tex; mode=display">\begin{equation}\begin{split}\displaystyle\lim_{x\to\infty}(1+\frac{1}{x})^x \end{split}\end{equation}$$<br />$$\begin{equation}\begin{split}\displaystyle\lim_{x\to\infty}ln(1+\frac{1}{x})^x&=\lim_{x\to\infty}{xln(1+\frac{1}{x})}\\&=\lim_{\Delta x\to 0}\frac{ln(1+\Delta x)-ln\ 1}{\Delta x}\\&=\frac{d}{dx}ln\ x\bigg|_{x=1}\\&=1 \end{split}\end{equation}$$<br />And $$\displaystyle\lim_{x\to\infty}(1+\frac{1}{x})^x=e^{ln\ \lim_{x\to\infty}(1+\frac{1}{x})^x}=e^{\lim_{x\to\infty}ln(1+\frac{1}{x})^x}=e^1=e</script></li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>单变量微积分 (MIT 18.01)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>05. Lagrange Multipliers</title>
    <url>/2020/02/26/05-Lagrange-Multipliers/</url>
    <content><![CDATA[<h1 id="Lagrange-Multipliers"><a href="#Lagrange-Multipliers" class="headerlink" title="Lagrange Multipliers"></a>Lagrange Multipliers</h1><ol>
<li>The goal is to minize of maximize a function <script type="math/tex">f(x,y,z)</script> where <script type="math/tex">x,y,z</script> are not independent, namely <script type="math/tex">g(x,y,z)=c</script>. </li>
<li>At the minimum/maximum, the level curve of <script type="math/tex">f</script> is tangent to the hyperbola <script type="math/tex">g</script>. </li>
<li>Find the tangent point: If the two curves are tangent at that point, the two curves share the same tangent line, namely their normal vectors are parallel. So <script type="math/tex">\triangledown f \parallel \triangledown g</script>, i.e. <script type="math/tex">\triangledown f=\lambda\triangledown g</script>. </li>
<li><script type="math/tex">\left\{\begin{array}{}f_x=\lambda g_x\\f_y=\lambda g_y\\\dots\\g=c\end{array}\right.</script> is the <code>Lagrange equations</code> to solve all the variables and <script type="math/tex">\lambda</script>. </li>
<li>The partial derivative equations can form <script type="math/tex">A\vec{x}=\vec{0}</script> (<script type="math/tex">A</script> contains constants and <script type="math/tex">\lambda</script> and <script type="math/tex">\vec{x}</script> is the vector of variables). Normally <script type="math/tex">\vec{x}</script> will not be a solution to <script type="math/tex">g=c</script>, so <script type="math/tex">A\vec{x}=\vec{0}</script> must has at least one nontrivial solution. So the determinant of <script type="math/tex">A</script> is zero, which allows us to solve <script type="math/tex">\lambda</script>. </li>
<li>At constrained min/max, in any direction along level <script type="math/tex">g=c</script> the rate of change of <script type="math/tex">f</script> must be <script type="math/tex">0</script>. <br />For any <script type="math/tex">\vec{u}</script> tangent of <script type="math/tex">g=c</script>, we must have <script type="math/tex">\displaystyle\frac{df}{ds}\Big|_\vec{u}=0</script>. So any such <script type="math/tex">\vec{u}</script> is perpendicular to <script type="math/tex">\triangledown f</script>. <br /><script type="math/tex">\triangledown f</script> is perpendicular to level set of <script type="math/tex">g</script>. Since <script type="math/tex">\triangledown g</script> is perpendicular to level set of <script type="math/tex">f</script>, <script type="math/tex">\triangledown f\parallel\triangledown g</script>. </li>
<li>We cannot use second derivatives to distinguish if the point is minimum or maximum. To find out about that ,we can only compare values of <script type="math/tex">f</script> at various solution to Lagrange equations. </li>
</ol>
<h1 id="Non-independent-Variables"><a href="#Non-independent-Variables" class="headerlink" title="Non-independent Variables"></a>Non-independent Variables</h1><ol>
<li>If <script type="math/tex">g(x,y,z)=c</script>, how to find <script type="math/tex">\displaystyle\frac{\partial z}{\partial x},\frac{\partial z}{\partial y}</script>? </li>
<li><script type="math/tex">dg=\displaystyle\frac{\partial g}{\partial x}dx+\frac{\partial g}{\partial y}dy+\frac{\partial g}{\partial z}dz</script>. Since <script type="math/tex">g=c</script>, <script type="math/tex">dg=0</script>, <script type="math/tex">\displaystyle\frac{\partial g}{\partial x}dx+\frac{\partial g}{\partial y}dy+\frac{\partial g}{\partial z}dz=0</script>. Plug in the point <script type="math/tex">(x,y,z)</script>, we can have a relationship of <script type="math/tex">a_0dx+a_1dy+a_2dz=0</script> which contains among the change of <script type="math/tex">x, y</script> and <script type="math/tex">z</script>. </li>
<li>Separate <script type="math/tex">dx, dy</script> or <script type="math/tex">dz</script> and compare to the equation <script type="math/tex">dz=\displaystyle\frac{\partial z}{\partial x}dx+\frac{\partial z}{\partial y}dy</script>, we can have <script type="math/tex">\displaystyle\frac{\partial g}{\partial x},\frac{\partial g}{\partial y}</script>. Or we can set <script type="math/tex">y</script> constant by setting <script type="math/tex">dy=0</script>. </li>
<li>So in general, <script type="math/tex">\displaystyle\frac{\partial z}{\partial x}=-\frac{g_x}{g_z}</script> and <script type="math/tex">\displaystyle\frac{\partial z}{\partial y}=-\frac{g_y}{g_z}</script>. </li>
<li><script type="math/tex">(\displaystyle\frac{\partial g}{\partial x})_y</script> means when calculating the partial derivative, we set <script type="math/tex">y</script> constant. Normally when <script type="math/tex">x=u</script>, <script type="math/tex">\displaystyle(\frac{\partial g}{\partial x})_y≠(\frac{\partial g}{\partial x})_v=(\frac{\partial  g}{\partial u})_v</script>. </li>
<li>In the function <script type="math/tex">w=f(x,y,z)</script>, <script type="math/tex">dw=f_xdx+f_ydy+f_zdz</script>. <br />One variable is set constant (<script type="math/tex">x</script> for example), and from above we can solve <script type="math/tex">dy</script> in terms of <script type="math/tex">dz</script>. <br />Then substitute <script type="math/tex">dx=0</script> and <script type="math/tex">dy</script> into the differential equation, to get <script type="math/tex">(\displaystyle\frac{dw}{dz})_x</script>. </li>
<li>Another way: <br />In the chain rule: <script type="math/tex">(\displaystyle\frac{\partial w}{\partial z})_x=f_z(\frac{\partial z}{\partial z})_x+f_x(\frac{\partial x}{\partial z})_x+f_y(\frac{\partial y}{\partial z})_x</script>. <br /><script type="math/tex">(\displaystyle\frac{\partial z}{\partial z})_x=1</script> and <script type="math/tex">(\displaystyle\frac{\partial x}{\partial z})_x=0</script>. We can also find <script type="math/tex">(\displaystyle\frac{\partial y}{\partial z})</script> in the constrain. <br />Substitute all the three into the differential equation to find the solution. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>多变量微积分 (MIT 18.02)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>04. 自顶向下语法分析</title>
    <url>/2020/05/12/04-%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<ol>
<li>自顶向下分析法构造语法分析树是从根节点开始构造</li>
<li>其本质是寻找文法的推导过程，一般采用最左推导</li>
</ol>
<h1 id="不确定的自顶向下分析-递归下降法"><a href="#不确定的自顶向下分析-递归下降法" class="headerlink" title="不确定的自顶向下分析 (递归下降法)"></a>不确定的自顶向下分析 (递归下降法)</h1><ol>
<li>利用回溯法遍历可能情况，当没有终结符号时就回溯</li>
<li>为每个非终结符号设计一个函数，在函数中遍历所有该非终结符号的产生式，利用DFS实现</li>
<li>优点：对文法限制小，易于实现</li>
<li>缺点：回溯效率低，文法左递归导致死循环，出错时难以缺点出错位置</li>
</ol>
<h1 id="消除左递归"><a href="#消除左递归" class="headerlink" title="消除左递归"></a>消除左递归</h1><ol>
<li>三种类型的左递归<br />&emsp;直接 (立即)左递归：$N\to Na$<br />&emsp;间接左递归：$N\to A\alpha,A\Rightarrow^+Ny$<br />&emsp;潜在左递归：$N\to\alpha N,\alpha\Rightarrow^+\epsilon$</li>
<li>直接左递归的消除：对于左递归$A\to A\alpha_1|A\alpha_2|…|\beta_1|\beta_2|…$<br />分析得串是从右向左生成的，以$\beta_1|\beta_2|…$开头，后面跟$(\alpha_1|\alpha_2|…)^*$<br />我们可以把左递归改为右递归，让串从左向右生成<br />$A\to\beta_1 A’|\beta_2A’|…,A’\to \alpha_1A’|\alpha_2A’|…$</li>
<li>间接和潜在左递归的消除：找到左递归，变为直接左递归，再消除<br />代入法：将右部$\alpha$中非终结符号$N$替换为$N$的候选式<br />过程：<br />&emsp;对文法的所有非终结符号进行排序<br />&emsp;排在前面的非终结符号如果出现在后面非终结符号的右部，就把前面的非终结符号替换掉<br />&emsp;迭代替换操作<br />&emsp;每消除一个非终结符号的间接或潜在左递归，就马上消除新生成的直接左递归<br />限制：不包含环路$A\Rightarrow^+A$和$A\to\epsilon$</li>
</ol>
<h1 id="克服回溯问题"><a href="#克服回溯问题" class="headerlink" title="克服回溯问题"></a>克服回溯问题</h1><ol>
<li>两种情况：<br />&emsp;相同左部的规则，右部左端第一个符号相同，无法根据当前输入符号选择产生式，只能试探<br />&emsp;相同左部的规则，某一右部能推出$\epsilon$串，不知道要不要生成其他的串</li>
<li>对第一种情况，只需要提取左公共因子。$A\to\delta\beta_1|\delta\beta_2|…|\gamma_1|\gamma_2|…$变为$A\to\delta A’|\gamma_1|\gamma_2|…,A’\to\beta_1|\beta_2|…$</li>
</ol>
<h1 id="LL-1-文法"><a href="#LL-1-文法" class="headerlink" title="LL(1)文法"></a>LL(1)文法</h1><h2 id="FIRST集"><a href="#FIRST集" class="headerlink" title="FIRST集"></a>FIRST集</h2><ol>
<li>$FIRST$集 (首符集)：$FIRST(\alpha)$是由任意文法符号串$\alpha$推导出的所有的文法符号串的第一个终结符号组成的集合。<script type="math/tex">FIRST(\alpha)=\{a|\alpha\Rightarrow^*a…,a\in V_T\}</script>，如果$\alpha\Rightarrow^*\epsilon$，则$\epsilon\in FIRST(\alpha)$</li>
<li>$FIRST$集中的元素是终结符号或$\epsilon$</li>
<li>如果$X$是一个终结符号，$FIRST(X)=\{X\}$</li>
<li>如果$X\to\epsilon$是一个产生式，则被$\epsilon$加到$FIRST(X)$</li>
<li>如果$X\to Y_1Y_2…Y_k$是一个产生式，<br />则把$FIRST{(Y_1)}\backslash\{\epsilon\}$加入$FIRST(X)$<br />如果<script type="math/tex">Y_1…Y_{i-1}\Rightarrow^*\epsilon</script>，则把$FIRST(Y_i)\backslash\{\epsilon\}$加入$FIRST(X)$<br />如果$Y_1…Y_k\Rightarrow^*\epsilon$，则把$\epsilon$加入$FIRST(X)$</li>
<li>假设$A\to\alpha$，$a\in FIRST(\alpha)$，那么当输入符号是$a$时，将待推导非终结符号替换为$\alpha$</li>
</ol>
<h2 id="FOLLOW集"><a href="#FOLLOW集" class="headerlink" title="FOLLOW集"></a>FOLLOW集</h2><ol>
<li>$FOLLOW$集 (后跟集)：$FOLLOW(A)$是由所有句型中紧跟在非终结符号$A$后面的终结符$a$组成的集合。$FOLLOW(A)=\{a|S\Rightarrow^*\alpha Aa\beta,a\in V_T\}$</li>
<li>$FOLLOW$集中的元素是终结符号或$\$$</li>
<li>如果$X\to AB$<br />&emsp;则$FIRST(B)\subseteq FOLLOW(A)$且$FOLLOW(X)\subseteq FOLLOW(B)$。$B$的第一个符号就是紧跟在$A$后面。凡事可以跟在$X$后面的，利用这条规则推导后都可以跟在$B$houmi<br />&emsp;如果$B\Rightarrow^*\epsilon$，则$FOLLOW(X)\subseteq FOLLOW(A)$</li>
<li>$\$$在开始符号的$FOLLOW$集中</li>
<li>如果$A\to\alpha B\beta$是产生式，则$FIRST(\beta)\backslash\{\epsilon\}$在$FOLLOW(B)$中</li>
<li>如果$A\to\alpha B$或$A\to\alpha B\beta$且$\beta\Rightarrow^*\epsilon$，$FOLLOW(A)\subseteq FOLOOW(B)$</li>
<li>算法实现<br />先把$\$$加入开始符号的$FOLLOW$集中<br />循环直到没有$FOLLOW$集改变<br />&emsp;对每一条产生式$X\to X_1X_2…X_m$，对其中的每一个非终结符号$X_j$<br />&emsp;$FOLLOW(X_j)=FOLLOW(X_j)\cup(FIRST(X_{j+1}…X_m)\backslash\{\epsilon\})$<br />&emsp;如果$\epsilon\in FIRST(X_{j+1}…X_m)$，$FOLLOW(X_j)=FOLLOW(X_j)\cup FOLLOW(X)$</li>
<li>为了避免第二种回溯，$FIRST(B)\cap FOLLOW(B)=\emptyset$，$B$为中间非终结符号</li>
<li>如果$A\to\alpha$，当$\alpha\Rightarrow^*\epsilon$，则当输入符号在$FOLLOW(A)$中是，用$\alpha$替代$A$</li>
</ol>
<h2 id="SELECT集"><a href="#SELECT集" class="headerlink" title="SELECT集"></a>SELECT集</h2><ol>
<li>当输入符号在左部的某一产生式的$SELECT$中，则选择该条产生式</li>
<li>对产生式$A\to\alpha,A\in V_N,\alpha\in V^*$<br />&emsp;如果$\alpha$不能推导出$\epsilon$，则$SELECT(A\to\alpha)=FIRST(\alpha)$<br />&emsp;如果$\alpha$可以推导出$\epsilon$，则$SELECT(A\to\alpha)=(FIRST(\alpha)\backslash\{\epsilon\})\cup FOLLOW(A)$</li>
</ol>
<h2 id="LL-1-文法-1"><a href="#LL-1-文法-1" class="headerlink" title="LL(1)文法"></a>LL(1)文法</h2><ol>
<li>解决了左递归和提取了左因子之后，基本避免 了回溯问题 (除了第二种回溯)，这时就可以设计确定的自顶向下分析法</li>
<li>能使用确定的自顶向下分析法的文法称为$LL(1)$文法</li>
<li>上下文无关文法$G$是$LL(1)$文法，当且仅当对于$G$的每一个非终结符$A$的任何两个不同产生式$A\to\alpha|\beta$，$SELECT(A\to\alpha)\cap SELECT(A\to\beta)=\emptyset$，且$\alpha$和$\beta$不能同时推导出$\epsilon$</li>
<li>第一个$L$表示自左而右扫描输入，第二个$L$表示最左推导，$1$表示每部分析只要向前查看一个符号</li>
<li>$LL(1)$文法不是二义的，无左递归，无左公共因子产生式</li>
<li>无左递归，无左公共因子的文法不一定是$LL(1)$文法，还有可能有第二种回溯</li>
<li>$LL(1)$文法可以直接用递归下降法求解</li>
</ol>
<h1 id="预测分析器"><a href="#预测分析器" class="headerlink" title="预测分析器"></a>预测分析器</h1><ol>
<li>预测分析器：对于$LL(1)$文法的句子，用确定的分析方法进行分析的分析程序</li>
<li>预测分析器是通用的架构，而不像递归是不通用的架构</li>
<li>工作过程：在推导替代非终结符号集的时候，利用当前非终结符号和下一个输入符号，在预测分析表中查找对应产生式，并替代</li>
<li>预测分析表就是$SELECT$集，把$SELECT$集中的右部填入左部对应行，集合内各个元素对应列的单元内</li>
<li>预测分析表的生成过程就是$SELECT$集的遍历过程</li>
<li>$LL(1)$文法是在分析表在那个不存在多重入口的文法</li>
<li>一个栈存储待处理符号，栈顶元素$X$和当前输入符号$a$表示程序状态$(X,a)$，称为一个格局<br />若$X\in V_T$，判断$X$和$a$是否相同，若相同则弹出$X$，输入指针往后移，否则为出错<br />若$X\in V_N$，查得分析表$M$的元素$M[X,a]$。若查得$M[X,a]=X\to Y_1Y_2…Y_k$，则$X$弹出，依次将$Y_k,Y_{k-1},…,Y_1$压入栈中。若$M[X,a]=error$，错误分析<br />若<script type="math/tex">X=\$ </script>，如果<script type="math/tex">a=\$ </script>，分析停止，成功分析，否则失败</li>
</ol>
<h2 id="预测分析的错误恢复"><a href="#预测分析的错误恢复" class="headerlink" title="预测分析的错误恢复"></a>预测分析的错误恢复</h2><ol>
<li>错误种类<br />&emsp;栈顶的终结符与当前输入符不匹配<br />&emsp;非终结符$A$在栈顶，面临输入符$a$，分析表$M[A,a]$为空<br />&emsp;$X=\$ $但$a≠\$ $</li>
<li>应急恢复策略：跳过输入串中的一些符号，直到遇到同步符号把栈顶元素弹出为止</li>
<li>同步符号：$FOLLOW(A)$中的所有符号作为$A$的同步符号</li>
<li>若栈顶为终结符号，但与输入符号不符，弹出栈顶终结符号</li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>编译原理 (HDU / Stanford)</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>05. Training Neural Networks</title>
    <url>/2020/04/05/05-Training-Neural-Networks/</url>
    <content><![CDATA[<h1 id="Activation-Functions"><a href="#Activation-Functions" class="headerlink" title="Activation Functions"></a>Activation Functions</h1><h2 id="Sigmoid-Function"><a href="#Sigmoid-Function" class="headerlink" title="Sigmoid Function"></a>Sigmoid Function</h2><ol>
<li>Form: $\sigma(x)=\displaystyle\frac{1}{1+e^{-x}}$</li>
<li>It squashes numbers to range $[0,1]$. </li>
<li>It has excellent interpretation as a saturating “firing rate” of a neuron. </li>
<li>However, when $x$ is very negative or very positive, the gradient of the sigmoid gate is zero, which kills the gradient flow. </li>
<li>The Sigmoid outputs are not zero-centred. When the input of a neuron is always positive, the gradients on $W$ are always all positive or negative. This might cause an insufficiency update of $W$. (Same reason we want zero-mean data)</li>
<li>Moreover, the exponential calculation is a bit compute expensively. </li>
</ol>
<h2 id="tanh-x"><a href="#tanh-x" class="headerlink" title="tanh(x)"></a>tanh(x)</h2><ol>
<li>It squashes numbers to range $[-1,1]$. </li>
<li>It is zero-centred. </li>
<li>Nevertheless, it still kills the gradient when saturated. </li>
</ol>
<h2 id="ReLU"><a href="#ReLU" class="headerlink" title="ReLU"></a>ReLU</h2><ol>
<li>Form: $f(x)=max(0,x)$. </li>
<li>It does not saturate in the positive regime and computationally efficient. </li>
<li>In practice, It converges about $6$ times faster than sigmoid/tanh. </li>
<li>Furthermore, it is more biologically plausible than sigmoid. </li>
<li>However, it is not zero-centred output, and it also kills the gradient in the negative region. </li>
<li>At some particular situation called dead ReLU, ReLU will never activate and never update. This happens when the initialization is bad or when the learning rate is too high. So people may initial ReLU neurons will slightly positive biases to increase the likelihood of being active ReLU. </li>
</ol>
<h2 id="Leaky-ReLU"><a href="#Leaky-ReLU" class="headerlink" title="Leaky_ReLU"></a>Leaky_ReLU</h2><ol>
<li>Form: $f(x)=max(0.01x,x)$. </li>
<li>It does not saturate and is computationally efficient. It converges as fast as ReLU. </li>
<li>More importantly, it will not die. </li>
<li>Another form is the parametric rectifier (PReLU) $f(x)=max(\alpha x, x)$, where $\alpha$ can be learned in backpropagation. </li>
</ol>
<h2 id="ELU"><a href="#ELU" class="headerlink" title="ELU"></a>ELU</h2><ol>
<li>Exponential Linear Units: <script type="math/tex">f(x)=\left\{\begin{array}{}x&if\ x>0\\\alpha(e^x-1)&if\ x≤0 \end{array}\right.</script>. </li>
<li>It has all benefits of ReLU except its computation requires exponential. </li>
<li>It is closer to zero mean outputs. </li>
<li>It has a negative saturation regime compared with Leaky_ReLU. </li>
<li>It adds some robustness to noise with flex parameter $\alpha$. </li>
</ol>
<h2 id="Maxout-Neuron"><a href="#Maxout-Neuron" class="headerlink" title="Maxout Neuron"></a>Maxout Neuron</h2><ol>
<li>Form: $f(x)=max(w_1^Tx+b_1,w_2^Tx+b_2)$. </li>
<li>It can generalize the ReLU and the Leaky_ReLU. </li>
<li>It has a linear regime and does not die and does not saturate. </li>
<li>Nevertheless, it doubles the number of parameters per neuron. </li>
</ol>
<h2 id="In-practice"><a href="#In-practice" class="headerlink" title="In practice"></a>In practice</h2><ol>
<li>Use ReLU. Be careful with the learning rates. </li>
<li>Sometimes try out Leaky ReLU / Maxout / ELU. </li>
<li>Maybe even try out tanh but do not expect much. </li>
<li>Do not use sigmoid. </li>
</ol>
<h1 id="Data-Preprocessing"><a href="#Data-Preprocessing" class="headerlink" title="Data Preprocessing"></a>Data Preprocessing</h1><ol>
<li>In data preprocessing, we usually want to zero-mean them by subtracting the mean from them and normalize them by dividing them with the standard deviation. </li>
<li>In practice, we may also see the PCA and Whitening of the data. </li>
<li>We do not normalize the data much when dealing with images. Moreover, we do not do PCA and Whitening for images. </li>
<li>Sometimes we also subtract per-channel mean to create zero-mean data. </li>
<li>The mean subtracted is the mean of all training data. </li>
<li>We do not do these things to each batch later once more. </li>
</ol>
<h1 id="Weight-Initialization"><a href="#Weight-Initialization" class="headerlink" title="Weight Initialization"></a>Weight Initialization</h1><ol>
<li>When the initialization with all elements being zeros is used, the gradient of earlier layers in backpropagation will become all zeros. </li>
<li>The first idea is to start with small random numbers. This works for small networks. However, with deeper networks, all activations become zero. </li>
<li>Furthermore, if we initiate $W$ with too large numbers, the gradient will be all zero and the update will stop. </li>
<li>Xavier initialization: This works all well, but when using the ReLU. <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">W = np.random.randn(fan_in, fan_out) / np.sqrt(fan_in)</span><br></pre></td></tr></table></figure></li>
<li>He et al. fixed the break of ReLU. <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">W = np.random.randn(fan_in, fan_out) / np.sqrt(fan_in / <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="Batch-Normalization"><a href="#Batch-Normalization" class="headerlink" title="Batch Normalization"></a>Batch Normalization</h1><ol>
<li>This operation tries to make the input of each layer unit gaussian activations. </li>
<li>First, compute the empirical mean and variance independently for each dimension.<br />Second, normalize $\hat{x}^{(k)}=\displaystyle\frac{x^{(k)}-E[x^{(k)}]}{\sqrt{var(x^{(k)})}}$. </li>
<li>This layer is usually inserted after Fully Connected or Convolutional layers, and before nonlinearity. </li>
<li>We also can allow the network to squash the range if it wants to. $y^{(k)}=\gamma^{(k)}\hat{x}^{(k)}+\beta^{(k)}$. Note that the network can learn $\gamma^{(k)}=\sqrt{var(x^{(k)})}$ and $\beta^{k}=E[x^{(k)}]$ to recover the identity mapping, but not definitely. </li>
<li>It improves gradient flow through the network, allows higher learning rates, reduces the strong dependence on initialization, acts as a form of regularization, and slightly reduces the need for dropout, maybe. </li>
<li>At test time, we use the mean and standard deviation calculated at training. So we skip the step of calculation at test time. </li>
</ol>
<h1 id="Babysitting-the-Learning-Process"><a href="#Babysitting-the-Learning-Process" class="headerlink" title="Babysitting the Learning Process"></a>Babysitting the Learning Process</h1><ol>
<li>The first step is to preprocess the data, as mentioned above. </li>
<li>The second step is to choose the architecture with which we want to start. </li>
<li>The third step is to double-check the loss is reasonable. Do the forward process without regularization once and see if the loss is reasonable. Do it again with regularization and see if the loss is larger. </li>
<li>Then make sure that it can overfit a tiny portion of the training data. Namely, the loss goes to $0$, and the accuracy goes to $1$. </li>
<li>After that, use the full training set, and start with small regularization and find learning rate that makes the loss go down. If the loss is not going down, the learning rate is too low. If the loss is $NaN$, the learning rate is too high. <br />Do not focus on accuracy. Because when the accuracy is low, the distribution of loss is very dense. The raise of accuracy due to luck. </li>
</ol>
<h1 id="Hyperparameter-Optimization"><a href="#Hyperparameter-Optimization" class="headerlink" title="Hyperparameter Optimization"></a>Hyperparameter Optimization</h1><ol>
<li>In cross-validation strategy, we first take a coarse search with a few epochs, to narrow down the range of parameters. </li>
<li>Then we can do a finer search with longer running time at the rough range we get to find the specific best hyperparameter. </li>
<li>We had better keep the best hyperparameters in the middle of the searching range. </li>
<li>It is best to optimize in log space. </li>
<li>Another two strategies are the random search and the grid search. If the loss is more sensitive to one of the hyperparameters, the random search can cover the situation better. </li>
<li>If the loss curve: <br />&emsp;exploded: very high learning rate<br />&emsp;decrease slowly: very low learning rate<br />&emsp;decrease rapidly first, then barely changed: very high learning rate<br />&emsp;barely changed first, but begin to decay after a while: bad initialization<br />&emsp;has big gap between training and test: overfitting, try to increase the regularization strength<br />&emsp;has no gap between: increase model capability. </li>
</ol>
<h1 id="Optimization"><a href="#Optimization" class="headerlink" title="Optimization"></a>Optimization</h1><h2 id="Problems-with-gradient-descend"><a href="#Problems-with-gradient-descend" class="headerlink" title="Problems with gradient descend"></a>Problems with gradient descend</h2><ol>
<li>Some loss function changes quickly in one direction and slowly in another. Namely, loss function has a high condition number: the ratio of the largest to the smallest singular value of the Hessian matrix is massive. </li>
<li>If the loss function has a local minimum or a saddle point, the gradient near it will be zero, and the gradient descend will get stuck. </li>
<li>The data may contain noise, which will cause the gradient to descend inaccurately. </li>
</ol>
<h2 id="Momentum"><a href="#Momentum" class="headerlink" title="Momentum"></a>Momentum</h2><ol>
<li>A straightforward strategy is to use the <code>SGD + momentum</code>. </li>
<li>The SGD has the formula: $x_{t+1}=x_t-\alpha\triangledown f(x_t)$. We can preserve a velocity as a running mean of gradients. <br />Velocity: $v_{t+1}=\rho v_t+\triangledown f(x_t)$<br />Descend: $x_{t+1}=x_t-\alpha v_{t+1}$. </li>
<li>Rho gives “friction”; typically <script type="math/tex">\rho=0.9\ or\ 0.99</script>. </li>
<li>So we update the parameters at the direction of speed instead of the gradient of the gradient. </li>
<li>Another kind of momentum is the Nesterov momentum. It updates the speed with the gradient at the endpoint of current speed. <br />Velocity: $v_{t+1}=\rho v_t-\alpha\triangledown f(x_t+\rho v_t)$. <br />Parameters: $x_{t+1}=x_t+v_{t+1}$. </li>
<li>In Nesterov momentum, we can substitute $\tilde{x}_t=x_t+\rho v_t$. So that $v_{t+1}=\rho v_t-\alpha\triangledown f(\tilde{x})$ and $\tilde{x}_{t+1}=\tilde{x}_t+v_{t+1}+\rho(v_{t+1}-v_t)$. </li>
<li>Add a momentum solved all the problems we have above. <br />&emsp;At local minima or saddle points, the velocity will maintain the update instead of stuck there. <br />&emsp;If the loss function is poor conditioning, the zig-zag gradients will cancel out by the velocity fast since the velocity is the mean of gradients. <br />&emsp;Moreover, the velocity is less sensitive to the noise. </li>
</ol>
<h2 id="AdaGrad"><a href="#AdaGrad" class="headerlink" title="AdaGrad"></a>AdaGrad</h2><ol>
<li><p>AdaGrad scales the update step size by the square root of the accumulative of the square the gradient. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dx = compute_gradient(x)</span><br><span class="line">grad_square += dx * dx</span><br><span class="line">x -= learning_rate * dx / (np.sqrt(grad_square) + <span class="number">1e-7</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>The $1e-7$ is only to make sure we will not divide by zero. </p>
</li>
<li>However, as the training time goes by, the grad_square grows larger and larger, so the step size of the update becomes smaller. </li>
<li>A better form of AdaGrad is RMSProp. This method allows the grad_square to decay to prevent it from getting too large. <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">grad_square = decay_rate * grad_square + (<span class="number">1</span> - decay_rate) * dx * dx</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Adam"><a href="#Adam" class="headerlink" title="Adam"></a>Adam</h2><ol>
<li>What the momentum does is to replace the gradient with the velocity when updating the parameters. What the AdaGrad does is to scale the update step size. </li>
<li><p>In Adam, we do them both. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dx = compute_gradient(x)</span><br><span class="line">first_moment = beta1 * first_moment + (<span class="number">1</span> - beta1) * dx</span><br><span class="line">second_moment = beta2 * second_moment + (<span class="number">1</span> - beta2) * dx * dx</span><br><span class="line">x -= learning_rate * first_moment / (np.sqrt(second_moment) + <span class="number">1e-7</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Usually, we set betas some number close to $1$. This will cause the second_moment too small at first, which will lead to a giant step at the beginning. </p>
</li>
<li>To solve the problem, we scale the moments before the update by a size decaying as time goes by. <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">first_unbias = first_moment / (<span class="number">1</span> - beta1 ** t)</span><br><span class="line">second_unbias = second_moment / (<span class="number">1</span> - beta2 ** t)</span><br><span class="line"><span class="comment"># t means this is the t-th epoch of iterate</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Learning-Rate"><a href="#Learning-Rate" class="headerlink" title="Learning Rate"></a>Learning Rate</h2><ol>
<li>No matter which optimization strategy is used, the learning rate is always a hyperparameter. </li>
<li>In practice, we do not have to stick to one constant learning rate to the end. We can change the learning rate as training goes deeper. </li>
<li>One strategy is to decay the learning rate every few epochs. </li>
<li>Alternatively, we can decay it exponentially. $\alpha = \alpha_0e^{-kt}$</li>
<li>What’ more, we can decay it as $\alpha=\displaystyle\frac{\alpha_0}{1+kt}$. </li>
<li>The change of learning rate can cause an underivable point on the graph of the loss function. </li>
</ol>
<h2 id="Second-Order-Optimization"><a href="#Second-Order-Optimization" class="headerlink" title="Second-Order Optimization"></a>Second-Order Optimization</h2><ol>
<li>What we discussed before is all first-order optimization, which uses the gradient form linear approximation ($\Delta f(x_0,x_1,…)\approx \displaystyle\sum_{x_i}f_{x_i}(x-x_i)$) to step to minimize the approximation. </li>
<li>In second-order optimization, we use the gradient and the Hessian matrix to form a quadratic approximation <br />$\Delta f(x_0,x_1,…)\approx \displaystyle\sum_{x_i}f_{x_i}(x-x_i)+\sum_{x_i}\sum_{x_j}\frac{1}{2}f_{x_ix_j}(x-x_i)(x-x_j)$</li>
<li>The $(i,j)$ element of the Hessian matrix is $f_{x_ix_j}$. </li>
<li>In the vector form, $J(\vec{\theta})=J(\vec{\theta_0})+(\vec{\theta}-\vec{\theta_0})^T\triangledown_{\vec{\theta}}J(\vec{\theta_0})+\displaystyle\frac{1}{2}(\theta-\theta_0)^TH(\theta-\theta_0)$</li>
<li>Solve for the critical point, and we obtain the Newton parameter update: $\vec{\theta}^*=\vec{\theta_0}-H^{-1}\triangledown_{\vec{\theta}}J(\vec{\theta_0})$. </li>
<li>This method avoids the hyperparameters. It does not contain the learning rate. </li>
<li>Nevertheless, the Hessian matrix has $N^2$ elements. To invert it requires $O(N^3)$. </li>
<li>Quasi-Newton methods (BGFS most popular): instead of inverting the Hessian ($O(n^3)$), approximate inverse Hessian with rank $1$ updates over time ($O(n^2)$ each). </li>
<li>L-BFGS (Limited memory BFGS): Does not form/store the full inverse Hessian. It cannot handle stochastic problems well.</li>
</ol>
<h2 id="In-Practice"><a href="#In-Practice" class="headerlink" title="In Practice"></a>In Practice</h2><ol>
<li>Adam optimization is often the best choice. </li>
<li>If full batch updates can be afforded then maybe try out L-BFGS (and do not forget to disable all sources of noise). </li>
</ol>
<h1 id="Decrease-the-Gap"><a href="#Decrease-the-Gap" class="headerlink" title="Decrease the Gap"></a>Decrease the Gap</h1><p>Usually, there will exist a gap between the loss functions of the training set and the test set. </p>
<h2 id="Model-Ensembles"><a href="#Model-Ensembles" class="headerlink" title="Model Ensembles"></a>Model Ensembles</h2><ol>
<li>The first strategy to decrease the gap is to train multiple independent models and average their results at test time. </li>
<li>This will have a slight improvement at test. </li>
<li>Instead of training independent models, use multiple snapshots of a single model during training. Cyclic learning rate schedules can make this work even better. </li>
<li>Instead of using the actual parameter vector, keep a moving average of the parameter vector and use that at test time (Polyak averaging)</li>
</ol>
<h2 id="Dropout"><a href="#Dropout" class="headerlink" title="Dropout"></a>Dropout</h2><ol>
<li>This strategy can improve single-model performance. </li>
<li>Using dropout, we randomly set some neurons to zero in each forward pass. Probability of dropping is a hyperparameter $p$, which is typical $0.5$. </li>
<li>By the mean of setting to zero, we set the input of activation to zero. </li>
<li>It forces the network to have a redundant representation and prevents co-adaptation of features. Dropout often happens at fully-connected layers, but sometimes convolution layers. </li>
<li>Dropout is training a large ensemble of models that share parameters. </li>
<li>Each dropout decision is called a dropout mask, and each binary mask is one model. </li>
<li>Nevertheless, dropout makes our output random with $y=f(x,z)$, where $z$ is the random dropout mask. </li>
<li>In order to average out the randomness at test-time, we want $y=E_z[f(x,z)]=\displaystyle\int p(z)f(x,z)dz$. </li>
<li>However, the integral is hard to calculate, so we want an approximation of it by consider it discrete. Funnily, the approximation is to scale each activation with the probability $p$. </li>
<li>With dropout, we might need  a bit longer time to train, but after training, the model will have a better generalization. </li>
</ol>
<h2 id="Data-Augmentation"><a href="#Data-Augmentation" class="headerlink" title="Data Augmentation"></a>Data Augmentation</h2><ol>
<li>This strategy creates new images from the old ones with some operations. </li>
<li>The common operations for data augmentation: <br />&emsp;Horizontal flips<br />&emsp;Random crops and scales<br />&emsp;Color jitter</li>
</ol>
<h2 id="Common-Pattern"><a href="#Common-Pattern" class="headerlink" title="Common Pattern"></a>Common Pattern</h2><ol>
<li>The common strategy is to add random noise at training and marginalize over the noise at test. </li>
<li>Batch normalization fits this common pattern, too. In training, it normalizes using stats from random minibatches, while in the test, it uses fixed stats to normalize. </li>
<li>Another strategy which is similar to the dropout is drop-connect. Instead of dropout neurons before activation, it drops connections between layers by setting part of the weight matrix to zero. </li>
<li>Two more unusual strategies are the fractional max pooling and the stochastic depth. </li>
</ol>
<h1 id="Transfer-Learning"><a href="#Transfer-Learning" class="headerlink" title="Transfer Learning"></a>Transfer Learning</h1><ol>
<li>This is a backup plan when the dataset is not large. </li>
<li>First, train the network at another dataset on the internet. Then finetune the linear classifier with our dataset. </li>
<li>If our dataset is tiny, then we can use linear classifier on top layer and train with some very similar dataset. If our dataset is quite large, then we can finetune a few layers. </li>
<li>With more similar datasets, the layer needed to finetune is less. </li>
<li>Transfer learning with CNNs is pervasive. This is the norm, not an exception. e</li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>计算机视觉 (Stanford CS231n)</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>深度学习</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>05. 自底向上语法分析</title>
    <url>/2020/05/13/05-%E8%87%AA%E5%BA%95%E5%90%91%E4%B8%8A%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<ol>
<li>方法：从输入串开始，逐步进行归约，直到归约到文法的开始符号</li>
<li>边扫描输入串，边把输入符号移入分析者，边检查位于栈顶的一串符号是否与某个产生式的右部相同。如果相同，就把串归约为相应左部非终结符，否则继续移入输入符号。重复直到栈内符号为开始符号</li>
<li>构造分析树时从叶节点 (句子)开始，(以单位为单位)向根节点前进</li>
<li>问题：如何合适地选择归约串。一个串是多个不同左部产生式的右部；可以看成多种不同的串分别都是不同产生式的右部</li>
<li>本质是每次都把句柄归约</li>
<li>初始时栈内只有$\<script type="math/tex">，结束时栈内是$S\</script>，输入缓冲为空</li>
</ol>
<h1 id="可归约串的识别——LR分析"><a href="#可归约串的识别——LR分析" class="headerlink" title="可归约串的识别——LR分析"></a>可归约串的识别——LR分析</h1><ol>
<li>$LR$分析程序，是通用的分析程序，自左向右 ($L$)扫描，识别句柄，自下而上归约，构造一个最右推导的逆过程 ($R$)。为了作出分析决定前(构造分析表时)而向前看的输入符号的个数，通常是$0$或$1$</li>
<li>$LR$分析器是无回溯的“移进-归约”方法，根据栈中的符号串和向右顺序查看输入串中的$k(k≥0)$个符号唯一确定分析器的操作</li>
<li>结构：符号栈、状态栈、$action$表、$goto$表。$action$表和$goto$表构成分析表</li>
<li>状态栈的栈顶元素用$s_m$表示，当前输入符号用$a_i$表示</li>
<li>$action$表根据当前状态和输入符号唯一确定是移进、归约、接受、报错</li>
<li>$goto$表根据压入的非终结符号和当前状态确定下一个状态</li>
<li>把栈中符号序列和剩余输入串看书一个二元格局，初始格局为$(s_0,a_1a_2…a_n\$)$<br />假设当前格局为$(s_0X_1s_1X_2s_2…X_ms_m,a_ia_{i+1}…a_n\$)$<br />&emsp;若<script type="math/tex">action[s_m,a_i]=shift\ s</script>，二元式变为$(s_0X_1s_1X_2s_2…X_ms_ma_is,a_{i+1}…a_n\$)$<br />&emsp;若<script type="math/tex">action[s_m,a_i]=reduce\ A\to\beta</script>，$|\beta|=r$，二元式变为$(s_0X_1s_1X_2s_2…X_{m-r}s_{m-r}As,a_ia_{i+1}…a_n\$)$<br />&emsp;&emsp;$s=goto[s_{m-r},A]$，$\beta=X_{m-r+1}X_{m-r+2}…X_m$</li>
</ol>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ol>
<li>活前缀：归约前栈内的所有符号。即，句柄的前缀。<br />严格定义：若$S’\Rightarrow^*_{rm}\alpha Aw\Rightarrow_{rm}\alpha\beta w$是文法$G$的拓广文法$G’$的一个规范推导，符号$\gamma$是$\alpha\beta$的前缀，则称$\gamma$是$G$的一个活前缀。<br />在$w$的任何一个符号被压入栈前，$\alpha\beta$就必然形成可归约串，并立即运用产生式$A\to\beta$归约，就不可能和$\beta$的任何一个符号同时出现在栈中，就不是活前缀</li>
<li>每个句柄的识别过程划分为若干个状态，用$\cdot$做区分，称为$LR(0)$项目。<br />例如对产生式$A\to XYZ$，$LR(0)$项目有$A\to\cdot XYZ,A\to X\cdot YZ,A\to XY\cdot Z,A\to XYZ\cdot$，分别表示$XYZ$均未入栈；$X$入栈，$YZ$未入栈；$XY$入栈，$Z$未入栈；$XYZ$均入栈<br />$A\to\epsilon$的项目为$A\to\cdot$</li>
<li>拓广文法：添加一个唯一的推导出开始符号的符号。$S’$是$G’$的开始符号，$S$是$G$的开始符号，$G’$之比$G$多一条$S’\to S$</li>
<li>包含了完整句柄的活前缀称为可归前缀</li>
<li>分析过程可以看做是活前缀的识别过程</li>
</ol>
<h1 id="LR-0-分析"><a href="#LR-0-分析" class="headerlink" title="LR(0)分析"></a>LR(0)分析</h1><ol>
<li>根据$LR(0)$项目分析操作类型</li>
<li>项目分类：<br />&emsp;$A\to\alpha\cdot a\beta$，$a\in V_T$，移进项目<br />&emsp;$A\to\alpha\cdot B\beta$，$B\in V_N$，待归约项目<br />&emsp;$A\to\alpha\cdot$，归约项目<br />&emsp;$S’\to\cdot S$，开始项目<br />&emsp;$S’\to S\cdot$，接受项目<br />&emsp;项目$A\to XY\cdot Z$是$A\to X\cdot YZ$的后继项目</li>
</ol>
<h2 id="构造识别所有活前缀的NFA"><a href="#构造识别所有活前缀的NFA" class="headerlink" title="构造识别所有活前缀的NFA"></a>构造识别所有活前缀的NFA</h2><ol>
<li>开始符号$S’\to\cdot S$是NFA的唯一初态</li>
<li>项目$j$是项目$i$的后继项目，就从$i$画一条$X_j$弧到$j$</li>
<li>若项目$i$后是一个非终结符号，$X\to \alpha\cdot A\beta$，从$i$画$\epsilon$弧到所有$A\to\cdot\gamma$，因为他们是等价状态</li>
</ol>
<h2 id="识别活前缀的有效项目的DFA"><a href="#识别活前缀的有效项目的DFA" class="headerlink" title="识别活前缀的有效项目的DFA"></a>识别活前缀的有效项目的DFA</h2><ol>
<li>如果存在一个规范推导$S\Rightarrow^*_{rm}\alpha Aw\Rightarrow\alpha\beta_1\beta_2w$，则项目$A\to \beta_1\cdot\beta_2$对识别活前缀$\gamma=\alpha\beta_1$是有效的</li>
<li>若项目$A\to\alpha\cdot B\beta$对识别活前缀$\gamma=\delta\alpha$是有效的，且$B\to\cdot\eta$对识别活前缀$\gamma=\delta\alpha$也有效</li>
<li>某个活前缀$\gamma$的所有有效项目组成的集合称为$\gamma$的有效项目集</li>
<li>所有有效项目集组成的集合称为$LR(0)$项目的集规范族，即DFA的状态集</li>
<li>有效项目集就是之前对每一个项目的$\epsilon$闭包。若项目$A\to\alpha\cdot B\beta$在$closure(I)$中，且$B\to\gamma$是$G$的一个产生式，如果$B\to\cdot\gamma$不在$closure(I)$中，则将$B\to\cdot\gamma$加入$closure(I)$</li>
<li>待归约项目称为基本项目，是每一个有效项目集的核心</li>
<li>转移函数$go(I,X)$，输入中把当前状态改为当前有效项目集，输出改为下一有效状态集，$go(I,X)=closure(J)$，$J=\{A\to\alpha X\cdot\beta|A\to\alpha\cdot X\beta\in I\}$</li>
<li>带有归约项目的有效项目集都是生成的DFA的接受状态</li>
</ol>
<h2 id="分析表的构造"><a href="#分析表的构造" class="headerlink" title="分析表的构造"></a>分析表的构造</h2><ol>
<li>$LR(0)$文法：DFA中每个状态不存在：既含移进项目又含归约项目 (移进-归约冲突)、含有多个归约项目 (归约-归约冲突)</li>
<li>若项目$A\to\alpha\cdot X\beta\in I_k$，且$go(I_k,X)=I_j$，则<br />&emsp;若$X=a$为终结符号，则置<script type="math/tex">action[k,a]=shift\ j</script>，简写为$sj$，表示把$a$和$j$移入栈中<br />&emsp;若$X$是非终结符号，则置$goto[k,X]=j$</li>
<li>若$S’\to S\in I_k$，则置$action[k, \$]=acc$</li>
<li>若$A\to\alpha\cdot\in I_k$，则对所有终结符号$a$，置<script type="math/tex">action[k,a]=reduce\ A\to\alpha</script>，简写为$rj$，$j$为产生式编号</li>
<li>其他空白格都表示出错</li>
</ol>
<h1 id="SLR-1-文法"><a href="#SLR-1-文法" class="headerlink" title="SLR(1)文法"></a>SLR(1)文法</h1><ol>
<li>如果有冲突，我们可以提前看下一个输入非终结符号，把移进和归约、归约和归约分离开来制作$action$表</li>
<li>$LR(0)$文法中归约的优先级过高，在$LR(1)$文法中，我们通过限定归约的前提条件来解决冲突</li>
<li>$n$个归约$A_i\to\gamma_i\cdot$，若$FOLLOW(A_1)\cap FOLLOW(A_0)\cap…\cap FOLLOW(A_n)=\emptyset$，则当$I$面临输入符号$a$时<br />&emsp;若$a\notin FOLLOW(A_1)\cup FOLLOW(A_0)\cup…\cup FOLLOW(A_n)$，移进<br />&emsp;若$a\in FOLLOW(A_1)$，用$A_1\to\gamma_1$归约<br />&emsp;若$a\in FOLLOW(A_2)$，用$A_2\to\gamma_2$归约<br />&emsp;$…$<br />&emsp;否则，报错</li>
<li>$action$表的生成中唯一的不同就是在填入归约操作时要提前展望下一输入</li>
</ol>
<h1 id="LR-1-分析"><a href="#LR-1-分析" class="headerlink" title="LR(1)分析"></a>LR(1)分析</h1><ol>
<li>问题：移进符号在某个归约符号的$FOLLOW$集中</li>
<li>原因：$SLR(1)$只考虑了$FOLLOW$集，没有考虑规范文法的上下文</li>
<li>考察每一条产生式，如果在某个项目集$I$中包含项目$A\to\alpha\cdot B\beta$，则$B\to\cdot\gamma$也属于$I$。由$FOLLOW$集与$FIRST$集的定义可知$FIRST(\beta)\subseteq FOLLOW(B)$。用$FIRST(\beta)$替代$SLR(1)$中的$FOLLOW(B)$</li>
<li>在分析的时候，项目增加一元，表示用此产生式归约时，后面可以跟的元素，称之为搜索符，原本的表达式状态称为心，即$[心(产生式)，搜索符]$的二元式形式，$搜索符\in FIRST(\beta)$</li>
<li>开始项目变为$[S’\to S,\$]$</li>
<li>闭包函数：若$[A\to\alpha\cdot B\beta,a]\in I$，$B\to\gamma$是一条产生式，$b\in FIRST(\beta a)$，则将$[B\to\cdot\gamma,b]$加入$CLOSURE(I)$中</li>
<li>转换函数：$I$中任何形如$[A\to\alpha\cdot X\beta,a]$，$[A\to\alpha X\cdot\beta,a]$都在$J$中，$GO(I,X)=CLOSURE(J)$</li>
</ol>
<h1 id="LALR-1-分析"><a href="#LALR-1-分析" class="headerlink" title="LALR(1)分析"></a>LALR(1)分析</h1><ol>
<li>$LR(1)$分析由于原本一个状态根据不同的搜索符拆分成了不同的多个状态，状态的数量大量增加</li>
<li>我们可以把心相同，但是搜索符不同的项目合并成一个项目，来减少项目的数量</li>
<li>$LALR(1)$分析的结果不会出现移进-归约冲突，但是仍然可能出现归约-归约冲突</li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>编译原理 (HDU / Stanford)</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>05. Transposes, Permutations, Spaces Rⁿ</title>
    <url>/2020/01/19/05-Transposes-Permutations-Spaces-R-n/</url>
    <content><![CDATA[<h1 id="Transpose"><a href="#Transpose" class="headerlink" title="Transpose"></a>Transpose</h1><ol>
<li>Definition: The <code>transpose</code> of a matrix is to put the columns of the original matrix in the row of the new matrix. In another words, flip the matrix over its main diagonal. We denote the transpose of matrix as <script type="math/tex">A^T</script></li>
<li>$(A^T)_{ij}=A_{ji}$</li>
<li>The <code>dot product (inner product)</code> of vectors can be written as the transposed form <script type="math/tex">x\cdot y = x^Ty</script></li>
<li>The <code>outer product</code> of vectors can be written as <script type="math/tex">xy^T</script></li>
<li>An essential property of transpose is that <script type="math/tex">Ax\cdot y=x\cdot A^Ty</script></li>
<li>$(A+B)^T = A^T +B^T$</li>
<li><script type="math/tex">(AB)^T=B^TA^T</script>. <script type="math/tex">AB</script> is the combination of columns of <script type="math/tex">A</script> while <script type="math/tex">B^TA^T</script> is the combination of rows of <script type="math/tex">A^T</script>. They are the same numbers but in different directions. So after transpose of <script type="math/tex">AB</script>, they are the same. </li>
<li><script type="math/tex">(A^{-1})^T=(A^T)^{-1}</script>. <script type="math/tex">AA^{-1}=T\ \Rightarrow\ (AA^{-1})^T=I^T=I\ \Rightarrow\ (A^{-1})^TA^T=I</script>. <script type="math/tex">A^T</script> is invertible exactly when <script type="math/tex">A</script> is invertible. </li>
</ol>
<h2 id="Transpose-of-Derivative"><a href="#Transpose-of-Derivative" class="headerlink" title="Transpose of Derivative"></a>Transpose of Derivative</h2><ol>
<li>The inner product of functions are <script type="math/tex">x(t)^Ty(t)=(x,\ y)=\displaystyle \int^{\infty}_{-\infty}{x(t)y(t)\ dt}</script></li>
<li>$A$ is the derivative, $A=\displaystyle\frac{d}{dt}$</li>
<li><script type="math/tex">(Ax)^Ty=\displaystyle \int^{\infty}_{-\infty}{\frac{dx}{dt}y(t)\ dt}=\displaystyle \int^{\infty}_{-\infty}{x(t)(-\frac{dy}{dt})\ dt}=-x^T(A^Ty)</script> （Integration by parts）</li>
<li>So <script type="math/tex">A^T=-\displaystyle\frac{d}{dt}=-A</script></li>
</ol>
<h1 id="Symmetric-Matrix"><a href="#Symmetric-Matrix" class="headerlink" title="Symmetric Matrix"></a>Symmetric Matrix</h1><ol>
<li>A <code>symmetric matrix</code> is a matrix that transpose does not change, i.e. <script type="math/tex">S^T=S</script></li>
<li>The inverse of a symmetric matrix is also symmetric. </li>
<li>To create a symmetric matrix, we can multiply <script type="math/tex">A</script> and <script type="math/tex">A^T</script>. <br />$S = AA^T$, i.e. <script type="math/tex">S_{ij}=(row\ i\ of\ A)\cdot (column\ j\ of\ A^T)</script><br />also <script type="math/tex">(row\ i\ of\ A)^T=column\ i\ of\ A^T</script> and <script type="math/tex">(column\ j\ of\ A^T)^T=row\ j\ of\ A</script><br />So <script type="math/tex">S_{ij}=(column\ i\ of\ A^T)^T\cdot(row\ j\ of A)^T=((row\ j\ of A)\cdot (column\ i\ of A^T))^T=S_{ji}^T=S_{ji}</script></li>
<li>A symmetric matrix can be factorized into <script type="math/tex">LDL^T</script>. We do half operations to calculate because we only have to eliminate half of the matrix, so in the first stage, multiplication can be reduced by half. Naturally, only half of the storage is needed to store. </li>
<li>For symmetric, <script type="math/tex">A^T=A</script><br />For <code>antisymmetric</code>, <script type="math/tex">A^T=-A</script></li>
</ol>
<h1 id="Permutation-Matrix"><a href="#Permutation-Matrix" class="headerlink" title="Permutation Matrix"></a>Permutation Matrix</h1><ol>
<li>A <code>permutation matrix</code> is an identity matrix in different row orders. </li>
<li>There are <script type="math/tex">n!</script> permutation matrices. </li>
<li><script type="math/tex">P^T</script> is also a permutation matrix. Any product <script type="math/tex">P_1P_2</script> is a permutation matrix, too. </li>
<li>Permutation matrix can be used to do row exchanges, which makes the elimination with row exchanges <script type="math/tex">PA=LU</script></li>
<li>For a permutation matrix, <script type="math/tex">P^{-1}=P^T</script></li>
</ol>
<h1 id="Vector-Space"><a href="#Vector-Space" class="headerlink" title="Vector Space"></a>Vector Space</h1><ol>
<li>A vector space is a space where <script type="math/tex">\forall \vec{x},\ \vec{y}\in S,\forall c,\ d\in R,\ (c\vec{x}+d\vec{y})\in S</script></li>
<li><script type="math/tex">R^n</script> is a vector space which contains all real column vectors with <script type="math/tex">n</script> components. </li>
<li>A vector whose <script type="math/tex">n</script> components are complex numbers lies in the space <script type="math/tex">C^n</script>. </li>
<li>Whatever it is in the vector space, they must obey these rules: <br />&emsp;We can add any vectors in <script type="math/tex">S</script> and multiply by any scalar. <br />&emsp;The result stays in the space. <br />&emsp;Commutative law and distributive law are valid. <br />&emsp;Exist a unique “zero vector”, that <script type="math/tex">\vec{0}+\vec{v}=\vec{v}</script>. <br />The “vectors” in a vector space can be matrices or functions of <script type="math/tex">\vec{x}</script>, too. </li>
<li>The vector space with only <script type="math/tex">\vec{0}</script> is noted as <script type="math/tex">Z</script>. <script type="math/tex">Z</script> is zero-dimensional and the smallest possible vector space. </li>
<li>A subspace is another space that holds no more vectors then the superspace. </li>
<li>The Subspace of <script type="math/tex">R^n</script> still has <script type="math/tex">n</script> components, so they are not <script type="math/tex">R^m\ (m < n)</script>. </li>
<li>The union of two subspace is not always another subspace. <br />&emsp;If the two vectors are not from the same subspace, their combination could go out of the two subspace. <br />&emsp;Nevertheless, the intersection of two subspace is another subspace.<br />&emsp;If <script type="math/tex">\vec{x}</script> and <script type="math/tex">\vec{y}</script> are in the intersection of subspace <script type="math/tex">S</script> and <script type="math/tex">T</script>, all the linear combination of <script type="math/tex">\vec{x}</script> and <script type="math/tex">\vec{y}</script> is in <script type="math/tex">S</script> and <script type="math/tex">T</script>, i.e. all the linear combination is in the intersection of <script type="math/tex">S</script> and <script type="math/tex">T</script>.  </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>线性代数 (MIT 18.06)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>06. Column Space and Nullspace</title>
    <url>/2020/01/26/06-Column-Space-and-Nullspace/</url>
    <content><![CDATA[<h1 id="Column-Space"><a href="#Column-Space" class="headerlink" title="Column Space"></a>Column Space</h1><ol>
<li>For a matrix <script type="math/tex">A</script>, its <code>column space</code> contains not only <script type="math/tex">n</script> columns of <script type="math/tex">A</script>, but also all combinations <script type="math/tex">A\vec{x}</script>. The column space of <script type="math/tex">A</script> is denoted as <script type="math/tex">C(A)</script>. </li>
<li>To solve <script type="math/tex">A\vec{x}=\vec{b}</script> is to express <script type="math/tex">\vec{b}</script> as a combination of columns. The <script type="math/tex">\vec{b}</script> has to be in the column space of $A$, or no solution! </li>
<li>The column space of <script type="math/tex">A_{m\times n}</script> is a subspace of <script type="math/tex">R^m</script> (not <script type="math/tex">R^n</script>), for each column has $n$ components.  </li>
<li>The column space is the smallest subspace containing all column vectors. </li>
<li>The row space of <script type="math/tex">A</script> is <script type="math/tex">C(A^T)</script>. </li>
</ol>
<h1 id="Nullspace"><a href="#Nullspace" class="headerlink" title="Nullspace"></a>Nullspace</h1><ol>
<li>For equation <script type="math/tex">A\vec{x}=\vec{0}</script>, if <script type="math/tex">A</script> is invertible, it has only one solution <script type="math/tex">\vec{x}=\vec{0}</script>. Otherwise, there are nonzero solutions. </li>
<li>The <code>nullspace</code> <script type="math/tex">N(A)</script> consists of all solutions to <script type="math/tex">A\vec{x}=\vec{0}</script>. </li>
<li>Prove that the nullspace is a vector space: <br />&emsp;<script type="math/tex">\forall\ \vec{x}, \ \vec{y}\ \in\ N(A),\ A\vec{x}=\vec{0}, \ A\vec{y}=\vec{0}</script><br />&emsp;<script type="math/tex">A\vec{x}+A\vec{y}=\vec{0}+\vec{0}=\vec{0}=A(\vec{x}+\vec{y})</script><br />&emsp;<script type="math/tex">A(\vec{x}+\vec{y})=\vec{0}</script>. So <script type="math/tex">\vec{x}+\vec{y}</script> is in the <script type="math/tex">N(A)</script><br />&emsp;<script type="math/tex">A(c\vec{x})=cA\vec{x}=c\vec{0}=\vec{0}</script>. So <script type="math/tex">c\vec{x}</script> is in the <script type="math/tex">N(A)</script>. <br />&emsp;Conclusion, <script type="math/tex">N(A)</script> is a vector space. </li>
<li><script type="math/tex">N(A)</script> is a subspace of <script type="math/tex">R^n</script>. </li>
<li>A nullspace can be described by special solutions to <script type="math/tex">A\vec{x}=\vec{0}</script>. </li>
<li>The <code>free components</code> correspond to columns with no pivots. </li>
<li>If we have <script type="math/tex">k</script> free components, we can get <script type="math/tex">k</script> special solutions. The only thing to do is to set one free component to $1$ and all others to $0$. </li>
<li>For invertible matrix <script type="math/tex">A</script>, <script type="math/tex">N(A)=Z</script>. Further for any matrix <script type="math/tex">A</script>, if <script type="math/tex">N(A)=Z</script>, that means the columns of <script type="math/tex">A</script> are <code>independent</code>. </li>
<li>For matrices <script type="math/tex">A_{m\times n}</script> with <script type="math/tex">n > m</script>, there must be at least <script type="math/tex">n-m</script> free variables. </li>
<li>The <code>dimension of a nullspace</code> is the number of free variables. </li>
<li>Every free column is a combination of earlier pivot columns. It is the special solutions (set the corresponding free component to $1$) that tell us those combinations. </li>
</ol>
<h1 id="Reduced-Row-Echelon-Form"><a href="#Reduced-Row-Echelon-Form" class="headerlink" title="Reduced Row Echelon Form"></a>Reduced Row Echelon Form</h1><ol>
<li>The <code>reduced row echelon form (rref)</code> has $1$s in the pivots’ position and $0$s above and bellow, which is denoted by <script type="math/tex">rref(A)</script> or <script type="math/tex">R</script>. </li>
<li>The eliminations will not change the nullspace, i.e. <script type="math/tex">N(A)=N(U)=N(R)</script></li>
<li>The pivot columns of <script type="math/tex">R</script> contain <script type="math/tex">I</script>. </li>
<li>With some row and column exchanges, put all pivot column before free columns and pivot rows before free rows. This form of <script type="math/tex">R</script> is like <script type="math/tex">R=\left[\begin{matrix}I & F \\ 0&0\end{matrix}\right]</script>. Since all special solutions form a nullspace matrix called <script type="math/tex">N</script>, <script type="math/tex">RN=0</script>. After solving this equation, we can get <script type="math/tex">N=\left[\begin{matrix}-F\\I\end{matrix}\right]</script>. In <script type="math/tex">N</script>, pivots are above free variables. </li>
</ol>
<h1 id="Rank"><a href="#Rank" class="headerlink" title="Rank"></a>Rank</h1><ol>
<li>The <code>rank of a matrix</code> is the number of pivots. Rank is denoted by <script type="math/tex">r</script>. </li>
<li>The actual size of <script type="math/tex">A</script> is given by its rank. </li>
<li>All three matrices <script type="math/tex">A</script>, <script type="math/tex">U</script> and <script type="math/tex">R</script> have <script type="math/tex">r</script> independent rows. </li>
<li>The rank <script type="math/tex">r</script> is the dimension of the column space and the dimension of the row space. </li>
<li><script type="math/tex">n - r</script> is the dimension of the nullspace and the number of free variables. </li>
<li>$r(A)=r(A^T)$</li>
<li>Matrix <script type="math/tex">A</script> has full row rank means: <br />&emsp;The column space is the whole space <script type="math/tex">R^m</script><br />&emsp;There are <script type="math/tex">n-r=n-m</script> special solutions in the nullspace of <script type="math/tex">A</script></li>
<li>Matrix <script type="math/tex">A</script> has full column rank means: <br />&emsp;The nullspace <script type="math/tex">N(A)</script> contains only the zero vector. <br />&emsp;If <script type="math/tex">A\vec{x}=\vec{b}</script> has a solution, then it has only one solution. </li>
<li>Every rank one matrix is one column times one row <script type="math/tex">A=\vec{u}\vec{v}^T</script></li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>线性代数 (MIT 18.06)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>05. Drawing</title>
    <url>/2019/08/03/05.Drawing/</url>
    <content><![CDATA[<h1 id="View"><a href="#View" class="headerlink" title="View"></a>View</h1><ol>
<li>The View of “MVC”, contains a lot of views. These are two different “view”s</li>
<li>A view is a subclass of UIView, which represents a rectangle area. That rectangle area defines a coordinate space for drawing, and for handling touch events</li>
</ol>
<h2 id="Hierarchical"><a href="#Hierarchical" class="headerlink" title="Hierarchical"></a>Hierarchical</h2><ol>
<li>A view has only one superview.<br>In each view there is a <code>var superview: UIView?</code> for us to visit the superview.<br>The superview is an optional because it may not currently in the screen. <a id="more"></a></li>
<li>A view can have multiple subviews.<br>There is also a <code>var subviews: [UIView]</code> for us to visit the subviews.<br>Those later in the array are on top of those earlier.</li>
<li>The hierarchical is most often constructed in Xcode graphically</li>
<li>However, we can also do it by code, such as call <code>addSubview(_ view: UIView)</code> in the superview and <code>removeFromSuperview()</code> in the subview. </li>
<li>The top of the usable view hierarchy is the Controller’s view<br>We can access this view in the Controller by the <code>var view: UIView</code></li>
</ol>
<h2 id="Coordinate-System"><a href="#Coordinate-System" class="headerlink" title="Coordinate System"></a>Coordinate System</h2><h3 id="Four-Types"><a href="#Four-Types" class="headerlink" title="Four Types"></a>Four Types</h3><ol>
<li>It’s always required to use CGFloat instead of Double or Float in this system. </li>
<li>The CGPoint contains two CGFloats x and y. </li>
<li>The CGSize contains two CGFloats width and height. </li>
<li>The CGRect contains one CGPoint and one CGSize. </li>
</ol>
<h3 id="the-Coordinate"><a href="#the-Coordinate" class="headerlink" title="the Coordinate"></a>the Coordinate</h3><ol>
<li>The origin point is in the upper left, and the y-axis vertically point down while the x-axis horizontally point to the right</li>
<li>Pixels are the minimum-sized unit of drawing your device is capable of<br>Points are the units in the coordinate system<br>Most of the time there are 2 pixels per point, but it could be only 1 or even 3<br>We can know how many pixels are there by accessing <code>contentScaleFactor: CGFloat</code> in UIView</li>
<li>In each UIView, there is a <code>var bounds: CGRech</code> that limits where drawing happens.<br>This rectangle contains its own coordinate system of this view</li>
<li>There is also two variables that might be confused with the bounds: center and frame<br>These two variables are not in the coordinate of this view, but in the coordinate of its superview.<br>They are used to tell us where is this view, instead of where should we draw.<br>Given that the view may be rotated in the superview, the origin and size of frame is different. In the coordinate system of the superview, we take the lowest(smallest x) point X and the most left(smallest y) point Y. The origin of frame is (X.y, Y.x), and the size of frame is (X.x, Y.y)<br><img src="/img/05.Drawing01.png" width="40%"><br>For view B, <code>bounds = ((0, 0), (200, 250))</code>, <code>frame = ((140, 65), (320, 320))</code>, <code>center = (300, 225)</code></li>
</ol>
<h2 id="Creat-A-View"><a href="#Creat-A-View" class="headerlink" title="Creat A View"></a>Creat A View</h2><ol>
<li>The first way to creat one is dragging. First drag a view to the main.storyboard, then in the identifier inspector, we select the class we need in the class label<br><img src="/img/05.Drawing02.png" width="30%"></li>
<li>The second way is code. Use <code>let newView = UIView(frame:)</code> to creat a UIView.  We can use the addSubview method to assign this new view a superview</li>
</ol>
<h2 id="Draw-In-Views"><a href="#Draw-In-Views" class="headerlink" title="Draw In Views"></a>Draw In Views</h2><h3 id="Draw"><a href="#Draw" class="headerlink" title="Draw"></a>Draw</h3><ol>
<li>To draw, just create a UIView subclass and override draw(CGRect)</li>
<li>The draw method: override func draw(_ rect: CGRect)</li>
<li>It is legal to draw outside the rect. It is our UIView’s bounds that describe the entire drawing area (the rect is a subarea).</li>
<li>NEVER CALL THE DRAW METHOD EVER. IF WANT TO REDRAW SOME VIEW, CALL THE <code>setNeedDisplay()</code>. DRAW IS A METHOD FOR THE SYSTEM TO CALL!!!</li>
<li>In the draw function, we can use a variable <code>bounds</code> to get the bounds of the current drawing view. </li>
</ol>
<h3 id="Implement-Draw-method"><a href="#Implement-Draw-method" class="headerlink" title="Implement Draw method"></a>Implement Draw method</h3><h4 id="Drawing-Context"><a href="#Drawing-Context" class="headerlink" title="Drawing Context"></a>Drawing Context</h4><ol>
<li>Get a context by <code>UIGraphicsGetCurrentContext()</code> to draw into. </li>
<li>Creat paths (lines, arcs)</li>
<li>Set drawing attributes like colors, fonts, textures, linewidths, linecaps, etc.</li>
<li>Stroke or fill the above-created paths with the given attributes. But you can only do one of those operations, because once you do so, the path will be consumed. <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> context = <span class="type">UIGraphicsGetCurrentContext</span>()</span><br><span class="line">&#123;</span><br><span class="line">  context.move(to: <span class="type">CGPoint</span>)</span><br><span class="line">  context.addline(to: <span class="type">CGPoing</span>)</span><br><span class="line">  context.setLineWidth(<span class="type">CGFloat</span>)</span><br><span class="line">  <span class="type">UIColor</span>.green.setFill()</span><br><span class="line">  <span class="type">UIColor</span>.red.setStrokePath()</span><br><span class="line">  context.strokePath()  <span class="comment">// After this line excuted, this path is consumed</span></span><br><span class="line">  context.fillPath() <span class="comment">// So this line draws nothing</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Creat-Paths-by-UIBezierPath"><a href="#Creat-Paths-by-UIBezierPath" class="headerlink" title="Creat Paths by UIBezierPath"></a>Creat Paths by UIBezierPath</h4><ol>
<li>First, creat an instance of UIBezierPath.</li>
<li>That instance is not only a path, but also the current point which is originally in (0, 0)</li>
<li>move(to: CGPoint) can move the current point to a specific position without creating a path<br>addLine(to: CGPoint) can creat a path connecting the current point and a specific point, then move the current point to there</li>
<li>close() can creat a path to make the whole graphic a circle</li>
<li>Use the UIColor.setFill() can set the color in the area inside the path, while UIColor.setStroke() can set the color of the path<br>UIColor can be a pre-setted UIColor, such as UIColor.green, or a Color Literal</li>
<li>The property linewidth is the width of the path</li>
<li>After all these things setted properly, use the fill() and stroke() to draw the inside of the path and the path</li>
</ol>
<h4 id="Something-else-about-UIBezierPath"><a href="#Something-else-about-UIBezierPath" class="headerlink" title="Something else about UIBezierPath"></a>Something else about UIBezierPath</h4><ol>
<li>We can initialize the instance of UIBezierPath to a common shape, like<br>let roundedRect = UIBezierPath(roundedRect: CGRect, cornerRadius: CGFloat),<br>let oval = UIBezierPath(ovalIn: CGRect)</li>
<li>Use the addClip() to add a limit to the drawing. Everything outside the limit will be clipped. </li>
<li>Use the contain(_ point: CGPoint) to check if a point is inside the path easily<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="type">UIBezierPath</span>()</span><br><span class="line">path.addArc(withCenter: <span class="type">CGPoint</span>, radius: <span class="type">CGFloat</span>, startAngle: <span class="type">CGPoint</span>, endAngle: <span class="type">CGPoint</span>, clockwise: <span class="type">Bool</span>)</span><br><span class="line">path.lineWidth = <span class="type">CGFloat</span></span><br><span class="line">path.stroke() <span class="comment">// Compare to the context way, after this line excuted, the path still exists</span></span><br><span class="line">path.fill() <span class="comment">// So this line draws inside the path</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="UIColor"><a href="#UIColor" class="headerlink" title="UIColor"></a>UIColor</h1><ol>
<li>A UIColor can be setted by standard colors, like UIColor.red, RGB, HSB or a pattern (using UIImage)</li>
<li>UIColor can have alpha to creat transparent color by using method UIColor.withAlphaComponent(CGFloat)</li>
<li>Alpha is between 0.0 (fully transparent) and 1.0 (fully opaque)</li>
<li>The system use to fully opaque by default. So if you want to draw in your view with transparency, you must let the system know by setting the UIView var opaque = false. You can also set it in the attributes inspector -&gt; drawing -&gt; opaque. </li>
<li>You can make entire UIView transparent with <code>var alpha: CGFloat</code>. </li>
</ol>
<h1 id="Draw-Text"><a href="#Draw-Text" class="headerlink" title="Draw Text"></a>Draw Text</h1><ol>
<li><p>Usually we use a UILabel to put text on screen</p>
</li>
<li><p>To draw in draw(CGRect), use NSAttributedString, like aNSAS.draw(at: aCGRect) or aNSAS.draw(in: CGRect)</p>
</li>
<li><p>To access a range of characters in an NSAttributedString, use NSRange.<br> The initializer of NSRange is NSRange(RangeExpression, in: StringProtocol)</p>
</li>
<li><p>In UILabel, there is a variable named <code>numberOfLines</code>. When its value is not 0, it only has a fix number of lines to use, but when it’s 0, it has lines as many as we need.  </p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="type">NSAttributedString</span>(…)</span><br><span class="line">text.draw(at: <span class="type">CGPoint</span>) <span class="comment">// or draw(in: CGRect)</span></span><br><span class="line"><span class="keyword">let</span> textSize: <span class="type">CGSize</span> = text.size <span class="comment">// how much space the string will take up</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> someString = …</span><br><span class="line"><span class="keyword">let</span> range = someString.startIndex ..&lt; someString.firstIndex(of: …)!</span><br><span class="line"><span class="keyword">let</span> nsrange = <span class="type">NSRange</span>(range, <span class="keyword">in</span>: someString)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Fonts"><a href="#Fonts" class="headerlink" title="Fonts"></a>Fonts</h2><h3 id="Preferred-Fonts"><a href="#Preferred-Fonts" class="headerlink" title="Preferred Fonts"></a>Preferred Fonts</h3><ol>
<li>They are not some specific fonts. There are body font, headline font, title font etc.</li>
<li>Only preferred fonts can adapt their size to the system settings. When users changed their system’s font, only preferred fonts will change in apps</li>
<li>We can select it in the attributes inspector -&gt; Font -&gt; Font. </li>
<li>We can also select it in code. Use the method <code>static func preferredFont(forTextStyle: UIFont.TextStyle) -&gt; UIFont</code> to get a font. The parameter is just like <code>UIFont.TextStyle.headline</code></li>
</ol>
<h3 id="Other-Fonts"><a href="#Other-Fonts" class="headerlink" title="Other Fonts"></a>Other Fonts</h3><ol>
<li>We can creat a UIFont instance with initializer, i.e. <code>UIFont(name: String, size: CGFloat)</code></li>
<li>However, the size of the font we creat with the initializer is fixed. To creat an unfixed one, we can use the UIFontMetrics.<br>First creat an instance of UIFontMetrics like <code>UIFontMetrics(forTextStyle: UIFont.TextStyle)</code>, then we creat a font with the created UIFontMetrics.scaledFont(for: UIFont)<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> metrics = <span class="type">UIFontMetrics</span>(forTextStyle: <span class="type">UIFont</span>.<span class="type">TextStyle</span>)</span><br><span class="line"><span class="keyword">let</span> fontToUse = metrics.scaledFont(<span class="keyword">for</span>: <span class="type">UIFont</span>)</span><br></pre></td></tr></table></figure></li>
<li>We can also use system fonts.<br>static func systemFont(ofSize: CGFloat) -&gt; UIFont<br>static func boldSystemFont(ofSize: CGFloat) -&gt; UIFont</li>
</ol>
<h1 id="Draw-Images"><a href="#Draw-Images" class="headerlink" title="Draw Images"></a>Draw Images</h1><ol>
<li>Use the type UIImage</li>
<li>There are three common initializers for us to use:<br><code>UIImage(name: String)</code>  if we put the image in the Assets.xcassets. Images will have different resolutions for different devices (all managed in Assets.xcassets)<br><code>UIImage(contentsOfFile: String)</code> that String parameter is the path of the image in our computer<br><code>UIImage(data: Data)</code> </li>
<li>We can also draw with <code>UIGraphicsBeginImageContext(CGSize)</code></li>
<li>After that, we can use the UIImage instance we just created to draw by using <code>.draw</code>, we can also use <code>.drawAsPattern</code><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> image: <span class="type">UIImage</span> = ...</span><br><span class="line">image.draw(at point: <span class="type">CGPoint</span>) <span class="comment">// the upper left corner put at aCGPoint </span></span><br><span class="line">image.draw(<span class="keyword">in</span> rect: <span class="type">CGRect</span>) <span class="comment">// scales the image to fit aCGRect </span></span><br><span class="line">image.drawAsPattern(<span class="keyword">in</span> rect: <span class="type">CGRect</span>) <span class="comment">// tiles the image into aCGRect</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="CGAffineTransform"><a href="#CGAffineTransform" class="headerlink" title="CGAffineTransform"></a>CGAffineTransform</h1><ol>
<li><p>This is ussually assigned to <code>transform</code> of a UIView</p>
</li>
<li><p>It has methods in <code>identity</code>. </p>
</li>
<li><p><code>Translate</code> is for move UIView. </p>
</li>
<li><p><code>Rotate</code> is for rotate UIView. </p>
</li>
<li><p>Rotation is based on the origin of the UIView. And somehow it only work when it’s called before other transform. </p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">aUIView.transform = <span class="type">CGAffineTransform</span>.identity.rotate(by: <span class="type">CGFloat</span>)</span><br><span class="line">aUIView.transform = <span class="type">CGAffineTransform</span>.identity.translate(x: <span class="type">CGFloat</span>, y: <span class="type">CGFloat</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="When-Bounds-Change"><a href="#When-Bounds-Change" class="headerlink" title="When Bounds Change"></a>When Bounds Change</h1><h2 id="Redraw"><a href="#Redraw" class="headerlink" title="Redraw"></a>Redraw</h2><ol>
<li>By default, when a UIView’s bounds changes, there is no redraw. Instead, the “bits” of the existing image are scaled to the new bounds size</li>
<li>We can control this with a UIView property: <code>var contentMode: UIView.ContentMode</code></li>
<li>There are three kinds of enum in UIView.ContentMode<br>Don’t scale the view, just place the bits (intact) somewhere<br> <code>.left/.right/.top/.bottom/.topRight/.topLeft/.bottomRight/.bottomLeft/.center</code><br> Scale the “bits” of the view. scaleToFill is the default<br> <code>.scaleToFill/.scaleAspectFill/.scaleAspectFit</code><br> Redraw by calling draw(CGRect) again<code>.redraw</code></li>
<li>If this is a view we drag to the main.storyboard, we can set it in attributed inspector</li>
</ol>
<h2 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h2><ol>
<li>If want to repositionw some of your subviews.</li>
<li>Usually you would set this up using Autolayout constraints. </li>
<li>You can also manually reposition views when bounds change by overriding <code>layoutSubviews()</code></li>
<li>Just like draw function, never call this function ever! You can reassign the layout by calling <code>setNeedLayout()</code></li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>Swift开发 (Stanford CS193p)</category>
      </categories>
      <tags>
        <tag>应用开发</tag>
        <tag>Swift</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>06. Double Integrals</title>
    <url>/2020/02/27/06-Double-Integrals/</url>
    <content><![CDATA[<h1 id="Double-Integral"><a href="#Double-Integral" class="headerlink" title="Double Integral"></a>Double Integral</h1><ol>
<li>Double integral is calculating the volumn below graph of <script type="math/tex">f</script> on a certain region <script type="math/tex">R</script>. It’s denoted by <script type="math/tex">\displaystyle\iint_Rf(x,y)dA</script>. <script type="math/tex">dA</script> stands for area. </li>
<li>Like in the one variable integral, we cut <script type="math/tex">R</script> into small pieces of area <script type="math/tex">\Delta A</script>. Mark each pieces with its center <script type="math/tex">(x_i,y_i)</script>. <br />Then answer is <script type="math/tex">\displaystyle\lim_{\Delta A\to 0}\sum f(x_i,y_i)\Delta A</script>. </li>
<li>To compute <script type="math/tex">\displaystyle\iint_Rf(x,y)dA</script>, take slices let <script type="math/tex">S(x)</script> is area of slice by plane parallel to <script type="math/tex">yoz</script> plane. Then the volumn is <script type="math/tex">\displaystyle\int^{x_{max}}_{x_{min}} S(x)dx</script>. For given <script type="math/tex">x</script>, <script type="math/tex">S(x)=\displaystyle\int^{y_{max}(x)}_{y_{min}(x)}f(x,y)dy</script>. <br />Conclusion, <script type="math/tex">\displaystyle\iint_Rf(x,y)dA=\int^{x_{max}}_{x_{min}}\bigg[\int^{y_{max}(x)}_{y_{min}(x)}f(x,y)dy\bigg]dx</script></li>
<li>The bounds of outer integral are pure constants while the bounds of inner integral may contain <script type="math/tex">x</script>. However in inner integrals <script type="math/tex">x</script> is set constant. </li>
<li>When exchanging order of integration, remember to change the bounds. Draw <script type="math/tex">y_{max}(x)</script> and <script type="math/tex">y_{min}(x)</script> in the inteval <script type="math/tex">[x_{min},x_{max}]</script> to find the new bounds. Normally <script type="math/tex">\displaystyle\int^{x_{max}}_{x_{min}}\int^{y_{max}(x)}_{y_{min}(x)}f(x,y)dy\ dx</script> becomes <script type="math/tex">\displaystyle\int^{y_{max}}_{x_{min}}\int^{x_{max}(y)}_{x_{min}(y)}f(x,y)dx\ dy</script> (<script type="math/tex">x_{max}(y)\ is\ y^{-1}_{min}(x)</script> and <script type="math/tex">x_{min}(y)\ is\ y^{-1}_{max}(x)</script>). </li>
</ol>
<h1 id="Polar-Coordination"><a href="#Polar-Coordination" class="headerlink" title="Polar Coordination"></a>Polar Coordination</h1><ol>
<li>In polar coordination, we substitute <script type="math/tex">\left\{\begin{array}{}x=rcos\ \theta\\y=rsin\ \theta\end{array}\right.</script> to get the function <script type="math/tex">f(r,\theta)</script>. </li>
<li>In perpendicular coordination, we can do all those things because <script type="math/tex">\Delta A=\Delta x\cdot \Delta y</script>. But in polar coordination, cut <script type="math/tex">R</script> into small pieces of fan-shaped area with straight lines from origin and circles. So <script type="math/tex">\Delta A=width\ between\ rings\cdot\ arclength=\Delta r\cdot r\Delta\theta</script>, namely <script type="math/tex">da=rdr\ d\theta</script></li>
<li>So <script type="math/tex">\displaystyle\iint_Rf(x,y)dA=\int^{\theta_{max}}_{\theta_{min}}\int^{r_{max}(\theta)}_{r_{min}(\theta)}f(r,\theta)rdr\ d\theta</script></li>
</ol>
<h1 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h1><ol>
<li>The area of given region <script type="math/tex">R</script> in two dimension is <script type="math/tex">\displaystyle Area(R)=\iint_R1\ dA</script>. </li>
<li>The density of a flat matter in a unit area is <script type="math/tex">\delta</script>, then the mass is <script type="math/tex">m=\displaystyle\iint_R\delta\ dA</script>. </li>
<li>Average value of <script type="math/tex">f</script> in <script type="math/tex">R</script>: <script type="math/tex">\overline f=\displaystyle\frac{1}{Area(R)}\iint_RfdA</script><br />Weighted average of <script type="math/tex">f</script>: <script type="math/tex">\overline f=\displaystyle\frac{1}{\iint_R\delta dA}\iint_Rf\delta dA</script>. </li>
<li>Center of mass of a planer object with density <script type="math/tex">\delta</script>: <script type="math/tex">\left\{\begin{array}{}\overline{x}=\displaystyle\frac{1}{mass}\iint_Rx\delta\ dA\\\overline y= \displaystyle\frac{1}{mass}\iint_Ry\delta\ dA\end{array}\right.</script></li>
<li>Moment of inertia about an axis: <script type="math/tex">I=\displaystyle\iint_Rr^2\delta\ dA</script> (<script type="math/tex">r</script> is the spin radius)</li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>多变量微积分 (MIT 18.02)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>06. Deep Learning Software</title>
    <url>/2020/04/08/06-Deep-Learning-Software/</url>
    <content><![CDATA[<h1 id="CPU-and-GPU"><a href="#CPU-and-GPU" class="headerlink" title="CPU and GPU"></a>CPU and GPU</h1><ol>
<li>GPU has way more cores than CPU. Most CUP has no more than $10$ cores, while the GPU can contain thousands of cores. </li>
<li>Nevertheless, the clock speed of each core of CPU is a lot faster than the GPU. </li>
<li>Furthermore, the CPU does not have its own memory. CPU has to share the memory with the system. However, GPU can have a large amount of memory of its own. </li>
<li>So GPU is better when doing the tedious parallel tasks, like the multiplication of matrices. CPU is better at sequential tasks. </li>
<li>When it comes to machine learning, the GPU can be about $70$ times faster than CPU, and CUDA can be $3$ times faster than none-CUDAs. </li>
<li>When training, to synchronize the speed of GPU and reading data, we have three solutions: <br />&emsp;Read all data into RAM. <br />&emsp;Use SSD instead of HDD. <br />&emsp;Use multiple CPU threads to prefetch data. </li>
</ol>
<h1 id="Deep-Learning-Software"><a href="#Deep-Learning-Software" class="headerlink" title="Deep Learning Software"></a>Deep Learning Software</h1><ol>
<li>The networks build with NumPy can only run on the CPU, and it is hard to compute the gradients. </li>
<li>The point of deep learning frameworks: <br />&emsp;Quickly build big computational graphs. <br />&emsp;Efficiently compute gradients in computational graphs. <br />&emsp;Run it all efficiently on GPU. </li>
</ol>
<h2 id="TensorFlow"><a href="#TensorFlow" class="headerlink" title="TensorFlow"></a>TensorFlow</h2><ol>
<li>The main structure of TensorFlow is to define a computational graph first without doing any calculation. Then run the graph over and over. </li>
<li>If we want to run the code on GPU, define the graph under the tf.device. <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.device(<span class="string">'/gpu:0'</span>):</span><br></pre></td></tr></table></figure>
Alternately, if we want to run on CUP, change the “gpu” to “cpu”. </li>
<li>A placeholder is an array ran on CPU while a Variable is another kind of array ran on GPU. Usually, we declare the input and output as placeholders and weights as Variables. <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = tf.placeholder(tf.float32, shape = (N, D))</span><br><span class="line"></span><br><span class="line">W = tf.Variable(tf.random_normal(D, H))</span><br></pre></td></tr></table></figure></li>
<li>Then we define the the process of forward pass with some functions. <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tf.maximum(matrix, number) <span class="comment">#a matrix of which each entry is the maximum of corresponding entry and the number</span></span><br><span class="line">tf.matmul(x, w) <span class="comment"># a matrix represents the product of the matrices</span></span><br><span class="line">tf.reduce_mean(matrix) <span class="comment"># a number represents the mean of all entries of that matrix</span></span><br><span class="line">tf.reduce_sum(matrix, axis) <span class="comment"># a vector whose each entry is the sum of that matrix along that axis.</span></span><br></pre></td></tr></table></figure></li>
<li>The loss can be defined automatically. <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">loss = tf.losses.mean_squared_error(y_pred, y)</span><br></pre></td></tr></table></figure></li>
<li>The gradients can be calculated automatically. <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tf.gradients(loss, [variables]) <span class="comment"># multiple gradients of loss with respect to each variables</span></span><br></pre></td></tr></table></figure></li>
<li>If we defined the weights as Variables, then we need to update weights here. Otherwise, we do it in the session. <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new_w = w.assign(w - learning_rate * grad_w)</span><br></pre></td></tr></table></figure></li>
<li>There is no computation until here, only building the graph. </li>
<li>With the graph done, we enter the session so we can actually run the graph. <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br></pre></td></tr></table></figure></li>
<li>In the session, we can initialize the placeholders in value. <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">values = &#123;placeholder_name: np.random.randn(N, D), …&#125;</span><br></pre></td></tr></table></figure></li>
<li>If we defined the weights as Variables, we need to run graph once to initialize the weights. <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sess.run(tf.global_variables_initializer())</span><br></pre></td></tr></table></figure></li>
<li>After all those things, we can now enter the for-loop to run many times to train. In each iteration, we run the graph once. The loss in the parameter is defined above in the graph. <br />&emsp;If weights are defined as Variables, we need to group the gradients before entering the session and put the group in the parameter. <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># before session</span></span><br><span class="line">updates = tf.group(new_w, …)</span><br><span class="line"></span><br><span class="line"><span class="comment"># in for-loop</span></span><br><span class="line">loss_val, _ = sess.run([loss, updates], feed_dict = value)</span><br></pre></td></tr></table></figure>
&emsp;If weights are defined as Placeholder, we need to update the weights here. <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">loss_val, grad_w_val, … = sess.run([loss, grad_w, …], feed_dict = values)</span><br><span class="line">values[w] -= learning_rate * grad_w_val</span><br></pre></td></tr></table></figure></li>
<li>If we are using optimizer, <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># before session</span></span><br><span class="line">optimizer = tf.train.GradientDescentOptimizer(<span class="number">1e-5</span>)</span><br><span class="line">updates = optimizer.minimize(loss)</span><br><span class="line"></span><br><span class="line"><span class="comment"># in for-loop</span></span><br><span class="line">loss_val, _ = sess.run([loss, updates], feed_dict = values)</span><br></pre></td></tr></table></figure></li>
<li>We can also use the predefined layers, which automatically set up weight and bias for us. <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># before session</span></span><br><span class="line">init = tf.contrib.layers.xavier_initializer() <span class="comment"># use Xavier initializer</span></span><br><span class="line">h = tf.layers.dense(inputs = x, </span><br><span class="line">                    units = H, </span><br><span class="line">                    activation = tf.nn.relu, </span><br><span class="line">                    kernel_initializer = init)</span><br><span class="line">y_pred = tf.layers.dense(inputs = h,</span><br><span class="line">                         units = D,</span><br><span class="line">                         kernel_initializer = init)</span><br></pre></td></tr></table></figure></li>
<li>Furthermore, we can use Keras. <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Define model</span></span><br><span class="line">model = keras.models.Sequential()</span><br><span class="line">model.add(keras.layers.core.Dense(input_dim = D, output_dim = H))</span><br><span class="line">model.add(keras.layers.core.Activation(<span class="string">'relu'</span>))</span><br><span class="line">model.add(keras.layers.core.Dense(input_dim = H, output_dim = D))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define optimizer</span></span><br><span class="line">optimizer = keras.optimizers.SGD(lr = <span class="number">1e0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build the model, specify loss function</span></span><br><span class="line">model.compile(loss = <span class="string">'mean_squared_error'</span>, optimizer = optimizer)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Train model</span></span><br><span class="line">history = model.fit(x, y, nb_epoch = <span class="number">50</span>, batch_size = N, verbose = <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Pytorch"><a href="#Pytorch" class="headerlink" title="Pytorch"></a>Pytorch</h2><ol>
<li>Three levels of abstraction: <br />&emsp;Tensor: Imperative array, but runs on GPU. This is almost a Numpy array. <br />&emsp;Variable: Node in a computational graph; stores data and gradient. This is the Tensor, Variable, Placeholder on TensorFlow. <br />&emsp;Module: A neural network layer; may store state or learnable weights. </li>
<li><p>To run on GPU, cast tensors to a CUDA datatype. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dtype = torch.cuda.FloatTensor</span><br></pre></td></tr></table></figure>
</li>
<li><p>A Pytorch Variable is a node in a computational graph. All Variables have two essential properties. Data is a Tensor while grad is a Variable of gradients with the same shape as data. Naturally, grad.data is a Tensor of gradients. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = torch.autograd.Variable(torch.randn(N, D_in), requires_grad = <span class="literal">False</span> / <span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Pytorch Tensors and Variables have the same API. Variables remember how they were created for backpropagation. </p>
</li>
<li><p>After defined all matrices, we enter the for-loop to train the network directly. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">h = x.mm(w1) <span class="comment"># matrices multiplication</span></span><br><span class="line">h_relu = h.clamp(h, min = <span class="number">0</span>) <span class="comment"># squash h into [min, max]</span></span><br><span class="line">loss = (y_pred - y).pow(<span class="number">2</span>).sum() <span class="comment"># the sum of the square of (y_pred - y)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Compute the gradient of the loss with respect to weights. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> w.grad:</span><br><span class="line">  w.grad.data.zero_() <span class="comment"># zero out grad first</span></span><br><span class="line">loss.backward()</span><br></pre></td></tr></table></figure>
</li>
<li><p>Update the weights. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">w.data -= learning_rate * w.grad.data</span><br></pre></td></tr></table></figure>
</li>
<li><p>We can define our own autograd functions by writing forward and backward for Tensors. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLayer</span><span class="params">(torch.autograd.Function)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">    self.save_for_backward(x)</span><br><span class="line">    …</span><br><span class="line">    <span class="keyword">return</span> resultMatrix</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">backward</span><span class="params">(self, grad_y)</span>:</span></span><br><span class="line">    x, = self.saved_tensors</span><br><span class="line">    grad_input = grad_y.clone()</span><br><span class="line">    …</span><br><span class="line">    <span class="keyword">return</span> gradMatrix</span><br><span class="line">  </span><br><span class="line"> <span class="comment"># in forward process in the for-loop</span></span><br><span class="line">myLayer = MyLayer()</span><br><span class="line">y_pred = … <span class="comment"># some operations involve myLayer</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>The predefined layers and loss functions are stored in <code>nn</code>. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Define model</span></span><br><span class="line">model = torch.nn.Sequential(</span><br><span class="line">  torch.nn.Linear(D_in, H), </span><br><span class="line">  torch.nn.ReLU(), </span><br><span class="line">  torch.nn.Linear(H, D_out))</span><br><span class="line">loss_fn = torch.nn.MSELoss(size_average = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># train model</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> range(<span class="number">500</span>):</span><br><span class="line">  <span class="comment"># Feed data</span></span><br><span class="line">  y_pred = model(x)</span><br><span class="line">  loss = loss_fn(y_pred, y)</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Backward</span></span><br><span class="line">  model.zero_grad()</span><br><span class="line">  loss.backward()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> param <span class="keyword">in</span> model.parameters():</span><br><span class="line">    param.data -= learning_rate * param.grad.data</span><br></pre></td></tr></table></figure>
</li>
<li><p>There also exist predefined optimizers. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Before training</span></span><br><span class="line">optimizer = torch.optim.Adam(model.parameters, lr = learning_rate)</span><br><span class="line"></span><br><span class="line"><span class="comment"># In training</span></span><br><span class="line">optimizer.zero_grad()</span><br><span class="line">loss.backward()</span><br><span class="line"></span><br><span class="line">optimizer.step()</span><br></pre></td></tr></table></figure>
</li>
<li><p>We can also define our own Models. Models can contain weight as variables or other Modules. We only need to implement the initialization and forward function. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModule</span><span class="params">(torch.nn.Module)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, D_in, H, D_out)</span>:</span></span><br><span class="line">    super(MyModule, self).__init__()</span><br><span class="line">    self.linear1 = torch.nn.Linear(D_in, H)</span><br><span class="line">    self.linear2 = torch.nn.Linear(H, D_out)</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">    …</span><br><span class="line">    <span class="keyword">return</span> resultMatrix</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Define model, then all is the same</span></span><br><span class="line">model = MyModule(D_in, H, D_out)</span><br></pre></td></tr></table></figure>
</li>
<li><p>A DataLoader wraps a Dataset and provides mini-batching, shuffling, multithreading. When custom data is needed, write a Dataset class. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> TensorDataset, DataLoader</span><br><span class="line">loader = DataLoader(TensorDataset(x, y), batch_size = <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">  <span class="keyword">for</span> x_batch, y_batch <span class="keyword">in</span> loader:</span><br><span class="line">    y_pred = model(x_batch)</span><br><span class="line">    loss = loss_fn(y_pred, y_batch)</span><br></pre></td></tr></table></figure>
</li>
<li><p>PyTorch has some pre-trained models which can be used immediately. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line">alexnet = torchvision.models.alexnet(pretrained = <span class="literal">True</span>)</span><br><span class="line">vgg16 = torchvision.models.vgg<span class="number">.16</span>(pretrained = <span class="literal">True</span>)</span><br><span class="line">resnet101 = torchvision.models.resnet101(pretrained = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Comparison"><a href="#Comparison" class="headerlink" title="Comparison"></a>Comparison</h2><ol>
<li>Tensorflow is static graphs, while PyTorch is dynamic graphs. </li>
<li>A static graph is built at the beginning, and the graph is never changed while a dynamic graph is new each iteration. </li>
<li>With static graphs, the framework can optimize the graph before it runs. Furthermore, when one graph is built, we can serialize the static graph and run it without the code that built that graph. We can even change other language to run it. </li>
<li>However, to build dynamic graphs  has less code to write. Moreover, conditional and loops can be easily written with dynamic graphs. </li>
<li>Dynamic graphs are usually used on recurrent networks, recursive networks and modular networks. </li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>计算机视觉 (Stanford CS231n)</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>深度学习</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>06. Linear Approximation</title>
    <url>/2020/02/11/06-Linear-Approximation/</url>
    <content><![CDATA[<h1 id="Linear-Approximation"><a href="#Linear-Approximation" class="headerlink" title="Linear Approximation"></a>Linear Approximation</h1><ol>
<li>Formula: <script type="math/tex">f(x)\approx f(x_0)+f'(x_0)(x-x_0)</script>. </li>
<li>Another expression: the curve is linearly approximate to its tangent line. </li>
<li>This formula has another form: <script type="math/tex">\displaystyle\frac{f(x)-f(x_0)}{x-x_0}\approx f'(x_0)</script>. </li>
<li>If <script type="math/tex">f(x)</script> and <script type="math/tex">f'(x)</script> both has define at <script type="math/tex">x_0=0</script>, <script type="math/tex">f(x)\approx f(0)+f'(0)x</script>. </li>
<li>This linear approximation only works when <script type="math/tex">x\approx x_0</script>. </li>
<li>With the help of linear approximation, we can calculate the approximation of the value of some hard functions. </li>
<li>If <script type="math/tex">f(x)\approx y_1</script> and <script type="math/tex">g(x)\approx y_2</script> both work at <script type="math/tex">x\approx x_0</script>, then <script type="math/tex">f(x)g(x)\approx y_1y_2</script> at <script type="math/tex">x\approx x_0</script>. After decomposition, we can throw away the higher order terms, namely <script type="math/tex">x^2, x^3,…</script></li>
</ol>
<h1 id="Quadratic-Approximation"><a href="#Quadratic-Approximation" class="headerlink" title="Quadratic Approximation"></a>Quadratic Approximation</h1><ol>
<li>Formula: <script type="math/tex">f(x)\approx f(x_0)+f'(x_0)(x-x_0)+\displaystyle\frac{f''(x_0)}{2}(x-x_0)^2</script></li>
<li>This one step more accuracy than the linear approximation. Use this when the linear approximation is not enough. </li>
<li>And <script type="math/tex">f(x)\approx f(0)+f'(0)x+\displaystyle\frac{f''(0)}{2}x^2</script>. </li>
<li>With quadratic approximation, we can know the rate of convergence. </li>
<li>Assume <script type="math/tex">f(x)\approx a+bx+cx^2</script>, then <script type="math/tex">f'(x)=b+2cx</script> and <script type="math/tex">f''(x)=2c</script>. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>单变量微积分 (MIT 18.01)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>06. Multiple Continuous Random Variables and Conditional PDFs</title>
    <url>/2020/03/14/06-Multiple-Continuous-Random-Variables-%20and-Conditional-PDFs/</url>
    <content><![CDATA[<h1 id="Joint-PDFs"><a href="#Joint-PDFs" class="headerlink" title="Joint PDFs"></a>Joint PDFs</h1><ol>
<li>Two continuous random variables associated with the same experiment are jointly continuous and can be described in terms of a joint PDF $f_{X,Y}$. </li>
<li>$f_{X,Y}$ is a nonnegative function that satisfies $P((X,Y)\in B)=\displaystyle\iint\limits_{(x,y)\in B}f_{X,Y}(x,y)dxdy$, for every subset $B$ of the two-dimensional plane. </li>
<li>If $B=\{(x,y)|a≤x≤b,c≤y≤d\}$, $P(a≤X≤b,c≤Y≤d)=\displaystyle\int^d_c\int^b_af_{X,Y}(x,y)dxdy$<br />If $B$ is the entire two-dimensional plane, $P((X,Y)\in B)=\displaystyle\int^\infty_{-\infty}\int^\infty_{-\infty}f_{X,Y}(x,y)dxdy=1$</li>
<li>Like PDF of single random variable, the joint PDF can be viewed as the probability per unit area in the vicinity of a point. </li>
<li><script type="math/tex; mode=display">P(X\in A)=P(X\in A\ and\ Y\in (-\infty,\infty))=\displaystyle\int_A\int^\infty_{-\infty}f_{X,Y}(x,y)dydx</script></li>
<li>The marginal PDF $f_X(x)=\displaystyle\int^\infty_{-\infty}f_{X,Y}(x,y)dy$. </li>
<li>The uniform model: <br />PDF: <script type="math/tex">f_{X,Y}(x,y)=\left\{\begin{array}{}\displaystyle\frac{1}{area\ of\ S}&if\ (x,y)\in S\\0&otherwise \end{array}\right.</script><br /><br />Probability: <script type="math/tex">P((X,Y)\in A)=\displaystyle\iint\limits_{(x,y)\in A}f_{X,Y}(x,y)dxdy=\frac{1}{area\ of\ S}\iint\limits_{(x,y)\in A}dxdy=\frac{area\ of\ A}{area\ of\ S}</script></li>
<li>We define the joint CDF of $X$ and $Y$ by $F_{X,Y}(x,y)=P(X≤x,Y≤y)=\displaystyle\int^x_{-\infty}\int^y_{-\infty}f_{X,Y}(s,t)dtds$. </li>
<li>$f_{X,Y}(x,y)=\displaystyle\frac{\partial^2F_{X,Y}}{\partial x\partial y}(x,y)$</li>
<li>For expectation: $E[g(X,Y)]=\displaystyle\int^\infty_{-\infty}\int^\infty_{-\infty}g(x,y)f_{X,Y}(x,y)dxdy$</li>
<li>$E[aX+bY+c]=aE[X]+bE[Y]+c$</li>
</ol>
<h1 id="Conditioning"><a href="#Conditioning" class="headerlink" title="Conditioning"></a>Conditioning</h1><ol>
<li>Given an event $A$ with $P(A)&gt;0$, the conditional PDF is $P(X\in B|A)=\displaystyle\int_Bf_{X|A}(x)dx$ for any subset $B$ of the real line. </li>
<li>If $P(x\in A)&gt;0$, $P(X\in B|X\in A)=\displaystyle\frac{P(X\in B,X\in A)}{P(X\in A)}=\frac{\int_{A\cap B}f_X(x)dx}{P(X\in A)}$. So <script type="math/tex">f_{X|\{X\in A\}}(x)=\left\{\begin{array}{}\displaystyle\frac{f_X(x)}{P(X\in A)}&if\ x\in A\\0&otherwise \end{array}\right.</script></li>
<li>If two random variables $X$ and $Y$, event $C=\{(X,Y)\in A\}$, <script type="math/tex">f_{X,Y|C}(x,y)=\left\{\begin{array}{}\displaystyle\frac{f_{X,Y}(x,y)}{P(C)}&if\ (x,y)\in A\\0&otherwise \end{array}\right.</script> and $f_{X|C}(x)=\displaystyle\int^\infty_{-\infty}f_{X,Y|C}(x)dy$</li>
<li>Total probability theorem: If disjoint sets $A_1,A_2,…,A_n$ form a partition of the sample space, $f_X(x)=\displaystyle\sum^n_{i=1}P(A_i)f_{X|A_i}(x)$. </li>
<li>If $X$ and $Y$ are continuous random variables with joint PDF $f_{X,Y}$. For any $y$ with $f_Y(y)&gt;0$, the conditional PDF of $X$ given that $Y=y$ is $f_{X|Y}(x|y)=\displaystyle\frac{f_{X,Y}(x,y)}{f_Y(y)}$. </li>
<li>Total probability theorem based on another continuous random variable: $f_X(x)=\displaystyle\int^\infty_{-\infty}f_Y(y)f_{X|Y}(x|y)dy$</li>
<li>It’s best to view $y$ as a fixed number and consider $f_{X|Y}(x|y)$ as a function of the single variable $x$. Viewed as a function of $x$, $f_{X|Y}(x|y)$ has the same shape as the joint PDF $f_{X,Y}$, because the denominator $f_Y$ does not depend on $x$. </li>
<li>$f_{X,Y|Z}(x,y|z)=\displaystyle\frac{f_{X,Y,Z}(x,y,z)}{f_Z(z)}$ and $f_{X|Y,Z}(x|y,z)=\displaystyle\frac{f_{X,Y,Z}(x,y,z)}{f_{Y,Z}(y,z)}$</li>
<li>$E[X|A]=\displaystyle\int^\infty_{-\infty}xf_{X|A}(x)dx$ and $E[X|Y=y]=\displaystyle\int^\infty_{-\infty}xf_{X|Y}(x|y)dx$</li>
<li>$E[g(X)|A]=\displaystyle\int^\infty_{-\infty}g(x)f_{X|A}(x)dx$ and $E[g(X)|Y=y]=\displaystyle\int^\infty_{-\infty}g(x)f_{X|Y}(x|y)dx$</li>
<li>If disjoint sets $A_1,A_2,…,A_n$ form a partition of sample space, $E[X]=\displaystyle\sum^n_{i=1}P(A_i)E[X|A_i]$. </li>
<li>$E[X]=\displaystyle\int^\infty_{-\infty}E[X|Y=y]f_Y(y)dy$</li>
</ol>
<h1 id="Continuous-Bayes-Rule"><a href="#Continuous-Bayes-Rule" class="headerlink" title="Continuous Bayes Rule"></a>Continuous Bayes Rule</h1><ol>
<li>Since $f_Xf_{Y|X}=f_{X,Y}=f_Yf_{X|Y}$, $f_{X|Y}(x|y)=\displaystyle\frac{f_X(x)f_{Y|X}(y|x)}{f_Y(y)}$. </li>
<li>We can also plug in the total probability theorem: $f_{X|Y}(x|y)=\displaystyle\frac{f_X(x)f_{Y|X}(y|x)}{\int^\infty_{-\infty}f_X(x)f_{Y|X}(y|x)}$</li>
<li>A discrete event $A$ and a continuous random variable $Y$<br />$\begin{equation}\begin{split}P(A|Y=y)&amp;\approx P(A|y≤Y≤y+\delta)\\&amp;=\displaystyle\frac{P(A)P(y≤Y≤y+\delta|A)}{P(y≤Y≤y+\delta)}\\&amp;\approx\frac{P(A)f_{Y|A}(y)\delta}{f_Y(y)\delta}\\&amp;=\frac{P(A)f_{Y|A}(y)}{f_Y(y)} \end{split}\end{equation}$<br />Substitute $f_Y(y)$, $P(A|Y=y)=\displaystyle\frac{P(A)f_{Y|A}(y)}{P(A)f_{Y|A}(y)+P(A^c)f_{Y|A^c}(y)}$<br />Let $A=\{N=n\}$ and $p_N$ be the PMF of $N$. $P(A|Y=y)=P(N=n|Y=y)=\displaystyle\frac{p_N(n)f_{Y|N}(y|n)}{f_Y(y)}=\frac{p_N(n)f_{Y|N}(y|n)}{\sum_ip_N(i)f_{Y|N}(y|i)}$</li>
<li>$A$ is still a discrete event and $Y$ is a continuous random variable<br />$f_{Y|A}(y)=\displaystyle\frac{f_Y(y)P(A|Y=y)}{P(A)}$<br />Also plug in the total probability theorem: $f_{Y|A}(y)=\displaystyle\frac{f_Y(y)P(A|Y=y)}{\int^\infty_{-\infty}f_Y(t)P(A|Y=t)dt}$</li>
</ol>
<h1 id="Independence"><a href="#Independence" class="headerlink" title="Independence"></a>Independence</h1><ol>
<li>Two continuous random variables $X$ and $Y$ are independent if their joint PDF is the product of the marginal PDFs: $f_{X,Y}(x,y)=f_X(x)f_Y(y)$, for all $x,y$. </li>
<li>Also $f_{X|Y}(x|y)=f_X(x)$, for all $y$ with $f_Y(y)&gt;0$ and all $x$. </li>
<li>$P(X\in A and Y\in B)=P(X\in A)P(Y\in B)$. </li>
<li>$F_{X,Y}(x,y)=F_X(x)F_Y(y)$, for all $x, y$. </li>
<li>$E[g(X)h(Y)]=E[g(X)]E[h(Y)]$</li>
<li>$var(X+Y)=var(X)+var(y)$. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>概率论 (MIT 6.041)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>06. 语法制导翻译技术</title>
    <url>/2020/05/18/06-%E8%AF%AD%E6%B3%95%E5%88%B6%E5%AF%BC%E7%BF%BB%E8%AF%91%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h1 id="语义分析"><a href="#语义分析" class="headerlink" title="语义分析"></a>语义分析</h1><ol>
<li>语义表示了程序本身的涵义、施加于语言结构上的限制或者要执行的动作</li>
<li>语法正确的程序不一定语义正确</li>
<li>基本功能：确定类型，类型检查，识别含义，控制流检查，标识符唯一性检查</li>
</ol>
<h1 id="语法制导定义"><a href="#语法制导定义" class="headerlink" title="语法制导定义"></a>语法制导定义</h1><ol>
<li>给每一个文法符号添加一个属性的集合，表示符号所代表的语义信息</li>
<li>属性的计算：定义语义规则，并将之作用在由文法符号组成的产生式上</li>
<li>利用产生式推导或归约时，执行语义规则来进行属性的计算</li>
<li>语法制导定义是对上下文无关文法的推广。每个文法符号和一个属性集合相关联；每一个产生式和一个语法规则集合相关联</li>
<li>属性分类：<br />&emsp;综合属性：通过分析树中其子节点的属性值计算出来的<br />&emsp;继承属性：由该节点的兄弟节点及父节点的属性值计算出来</li>
<li>属性可以是任何对象：符号串、数字、类型、内存单元或其他对象</li>
<li>综合属性用于自下而上传递信息；继承属性用于自上而下传递信息</li>
<li>对于一条规则$b:=f(c_1,c_2,…,c_n)$，我们可以说$b$依赖于$c_1,c_2,…,c_n$</li>
<li>非终结符号既可以由综合属性，也可有继承属性<br />开始符号没有继承属性<br />终结符号只有综合属性，一般由词法分析器提供</li>
<li>虚属性：语义动作 (过程或语义子程序)，只是为了形式上的统一，起辅助作用，不计算属性</li>
<li>注释分析树：每个文法符号加上它们的属性的分析树</li>
<li>属性文法：语法制导定义对上下文无关文法扩充后的文法</li>
<li>语法制导翻译：基于语法分析中用到的文法产生式 (语法制导)对应的语义规则进行翻译 (翻译)的方法</li>
<li>依赖图：有向边$a\to b$表示属性$b$依赖于$a$。依赖图的拓扑排序获得语义规则的计算顺序</li>
</ol>
<h1 id="S-属性定义"><a href="#S-属性定义" class="headerlink" title="S-属性定义"></a>S-属性定义</h1><ol>
<li>$S-$属性定义：仅仅使用综合属性的语法制导定义，使用自底向上的分析方法</li>
<li>依赖图中有向边的走向和自底向上分析时建立分析树的顺序是一致的。因此，可以考虑在进行语法分析 (自底向上)的同时进行翻译 (执行语义规则)</li>
<li>实现<br />&emsp;扩充 LR分析器，为栈中的每一个文法符号增加一个属性域，存放分析过程中该文法符号的综合属性值<br />&emsp;当用产生式进行归约时，产生式左边文法符号入栈，其属性值由栈中正在归约的产生式右边符号的属性值计算</li>
<li>在这种分析模式中，语法分析是主动的，语义分析是从动的，语法分析制导着语义分析</li>
</ol>
<h1 id="L-属性定义"><a href="#L-属性定义" class="headerlink" title="L-属性定义"></a>L-属性定义</h1><ol>
<li>继承属性麻烦的地方在于不清楚需要先计算其兄弟节点、父节点的哪些。所以在$L-$属性中，我们就属性的计算顺序做限制，让其受到分析树节点建立顺序的限制</li>
<li>$L-$属性定义可用于按深度优先顺序计算属性值</li>
<li>$L-$属性定义：所有属性不是继承属性就是综合属性，且其继承属性的语义规则只与其长兄节点或父节点有关</li>
<li>每一个$S-$属性定义都是$L-$属性定义</li>
<li>翻译模式 (翻译方案)与语法制导定义的区别：语法制导定义只是简单描述产生式中的规则和属性，但是翻译模式给出显式的计算顺序</li>
<li>翻译模式中，属性与文法符号相对应，语义规则或语义动作用$\{\}$括起来，可插入产生式右部的任何位置</li>
<li>翻译模式是语法分析和语义动作交错的表示法，表达在按深度优先比那里分析树的过程中何时执行语义动作。可以看做是分析过程中翻译的注释</li>
<li>构造翻译模式<br />&emsp;只需要综合属性，每一条语义规则放到产生式右边的末尾<br />&emsp;既有综合属性，又有继承属性<br />&emsp;&emsp;产生式右部文法符号的继承属性必须在这个符号以前的动作中计算出来<br />&emsp;&emsp;一个动作不能引用该动作右边符号的综合属性<br />&emsp;&emsp;产生式左部非终结符号的综合属性只有在其引用的所有属性都计算出来以后才能计算。计算该属性的动作通常放在产生式右部的末尾</li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>编译原理 (HDU / Stanford)</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>07. Change of Variables and Vector Fields</title>
    <url>/2020/02/28/07-Change-of-Variables-and-Vector-Fields/</url>
    <content><![CDATA[<h1 id="Change-of-Variables"><a href="#Change-of-Variables" class="headerlink" title="Change of Variables"></a>Change of Variables</h1><ol>
<li>Let <script type="math/tex">u=u(x,y)</script> and <script type="math/tex">v=v(x,y)</script>. <br />Approximation: <script type="math/tex">\left\{\begin{array}{}\Delta u\approx u_x\Delta x+u_y\Delta y\\\Delta v\approx v_x\Delta x+v_y\Delta y\end{array}\right.</script><br />Linear tranformation: <script type="math/tex">\left[\begin{matrix}\Delta u\\\Delta v\end{matrix}\right]\approx\left[\begin{matrix}u_x&u_y\\v_x&v_y\end{matrix}\right]\left[\begin{matrix}\Delta x\\\Delta y\end{matrix}\right]</script><br />So new area is <script type="math/tex">\Delta A'=\left|\begin{matrix}u_x&u_y\\v_x&v_y\end{matrix}\right|\Delta x\Delta y</script>. <br /><code>Jacobbian</code>: <script type="math/tex">J=\displaystyle\frac{\partial(u,v)}{\partial(x,y)}=\left|\begin{matrix}u_x&u_y\\v_x&v_y\end{matrix}\right|</script><br />So <script type="math/tex">dA'=du\ dv=|J|dx\ dy=|J|dA</script></li>
<li>Mark that <script type="math/tex">\displaystyle\frac{\partial(u,v)}{\partial(x,y)}\cdot\frac{\partial(x,y)}{\partial(u,v)}=1</script>. So <script type="math/tex">J_{(u,v)/(x,y)}=\displaystyle\frac{1}{J_{(x,y)/(u,v)}}</script>, namely their determinants are inverse, which implies their matrices are inverse. </li>
<li>We also need to change the bounds from <script type="math/tex">x,y</script> to <script type="math/tex">u,v</script>. Draw the original region <script type="math/tex">x-y</script>. Then try to change each sides in that region to <script type="math/tex">u-v</script> graph to get the <script type="math/tex">u-v</script> region. </li>
</ol>
<h1 id="Vector-Fields"><a href="#Vector-Fields" class="headerlink" title="Vector Fields"></a>Vector Fields</h1><ol>
<li>At each point <script type="math/tex">(x,y)</script> in a plane, we have <script type="math/tex">\vec{F}</script> a vector that depends on <script type="math/tex">(x,y)</script>. </li>
<li><script type="math/tex">\vec{F}=M\vec{i}+N\vec{j}</script> Where <script type="math/tex">M</script> and <script type="math/tex">N</script> are function of <script type="math/tex">x,y</script>.  </li>
<li>Each <script type="math/tex">\vec{F}</script> is a vector which starts from point <script type="math/tex">(x,y)</script> and points to a certain direction. For example, <script type="math/tex">\vec{F}=x\vec{i}+y\vec{j}</script> starts from <script type="math/tex">(x,y)</script> and points to <script type="math/tex">(2x,2y)</script>. </li>
<li>Work (line integral): <script type="math/tex">W=\vec{F}\cdot\vec{\Delta r}</script>. Along a trajectory <script type="math/tex">C</script>, work adds up to <script type="math/tex">W=\displaystyle\int_C\vec{F}\cdot d\vec{r}</script>. <script type="math/tex">W=\displaystyle\lim_{|\vec{\Delta r}|\to 0}\sum\vec{F}\cdot\vec{\Delta r_i}=\lim_{\Delta t\to 0}\sum\vec{F}\cdot(\displaystyle\frac{\vec{\Delta r}}{\Delta t}\Delta t)</script>. <br />So <script type="math/tex">W=\displaystyle\int_{t_1}^{t_2}\vec{F}\cdot\frac{d\vec{r}}{dt}dt=\int^{t_2}_{t_1}\vec{F}\cdot\vec{v}\ dt</script></li>
<li>Another way to calculate work: <script type="math/tex">W=\displaystyle\int_C\vec{F}\cdot d\vec{r}=\int_C<M,N>\cdot<dx,dy>=\int_cMdx+Ndy</script>. Then express <script type="math/tex">x</script> and <script type="math/tex">y</script> in terms of the same thing. Normally we’ll use parametric equation of <script type="math/tex">C</script>. </li>
<li>Geometric approach: <script type="math/tex">\vec{\Delta r}</script> is in the direction of <script type="math/tex">\vec{T}</script> with size of <script type="math/tex">ds</script>. So <script type="math/tex">\displaystyle\frac{d\vec{r}}{dt}=\vec{v}=\vec{T}\frac{ds}{dt}</script>. <script type="math/tex">\vec{T}</script> is the direction of velocity and <script type="math/tex">\displaystyle\frac{ds}{dt}</script> is its size. <br /><script type="math/tex">W =\displaystyle\int_C\vec{F}\cdot\vec{T}ds</script>. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>多变量微积分 (MIT 18.02)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>07. Curve Sketching and Max-min Problem</title>
    <url>/2020/02/11/07-Curve-Sketching-and-Max-min-Problem/</url>
    <content><![CDATA[<h1 id="Curve-Sketching"><a href="#Curve-Sketching" class="headerlink" title="Curve Sketching"></a>Curve Sketching</h1><ol>
<li><script type="math/tex">f'>0</script>, then <script type="math/tex">f</script> is increasing. <br /><script type="math/tex">f'<0</script>, then <script type="math/tex">f</script> is decreasing. </li>
<li><script type="math/tex">f''>0</script> then <script type="math/tex">f'</script> is increasing, <script type="math/tex">f</script> is concave up. <br /><script type="math/tex">f''<0</script> then <script type="math/tex">f'</script> is decreasing, <script type="math/tex">f</script> is concave down. <br />No wiggle in graph of <script type="math/tex">f</script> when <script type="math/tex">f''</script> keeps its sign. </li>
<li>If <script type="math/tex">f'(x_0)=0</script>, we call <script type="math/tex">x_0</script> a <code>critical point</code>, and <script type="math/tex">y_0</script> a <code>critical value</code>.  </li>
<li>If <script type="math/tex">f'(x_0)=0</script> and <script type="math/tex">f'(x)</script> changes its sign at <script type="math/tex">x_0</script>, we call <script type="math/tex">x_0</script> a <code>turning point</code>. </li>
<li>If <script type="math/tex">f''(x_0)=0</script>, we call <script type="math/tex">x_0</script> a <code>inflection point</code>. </li>
<li>General strategy<br />&emsp;Plot<br />&emsp;&emsp;Discontinuiities (especially infinite ones)<br />&emsp;&emsp;Endpoints (or <script type="math/tex">x\to \pm\infty</script>)<br />&emsp;&emsp;Easy points (optional)<br />&emsp;Derivative<br />&emsp;&emsp;Solve <script type="math/tex">f'(x)=0</script><br />&emsp;&emsp;Plot critical points and values<br />&emsp;Decide the sign of <script type="math/tex">f'</script> on each interval between critical points and discontinuitise<br />&emsp;Check the sign of <script type="math/tex">f''</script> to decide concave up/down and inflection point</li>
</ol>
<h1 id="Maximum-And-Minimum"><a href="#Maximum-And-Minimum" class="headerlink" title="Maximum And Minimum"></a>Maximum And Minimum</h1><ol>
<li>We only need to look at critical points, endpoints and discontinuities. </li>
<li>Second order derivative is certainly not necessary. </li>
<li>“What is the minimum” is asking the minimum value. <br />“Where is the minimum” / “Where is minimum achieved” is asking the minimum point. </li>
<li>When there is a function with multiple variables, and only one variable is umlimited, other variables have a constraint with the unlimited variable, we implicitly differential the constraints and find the critical points faster. </li>
<li>When do the implicit defferentiation, we just assign <script type="math/tex">y'</script> to <script type="math/tex">0</script>, and solve the remained equation. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>单变量微积分 (MIT 18.01)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>06. Multi-touch</title>
    <url>/2019/08/08/06.Multi-touch/</url>
    <content><![CDATA[<h1 id="React-to-touches"><a href="#React-to-touches" class="headerlink" title="React to touches"></a>React to touches</h1><ol>
<li>We can react to touches with raw touch events. (touches, moves, up, etc.)</li>
<li>But, we can also react to certain, predefined “gestures”. Gestures are recognized by instances of <code>UIGestureRecognizer</code>. </li>
<li>There are two sides to using a gesture recognizer.<br>First, add a gesture recognizer to a UIView<br>Second, provide a method to “handle” that gesture</li>
<li>Usually the first is done by a Controller. Though occasionally a UIView will do this itself if the gesture is integral to its existence. </li>
<li>The second is provided either by the UIView or a Controller. </li>
</ol>
<h1 id="Create-one"><a href="#Create-one" class="headerlink" title="Create one"></a>Create one</h1><h2 id="Adding-a-gesture-recognizer-to-a-UIView"><a href="#Adding-a-gesture-recognizer-to-a-UIView" class="headerlink" title="Adding a gesture recognizer to a UIView"></a>Adding a gesture recognizer to a UIView</h2><ol>
<li>In this way, we ask the UIView to “recognize” that gesture. Usually it’s done by a Controller. Though occasionally a UIView will do this itself if the gesture is integral to its existence</li>
<li>First, we need to create a outlet of the view and add a property observer “didset” to it. <a id="more"></a></li>
<li>In the property observer, we define an instance of subclass of UIGestureRecogonizer. The initializer has two parameters. </li>
<li>The first one is target that is the thing which will handle the gesture. </li>
<li>The second one is action, which is what we are going to do with that gesture. </li>
<li>The action is a selector, and in the selector is an <code>@objc</code> function that takes either no parameter or one UIGestureRecognizer parameter</li>
<li>After that instance is created, we need to add it to the view. <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> pannableView: <span class="type">UIView</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">didSet</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">let</span> panGestureRecognizer = <span class="type">UIPanGestureRecognizer</span>(</span><br><span class="line">    target: <span class="keyword">self</span>, action: #selector(aOBJCFuncForSelector)</span><br><span class="line">	)</span><br><span class="line">	pannableView.addGestureRecognizer(panGestureRecognizer) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">aOBJCFuncForSelector</span><span class="params">()</span></span> &#123; … &#125; <span class="comment">// without parameter</span></span><br><span class="line"><span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">aOBJCFuncForSelector</span><span class="params">(<span class="number">_</span> sender: UIGectureRecognizer)</span></span> &#123; … &#125; <span class="comment">// with one parameter</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Providing-a-method-to-“handle”-that-gesture"><a href="#Providing-a-method-to-“handle”-that-gesture" class="headerlink" title="Providing a method to “handle” that gesture"></a>Providing a method to “handle” that gesture</h2><ol>
<li>This is not necessarily handled by the UIView</li>
<li>We only need to create a function take a UIGestureRecognizer as a parameter. </li>
<li>Use it as a selector of a UIGestureRecognizer. </li>
</ol>
<h2 id="Do-these-in-main-storyboard"><a href="#Do-these-in-main-storyboard" class="headerlink" title="Do these in main.storyboard"></a>Do these in main.storyboard</h2><ol>
<li>First, we need to drag a gesture from the library to the view we want. </li>
<li>Then select the view, ctrl drag from the gesture at the top of phone in the main.storyboard to the controller. </li>
<li>Create it as an action takes a UIGestureRecognizer as a parameter. </li>
</ol>
<p><img src="/img/06.Multi-touch01.png" width="50%"></p>
<h1 id="Gestures"><a href="#Gestures" class="headerlink" title="Gestures"></a>Gestures</h1><h2 id="UIGestureRecognizer"><a href="#UIGestureRecognizer" class="headerlink" title="UIGestureRecognizer"></a>UIGestureRecognizer</h2><ol>
<li>UIGestureRecognizer is an “abstract” class. So we only create its subclasses. </li>
<li>It provides one variable <code>var state: UIGestureRecognizerState { get }</code></li>
<li>This variable sits around in .possible until recognition starts. </li>
<li>For a continuous gesture (e.g. pan), it moves from .began through repeated .changed to .ended</li>
<li>For a discrete (e.g. a swipe) gesture, it goes straight to .ended or .recognized.</li>
<li>It can go to .failed or .cancelled too, so watch out for those!</li>
</ol>
<h2 id="UIPinchGestureRecognizer"><a href="#UIPinchGestureRecognizer" class="headerlink" title="UIPinchGestureRecognizer"></a>UIPinchGestureRecognizer</h2><ol>
<li><code>var scale: CGFloat</code><br>This is a settable variable. Its value is between 0.0 and 1.0 depending on how much did the pinch go</li>
<li><code>var velocity: CGFloat { get }</code><br>This is a read-only variable. It’s the scale per sec</li>
</ol>
<h2 id="UIRotationGestureRecognizer"><a href="#UIRotationGestureRecognizer" class="headerlink" title="UIRotationGestureRecognizer"></a>UIRotationGestureRecognizer</h2><ol>
<li><code>var rotation: CGFloat</code><br>This is a settable variable. Its an angle based on radians</li>
<li><code>var velocity: CGFloat { get }</code><br>This is a read-only variable. It’s the rotation per sec</li>
</ol>
<h2 id="UISwipeGestureRecognizer"><a href="#UISwipeGestureRecognizer" class="headerlink" title="UISwipeGestureRecognizer"></a>UISwipeGestureRecognizer</h2><ol>
<li><code>var direction: UISwipeGestureRecoginzerDirection</code><br>It’s a bit like an enum. You can set it with <code>.left / .right / .down / .up</code>. If multiple direction is all  ok, it can also be setted as an array of those four values. </li>
<li><code>var numberOfTouchesRequired: Int</code><br>This is the number of fingers we want to trigger this gesture. </li>
</ol>
<h2 id="UITapGestureRecognizer"><a href="#UITapGestureRecognizer" class="headerlink" title="UITapGestureRecognizer"></a>UITapGestureRecognizer</h2><ol>
<li>This is discrete, but you should check for .ended to actually do something.</li>
<li><code>var numberOfTapsRequired: Int</code><br>This is the number of tap we want to trigger this gesture. </li>
<li><code>var numberOfTouchesRequired: Int</code></li>
</ol>
<h2 id="UILongPressRecognizer"><a href="#UILongPressRecognizer" class="headerlink" title="UILongPressRecognizer"></a>UILongPressRecognizer</h2><ol>
<li>This is a continuous (not discrete) gesture (i.e. you’ll get .changed if the finger moves)</li>
<li><code>var minimumPressDuration: TimeInterval</code><br>The least time we need to hold to trigger this gesture. </li>
<li><code>var numberOfTouchesRequired: Int</code></li>
<li><code>var allowableMovement: CGFloat</code><br>The length of movement allowed before its recognized as a swipe. </li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>Swift开发 (Stanford CS193p)</category>
      </categories>
      <tags>
        <tag>应用开发</tag>
        <tag>Swift</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>07. CNN Architectures</title>
    <url>/2020/04/09/07-CNN-Architectures/</url>
    <content><![CDATA[<h1 id="General"><a href="#General" class="headerlink" title="General"></a>General</h1><ol>
<li>When we say how many layers a network has, we mean how many layers in that network has weight. Namely, the sum of fully-connected layers and convolution layers. </li>
<li>The rule of naming a layer: <br />&emsp;If it is a fully-connected layer, its name will begin with “FC”. Behind “FC” is a number that stands for the number of neurons in this layer. Namely, the dimension of the output vector. <br />&emsp;If it is a convolution layer, its name begins with the size of the filter. In the middle is “conv”. At the end is the number of filters. <br />&emsp;Pooling layers write “Pool”. </li>
</ol>
<h1 id="AlexNet"><a href="#AlexNet" class="headerlink" title="AlexNet"></a>AlexNet</h1><ol>
<li>Published at 2012, AlexNet has many features: <br />&emsp;It is the first network using ReLU. <br />&emsp;It uses norm layers (not common now). <br />&emsp;It has heavy data augmentation. <br />&emsp;It uses the dropout with the probability of $0.5$. <br />&emsp;Its batch size is $128$, SGD momentum is $0.9$. <br />&emsp;The learning rate is $1e-2$, reduced by $10$ manually when validation accuracy plateaus. <br />&emsp;$L2$ weight decay is $5e-4$. <br />&emsp;$7$ models ensemble to create about $3%$ better accuracy. </li>
<li>Architecture: <br /><img src="/img/07.CNNArchitectures01.png" width="10%"></li>
<li>AlexNet was trained on <script type="math/tex">GTX\ 580</script> GPU with only $3$ GB of memory. However, the output of its first convolution layer is $55\times55\times96$. So the network has to spread across $2$ GPUs, half the neurons (feature maps) on each GPU. </li>
<li>$CONV1$, $CONV2$, $CONV4$, $CONV5$ in AlexNet only have connections with feature maps on the same GPU. $CONV3$, $FC6$, $FC7$, $FC8$ have connections with all feature maps in the preceding layer; They communicate across GPUs. </li>
<li>ZFNect is AlexNet, except that $CONV1$ changed to $7\times7$ with stride $2$, and $CONV3, 4, 5$ uses $512, 1024, 512$ filters. </li>
</ol>
<h1 id="VGG"><a href="#VGG" class="headerlink" title="VGG"></a>VGG</h1><ol>
<li>The main feature of VGG is small filters and deeper networks. </li>
<li>VGG has many architectures with $16\sim19$ layers. The structure of VGG can be divided into blocks. So in VGG, we can name the convolution layers like $conv-x-y$, where $x$ is the number of blocks and $y$ is its position in that block. </li>
<li>All three fully-connected layers of VGG are in the last as AlexNet. </li>
<li>VGG only uses small filters of $3\times3,CONV$ stride $1$, pad $1$, and <script type="math/tex">2\times2,MAX\ POOL</script> stride $2$. Stack of three $3\times3 conv$ (stride $1$) layers has the same effective receptive field as one $7\times7 conv$ layer. However, a stack of three $3\times3$ convolution layer is deeper, more nonlinearities and fewer parameters than one $7\times7$ layer and <br />The size of the receptive field is the size of pixels that affect one pixel of the last layer. In this case, $3\times3$ pixels affect one pixel of the first convolution layer. Since the stride is $1$, we pad the receptive field of last layer with $1$, which makes the receptive field of the second convolution layer $5\times5$. Finally, the receptive field of the last layer is $7\times7$. </li>
<li>Most memory is spent on early convolution layers while most parameters are in late fully-connected layers. </li>
</ol>
<h1 id="GoogLeNet"><a href="#GoogLeNet" class="headerlink" title="GoogLeNet"></a>GoogLeNet</h1><ol>
<li>GoogLeNet replaced fully-connected layer with average pooling layer. Nevertheless, in order to finetune hyperparameters, it still added one fully-connected layer at the end. </li>
<li>GoogLeNet first used the inception module. The naive version of inception module is as followed. <br /><img src="/img/07.CNNArchitectures02.png" width="30%"><br />It applied parallel filter operations on the input from the previous layer. With padding to make the output of four layers in the same size, the output of this inception module merely stacks them up. <br />However, its computational complexity is too high, not to mention that the pooling layer preserves feature depth, which means total depth after concatenation can only grow at every layer. </li>
<li>Hence, we use the bottleneck to reduce feature depth as followed. <br /><img src="/img/07.CNNArchitectures03.png" width="30%"><br />It uses less $1\times1$ filters then the depth of the input to reduce the complexity of calculation. </li>
<li>GoogLeNet stacks inception modules with dimension reduce on top of each other. <br /><img src="/img/07.CNNArchitectures04.png" width='30%'><br />At the beginning is the stem network and at the end is the classifier output. <br />Nevertheless, it added some auxiliary classification outputs to inject additional gradient at lower layers. </li>
</ol>
<h1 id="ResNet"><a href="#ResNet" class="headerlink" title="ResNet"></a>ResNet</h1><ol>
<li>ResNet is so deep that it has $152$ layers. </li>
<li>The problem is that when continue stacking deeper layers on a “plain” convolutional neural network, the performance will become even worse. </li>
<li>The team assumed that the problem is an <em>optimization</em> problem; deeper models are harder to optimize. </li>
<li>Their solution is to use network layers to fit a residual mapping instead of directly trying to fit a desired underlying mapping. Namely, learn a function $H(x)$ to be the output to the next layer. <br /><img src="/img/07.CNNArchitectures05.png" width="10%"></li>
<li>They also assumed that learning a $H(x) = F(x)+x$ is much easier than learning a completely unknown $H(x)$. <br /><img src="/img/07.CNNArchitectures06.png" width="20%"></li>
<li>ResNet stacks residual blocks together, and every residual block has two $3\times3$ convolutional layers. <br />It also periodically double the number of filters and downsample spatially using stride $2$. <br />The ResNet begins with an additional convolutional layer and ends with a fully-connected layer. <br /></li>
<li>For deeper networks, they also use the bottleneck layer to improve efficiency as GoogLeNet. </li>
<li>To train a ResNet in practice: <br />&emsp;Add a BN layer after each convolutional layer. <br />&emsp;Use $Xavier/2$ initialization. <br />&emsp;Some hyperparameters: <br />&emsp;&emsp;Momentum: $0.9$<br />&emsp;&emsp;Learning rate: $0.1$, divided by $10$ when validation error plateaus. <br />&emsp;&emsp;Mini-batch size: 256<br />&emsp;&emsp;Weight decay: $1e-5$<br />&emsp;No dropout used. </li>
</ol>
<h1 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h1><ol>
<li>AlexNet: small compute, still memory heavy, lower accuracy</li>
<li>VGG: highest memory, most operations</li>
<li>GoogLeNet: most efficient</li>
<li>ResNet: Moderate efficiency depending on model, highest accuracy</li>
<li>ResNet, with inception, has the highest accuracy. </li>
</ol>
<h1 id="Other-Architectures"><a href="#Other-Architectures" class="headerlink" title="Other Architectures"></a>Other Architectures</h1><ol>
<li>NiN (Network in Network): <br />&emsp;Multiple convolutional layers with “micro-network” within each convolutional layer to compute more abstract features for local patches. <br />&emsp;The micro-network uses multilayer perceptron, like fully-connected layer. <br />&emsp;This is the precursor to GoogLeNet and ResNet bottleneck layers. </li>
<li>Identity Mappings in Deep Residual Networks: Creates a more direct path for propagating information throughout the network (moves activation to residual mapping pathway)</li>
<li>Wide residual network: <br />&emsp;Residuals are the critical factor, not depth. <br />&emsp;Use wider residual blocks ($F\times k$ filters instead of $F$ filters in each layer)<br />&emsp;$50$-layer wide ResNet outperforms $152$-layer original ResNet. <br />&emsp;Increasing width instead of depth is more computationally efficient. The computation can be easily parallelized. </li>
<li>ResNeXt: increase the width of theresidual block through multiple parallel pathways. <br /><img src="/img/07.CNNArchitectures07.png" width="30%"></li>
<li>Stochastic depth: <br />&emsp;Motivation: reduce vanishing gradients and training time through short networks during training. <br />&emsp;Randomly drop a subset of layers during each training pass. <br />&emsp;Bypass with identity function. <br />&emsp;Use the full network at test time. </li>
<li>FractalNet: <br />&emsp;The key is transitioning efficiently from shallow to deep and residual representation is not necessary. <br />&emsp;It has both shallow and deep paths to output. <br />&emsp;It is trained with dropout, and test with full network. <br />&emsp;<img src="/img/07.CNNArchitectures08.png" width="50%"></li>
<li>Densely Connected Convolutional Networks: <br />&emsp;In dense block, each layer is connected to every other layer in a feedforward fashion. <br />&emsp;<img src="/img/07.CNNArchitectures09.png" width="30%"><br />&emsp;It alleviates vanishing gradients, strengths feature propagation, encourages feature reuse. <br />&emsp;<img src="/img/07.CNNArchitectures10.png" width="15%"></li>
<li>SqueezeNet: <br />&emsp;It has AlexNet-level accuracy with $50$ times fewer parameters and less than $0.5$ Mb model size. <br />&emsp;Fire modules consisting of a ‘squeeze’ layer with $1\times1$ filters feeding an ‘expand’ layer with $1\times1$ and $3\times3$ filters. </li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>计算机视觉 (Stanford CS231n)</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>深度学习</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>07. Derived Distributions, Convolution, Covariance and Correlation</title>
    <url>/2020/03/14/07-Derived-Distributions-Convolution-Covariance-and-Correlation/</url>
    <content><![CDATA[<h1 id="Derived-Distributions"><a href="#Derived-Distributions" class="headerlink" title="Derived Distributions"></a>Derived Distributions</h1><ol>
<li>Calculate the PDF of $Y=g(X)$ of a continuous random variable $X$: <br />&emsp;First calculate the CDF $F_Y$ of $Y$ using $F_Y(y)=P(g(X)≤y)=\displaystyle\int_{\{x|g(x)≤y\}}f_X(x)dx$<br />&emsp;Differentiate to obtain the PDF of $Y$: $f_Y(y)=\displaystyle\frac{dF_Y}{dy}(y)$</li>
<li>If $Y=aX+b$, where $a$ and $b$ are scalars, with $a≠0$. Then $f_Y(y)=\displaystyle\frac{1}{|a|}f_X(\frac{y-b}{a})$<br />Graphical proof: The width will be $|a|$ times wider and the height will be $|a|$ times shorter. The points are shifted by $b$. If $a$ were negative, the graph will be flipped around the vertical axis. <br />Algebra proof: <br />&emsp;If $a&gt;0$<br />&emsp;&emsp;$F_Y(y)=P(Y≤y)=P(aX+b≤y)=P(X≤\displaystyle\frac{y-b}{a})=F_X(\frac{y-b}{a})$<br />&emsp;&emsp;$f_Y(y)=\displaystyle\frac{dF_Y}{dy}(y)=\frac{1}{a}f_X(\frac{y-b}{a})$<br />&emsp;If $a<0$<br />&emsp;&emsp;$F_Y(y)=P(Y≤y)=P(aX+b≤y)=P(X≥\displaystyle\frac{y-b}{a})=1-F_X(\frac{y-b}{a})$<br />&emsp;&emsp;$f_Y(y)=\displaystyle\frac{dF_Y}{dy}(y)=-\frac{1}{a}f_X(\frac{y-b}{a})$</li>
<li>$Y=g(X)$ is a monotonic function and its inverse is $X=h(Y)$. Assume that $h$ is differentiable. Then the PDF of $Y$ in the region where $f_Y(y)&gt;0$ is given by $f_Y(y)=f_X(h(y))\bigg|\displaystyle\frac{dh}{dy}(y)\bigg|$. <br />Proof: <br />&emsp;If $g$ is monotonically increasing<br />&emsp;&emsp;$F_Y(y)=P(g(X)≤y)=P(x≤h(y))=F_X(h(y))$<br />&emsp;&emsp;$f_Y(y)=\displaystyle\frac{dF_Y}{dy}(y)=f_X(h(y))\frac{dh}{dy}(y)$<br />&emsp;If $g$ is monotonically decreasing<br />&emsp;&emsp;$F_Y(y)=P(g(X)≤y)=P(X≥h(y))=1-F_X(h(y))$<br />&emsp;&emsp;$f_Y(y)=\displaystyle\frac{dF_Y}{dy}(y)=f_X(h(y))\bigg[-\frac{dh}{dy}(y)\bigg]$</li>
<li>This method also works for functions of multiple random variables. <br />&emsp;$F_Z(z)=P(g(X,Y)≤z)=\displaystyle\iint\limits_{\{(x,y)|(x,y)≤z\}}f_{X,Y}(x,y)dxdy$<br />&emsp;$f_Z(z)=\displaystyle\frac{dF_Z}{dz}(z)$</li>
<li>Two-sided exponential PDF (Laplace PDF): $f_Z(z)=\displaystyle\frac{\lambda}{2}e^{-\lambda|z|}$</li>
<li>For independent $X$ and $Y$, $Z=X+Y$. <br />&emsp;If $X$ and $Y$ are independent discrete random variables with PMFs $p_X,p_y$: <br />&emsp;&emsp;$\begin{equation}\begin{split}p_Z(z)&amp;=P(X+Y=z)\\&amp;=\displaystyle\sum_{\{(x,y)|x+y=z\}}P(X=x,Y=y)\\&amp;=\sum_xP(X=x,Y=z-x)\\&amp;=\sum_xp_X(x)p_Y(z-x) \end{split}\end{equation}$<br />&emsp;&emsp;The resulting PMF $p_Z$ is called the convolution of the PMFs of $X$ and $Y$. <br />&emsp;If $X$ and $Y$ are independent continuous random variables with PDFs $f_X$ and $f_Y$. <br />&emsp;&emsp;$\begin{equation}\begin{split}P(Z≤z|X=x)&amp;=P(X+Y≤z|X=x)\\&amp;=P(x+Y≤z|X=x)\\&amp;=P(x+Y≤z)\\&amp;=P(Y≤z-x) \end{split}\end{equation}$<br />&emsp;&emsp;Differentiating both sides with respect to $z$. $f_{Z|X}(z|x)=f_Y(z-x)$<br />&emsp;&emsp;So $f_{X,Z}(x,z)=f_X(x)f_{Z|X}(z|x)=f_X(x)f_Y(z-x)$<br />&emsp;&emsp;$f_Z(z)=\displaystyle\int^\infty_{-\infty}f_{X,Z}(x,z)dx=\int^\infty_{-\infty}f_X(x)f_Y(z-x)dx$<br />&emsp;&emsp;This is the convolution of the PDFs of $X$ and $Y$. </li>
<li>With the help of convolution, we know that the sum of two normal random variables with means $\mu_1,\mu_2$ and variance $\sigma_1^2,\sigma_2^2$ is another normal random variable with mean $\mu_1+\mu_2$ and variance $\sigma_1^2+\sigma^2_2$. </li>
<li>Graphical calculation of convolution: <br />&emsp;First plot $f_Y(z-t)$ as a function of $t$. <br />&emsp;Place the plots of $f_X(t)$ and $f_Y(z-t)$ on top of each other and form their product. <br />&emsp; The value of $f_Z(z)$ is the integral of the product of these two plots. </li>
</ol>
<h1 id="Covariance-and-Correlation"><a href="#Covariance-and-Correlation" class="headerlink" title="Covariance and Correlation"></a>Covariance and Correlation</h1><ol>
<li>The covariance of two random variables $X$ and $Y$, denoted by $cov(X,Y)$ is defined by $cov(X,Y)=E[(X-E[X])(Y-E[Y])]$. </li>
<li>When $cov(X,Y)=0$, we say that $X$ and $Y$ are uncorrelated. <br />Roughly speaking, a positive or negative covariance indicates that the value of $X-E[X]$ and $Y-E[Y]$ obtained in a single experiment tend to have the same or the opposite sign. </li>
<li>$cov(X,Y)=E[XY]-E[X]E[Y]$</li>
<li>$cov(X,X)=var(X)$</li>
<li>$cov(X,aY+b)=a\cdot cov(X,Y)$</li>
<li>$cov(X,Y+Z)=cov(X,Y)+cov(X,Z)$</li>
<li>If $X$ and $Y$ are independent, $E[XY]=E[X]E[Y]$, so $cov(X,Y)=0$. Thus, if $X$ and $Y$ are independent, they are also uncorrelated. But two uncorrelated random variables are not alway independent. </li>
<li>If $E[X|Y=y]=E[X]$, <script type="math/tex">E[XY]=\displaystyle\left\{\begin{array}{}\sum_yyp_Y(y)E[X|Y=y]=E[X]\sum_yyp_Y(y)=E[X]E[Y]&X\ and\ Y\ are\ discrete\\\\\int^\infty_{-\infty}yf_y(y)E[X|Y=y]dy=E[X]\int^\infty_{-\infty}yf_Y(y)dy=E[X]E[Y]&X\ and\ Y\ are\ continuous \end{array}\right.</script><br />So $cov(X,Y)=0$. In this case $X$ and $Y$ are uncorrelated but not always independent. </li>
<li>The correlation coefficient of two random variables $X$ and $Y$ that have nonzero variances: $\rho(X,Y)=\displaystyle\frac{cov(X,Y)}{\sqrt{var(X)var(Y)}}$</li>
<li>The correlation coefficient is a normalized version of the covariance. It ranges from $-1$ to $1$. </li>
<li>If $\rho&gt;0$, then the value of $X-E[X]$ and $Y-E[Y]$ tend to have the same sign. if $\rho&lt;0$, then the value of $X-E[X]$ and $Y-E[Y]$ tend to have the opposite sign. </li>
<li>$\rho=\pm1$ means $X$ and $Y$ are strongly dependent, knowing one can restore another one. <br />$\rho=1$ if and only if there exists a positive constant $c$ such that $Y-E[Y]=c(X-E[X])$. <br />$\rho=-1$ if and only if there exists a negative constant $c$ such that $Y-E[Y]=c(X-E[X])$. </li>
<li>If $X_1,X_2,…,X_n$ are random variables with finite variance, we have $var\left(\displaystyle\sum^n_{i=1}X_i\right)=\sum^n_{i=1}var(X_i)+\sum_{\{(i,j)|i≠j\}}cov(X_i,X_j)$. <br />For $n=2$, $var(X_1+X_2)=var(X_1)+var(X_2)+2cov(X_1,X_2)$. <br />Proof: We denote $\tilde{X_i}=X_i-E[X_i]$. <br />&emsp;$\displaystyle\begin{equation}\begin{split}var\left(\sum^n_{i=1}X_i\right)&amp;=E\left[\left(\sum^n_{i=1}\tilde{X_i} \right)^2 \right]\\&amp;=E\left[\sum^n_{i=1}\sum^n_{j=1}\tilde{X_i}\tilde{X_j} \right]\\&amp;=\sum^n_{i=1}\sum^n_{j=1}E[\tilde{X_i}\tilde{X_j}]\\&amp;=\sum^n_{i=1}E[\tilde{X_i}^2]+\sum_{\{(i,j)|i≠j\}}E[\tilde{X_i}\tilde{X_j}]\\&amp;=\sum^n_{i=1}var(X_i)+\sum_{\{(i,j)|i≠j\}}cov(X_i,X_j) \end{split}\end{equation}$</li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>概率论 (MIT 6.041)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>07. Multiple MVCs and Timer</title>
    <url>/2019/08/10/07-Multiple-MVCs-and-Timer/</url>
    <content><![CDATA[<h1 id="Multiple-MVCs"><a href="#Multiple-MVCs" class="headerlink" title="Multiple MVCs"></a>Multiple MVCs</h1><ol>
<li>When MVCs work together, one MVC is a View as the other MVC, and a MVC sees other MVCs as its View</li>
<li>We usually use the Controllers iOS provides whose View is other MVCs</li>
<li>There are three main kind of MVC models provided by iOS</li>
</ol>
<h2 id="UITabBarController"><a href="#UITabBarController" class="headerlink" title="UITabBarController"></a>UITabBarController</h2><ol>
<li>Just a set of taps in the app at the top or in the bottom. </li>
<li>When user tap one of the taps, the MVC controls the current view changes to the MVC of that tap, and together changes the view<a id="more"></a></li>
<li>A set of taps can contains at most five taps. However, if you have more than five taps, the fifth tap will become three dots which represent “more”</li>
</ol>
<h2 id="UISplitViewController"><a href="#UISplitViewController" class="headerlink" title="UISplitViewController"></a>UISplitViewController</h2><ol>
<li>This kind of MVC can only control two more MVCs</li>
<li>One of the two controlled MVC is the master view, while the other one is detail. Detail is controlled by master. </li>
<li>When the app is running on an iPad or an iPhone+ in landscape screen, the master MVC will share the screen with detail by appearing in the left of detail. </li>
<li>Or only the detail will be shown in the screen. But if we slide out from the left edge to the right, master will cover some space of detail in the left. </li>
</ol>
<h2 id="UINavigationController"><a href="#UINavigationController" class="headerlink" title="UINavigationController"></a>UINavigationController</h2><ol>
<li>This kind of MVC like a deck of cards and a stack of cards. </li>
<li>One UINavigationController can be the View of the other UINavigationController. One UINavigationController can control other UINavigationControllers</li>
<li>When one card is chosen, that card is drawn out, a new MVC slides in, and this “card” is pushed into  the stack of cards. </li>
<li>If the “back” buttom is tapped, then the instance of the current MVC will be destroyed and pop out the top of the stack, be showed in the screen. </li>
<li>The first MVC it connets to is the root MVC which will show when the navigation controller is called to show</li>
</ol>
<h1 id="Using-Multiple-MVCs"><a href="#Using-Multiple-MVCs" class="headerlink" title="Using Multiple MVCs"></a>Using Multiple MVCs</h1><h2 id="Accessing-the-Other-MVCs"><a href="#Accessing-the-Other-MVCs" class="headerlink" title="Accessing the Other MVCs"></a>Accessing the Other MVCs</h2><ol>
<li>Inside each MVCs, there is an array of UIViewController: <code>var viewControllers: [UIViewController]? { get set }</code><br>For a tab bar, they are in order, left to right, in the array.<br>For a split view, [0] is the master and [1] is the detail.<br>For a navigation controller, [0] is the root and the rest are in order on the stack.<br>Even though this is settable, usually setting happens via storyboard, segues, or other. </li>
<li>There is also some variables for us to call the other MVCs of this MVC is in named: <code>tabBarController</code>, <code>splitViewController</code>, <code>navigationController</code></li>
<li>Combine those two, we can theoratically access every MVCs in the project</li>
</ol>
<h2 id="Wiring-up-MVCs-without-code"><a href="#Wiring-up-MVCs-without-code" class="headerlink" title="Wiring up MVCs without code"></a>Wiring up MVCs without code</h2><ol>
<li>We use the ctrl-drag. Drag the MVCs(every thing named <code>view controller</code>) from the library to main.storyboard. Than drag from super-MVC to sub-MVC and select the relationship we want</li>
<li>Split view can only work properly on iPad or iPhone+. In order to make it work on other devices, we need to select the master MVC and embed it in a navigation controller. So on other devices, it will appear a navigation</li>
</ol>
<h2 id="Segue"><a href="#Segue" class="headerlink" title="Segue"></a>Segue</h2><ol>
<li>Segue is a relationship between MVCs to make it so that one MVC can cause another to appear. </li>
<li>There are four kinds of segues<br><strong>Show Segue</strong> (will push in a Navigation Controller, else Modal)<br><strong>Show Detail Segue</strong> (will show in Detail of a Split View or will push in a Navigation Controller)<br><strong>Modal Segue</strong> (take over the entire screen while the MVC is up)<br><strong>Popover Segue</strong> (make the MVC appear in a little popover window, but that MVC is still the only one MVC users can operate on their device)</li>
<li>Segues always create a new instance of an MVC</li>
</ol>
<h2 id="To-Make-Segue-Happen"><a href="#To-Make-Segue-Happen" class="headerlink" title="To Make Segue Happen"></a>To Make Segue Happen</h2><ol>
<li>Ctrl-drag in a storyboard from an instigator (like a button) to the MVC to segue to</li>
<li>Select a segue and in the attributes inspector we can modify its identifier. The identifier is a String instead of a variable name, so it does not have any limits</li>
</ol>
<h3 id="Preparing-a-Segue"><a href="#Preparing-a-Segue" class="headerlink" title="Preparing a Segue"></a>Preparing a Segue</h3><ol>
<li>When a segue happens, the View Controller containing the instigator gets a chance to prepare the destination View Controller to be segued to. Usually this means setting up the segued-to MVC’s Model and display characteristics. </li>
<li>The segue passed in the identifier from the storyboard and the Controller of the MVC you are segueing to (which was just created for you). </li>
<li>The sender is either the instigating object from a storyboard (e.g. a UIButton) or the sender you provided if you invoked the segue manually in code. </li>
<li>Because segue.destination is type of Any, so we must cast it to the controller it should be before we use it. </li>
<li>This preparation is happening BEFORE outlets get set. <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">prepare</span><span class="params">(<span class="keyword">for</span> segue: UIStoryboardSegue, sender: <span class="keyword">Any</span>?)</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> identifier = segue.identifier</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> identifier</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> oneIdentifierString:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> vc = segue.destination <span class="keyword">as</span>? <span class="type">SomeKindOfController</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Do something to the ViewController</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Preventing-Segues"><a href="#Preventing-Segues" class="headerlink" title="Preventing Segues"></a>Preventing Segues</h3><ol>
<li>Write a method in the super ViewController: <code>func shouldPerformSegue(withIdentifier identifier: String?, sender: Any?) -&gt; Bool</code></li>
<li>The identifier is the one in the storyboard. The sender is the instigating object. </li>
<li>Use a switch or something just return false when the very segue that you want to prevent called this method</li>
</ol>
<h1 id="Create-Multiple-MVCs"><a href="#Create-Multiple-MVCs" class="headerlink" title="Create Multiple MVCs"></a>Create Multiple MVCs</h1><h2 id="MVCs"><a href="#MVCs" class="headerlink" title="MVCs"></a>MVCs</h2><h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><ol>
<li>Drag one kind of ViewController we want from library to main.storyboard</li>
<li>Then create a new ViewController file to the project contains a class which is a subclass of UIViewController. </li>
<li>Remember to change the class this new ViewController connects to in the identifier inspector. </li>
<li>The horizontal arrow in main.storyboard is point to the first ViewController when app launches</li>
</ol>
<h3 id="Navigation-Controller"><a href="#Navigation-Controller" class="headerlink" title="Navigation Controller"></a>Navigation Controller</h3><ol>
<li>The navigatiopn cotroller usually don’t have a specific file to control it. It will only add a “back” button to the view that shows after its root MVC</li>
<li>We can add a navigation controller to a root MVC by selecting the root MVC and the Editor -&gt; Embed In -&gt; Navigation</li>
</ol>
<h3 id="Split-Controller"><a href="#Split-Controller" class="headerlink" title="Split Controller"></a>Split Controller</h3><ol>
<li>If we want detail shows what master says then we need to change the segue between them a “show detail” segue. </li>
<li>Insert a Navigation controller can make the app work when split controller can’t. But it will show the detail view by default. </li>
<li>But if the split controller doesn’t work, there is no split view exist at all, so we cannot call split view from what was supposed to be master or detail view. One solution to that is to record the last navigation controller we were in. </li>
<li>If we want to show the master instead of detail, when split view doesn’t work, first of all the master ViewController must be declared as a subclass of <code>UIViewController</code> and <code>UISplitViewControllerDelegate</code>, then we need to override two methods.<br>The first one is awakeFromNib. we need to make the split ViewController delegate to self as follows. <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">awakeFromNib</span><span class="params">()</span></span></span><br><span class="line">&#123;</span><br><span class="line">    splitViewController?.delegate = <span class="keyword">self</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
The second one is splitViewController. If we want to show the master view, then we’ll return true, otherwise we’ll return false<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">splitViewController</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="number">_</span> splitViewController: UISplitViewController, </span></span></span><br><span class="line"><span class="function"><span class="params">	collapseSecondary secondaryViewController: UIViewController,</span></span></span><br><span class="line"><span class="function"><span class="params">	onto primaryViewController: UIViewController</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> …</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>We can let the master view of split view can be swiped in or swiped out. We only need to set the <code>splitViewController?.preferredDisplayMode = .primaryOverlay</code>. It has four modes total, <code>allVisible</code>, <code>automatic</code>, <code>primaryHidden</code> and <code>primaryOverlay</code>. </li>
</ol>
<h2 id="Segues"><a href="#Segues" class="headerlink" title="Segues"></a>Segues</h2><h3 id="Preparing"><a href="#Preparing" class="headerlink" title="Preparing"></a>Preparing</h3><ol>
<li><code>sender</code> is type of Any. So before use it we need to cast them to the proper type we want</li>
<li><code>segue.destination</code>  is type of UIViewController which is super-class of all ViewController. Before we want to set something in the destination ViewController, we need to cast it to the ViewController we need to modify it further more. </li>
</ol>
<h3 id="Do-it-with-code"><a href="#Do-it-with-code" class="headerlink" title="Do it with code"></a>Do it with code</h3><ol>
<li>We need to connect the two views together instead of buttons. </li>
<li>Than we will call the method <code>performSegue(withIdentifier: String, sender: Any?)</code> when we want the segue to happen. </li>
<li>Still we need to write prepare method first. </li>
</ol>
<h1 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h1><ol>
<li>Timer is used to execute code periodically. </li>
<li>The system will not guarantee exactly when it goes off, so this is not “real-time”</li>
<li>We can use it with <code>Timer.scheduledTimer(withTimeInterval: TimeInterval, repeats: Bool, block: (Timer) -&gt; void)</code></li>
<li>That scheduledTimer method returns a Timer and we normally store it with a weak variable, because the run loop will keep a strong pointer to this as long as it’s scheduled</li>
<li>we can use <code>timer.invalidate()</code> to stop scheduling the timer. The run loop will thus give up its strong pointer to this timer. If your pointer to the timer is weak, it will be set to nil at this point. An invalidated timer like this is no longer of any use to you.</li>
<li>We can also set <code>tolerance</code> to make it wait for sometime if when the code should run, the computer is not awake. </li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>Swift开发 (Stanford CS193p)</category>
      </categories>
      <tags>
        <tag>应用开发</tag>
        <tag>Swift</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>07. Solving Ax = b: Row Reduced Form R</title>
    <url>/2020/01/28/07-Solving-Ax-b-Row-Reduced-Form-R/</url>
    <content><![CDATA[<h1 id="One-Particular-Solution"><a href="#One-Particular-Solution" class="headerlink" title="One Particular Solution"></a>One Particular Solution</h1><ol>
<li><script type="math/tex">A\vec{x}=\vec{b}</script> and <script type="math/tex">R\vec{x}=\vec{d}</script> are solvable only when all-zero rows of <script type="math/tex">R</script> having zeros in <script type="math/tex">\vec{d}</script>. </li>
<li>We can get one <code>particular solution</code> by setting free variables to zeros. </li>
<li>This particular solution is pivot rows of <script type="math/tex">\vec{d}</script> in pivots’ position and zeros in the free variables’ position. </li>
<li>With full column rank, <script type="math/tex">A\vec{x}=\vec{b}</script> has one solution or no solution. </li>
</ol>
<h1 id="Complete-Solution"><a href="#Complete-Solution" class="headerlink" title="Complete Solution"></a>Complete Solution</h1><ol>
<li>The particular solution will be one point on the solution space. Adding the nullspace vectors will make the solutions complete. </li>
<li><code>Complete solution = one particular solution + all nullspace solutions</code>. </li>
<li><script type="math/tex">\vec{x}_{particular}</script> comes from <script type="math/tex">\vec{d}</script>, while <script type="math/tex">\vec{x}_{special}</script> comes from the free columns of <script type="math/tex">R</script>. </li>
<li>When writing the complete solution, we multiply the special solutions to their free variable then add them together. However, nothing will multiply the particular solution. </li>
<li>The picture of the complete solution is the nullspace shifted by the particular solution. </li>
<li>Four possibilities for linear equations: <br /></li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Condition</th>
<th style="text-align:center">R</th>
<th style="text-align:center">Solution</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">$r=m=n$</td>
<td style="text-align:center">$R=\left[\begin{matrix}I\end{matrix}\right]$</td>
<td style="text-align:center">only $1$ solution</td>
</tr>
<tr>
<td style="text-align:center">$r=m &lt; n$</td>
<td style="text-align:center">$R=\left[\begin{matrix}I&amp;F\end{matrix}\right]$</td>
<td style="text-align:center">infinitely many solutions (<code>full row rank</code>)</td>
</tr>
<tr>
<td style="text-align:center">$r=n &lt; m$</td>
<td style="text-align:center">$R=\left[\begin{matrix}I \ 0\end{matrix}\right]$</td>
<td style="text-align:center">$0$ or $1$ solution (<code>full column solution</code>)</td>
</tr>
<tr>
<td style="text-align:center"><script type="math/tex">r<m\ \ r<n</script></td>
<td style="text-align:center">$R=\left[\begin{matrix}I&amp;F\\0&amp;0\end{matrix}\right]$</td>
<td style="text-align:center">$0$ solution or infinitely many solutions</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>数学</category>
        <category>线性代数 (MIT 18.06)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>08. Animation</title>
    <url>/2019/08/12/08-Animation/</url>
    <content><![CDATA[<h1 id="UIView-Property-Animation"><a href="#UIView-Property-Animation" class="headerlink" title="UIView Property Animation"></a>UIView Property Animation</h1><h2 id="UIView-Animation-Properties"><a href="#UIView-Animation-Properties" class="headerlink" title="UIView Animation Properties"></a>UIView Animation Properties</h2><ol>
<li>frame/center</li>
<li>bounds (transient size, does not conflict with animating center)transform (translation, </li>
<li>rotation and scale)</li>
<li>alpha (opacity)</li>
<li>backgroundColor<a id="more"></a>
</li>
</ol>
<h2 id="UIViewPropertyAnimator"><a href="#UIViewPropertyAnimator" class="headerlink" title="UIViewPropertyAnimator"></a>UIViewPropertyAnimator</h2><ol>
<li>Use a static method of UIViewPropertyAnimation named runningPropertyAnimator and pass a bunch of parameters to it to set the animation we want. </li>
<li><code>withDuration</code> is the time the animation takes</li>
<li><code>delay</code> means that excute the animation so many <code>seconds</code> later</li>
<li><code>options</code> is the type of animation</li>
<li><code>animations</code> is a closure which takes nothing as parameter and returns nothing.<br>This is where we will modify the properties.<br><em><code>No matter when the animation will happen or end, this closure will be excuted immediately.</code></em></li>
<li><code>completion</code> is an optional parameter. It is also a closure which takes one <code>UIViewAnimatingPosition</code> as parameter and returns nothing<br>It will be excuted when the animation is end.<br>UIViewAnimatingPosition can be <code>.start</code> if we run the animation backwards, <code>.end</code>, and <code>.current</code> if this animation was interrupted by others</li>
<li>If multiple animations involve in multiple differet properties, then they can be excuted at the same time. But is two animation involve in the same property, only the later animation will be executed and the easier one will stop immediately. </li>
<li>The animation presented on screen will delay while codes will be excuted continuously. <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">runningPropertyAnimator</span></span></span><br><span class="line"><span class="class">(</span></span><br><span class="line"><span class="class">    <span class="title">withDuration</span>: <span class="title">TimeInterval</span>,</span></span><br><span class="line"><span class="class">    <span class="title">delay</span>: <span class="title">TimeInterval</span>,</span></span><br><span class="line"><span class="class">    <span class="title">options</span>: <span class="title">UIViewAnimationOptions</span>,</span></span><br><span class="line"><span class="class">    <span class="title">animations</span>: () -&gt; <span class="title">Void</span>,</span></span><br><span class="line"><span class="class">    <span class="title">completion</span>: ((<span class="title">position</span>: <span class="title">UIViewAnimatingPosition</span>) -&gt; <span class="title">Void</span>)? = <span class="title">nil</span></span></span><br><span class="line"><span class="class">)</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="UIViewAnimationOptions"><a href="#UIViewAnimationOptions" class="headerlink" title="UIViewAnimationOptions"></a>UIViewAnimationOptions</h2><ol>
<li><code>beginFromCurrentState</code>: pick up from other, in-progress animations of these properties</li>
<li><code>allowUserInteraction</code>: allow gestures to get processed while animation is in progress</li>
<li><code>layoutSubviews</code>: animate the relayout of subviews with a parent’s animation</li>
<li><code>repeat</code>: repeat indefinitely</li>
<li><code>autoreverse</code>: play animation forwards, then backwards</li>
<li><code>overrideInheritedDuration</code>: if not set,use duration of any in-progress animation</li>
<li><code>overrideInheritedCurve</code>: if not set, use curve (e.g. ease-in/out) of in-progress animation</li>
<li><code>allowAnimatedContent</code>: if not set, just interpolate between current and end “bits”</li>
<li><code>curveEaseInEaseOut</code>: slower at the beginning, normal throughout, then slow at end</li>
<li><code>curveEaseIn</code>: slower at the beginning, but then constant through the rest</li>
<li><code>curveLinear</code>: same speed throughout</li>
</ol>
<h2 id="UIView-Animation"><a href="#UIView-Animation" class="headerlink" title="UIView Animation"></a>UIView Animation</h2><ol>
<li>The difference between UIViewAnimation and UIViewPropertyAnimation is that UIViewAnimaiton can make <code>an entire view</code> modified at once. </li>
<li>It sends message to the UIView instead of UIViewPropertyAnimation. </li>
<li>In this case, we have a few more animation options to use.<br>Flip the entire view over <code>UIViewAnimationOptions.transitionFlipFrom{Left,Right,Top,Bottom}</code><br>Dissolve from old to new state <code>.transitionCrossDissolve</code><br>Curling up or down <code>.transitionCurl{Up,Down}</code></li>
</ol>
<h1 id="Dynamic-Animation"><a href="#Dynamic-Animation" class="headerlink" title="Dynamic Animation"></a>Dynamic Animation</h1><ol>
<li>Set up physics relating animatable objects and let them run until they resolve to stasis.</li>
<li>Easily possible to set it up so that stasis never occurs, but that could be performance problem.</li>
</ol>
<h2 id="Create-a-Dynamic-Animation"><a href="#Create-a-Dynamic-Animation" class="headerlink" title="Create a Dynamic Animation"></a>Create a Dynamic Animation</h2><ol>
<li>Create an animator : <code>UIDynamicAnimator(referenceView: UIView)</code><br>Every animating views must be in a view hierarchy with referenceView at the top.</li>
<li>We need to give the animator some Behaviors, so we need to create some <code>UIDynamicBehavior</code> instances then use <code>animator.addBehavior(…)</code></li>
<li>To perform this animation, we also need to add items to the animator for it to perform. First we need to create some UIDynamicItem instances then add it to animator with syntax <code>animator.addItem(item)</code></li>
<li>UIView implements UIDynamicItem. </li>
<li>If you change center or transform while the animator is running, you must call this method in <code>updateItemUsingCurrentState(item: UIDynamicItem)</code></li>
</ol>
<h2 id="Behaviors"><a href="#Behaviors" class="headerlink" title="Behaviors"></a>Behaviors</h2><ol>
<li>All behaviors know the UIDynamicAnimator they are part of</li>
<li>They can only be part of one at a time.<br>var <code>dynamicAnimator</code>: UIDynamicAnimator? { get }</li>
<li>The behavior will be sent this message when its animator changes …<br> func <code>willMove</code>(to: UIDynamicAnimator?)</li>
</ol>
<h3 id="UIGravityBehavior"><a href="#UIGravityBehavior" class="headerlink" title="UIGravityBehavior"></a>UIGravityBehavior</h3><ol>
<li><code>var angle: CGFloat</code><br>It’s in radians; 0 is to the right; positive numbers are clockwise</li>
<li><code>var magnitude: CGFloat</code><br>Every 1.0 is 1000 points/s<sup>2</sup></li>
</ol>
<h3 id="UIAttachmentBehavior"><a href="#UIAttachmentBehavior" class="headerlink" title="UIAttachmentBehavior"></a>UIAttachmentBehavior</h3><ol>
<li><code>init(item: UIDynamicItem, attachedToAnchor: CGPoint)</code></li>
<li><code>init(item: UIDynamicItem, attachedTo: UIDynamicItem)</code></li>
<li><code>init(item: UIDynamicItem, offsetFromCenter: CGPoint, attachedTo[Anchor]...)</code></li>
<li><code>var length: CGFloat</code><br>Distance between attached things (this is settable while animating!)</li>
<li><code>var anchorPoint: CGPoint</code><br>Can also be set at any time, even while animating</li>
<li>The attachment can oscillate like a spring and you can control frequency and damping</li>
</ol>
<h3 id="UICollisionBehavior"><a href="#UICollisionBehavior" class="headerlink" title="UICollisionBehavior"></a>UICollisionBehavior</h3><ol>
<li><p>var <code>collisionMode</code>: UICollisionBehaviorMode<br><code>.items</code>, then any items you add to a UICollisionBehavior will bounce off of each other<br><code>.boundaries</code>, then you add UIBezierPath boundaries for items to bounce off of<br>It can also be <code>.everything</code></p>
</li>
<li><p>To add boundaries you need to use these methods<br><code>func addBoundary(withIdentifier: NSCopying, for: UIBezierPath)</code><br><code>func addBoundary(withIdentifier: NSCopying, from: CGPoint, to: CGPoint)</code><br><code>func removeBoundary(withIdentifier: NSCopying)</code></p>
<p><code>`var translatesReferenceBoundsIntoBoundary: Bool</code><br>NSCopying means NSString or NSNumber, but remember you can as to String, Int. </p>
</li>
</ol>
<h3 id="UISnapBehavior"><a href="#UISnapBehavior" class="headerlink" title="UISnapBehavior"></a>UISnapBehavior</h3><ol>
<li>It will ease the view to a specific place. And just like there are four springs around the item in the new spot, it will vibrate after get to the new spot. </li>
<li>You can control the damping of these “four springs” with <code>var damping: CGFloat</code></li>
<li><code>init(item: UIDynamicItem, snapTo: CGPoint)</code></li>
</ol>
<h3 id="UIPushBehavior"><a href="#UIPushBehavior" class="headerlink" title="UIPushBehavior"></a>UIPushBehavior</h3><ol>
<li><code>var mode: UIPushBehaviorMode</code><br>.continuous or .instantaneous</li>
<li><code>var pushDirection: CGVector</code></li>
<li><code>var angle: CGFloat</code><br>in radians and positive numbers are clockwise</li>
<li><code>var magnitude: CGFloat</code><br>magnitude 1.0 moves a 100x100 view at 100 pts/s<sup>2</sup></li>
<li>If you push .instantaneous,  after it’s done it just sits there wasting memory.</li>
</ol>
<h3 id="UIDynamicItemBehavior"><a href="#UIDynamicItemBehavior" class="headerlink" title="UIDynamicItemBehavior"></a>UIDynamicItemBehavior</h3><ol>
<li>Controls the behavior of items as they are affected by other behaviors.</li>
<li><code>var allowsRotation: Bool</code></li>
<li><code>var friction: CGFloat</code></li>
<li><code>var elasticity: CGFloat</code></li>
<li>Can also get information about items with this behaviors<br><code>func linearVelocity(for: UIDynamicItem) -&gt; CGPoint</code><br><code>func addLinearVelocity(CGPoint, for: UIDynamicItem)</code><br><code>func angularVelocity(for: UIDynamicItem) -&gt; CGFloat</code></li>
</ol>
<h3 id="UIDynamicBehavior"><a href="#UIDynamicBehavior" class="headerlink" title="UIDynamicBehavior"></a>UIDynamicBehavior</h3><ol>
<li>Superclass of behaviors.</li>
<li>You can create your own subclass which is a combination of other behaviors.</li>
<li>Usually you override init method(s) and addItem and removeItem to call. </li>
<li><code>func addChildBehavior(UIDynamicBehavior)</code><br>This is a good way to encapsulate a physics behavior that is a composite of other behaviors. We can use it in the initializer.<br>You might also add some API which helps your subclass configure its children.</li>
<li>All behaviors know the UIDynamicAnimator they are part of.<br>They can only be part of one at a time.<br><code>var dynamicAnimator: UIDynamicAnimator? { get }</code><br>And the behavior will be sent this message when its animator changes<br><code>func willMove(to: UIDynamicAnimator?)</code></li>
</ol>
<h3 id="UIDynamicBehavior’s-action-property"><a href="#UIDynamicBehavior’s-action-property" class="headerlink" title="UIDynamicBehavior’s action property"></a>UIDynamicBehavior’s action property</h3><ol>
<li>Every time the behavior acts on items, this block of code that you can set is executed<br><code>var action: (() -&gt; Void)?</code></li>
<li>You can set this to do anything you want. But it will <code>be called a lot</code>, so make it very efficient.</li>
<li>If the action refers to properties in the behavior itself, watch out for memory cycles.</li>
</ol>
<h3 id="Stasis"><a href="#Stasis" class="headerlink" title="Stasis"></a>Stasis</h3><ol>
<li>UIDynamicAnimator’s delegate tells you when animation pauses</li>
<li>Just set the delegate<br>var delegate: UIDynamicAnimatorDelegate</li>
<li>You’ll find out when stasis is reached and when animation will resume<br> func <code>dynamicAnimatorDidPause</code>(UIDynamicAnimator)<br> func <code>dynamicAnimatorWillResume</code>(UIDynamicAnimator)</li>
</ol>
<h1 id="Memory-Cycle-Avoidance"><a href="#Memory-Cycle-Avoidance" class="headerlink" title="Memory Cycle Avoidance"></a>Memory Cycle Avoidance</h1><h2 id="Closure-Capturing"><a href="#Closure-Capturing" class="headerlink" title="Closure Capturing"></a>Closure Capturing</h2><ol>
<li>Closure can use the globle variables and can capture them. </li>
<li>Closure can rename globle variables by adding <code>[localName = globleName] in</code> at the beginning. </li>
<li>It can even change the influencing ARC of the local value, such as <code>[weak localName = globleName]</code></li>
<li>If we make localName and globleName to be the same, we only need to write the name like <code>[weak globleName]</code></li>
</ol>
<h2 id="Memory-Cycle"><a href="#Memory-Cycle" class="headerlink" title="Memory Cycle"></a>Memory Cycle</h2><ol>
<li>Closures are reference types and live in the heap and they capture variables in their surroundings and keep them in the heap with them.</li>
<li>Memory Cycle means that several strong values point to each other. So that none of them can leave the heap. </li>
<li>A memory cycle is not good, because it will take too much memory. </li>
<li>For exemple, a closure inside a class calls another method in that class. The closure captured the class, the class stored the closure. So the closure point to the class and class point back to the closure. It create a cycle. Neither can leave the heap. </li>
<li>Remember that <code>self is a strong variable</code>. </li>
<li>All the closures in animation we make will not contructe a memory cycle. Because those closures instead of point to the class they are in, they point to the animator. </li>
</ol>
<h2 id="Break-a-Memory-Cycle"><a href="#Break-a-Memory-Cycle" class="headerlink" title="Break a Memory Cycle"></a>Break a Memory Cycle</h2><ol>
<li>We can break a memory cycle by capturing globle variables as <code>weak</code> or <code>unowned</code>. </li>
<li>When declared weak, that local variable becomes an optional. </li>
<li>If we do so, the local variables point to nothing and break the memory cycle. </li>
<li>We use unowned <code>if and only if</code> we can sure this is <code>the only time</code> we will use it and we won’t use it after it’s set nil. </li>
<li>We can capture self with syntax <code>[weak self]</code></li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>Swift开发 (Stanford CS193p)</category>
      </categories>
      <tags>
        <tag>应用开发</tag>
        <tag>Swift</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>08. Gradient Field</title>
    <url>/2020/02/29/08-Gradient%20Field/</url>
    <content><![CDATA[<h1 id="Gradient"><a href="#Gradient" class="headerlink" title="Gradient"></a>Gradient</h1><ol>
<li>Gradient field: <script type="math/tex">\vec{F}=\triangledown f</script> (<script type="math/tex">f(x,y)</script> is called potential). </li>
<li>Fundamental theorem of calculus for line integrals: <script type="math/tex">\displaystyle\int_C\triangledown f\cdot d\vec{r}=f(P_1)-f(P_0)</script> (<script type="math/tex">C</script> starts from <script type="math/tex">P_0</script> ends at <script type="math/tex">P_1</script>)<br />Proof: <script type="math/tex">\begin{equation}\begin{split}\displaystyle\int_C\triangledown f\cdot d\vec{r}&=\int_C\triangledown f\cdot\frac{d\vec{r}}{dt}dt=\int_C<f_x,f_y>\cdot<\frac{dx}{dt},\frac{dy}{dt}>dt\\&=\int_C(f_x\frac{dx}{dt}+f_y\frac{dy}{dt})dt=\int^{t_2}_{t_1}\frac{df}{dt}dt\ \ \ (chain\ rule)\\&=\int^{t_2}_{t_1}df=f(P_1)-f(P_2) \end{split}\end{equation}</script></li>
<li>Path independence: The integral doesn’t depend on the path we take. As long as the start and end points are the same, integrals are the same. <br /><script type="math/tex">\displaystyle\int_{C_1}\triangledown fd\vec{r}=\int_{C_2}\triangledown fd\vec{r}</script></li>
<li><script type="math/tex">\triangledown f</script> Is conservative. If <script type="math/tex">C</script> is any closed curve, the work along <script type="math/tex">C</script> is zero. </li>
<li>Not every field is a gradient field. </li>
<li>Conservativeness means no energy can be extracted from the field for free. </li>
<li><script type="math/tex">Mdx+Ndy</script> is an exact differential which equals to <script type="math/tex">df</script>. </li>
<li>If <script type="math/tex">\vec{F}=\triangledown f</script>, then <script type="math/tex">M=f_x</script> and <script type="math/tex">N=f_y</script>. Also <script type="math/tex">f_{xy}=f_{yx}</script>. So if <script type="math/tex">\vec{F}</script> is a gradient field, <script type="math/tex">M_y=N_x</script>. <br />If <script type="math/tex">M_y=N_x</script> and <script type="math/tex">\vec{F}</script> is defined in entire plane (or simply concrete region), we can know <script type="math/tex">\vec{F}</script> is a gradient field. </li>
<li>When <script type="math/tex">\vec{F}</script> is a gradient field, we can find the potential: <br />&emsp;The first method is computing the line integral from the known point to the target. <br />&emsp;The second method is antiderivatives. With <script type="math/tex">f_x</script>, we can know <script type="math/tex">f=F(x)+G(y)</script> (<script type="math/tex">F(x)</script> is the main answer of antiderivative which may contain <script type="math/tex">y</script> while <script type="math/tex">G(y)</script> is the optional term of antiderivative which becomes zero when derivative with respect to <script type="math/tex">x</script>). <br />Now derivative the <script type="math/tex">f</script> with respect to <script type="math/tex">y</script> to get <script type="math/tex">f_y=F_y+G'(y)</script>. After compared to the known <script type="math/tex">f_y</script>, we can get the expression of <script type="math/tex">G'(y)</script>. Then calculate <script type="math/tex">G(y)</script> ans substitute to <script type="math/tex">f</script>. </li>
</ol>
<h1 id="Curl"><a href="#Curl" class="headerlink" title="Curl"></a>Curl</h1><ol>
<li><script type="math/tex; mode=display">curl(\vec{F})=N_x-M_y$$. Test for conservativeness is $$curl\ \vec{F}=0</script></li>
<li>Curl measures twice angular velocity of rotation component of velocity field and torque exerted on a test object in the field. </li>
<li><script type="math/tex; mode=display">\displaystyle\frac{torque}{moment\ of\ inertia}=\frac{d}{dt}(angular\ velocity)</script></li>
<li>If force <script type="math/tex">\vec{F}</script> derives from a potential, <script type="math/tex">curl\ \vec{F}=0</script> means <script type="math/tex">\vec{F}</script> doesn’t induce any rotation motion. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>多变量微积分 (MIT 18.02)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>08. Independence, Basis, and Dimension</title>
    <url>/2020/01/28/08-Independence-Basis-and-Dimension/</url>
    <content><![CDATA[<h1 id="Independence"><a href="#Independence" class="headerlink" title="Independence"></a>Independence</h1><ol>
<li>The columns of <script type="math/tex">A</script> are <code>linearly independent</code> when the only solution to <script type="math/tex">A\vec{x}=\vec{0}</script> is <script type="math/tex">\vec{x}=\vec{0}</script>, i.e. the nullspace <script type="math/tex">N(A)</script> contains only the zero vector. No other combination <script type="math/tex">A\vec{x}</script> of the columns gives the zero vector. </li>
<li>Another definition of independence: <script type="math/tex">x_1\vec{v}_1+x_2\vec{v}_2+…+x_n\vec{v}_n=\vec{0}</script> only happens when all <script type="math/tex">x</script>‘s are zero. </li>
<li>Independence is a relationship among vectors instead of matrices. </li>
<li>The columns of <script type="math/tex">A</script> are independent exactly when <script type="math/tex">A</script> has full column rank. </li>
<li>Any set of <script type="math/tex">n</script> vectors in <script type="math/tex">R^m</script> must be linearly dependent if <script type="math/tex">n > m</script>. </li>
<li><code>Linear dependence</code> can also be described as follows. <br />&emsp;One vector is a combination of other vectors. <br />&emsp;Some combination gives the zero vector, other than the trivial combination with every <script type="math/tex">x=0</script>. </li>
</ol>
<h1 id="Basis-for-a-Vector-Space"><a href="#Basis-for-a-Vector-Space" class="headerlink" title="Basis for a Vector Space"></a>Basis for a Vector Space</h1><ol>
<li>A set of vectors <code>spans</code> a space if their linear combinations fill the space. </li>
<li>The vectors which span a space could be dependent or independent. </li>
<li>A <code>basis for a vector space</code> is a sequence of vectors that are linearly independent and span the space. </li>
<li>There is only one way to write a vector <script type="math/tex">\vec{v}</script> as a combination of the basis vectors. <br />Prove: <br />&emsp;Suppose <script type="math/tex">\vec{v}=a_1\vec{v_1}+a_2\vec{v_2}+…+a_n\vec{v_n}</script> and <script type="math/tex">\vec{v}=b_1\vec{v_1}+b_2\vec{v_2}+…+b_n\vec{v_n}</script>. <br />&emsp;Subtract those two equations to get <script type="math/tex">\vec{0}=(a_1-b_1)\vec{v_1}+(a_2-b_2)\vec{v_2}+…+(a_n-b_n)\vec{v_n}</script><br />&emsp;So <script type="math/tex">a_i-b_i=0(\forall \ i≤n)</script>, i.e. <script type="math/tex">a_i=b_i(\forall \ i ≤ n)</script>. </li>
<li>The columns of the <script type="math/tex">n</script> by <script type="math/tex">n</script> identity matrix give the <code>standard basis</code> for <script type="math/tex">R^n</script>. </li>
<li>The basis is not unique. </li>
<li>The vectors are a basis for <script type="math/tex">R^n</script> exactly when they are the columns of an <script type="math/tex">n</script> by <script type="math/tex">n</script> invertible matrix. </li>
<li>The pivot columns (row) of <script type="math/tex">A</script> <strong>(not <script type="math/tex">R</script>)</strong> are a basis for its column (row) space. </li>
<li>Two way to find a basis from a sequence of vectors: <br />&emsp;Make them the rows of <script type="math/tex">A</script> , and eliminate to find the nonzero rows of <script type="math/tex">R</script>. <br />&emsp;Put the vectors into the columns of <script type="math/tex">A</script>. Eliminate to find the pivot columns of <script type="math/tex">A</script>. </li>
<li>The zero vector will never be allowed into any basis because then linear independence is lost. </li>
<li>Every basis of the space has the same number of vectors. </li>
<li>The special solutions are a basis of $N(A)$. </li>
</ol>
<h1 id="Dimension-of-a-Vectors-Space"><a href="#Dimension-of-a-Vectors-Space" class="headerlink" title="Dimension of a Vectors Space"></a>Dimension of a Vectors Space</h1><ol>
<li>The number of vectors, in any and every basis, is the <code>dimension</code> of the space. </li>
<li>All basis of the same space has the same number. </li>
<li>The dimension of the column space equals the rank of the matrix. </li>
<li>The dimension of <script type="math/tex">Z</script> is zero. The empty set (containing no vectors) is a basis for <script type="math/tex">Z</script>. </li>
<li>The dimension of the column space: $dim(C(A))=rank(A)$</li>
<li>The dimension of the nullspace: <script type="math/tex">dim(N(A))=number\ of\ free\ variables=n-rank(A)</script></li>
</ol>
<h1 id="Extension"><a href="#Extension" class="headerlink" title="Extension"></a>Extension</h1><ol>
<li>The idea of independence, basis and dimension are not restricted to column vectors. Matrix and functions can also have these. </li>
<li>In matrices, it is much like in column space, except components in different rows. </li>
<li>In function, space usually is given by differential equation. It is also quite like <script type="math/tex">A\vec{x}=\vec{b}</script>. However, we solve it with calculus. </li>
<li>In function spaces, it also has nullspace and particular solution. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>线性代数 (MIT 18.06)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>07. 语义分析和中间代码生成</title>
    <url>/2020/05/20/07-%E8%AF%AD%E4%B9%89%E5%88%86%E6%9E%90%E5%92%8C%E4%B8%AD%E9%97%B4%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<h1 id="中间代码"><a href="#中间代码" class="headerlink" title="中间代码"></a>中间代码</h1><ol>
<li>中间代码可以是一个真正的语言，也可以是各个阶段共享的多个内部数据结构</li>
<li>中间代码生成的任务：把语法分析和语义分析完成后得到的源程序中间表示翻译为中间代码</li>
<li>独立于机器的中间代码便于编译系统的建立和移植，便于进行独立于机器的代码优化</li>
</ol>
<h2 id="图表示法"><a href="#图表示法" class="headerlink" title="图表示法"></a>图表示法</h2><h3 id="抽象语法树"><a href="#抽象语法树" class="headerlink" title="抽象语法树"></a>抽象语法树</h3><ol>
<li>抽象语法：语言结构本质性的东西，不考虑具体符号表示</li>
<li>抽象语法树：反映抽象语法，是分析书的抽象形式或压缩形式</li>
<li>抽象语法树中每一个叶节点都表示运算对象，内部节点表示运算符</li>
<li>分析树反映的是具体语法结构</li>
<li>语法规则中符号可能起标点符号作用，也可能起解释作用</li>
<li>辅助函数：<br />&emsp;<script type="math/tex">mknode(op,\ left,\ right)</script>建立一个运算符节点<br />&emsp;<script type="math/tex">mkleaf(id,\ entry)</script>建立一个标识符节点，即变量下存储的运算对象，变量名为$id$，变量的值为$value$<br />&emsp;<script type="math/tex">mkleaf(num,\ val)</script>建立一个数节点，标号为$num$，数的值为$val$</li>
<li>利用语法制导定义，每一个产生式的语义规则都是其对应节点的产生辅助函数。如果产生式是$E\to id$，就用<script type="math/tex">mkleaf(id,\ entry)</script>；若是$E\to num$，就用<script type="math/tex">mkleaf(num,\ val)</script>；其它的就用<script type="math/tex">mknode(op,\ left,\ right)</script>来产生对应的运算符</li>
<li>利用图像直观地展示从分析树生成语法树的过程就可以用箭头从一个语法树的节点指向生成的那个节点，并将节点中的域指针指向对应的语法树节点。最后再把分析树和从分析树指向语法树的箭头去掉，就得到一个语法树</li>
</ol>
<h3 id="有向非循环图"><a href="#有向非循环图" class="headerlink" title="有向非循环图"></a>有向非循环图</h3><ol>
<li>在抽象语法树中，有大量节点表示的是同一个值，这造成了大量的空间浪费</li>
<li>我们可以把抽象语法树中的公共节点提取出来，只建立一个节点，并把原本指向不同的同值节点的域指针都指向那一个公共节点</li>
<li>显然这样产生的图就不再是一棵树，一个公共节点可能有多个父节点</li>
<li>我们相当于只是把原本语法树的节点合并成一个，并没有改变其走向，所以这个图不会有循环</li>
<li>现在在构造节点前要先检查现有节点，若存在相同节点，就直接返回，确定了不存在相同节点才会创建新的节点</li>
</ol>
<h2 id="逆波兰表达式"><a href="#逆波兰表达式" class="headerlink" title="逆波兰表达式"></a>逆波兰表达式</h2><ol>
<li>$\Theta$是$k$目运算符，则$\Theta$作用于$e_1e_2…e_k$的结果用$e_1e_2…e_k\Theta$表示</li>
<li>对语法树进行一次后根遍历得到的序列就是后缀式</li>
<li>还是利用语法制导定义，设置每一个产生式的语义规则为给左部赋予一个$code$属性，表示改产生式的后缀式。用$||$表示空格，将符号串连接起来</li>
<li>后缀式的优点是易于计算机处理表达式</li>
<li>常见的是栈算法，详见 <a href="http://www.laughingtree.cn/2019/07/23/栈和队列/" target="_blank" rel="noopener">栈和队列</a></li>
</ol>
<h2 id="三地址代码"><a href="#三地址代码" class="headerlink" title="三地址代码"></a>三地址代码</h2><ol>
<li>一般形式：<script type="math/tex">x\ :=\ y\ op\ z</script></li>
<li>一般包含三个地址：两个操作分量和一个结果的抽象地址</li>
<li>通常用变量名代替抽象地址</li>
<li>三地址代码是语法树或DAG的线性表示，用临时变量代替语法树中的节点</li>
<li>三地址代码的类型<br />&emsp;赋值语句：<script type="math/tex">x\ :=\ y\ op\ z</script>    <script type="math/tex">x\ :=\ op\ y</script><br />&emsp;无条件转移语句：<script type="math/tex">goto\ L</script><br />&emsp;条件转移语句：<script type="math/tex">if\ x\ relop\ y\ goto\ L</script>，关系运算符号<script type="math/tex">relop(<,\ =, 等等)</script><br />&emsp;复制语句：<script type="math/tex">x\ :=\ y</script><br />&emsp;过程调用语句：先用$n$次<script type="math/tex">param\ x</script>依次调用各个参数，再用<script type="math/tex">call\ p,\ n</script>表示调用的函数和参数个数<br />&emsp;过程返回语句：<script type="math/tex">return\ y</script><br />&emsp;索引赋值语句：$x := y[i]$，<script type="math/tex">x[i]\ :=\ y</script><br />&emsp;地址和指针赋值语句：<script type="math/tex">x\ :=\ \&y</script>，<script type="math/tex">x\ :=\ *y</script>，<script type="math/tex">*x\ :=\ y</script></li>
<li>语法制导翻译的属性<br />&emsp;$E.place$表示存放$E$值的名字<br />&emsp;$E.code$表示对$E$求值的三地址语句序列。先计算涉及到的计算对象，再用计算当前对象。如<br />&emsp;<script type="math/tex">E.code=E_1.code||E_2.code||gen(E.place':='E_1.place'+'E_2.place)</script><br />&emsp;$newtemp$是个函数，产生一个新的临时变量</li>
<li>实际实现中，三地址语句序列往往是被放到一个输出文件中，而不是将三地址语句序列置入$code$属性之中</li>
<li>具体实现<br />&emsp;四元式：<script type="math/tex">op,\ arg1,\ arg2,\ result</script><br />&emsp;三元式：<script type="math/tex">op,\ arg1,\ arg2</script>。结果就存放在当前三元式的地方，要调用是直接调用当前三元式的编号<br />&emsp;间接三元式：间接码表+三元式表。三元式放在一个单独的表中，间接码表中每一行都指向不同的三元式<br />&emsp;涉及到单目运算的不使用$arg2$<br />&emsp;$param$只用$arg1$<br />&emsp;转移指令将目标标号放入$result$</li>
<li>实现方式的比较<br />&emsp;四元式调整顺序方便，引入的临时变量多，所需存储空间大<br />&emsp;三元式所需存储空间小，但调整顺序不变，调整后还需改变其余行对当前行的引用指针<br />&emsp;间接三元式调整顺序和四元式差不多方便，所需的存储空间也和四元式差不多多</li>
</ol>
<h1 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h1><ol>
<li>类型检查是语义分析的重要组成部分</li>
<li>编译器先根据类型说明，确定每一个变量和常量的类型，计算其使用存储空间大小，从而建立其到存储空间的映射。进而，编译器要确定每个语言结构的类型，判定重载算符 (函数)在程序中代表哪个、类型转换、类型检查</li>
<li>类型表达式：<br />&emsp;类型名和基本类型是类型表达式<br />&emsp;类型构造符作用于类型表达式的结果仍然是类型表达式<br />&emsp;&emsp;数组构造符$ARRAY(I,T)$，$I$是下标集合，$T$是数组类型<br />&emsp;&emsp;笛卡尔乘积$\times$，<script type="math/tex">A\times B=\{(x,y)|x\in A\ and\ y\in B\}</script><br />&emsp;&emsp;记录类型构造符$RECORD$，其结果类似$C$中的结构体<br />&emsp;&emsp;指针类型构造符$POINTER$，其结果是一个指针类型<br />&emsp;&emsp;函数类型构造符$\to$，$D_1\times D_2\times…\times D_n\to R$<br />&emsp;类型表达式中可以出现类型变量，类型变量的值科院是任何类型表达式</li>
<li>分类<br />&emsp;静态类型检查：由编译器完成的检查<br />&emsp;动态类型检查：目标程序运行时完成的检查。若目标代码把每个对象的类型和值一起保存，那么任何检查都可以动态完成</li>
<li>强类型语言：保证编译器所接受的程序不会有运行时的类型错误的语言</li>
<li>类型检查的内容：表达式、语句、函数</li>
<li>变量标识符类型的确定<br />&emsp;语义分析程序先处理类型说明，建立类型表达式，然后处理变量说明，建立变量和类型表达式的绑定<br />&emsp;把变量标识符的类型信息记录在其符号表的表项中，$addtype(id.entry,T.type)$完成这个任务，引入综合属性$T.type$记录类型表达式</li>
<li>表达式的类型检查：检查运算对象之间是否满足相容条件。综合属性$E.type$表示$E$的类型表达式。常用$IF…THEN…ELSE$或$lookup(id.entry)$</li>
<li>语句的类型检查：主要包括赋值语句类型的相容性、控制表达式的结果类型检查。语句中没有类型错误就是$void$，否则为$type_error$。语句中有表达式，所以还要对表达式类型检查</li>
<li>函数引用的类型检查：检查参数是否和函数类型一致，是则返回函数返回值的类型</li>
<li>必须类型转换：赋值号右边的类型转换为左边的类型；整数转换成实数</li>
<li>类型表达式在源程序的中间表示里插入这些转换操作</li>
<li>自动类型转换 (隐式转换)：从一种数据类型转换成另一种数据类型，可以由编译器自动完成<br />强制类型转换 (显式转换)：必须由程序员显式地写在源程序中，在类型检查器中类似函数调用</li>
</ol>
<h1 id="常用语句的翻译"><a href="#常用语句的翻译" class="headerlink" title="常用语句的翻译"></a>常用语句的翻译</h1><h2 id="说明语句的翻译"><a href="#说明语句的翻译" class="headerlink" title="说明语句的翻译"></a>说明语句的翻译</h2><ol>
<li>说明语句：对程序中规定范围内使用的各类变量、常数、过程进行说明</li>
<li>编译要做的工作：在符号表中建立相应的表项，填写有关的信息。如类型、嵌套深度、相对地址</li>
<li>$T.width$记录名字的域宽，$T.type$记录名字的类型，$enter(id.name,T.type,offset)$为名字$name$建立一个符号表表项</li>
<li>用一个全局变量$offset$来记录下一个可用单元相对于初始单元的相对地址。每新建一个变量，就给$offset$叠加该变量的域宽</li>
</ol>
<h3 id="保留作用域信息"><a href="#保留作用域信息" class="headerlink" title="保留作用域信息"></a>保留作用域信息</h3><ol>
<li>同一个标识符有可能在不同的范围内表示不同的信息，要正确区分在各个范围内引用的标识符而不产生混乱</li>
<li>首先要解决的问题是局部数据和非局部数据的访问</li>
<li>方法是为每个过程建立一张符号表，每张表都有一个指针指向其直接外围过程的符号表，如果内部数据中无法找到，就顺着指针去直接外围过程符号表找</li>
<li>子过程名$id$作为直接外围过程的局部名字记录在直接外围过程符号表中，其中还有一个指针指向子过程$id$</li>
<li>每次生成一个过程 (包括主程序)，先执行定位操作，记录所需空间，若不是主程序，还要返回到外围过程，再执行重定位操作，创建主出现的符号表、初始化</li>
<li>翻译过程用到一个栈存放指向外围过程的指针。还有一个栈存放变量的相对地址，当过程结束时，里面记录的就是该过程占用的所有字节数</li>
<li>辅助操作<br />&emsp;$mktable(previous)$创建一张新符号表<br />&emsp;$enter(table,name,type,offset)$插入表项<br />&emsp;$addwidth(table,width)$记录总域宽<br />&emsp;$enterproc(table,name,newtable)$进入过程</li>
<li>记录声明：定位操作中建立一个空表记录各个域中的信息，最后的重定位操作中将各域的总域宽作为该记录型的域宽，返回记录声明所在过程的符号表</li>
</ol>
<h2 id="赋值语句的翻译"><a href="#赋值语句的翻译" class="headerlink" title="赋值语句的翻译"></a>赋值语句的翻译</h2><ol>
<li>利用过程$lookup(id.name)$检查是否在符号表中存在相应次名字的表项</li>
<li>$lookup$函数先通过$top(tblptr)$指针在当前符号表中查找，若找到直接返回；若没找到，就到当前表的外围表找，直到找到返回，或所有外围表项都没找到，返回$nil$</li>
<li>查找只要对终结符中的标识符查找，不必对非终结符或终结符中的常量查找</li>
<li>语义动作应包括类型分析，文法符阿訇应有类型属性，在类型分析的基础上，进行相容和赋值相容检查，生成类型转换的三地址代码</li>
<li>一维数组$A$的基址为$base$，域宽为$w$，下标下界为$low$，上界为$high$。$A[i]$的位置为$i\times w+base-low\times w$<br />二维数组行列下界分别为$low_1,low_2$，长度$n_1,n_2$，$A[i][j]$位置为$(i\times n_2 + j)\times w + base-(low_1\times n_2+low_2)\times w$<br />$A[i_1,i_2,…,i_k]$的地址为$((…((i_1\times n_2+i_2)\times n_3+i_3)…)\times n_k+i_k)\times w+base-((…((low_1\times n_2+low_2)\times n_3+low_3)…)\times n_k+low_k)\times w$</li>
<li>我们用$Elist$来表示数组的一个下标，多个下标用逗号分割。定义其属性$Elist.array$为数组名在符号表的位置，$Elist.ndim$为目前已经识别出的下标表达式的个数，$Elist.place$保存递推公式中临时变量位置</li>
<li>如果一个变量的$.offset$属性是$null$，则为简单变量，如果是一个变项，则是一个数字元素，且其值为$Elist.array$</li>
<li>访问记录中的域：先找到符号表里的记录变量的位置，再找到记录表的位置</li>
</ol>
<h2 id="布尔表达式和控制流语句"><a href="#布尔表达式和控制流语句" class="headerlink" title="布尔表达式和控制流语句"></a>布尔表达式和控制流语句</h2><ol>
<li>布尔表达式与一般的算术表达式类似，运算符是与或非等，运算量是布尔常量或关系表达式，运算结果是布尔常量</li>
<li>布尔表达式的值的表示方法：数值法、控制流表示法。布尔表达式的翻译方法也是这两种</li>
<li>数值翻译法就只有一个属性$E.place$存放$E$的布尔数值，控制流翻译法就有$E.true$表示$E$值为真时应执行的第一条语句的标号，$E.false$表示$E$值为假时应执行的第一条语句的标号。他们都有$E.code$表示三地址代码</li>
<li>对语句$S$有：$S.next$表示紧跟在语句$S$之后的三地址语句的标号，$S.begin$表示语句$S$的第一条三地址语句的标号，$S.code$表示语句$S$的三地址代码</li>
</ol>
<h3 id="回填技术"><a href="#回填技术" class="headerlink" title="回填技术"></a>回填技术</h3><ol>
<li>两遍扫描的翻译技术 ($L$属性定义，深度优先翻译)：先产生分析树，再为分析树加注释 (翻译)</li>
<li>一边扫描技术 ($S$属性定义，自底向上翻译)的问题时生成某些转移指令时，目标地址可能还不知道，即布尔表达式的真出口和假出口可能还不知道</li>
<li>解决：先产生无转移标号的转移语句，再转向标号确定后，再把语句标号填上，即回填</li>
<li>定义综合属性$E.truelist$记录转移到$E$的真出口的指令的链表指针，$E.falselist$记录转移到$E$的假出口的指令的链表指针。一个真出口链表里可能有不止一个指针，但他们指向的语句的跳转出口都是一样的</li>
<li>在计算时，我们先把所有带回填且需回填同一个值的指针串成一条链，当满足回填要求的时候就把其中的每一个都填上</li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>编译原理 (HDU / Stanford)</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>09. Bernoulli Process</title>
    <url>/2020/03/16/09-Bernoulli-Process/</url>
    <content><![CDATA[<ol>
<li>The Bernoulli process can be visualized as a sequence of independent coin tosses where the probability of heads in each toss is a fixed number $p$ in the range $(0,1)$. </li>
<li>In convention, each trial produces a $1$ (a success) with probability $p$, and a $0$ (a failure) with probability $1-p$, independent of what happens in other trials. </li>
</ol>
<h1 id="Independence-and-Memorylessness"><a href="#Independence-and-Memorylessness" class="headerlink" title="Independence and Memorylessness"></a>Independence and Memorylessness</h1><ol>
<li>Fresh-start property: The future trials are independent from the past ones. Starting from any given point in time, the future is also modeled by a Bernoulli process, which is independent from the past. </li>
<li>Memorylessness property: The time $T$ until the first success is a geometric random variable. After $n$ failures, since a fresh-start Bernoulli process is constituting, the remaining trials until first success $T-n$ is still a geometric random variable. $P(T-n=t|T&gt;n)=P(T=t)$</li>
</ol>
<h1 id="Interarrival-Times"><a href="#Interarrival-Times" class="headerlink" title="Interarrival Times"></a>Interarrival Times</h1><ol>
<li>$Y_k$ represents the time of $k$th success. $T_k$ stands for the $k$th interarrival time. </li>
<li>$T_1=Y_1$, $T_i=Y_i-Y_{i-1}(i&gt;1)$</li>
<li>$Y_k=\displaystyle\sum^k_{i=1}T_i$</li>
<li>$T_1$ is a geometric random variable with parameter $p$. After $T_1$, the future is a new Bernoulli process similar to the old one. </li>
<li>All $T_i$ are independent and all have the same geometric distribution. </li>
<li>In the problem of finding the first failure string, the string begins with the first failure and ends with the first success since then is not geometric. Because we look at it from the frist failure when we know it’s a failure. So we need to look from the experiment after the first failure, since we only know whether it’s going to success or not. So the geometric begins after the first failure occurred, ends when the frist success occurred. And the expectation of that is $E[T_1]+1$. </li>
</ol>
<h1 id="The-kth-Arrivial-Time"><a href="#The-kth-Arrivial-Time" class="headerlink" title="The  kth Arrivial Time"></a>The  kth Arrivial Time</h1><ol>
<li>$Y_k=T_1+…+T_k$, $T_1,…,T_k$ are independent and have geometric PMF. So $E[Y_k]=E[T_1+…+T_k]=E[T_1]+…E[T_k]=\displaystyle\frac{k}{p}$</li>
<li>$var(Y_k)=var(T_1+…+T_k)=var(T_1)+…+var(T_k)=\displaystyle\frac{k(1-p)}{p^2}$</li>
<li>The PMF of $Y_k$ (Pascal PMF of order $k$): $p_{Y_k}(t)={t-1\choose k-1}p^k(1-p)^{t-k}  t≥k$</li>
</ol>
<h1 id="Split-and-Merge"><a href="#Split-and-Merge" class="headerlink" title="Split and Merge"></a>Split and Merge</h1><h2 id="Split"><a href="#Split" class="headerlink" title="Split"></a>Split</h2><ol>
<li>Imaging tossing two coins, the first coin has a bias to the head of probability $p$ and the second coin has a bias to the head of probability $q$. </li>
<li>If the outcome of the first coin is head, then we toss the second coin. </li>
<li>We can split the result of first coin into two independent process. Both of the later process focus only on the second coin. </li>
<li>One process marks the head side on the second coin as success and tail on the first coin or tail on the second coin as failure. <br />The other process marks the tail on the second coin as success and tail on the first coin or head on the second coin as failure. </li>
<li>The first process has a proabability of success of $pq$ while the second process has a probability of success of $p(1-q)$. </li>
</ol>
<h2 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h2><ol>
<li>Other than split one process into two process, we can also merge two process into one process. </li>
<li>Tossing the same two coins as above at the same time, the result is success if one of the coins is head. </li>
<li>This final process has a probability of <script type="math/tex">1-P(none\ is\ head)=1-(1-p)(1-q)=p+q-pq</script></li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>概率论 (MIT 6.041)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>08. Recurrent Neural Networks</title>
    <url>/2020/05/25/08-Recurrent-Neural-Networks/</url>
    <content><![CDATA[<h1 id="Common-models"><a href="#Common-models" class="headerlink" title="Common models"></a>Common models</h1><ol>
<li>One to one model: vanilla model</li>
<li>One to many: image captioning</li>
<li>Many to one: sentiment classification</li>
<li>Many to many (some input without output while some output without input): machine translation</li>
<li>Many to many (each input has an output): vedio classification on frame level</li>
</ol>
<h1 id="Recurrent-Neural-Network"><a href="#Recurrent-Neural-Network" class="headerlink" title="Recurrent Neural Network"></a>Recurrent Neural Network</h1><ol>
<li>It has a recurrent core that will update each time it’s needed, and the next data will still be feed to it. </li>
<li>$h_t = f_W(h_{t-1},x_t)$</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>计算机视觉 (Stanford CS231n)</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>深度学习</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>08. Newton&#39;s Method, Mean Value Theorem and Inequalities</title>
    <url>/2020/02/12/08-Newton-s-Method%20-Mean-Value-Theorem-and-Inequalities/</url>
    <content><![CDATA[<h1 id="Newton’-Method"><a href="#Newton’-Method" class="headerlink" title="Newton’ Method"></a>Newton’ Method</h1><ol>
<li>This is a method to solve an equation. </li>
<li>First move everything to one side of equation to get <script type="math/tex">f(x)=0</script>. This changes the question to find the zero point of <script type="math/tex">f(x)</script>. </li>
<li>We start with an inistial guess <script type="math/tex">x_0</script>. </li>
<li>Then we calculate the intersection of <script type="math/tex">(x_n,f(x_n))</script>‘s tangent line and x-axis to get <script type="math/tex">x_{n+1}=x_n-\displaystyle\frac{f(x_n)}{f'(x_n)}</script>. </li>
<li>As <script type="math/tex">n</script> goes larger, <script type="math/tex">x_n</script> is more accuracy to the solution. </li>
<li>Error analys: <script type="math/tex">x</script> is the solution and <script type="math/tex">E_i=|x-x_i|</script>. <script type="math/tex">E_{i+1}=E_i^2</script>, so the number of digits accuracy doubles each step. </li>
<li>If <script type="math/tex">|f'|</script> not too small and <script type="math/tex">|f''|</script> not too big and <script type="math/tex">x_0</script> stops nearby <script type="math/tex">x</script>, Newton’s Method works well. </li>
<li>Ways the method can fail: <br />&emsp;<script type="math/tex">x_0</script> is too far away from <script type="math/tex">x</script> may get another zero point that is not the solution. <br />&emsp;<script type="math/tex">f'</script> is close to zero, so the tangent line is hard to have an intersection with x-axis. <br />&emsp;If <script type="math/tex">x_{m+2}=x_m</script>, <script type="math/tex">x_m</script> and <script type="math/tex">x_{m+1}</script> go in a circle and never come out. </li>
</ol>
<h1 id="Mean-Value-Theorem"><a href="#Mean-Value-Theorem" class="headerlink" title="Mean Value Theorem"></a>Mean Value Theorem</h1><ol>
<li>If <script type="math/tex">f</script> is differentiable in <script type="math/tex">a<x<b</script> and continuous in <script type="math/tex">a≤x≤b</script>, <script type="math/tex">\displaystyle\frac{f(b)-f(a)}{b-a}=f'(c)</script> for some <script type="math/tex">c</script> <script type="math/tex">(a<c<b)</script>. </li>
<li><script type="math/tex; mode=display">\displaystyle\frac{f(b)-f(a)}{b-a}$$ is the slope of secant $$ab$$ and $$f'(c)$$ is the slope of tangent line of $$(c, f(c))</script></li>
<li>Another version: <script type="math/tex">f(b)=f(a)+f'(c)(b-a)</script>. This formula can be used when proving the relation between <script type="math/tex">f'</script> and the monotonicity of <script type="math/tex">f</script>. </li>
<li>Comparison with linear approximation: <br />&emsp;Mean value theorem don’t have a constraint on <script type="math/tex">a</script> and <script type="math/tex">b</script> as long as they’re defined. <br />&emsp;The <script type="math/tex">a</script> and <script type="math/tex">b</script> in linear approximation must be near. <br />&emsp;Mean value theorem states <script type="math/tex">min\ f'≤ave\ f'≤max\ f'</script>. <br />&emsp;Linear approximation states <script type="math/tex">ave\ f'\approx init\ f'</script> when the interval is small. </li>
</ol>
<h1 id="Important-Inequalities"><a href="#Important-Inequalities" class="headerlink" title="Important Inequalities"></a>Important Inequalities</h1><ol>
<li><script type="math/tex; mode=display">e^x>1+x\ \ \ (x>0)</script></li>
<li><script type="math/tex; mode=display">e^x>1+x+\displaystyle\frac{x^2}{2}</script></li>
<li><script type="math/tex; mode=display">e^x>1+x+\displaystyle\frac{x^2}{2}+…+\frac{x^n}{n!}</script></li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>单变量微积分 (MIT 18.01)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>09. The Four Fundamental Subspaces</title>
    <url>/2020/01/30/09-The-Four-Fundamental-Subspaces/</url>
    <content><![CDATA[<p>The four fundamental subspaces are: </p>
<ol>
<li>The <code>row space</code>: <script type="math/tex">C(A^T)</script>, a subspace of <script type="math/tex">R^n</script></li>
<li>The <code>column space</code>: <script type="math/tex">C(A)</script>, a subspace of <script type="math/tex">R^m</script></li>
<li>The <code>nullspace</code>: <script type="math/tex">N(A)</script>, a subspace of <script type="math/tex">R^n</script></li>
<li>The <code>left nullspace</code>: <script type="math/tex">N(A^T)</script>, a subspace of <script type="math/tex">R^m</script>. This is the solution space of <script type="math/tex">\vec{y}^TA=A^Ty=\vec{0}^T</script></li>
</ol>
<h1 id="The-Four-Subspaces-for-R"><a href="#The-Four-Subspaces-for-R" class="headerlink" title="The Four Subspaces for R"></a>The Four Subspaces for R</h1><ol>
<li>The dimension of the row space is the rank <script type="math/tex">r</script>. The nonzero rows of <script type="math/tex">R</script> form a basis. </li>
<li>The dimension of the column space is the rank <script type="math/tex">r</script>. The pivot columns of <script type="math/tex">R</script> form a basis. </li>
<li>The nullspace has dimension <script type="math/tex">n-r</script>. The special solutions form a basis. </li>
<li>The left nullspace has dimension <script type="math/tex">m-r</script>. <br /><script type="math/tex">\vec{y}^TR</script> is the row linear combination of <script type="math/tex">R</script>. To make the combination <script type="math/tex">\vec{0}^T</script>, we can only use the last <script type="math/tex">m-r</script> zero rows because the pivots can never be eliminated again. <br />So the left nullspace is a space with vectors containing the first <script type="math/tex">r</script> $0$s and then  <script type="math/tex">m-r</script> free variables. </li>
</ol>
<h1 id="The-Four-Subspaces-for-A"><a href="#The-Four-Subspaces-for-A" class="headerlink" title="The Four Subspaces for A"></a>The Four Subspaces for A</h1><ol>
<li><script type="math/tex">A</script> has the same row space as <script type="math/tex">R</script>. Same dimension <script type="math/tex">r</script> and same basis. We can choose the <script type="math/tex">r</script> rows that end up nonzero rows in <script type="math/tex">R</script>. </li>
<li>The column space of <script type="math/tex">A</script> has dimension <script type="math/tex">r</script>. Nevertheless, <script type="math/tex">A</script> and <script type="math/tex">R</script> have different column space. The <script type="math/tex">r</script> pivot columns of <script type="math/tex">A</script> form basis of <script type="math/tex">C(A)</script>. </li>
<li><script type="math/tex">A</script> has the same nullspace as  <script type="math/tex">R</script>. </li>
<li>The left nullspace of <script type="math/tex">A</script> has dimension <script type="math/tex">m-r</script>. The basis vectors are the vectors that create zero rows. </li>
<li>The Counting Theorem<br />&emsp;In <script type="math/tex">R^n</script>, <script type="math/tex">dim(row\ space)+dim(nullspace)=n</script><br />&emsp;In <script type="math/tex">R^m</script>, <script type="math/tex">dim(column\ space)+dim(left\ nullspace)=m</script></li>
<li>For any matrix <script type="math/tex">A</script>, we can eliminate to get <script type="math/tex">EA=R</script>. If we take <script type="math/tex">C=E^{-1}</script>, then <script type="math/tex">A=CR</script>. <br />Furthermore, the basis of <script type="math/tex">N(A^T)</script> is the rows of <script type="math/tex">E</script> that is zero rows in <script type="math/tex">R</script>. <br />Since identity matrix is in pivot columns of <script type="math/tex">R</script>, we know that the pivot columns of <script type="math/tex">C</script> is the same as <script type="math/tex">A</script>. <br />Also, we can write <script type="math/tex">A=\left[\begin{matrix}\vec{u_1}&\vec{u_2}&…&\vec{u_n}\end{matrix}\right]\left[\begin{matrix}\vec{v_1}^T\\\vec{v_2}^T\\…\\\vec{v_r}^T\\zero\ rows\end{matrix}\right]=\vec{u_1}\vec{v_1}^T+\vec{u_2}\vec{v_2}^T+…+\vec{u_r}\vec{v_r}^T</script><br />Every <script type="math/tex">\vec{u_i}\vec{v_i}^T</script> is a rank <script type="math/tex">1</script> matrix. So every rank <script type="math/tex">r</script> matrix can be the sum of <script type="math/tex">r</script> rank <script type="math/tex">1</script> matrices. <br />So the basis of <script type="math/tex">C(A)</script> is pivot columns. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>线性代数 (MIT 18.06)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>09. Flux and Green&#39;s Theorem</title>
    <url>/2020/03/01/09-Flux-and-Green-s-Theorem/</url>
    <content><![CDATA[<h1 id="Flux"><a href="#Flux" class="headerlink" title="Flux"></a>Flux</h1><ol>
<li>This is another kind of line integral. </li>
<li><script type="math/tex">C</script> is the plane curve with unit normal vector <script type="math/tex">\vec{n}</script> at each point and <script type="math/tex">\vec{F}</script> is a vector field. </li>
<li>If break <script type="math/tex">C</script> into small pieces <script type="math/tex">\Delta s</script>, <script type="math/tex">Flux=\displaystyle\lim_{\Delta s\to 0}(\sum\vec{F}\cdot\vec{n}\ \Delta s)</script>. So <script type="math/tex">Flux=\displaystyle\int_C\vec{F}\cdot\vec{n}\ ds</script></li>
<li>Interpretation: for <script type="math/tex">\vec{F}</script> a velocity field, flux measures how much fluid passes through <script type="math/tex">C</script> per unit time. </li>
<li>Before calculation, we need  to set a direction to flux. Goes along that direction is positive while opposite direction is negative. </li>
<li>Calculation using components: <br />Remember: <script type="math/tex">d\vec{r}=\vec{T}ds=<dx,dy></script>. Since <script type="math/tex">\vec{n}</script> is <script type="math/tex">\vec{T}</script> rotated <script type="math/tex">\displaystyle\frac{\pi}{2}</script> clockwise, <script type="math/tex">\vec{n}ds=<dy,-dx></script>. <br />If <script type="math/tex">\vec{F}=<M,N></script>, then <script type="math/tex">\displaystyle\int_C\vec{F}\cdot\vec{n}ds=\int_C-Ndx+Mdy</script></li>
</ol>
<h1 id="Green’s-Theorem"><a href="#Green’s-Theorem" class="headerlink" title="Green’s Theorem"></a>Green’s Theorem</h1><ol>
<li>For work: <script type="math/tex">C</script> is a closed curve enclosing a region R, counterclockwise. <script type="math/tex">\vec{F}</script> Vector field is defined and differentiable in <script type="math/tex">R</script>. Then <script type="math/tex">\displaystyle\oint_C\vec{F}\cdot d\vec{r}=\iint_Rcurl\ \vec{F}dA</script>, namely <script type="math/tex">\displaystyle\oint_CMdx+Ndy=\iint_R(N_x-M_y)dA</script>. </li>
<li><strong><code>WARNING: ONLY FOR CLOSED CURVE</code></strong></li>
<li>If <script type="math/tex">curl\ \vec{F}=0</script>, <script type="math/tex">\displaystyle\oint_C\vec{F}\cdot d\vec{r}=\iint_Rcurl\ \vec{F}dA=0</script></li>
<li>A complex region can be decomposed into simpler regions. </li>
<li>For flux: If <script type="math/tex">C</script> encloses a region <script type="math/tex">R</script> counterclockwise and <script type="math/tex">\vec{F}<P,Q></script> defined in <script type="math/tex">R</script>, then <script type="math/tex">\displaystyle\oint_C\vec{F}\cdot\vec{n}ds=\iint_Rdiv\ \vec{F}dA</script> <script type="math/tex">(divergent:div\ <P,Q>=P_x+Q_y)</script>. </li>
<li>Green’s theorem shows us the position of an enclosed curve doesn’t affect the flux. </li>
<li>Interpretation of <script type="math/tex">div\ \vec{F}</script>: <br />&emsp;Measures how much the flow is expanding. <br />&emsp;Source rate = amount of fluid added to the system per unit time per unit area. </li>
<li>If one enclosed curve <script type="math/tex">C'</script> is in another enclosed curve <script type="math/tex">C</script>, connect them with one segment. <br />We can go along <script type="math/tex">C</script> and then go to <script type="math/tex">C'</script> through that segment. <br />And go along <script type="math/tex">C'</script> in opposite direction then come back to <script type="math/tex">C</script> through that segment. <br />This forms a new curve which encloses a region <script type="math/tex">R</script> between <script type="math/tex">C</script> and <script type="math/tex">C'</script>. <br /><script type="math/tex">\displaystyle\oint_C\vec{F}\cdot d\vec{r}-\oint_{C'}\vec{F}\cdot d\vec{r}=\iint_Rcurl\ \vec{F}dA</script></li>
<li>A connected region <script type="math/tex">R</script> in the plane is simply connected if the interior of any closed curve in <script type="math/tex">R</script> is also contained in <script type="math/tex">R</script>. <br />Simply connected has no “hole” in it. </li>
<li>If <script type="math/tex">curl\ \vec{F}=0</script> and domain where <script type="math/tex">\vec{F}</script> defined is simply connected, then <script type="math/tex">\vec{F}</script> is conservative and a gradient. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>多变量微积分 (MIT 18.02)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>09. Differentials, Antiderivatives and Differential Equations</title>
    <url>/2020/02/12/09-Differentials-and-antiderivatives/</url>
    <content><![CDATA[<h1 id="Differential"><a href="#Differential" class="headerlink" title="Differential"></a>Differential</h1><ol>
<li>Differential of <script type="math/tex">y</script> is <script type="math/tex">dy=f'(x)dx</script>. </li>
<li>This is the Leibniz interpretation of derivative as a ratio of “infinitesimals”. </li>
<li>Here <script type="math/tex">dy</script> and <script type="math/tex">dx</script> are small variables, so this is also a form of linear approximation. </li>
<li>A number can be written as a value of function <script type="math/tex">y=f(x+dx)</script>, we can calculate <script type="math/tex">dy=f'(x)dx</script> and <script type="math/tex">y=dy+f(x)</script>. </li>
</ol>
<h1 id="Antiderivatives"><a href="#Antiderivatives" class="headerlink" title="Antiderivatives"></a>Antiderivatives</h1><ol>
<li>The antiderivative of <script type="math/tex">g(x)</script> is <script type="math/tex">G(x)=\displaystyle\int g(x)dx</script>. <script type="math/tex">\displaystyle\int</script> is integrad sign. It’s also called indefine integral of <script type="math/tex">g</script>. </li>
<li><script type="math/tex; mode=display">\displaystyle\frac{d}{dx}G(x)=g(x)</script></li>
<li><script type="math/tex; mode=display">\displaystyle\int sin\ dx=-cos\ x+c</script></li>
<li><script type="math/tex; mode=display">\displaystyle\int x^adx=\frac{1}{a+1}x^{a+1}+c\ \ (a≠-1)</script></li>
<li><script type="math/tex; mode=display">\displaystyle\int \frac{dx}{x}=(ln\ |x|)+c</script></li>
<li><script type="math/tex; mode=display">\displaystyle\int sec^2xdx=tan\ x+c</script></li>
<li><script type="math/tex; mode=display">\displaystyle\int\frac{dx}{\sqrt{1-x^2}}=sin^{-1}x+c</script></li>
<li><script type="math/tex; mode=display">\displaystyle\int\frac{dx}{1+x^2}=tan^{-1}x+c</script></li>
<li>The uniqueness of antiderivative up to the constant. If <script type="math/tex">F'=G'</script>, then <script type="math/tex">F(x)=G(x)+c</script><br />&emsp;Proof: If <script type="math/tex">F'=G'</script>, then <script type="math/tex">(F-G)'=F'-G'=0</script>. So <script type="math/tex">F(x)-G(x)=c</script>. </li>
<li><code>Method of Substitution</code>: tailer-made for differential notation<br /><script type="math/tex">\displaystyle\int f'(x)g(f(x))dx</script>, since <script type="math/tex">df=f'dx</script>, assign <script type="math/tex">u=f(x)</script> and the original equation becomes <script type="math/tex">\displaystyle\int g(u)du</script>. </li>
</ol>
<h1 id="Differential-Equations"><a href="#Differential-Equations" class="headerlink" title="Differential Equations"></a>Differential Equations</h1><ol>
<li>The stratigy here is to separate <script type="math/tex">dy</script> and <script type="math/tex">dx</script> at different side of equation. And all <script type="math/tex">y</script>‘s in the <script type="math/tex">dy</script> side while all <script type="math/tex">x</script>‘s in the <script type="math/tex">dx</script> side. Then we calculate the integrad of both side. </li>
<li>For equations <script type="math/tex">\displaystyle\frac{dy}{dx}=f(x)g(y)</script>, we separate them to get <script type="math/tex">\displaystyle\frac{dy}{g(y)}=f(x)dx</script>. So <script type="math/tex">\displaystyle\int\frac{dy}{g(y)}=\int f(x)dx</script>. </li>
<li>This solution leaves out <script type="math/tex">g(y)=0</script>. </li>
<li>After intergrad, theoratically we get one constant each side, but two constants can always be combined into one. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>单变量微积分 (MIT 18.01)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>10. Definite Integrals</title>
    <url>/2020/02/14/10-Definite-Integrals/</url>
    <content><![CDATA[<h1 id="Definite-Integrals"><a href="#Definite-Integrals" class="headerlink" title="Definite Integrals"></a>Definite Integrals</h1><ol>
<li>The area under a curve in interval <script type="math/tex">[a,b]</script> can be calculated as <script type="math/tex">\displaystyle\int^a_bf(x)dx</script>. </li>
<li>To compute the area: <br />&emsp;Divide into rectangles<br />&emsp;Add up areas. <br />&emsp;Take the limits as the number of rectangle goes to infinite. </li>
<li>Riemann sums (general procedure for definite integrals): <br />&emsp;Divide the big inteval into <script type="math/tex">n</script> pieces, each has the length <script type="math/tex">\Delta x=\displaystyle\frac{b-a}{n}</script><br />&emsp;Pick any height of <script type="math/tex">f</script> in each interval<br />&emsp;Add them up <code>Riemann sum</code>: <script type="math/tex">\displaystyle\sum^n_{i=1}f(c_i)\Delta x</script> as <script type="math/tex">\Delta x</script> approaching zero. </li>
<li><script type="math/tex; mode=display">lower\ Riemann\ sum\ (\displaystyle\sum^n_{i=1}f_{min}\Delta x) ≤ actual\ integral ≤ upper\ Riemann\ sum\ (\displaystyle\sum^n_{i=1}f_{max}\Delta x)</script></li>
<li>Integrals is cumulative sums. </li>
<li><code>Fundamental Theorem of Calculus</code>: If <script type="math/tex">F'(x)=f(x)</script>, then <script type="math/tex">\displaystyle\int^b_af(x)dx=F(x)\Big|^b_a=F(b)-F(a)</script>. </li>
<li>Intuitive interpretation of Fundamental Theorem: <script type="math/tex">x(t)</script> is the position at time <script type="math/tex">t</script>, <script type="math/tex">x'(t)=v(t)</script> is the speed. <script type="math/tex">\displaystyle\int^b_a v(t)dt=x(b)-x(a)</script> is the distance travelled. </li>
<li>According to Fundamental Theorem of Calculus, <script type="math/tex">\displaystyle\frac{F(b)-F(a)}{b-a}=\frac{1}{b-a}\int^b_af(x)dx</script> which is the average of <script type="math/tex">f</script>. So we can write <script type="math/tex">\Delta F=Ave(F')\Delta x</script>. </li>
<li><code>Second Fundamental Theorem</code>: If <script type="math/tex">f</script> is continuous, and <script type="math/tex">G(x)=\displaystyle\int^x_af(t)dt\ \ (a≤t≤x)</script>, then <script type="math/tex">G'(x)=f(x)</script>. </li>
<li><script type="math/tex">G(x)</script> solves the differential equation <script type="math/tex">y'=f</script> with condition <script type="math/tex">y(a)=0</script>. </li>
<li><script type="math/tex">G'(x)</script> is actually the derivative of the antiderivative of <script type="math/tex">f</script>, so it’s <script type="math/tex">f</script> itself. </li>
<li>It can be written as <script type="math/tex">\displaystyle\frac{d}{dx}\int^x_af(t)dt=f(x)</script> or <script type="math/tex">G(x)=\displaystyle\int^x_aG'(t)dt</script>. </li>
<li>The true geometric interpretation of definite integral is  plus the area above x-axis and minus the area below x-axis. </li>
<li>The total distance <script type="math/tex">=\displaystyle\int^b_a |f(x)|dx</script> while the net distance <script type="math/tex">=\displaystyle\int^b_af(x)dx</script>. </li>
</ol>
<h1 id="Properties-of-Integrals"><a href="#Properties-of-Integrals" class="headerlink" title="Properties of Integrals"></a>Properties of Integrals</h1><ol>
<li><script type="math/tex; mode=display">\displaystyle\int^b_a(f(x)+g(x))dx=\int^b_af(x)dx+\int^b_ag(x)dx</script></li>
<li><script type="math/tex; mode=display">\displaystyle\int^b_acf(x)dx=c\int^b_af(x)dx</script></li>
<li><script type="math/tex; mode=display">\displaystyle\int^b_af(x)dx+\int^c_bf(x)dx=\int^c_af(x)dx</script></li>
<li><script type="math/tex; mode=display">\displaystyle\int^a_af(x)dx=0</script></li>
<li><script type="math/tex; mode=display">\displaystyle\int^b_af(x)dx=-\int^a_bf(x)dx</script></li>
<li>Estimation: If <script type="math/tex">f(x)≤g(x)</script>, then <script type="math/tex">\displaystyle\int^b_af(x)dx≤\int^b_ag(x)dx</script>. </li>
<li>Change of variables (substitution): <script type="math/tex">\displaystyle\int^{u_2}_{u_1}g(u)du=\int^{x_2}_{x_1}g(u)u'(x)dx</script>. Here <script type="math/tex">u_1=u(x_1)</script> and <script type="math/tex">u_2=u(x_2)</script>. <br /><code>IMPORTANT</code>: <strong>This only works when <script type="math/tex">u'(x)</script> has the same sign in the whole interval. </strong></li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>单变量微积分 (MIT 18.01)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>10. Graphs, Networks, Incidence Matrices</title>
    <url>/2020/01/31/10-Graphs-Networks-Incidence-Matrices/</url>
    <content><![CDATA[<h1 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h1><ol>
<li><code>Graph</code> is a model consisting of <code>nodes</code> connected by <code>edges</code>. </li>
<li>A graph where every pair of nodes is connected by an edge is called <code>complete</code>. </li>
<li>A graph without closed loop is a <code>tree</code>. </li>
<li>The complete graph has a maximum number of edges <script type="math/tex">\displaystyle\frac{1}{2}n(n-1)</script>. <br />The tree has a minimum number of edges <script type="math/tex">n-1</script>. </li>
</ol>
<h1 id="Incidence-Matrix"><a href="#Incidence-Matrix" class="headerlink" title="Incidence Matrix"></a>Incidence Matrix</h1><ol>
<li><code>Incidence matrix</code> is a $m$ by $n$ matrix that tells how the <script type="math/tex">n</script> nodes are connected by the <script type="math/tex">m</script> edges. </li>
<li>Every entry of an incidence matrix is <script type="math/tex">0</script>, <script type="math/tex">1</script>, or <script type="math/tex">-1</script>. <script type="math/tex">0</script> represents that that node has nothing to do with that edge. If the $i$th edge starts from the $j_1$th node and ends at the $j_2$th node, $(i,j_1)=-1$ while $(i,j_2)=1$. </li>
<li>Elimination of the incidence matrix reduces every graph to a tree. </li>
<li>Loops produce dependent rows in the matrix and zero rows in the echelon form <script type="math/tex">U</script> and <script type="math/tex">R</script>. </li>
<li>When <script type="math/tex">\vec{x}</script> is the voltage at the nodes, <script type="math/tex">A\vec{x}</script> gives the differences along all edges. </li>
<li>The nullspace of <script type="math/tex">A</script> means all differences between the voltage of <script type="math/tex">A</script> are $0$. So The nullspace of <script type="math/tex">A</script> contains all vectors with all components equal. <script type="math/tex">dim(N(A))=1</script></li>
<li>The dimension of row space of <script type="math/tex">A</script> is the number of edges of a tree <script type="math/tex">n-1</script>. A vector <script type="math/tex">\vec{v}</script> is in the row space if and only if it is perpendicular to any vectors in the nullspace, i.e. the sum of all components equals to zero. </li>
<li>If we add differences around a closed loop in the graph, they cancel to leave zero. <br /><code>Kirchhoff&#39;s Voltage Law</code>: The components of <script type="math/tex">A\vec{x}=\vec{b}</script> add to zero around every loop. For example, for every triangle, <script type="math/tex">b_1+b_2-b_3=0</script><br />We can use this law to test if a vector is in the column space. </li>
<li><code>Kirchhoff&#39;s Current Law</code>: <script type="math/tex">A^T\vec{y}=\vec{0}</script>, flow in equals flow out at each node. <br />Now each component in <script type="math/tex">\vec{y}</script> means the flow in each edge. <br />Every equation in <script type="math/tex">A^T\vec{y}</script> stands for the sum of in (<script type="math/tex">1</script>) and out (<script type="math/tex">-1</script>) of each node in the flow net, i.e. the value of each nodes gain (positive) or loss (negative). <br />The easiest way to satisfy this law is to flow around a loop. Each loop is a special solution to <script type="math/tex">A^T\vec{y}=\vec{0}</script> (backward edge is <script type="math/tex">-1</script>). <br />So <script type="math/tex">dim(N(A^T))=m-r=m-n+1</script> is the number of small independent loops in the graph. </li>
<li><code>Euler&#39;s formula</code>: <code>(number of nodes) - (number of edges) + (number of small loops) = n - m + (m-n+1) = 1​</code></li>
</ol>
<h1 id="With-Sources"><a href="#With-Sources" class="headerlink" title="With Sources"></a>With Sources</h1><ol>
<li>As is known, when the resistances on the edges are all <script type="math/tex">1</script>, the <code>Ohm&#39;s Law</code> gives <script type="math/tex">\vec{y}=-A\vec{x}</script>. Substituting this to the Current Law, we get <script type="math/tex">A^T\vec{y}=-A^TA\vec{y}=\vec{0}</script>. </li>
<li><script type="math/tex">A^TA</script> is called the <code>Laplacian matrix</code>. </li>
<li>Without any sources, the solution will be no flow: <script type="math/tex">\vec{x}=\vec{0}</script>, <script type="math/tex">\vec{y}=\vec{0}</script>. </li>
<li>With sources, we need to solve the <script type="math/tex">-A^TA\vec{x}=\vec{f}</script>. Each component of <script type="math/tex">\vec{f}</script> is the source of nodes. </li>
<li>The Laplacian matrix is not invertible. It shares the same nullspace with <script type="math/tex">A</script>. So one node has to be grounded by setting it to <script type="math/tex">0</script>. </li>
</ol>
<h1 id="With-Resistances"><a href="#With-Resistances" class="headerlink" title="With Resistances"></a>With Resistances</h1><ol>
<li>If the resistances on the edges are not all <script type="math/tex">1</script>, the Ohm’s Law will be <script type="math/tex">R\vec{y}=-A\vec{x}</script>. The <code>conductances</code> are <script type="math/tex">C=R^{-1}</script>. So <script type="math/tex">\vec{y}=-CA\vec{x}</script>. </li>
<li><script type="math/tex">C</script> is the <code>conductances matrix</code>. It is a diagonal matrix with conductances in its diagonal. </li>
<li>For every conductance, <script type="math/tex">c=\displaystyle\frac{1}{resistance}</script>. </li>
<li><code>Ohm&#39;s Law</code>: <code>Current along with edge = conductance ✕ voltage difference​</code>. </li>
<li>Combining Ohm’s Law with Kirchhoff’s Current Law, we get <script type="math/tex">A^TCA\vec{x}=\vec{0}</script>. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>线性代数 (MIT 18.06)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>08. Iterated Expectation and Sum of a Random Number of Random Variables</title>
    <url>/2020/03/16/08-Iterated-Expectation-and-Sum-of-a-Random-Number-of-Random-Variables/</url>
    <content><![CDATA[<h1 id="Iterated-Expectation"><a href="#Iterated-Expectation" class="headerlink" title="Iterated Expectation"></a>Iterated Expectation</h1><ol>
<li>$E[X|Y]$ is a random variable that takes the value $E[X|Y=y]$ when $Y$ takes the value $y$. <br />Since $E[X|Y=y]$ is a function of $y$, $E[X|Y]$ is a function of $Y$. </li>
<li>The distribution of $E[X|Y]$ is determined by the distribution of $Y$ by changing $y$ in $E[X|Y=y]$ into $Y$. </li>
<li>Iterated Expectation: Because $E[X|Y]$ is a random variable, naturally it has its own expectation <br /><script type="math/tex">E[E[X|Y]]=\left\{\begin{array}{}\displaystyle\sum_yE[X|Y=y]p_Y(y)&Y\ is\ discrete\\\int^\infty_{-\infty}E[E[X|Y=y]]f_Y(y)dy&Y\ is\ continuous \end{array}\right.=E[X]</script></li>
<li>For any function $g$, given the value of $Y$, $g(Y)$ is a constant. So $E[Xg(Y)|Y]=g(Y)E[X|Y]$. </li>
<li>We denote $\hat{X}=E[X|Y]$ as an estimator of $X$ given $Y$. </li>
<li>The estimation error $\tilde{X}=\hat{X}-X$ satisfying $E[\tilde{X}|Y]=E[\hat{X}-X|Y]=E[\hat{X}|Y]-E[X|Y]=\hat{X}-\hat{X}=0$</li>
<li>The random variable $E[\tilde{X}|Y]$ is identically zero: $E[\tilde{X}|Y=y]=0$ for all values of $y$. <br />The law of iterated expectation also tells us $E[\tilde{X}]=E[E[\tilde{X}|Y]]=0$. <br />It indicates that the estimation error doesn’t have a systematic upward or downward bias. </li>
<li>$E[\hat{X}\tilde{X}]=E[E[\hat{X}\tilde{X}|Y]]$. Since $\hat{X}$ is complete determined by $Y$, $E[E[\hat{X}\tilde{X}|Y]]=E[\hat{X}E[\tilde{X}|Y]]=E[\hat{X}0]=0$<br />It follows that $cov(\hat{X},\tilde{X})=E[\hat{X}\tilde{X}]-E[\hat{X}]E[\tilde{X}]=0-E[X]\cdot0=0$<br />So $\hat{X}$ and $\tilde{X}$ are uncorrelated. <br />So $var(X)=var(\tilde{X})+var(\hat{X})$. </li>
<li>The conditional variance: $var(X|Y)=E[(X-E{X|Y})^2|Y]=E[\tilde{X}^2|Y]$</li>
<li>This is the function of $Y$ whose value is the conditional variance of $X$ when $Y$ takes the value $y$. </li>
<li>Using $E[\tilde{X}]=0$, $var(\tilde{X})=E[\tilde{X}^2]=E[E[\tilde{X}^2|Y]]=E[var(X|Y)]$. <br />Since $var(X)=var(\tilde{X})+var{\hat{X}}$, we have the law of total variance: $var(X)=E[var(X|Y)]+var(E[X|Y])$</li>
</ol>
<h1 id="Transforms"><a href="#Transforms" class="headerlink" title="Transforms"></a>Transforms</h1><ol>
<li>The transform associated with a random variable $X$ is a function $M_X(s)$ of a scalar parameter $s$, defined by $M_X(s)=E[e^{sX}]$. </li>
<li>If $X$ is a discrete random variable, the transform can be written as $M(s)=\displaystyle\sum_xe^{sx}p_X(x)$. <br />If $X$ is a continuous random variable, $M(s)=\displaystyle\int^\infty_{-\infty}e^{sx}f_X(x)dx$. </li>
<li>If $Y=aX+b$, $M_Y(s)=E[e^{s(aX+b)}]=E[e^{saX}e^{sb}]=e^{sb}E[e^{saX}]=e^{sb}M_X(sa)$. </li>
<li>$\displaystyle\frac{d}{ds}M(s)=\int^\infty_{-\infty}xe^{sx}f_X(x)dx$ and $\displaystyle\left.\frac{d}{ds}M(s)\right|_{s=0}=\int^{\infty}_{-\infty}xf_X(x)dx=E[X]$<br />$\displaystyle\frac{d^n}{ds^n}M(s)=\int^{\infty}_{-\infty}x^ne^{sx}f_X(x)dx$ and $\displaystyle\left.\frac{d^n}{ds^n}M(s)\right|_{s=0}=\int^\infty_{-\infty}x^nf_X(x)dx=E[X^n]$</li>
<li>$M_X(0)=E[e^{0X}]=E[1]=1$</li>
<li>If $X$ takes only nonnegative integer values, then $\displaystyle\lim_{s\to-\infty}M_X(s)=P(X=0)$</li>
<li>If $Z=X+Y$ $M_Z(s)=E[e^{sZ}]=E[e^{s(X+Y)}]=E[e^{sX+sY}]=E[e^{sX}e^{sY}]$. If $X$ and $Y$ are independent, $M_Z(s)=E[e^{sX}]E[e^{sY}]=M_X(s)M_Y(s)$. </li>
<li>In discrete random variables: <br />&emsp;For $Bernoulli(p)$, $M_X(s)=1-p+pe^s$<br />&emsp;For $Binomial(n,p)$, $M_X(s)=(1-p+pe^s)^n$<br />&emsp;For $Geometric(p)$, $M_X(s)=\displaystyle\frac{pe^s}{1-(1-p)e^s}$<br />&emsp;For $Poisson(\lambda)$, $M_X(s)=e^{\lambda(e^s-1)}$<br />&emsp;For $Uniform(a,b)$, $M_X(s)=\displaystyle\frac{e^{sa}(e^{s(b-a+1)}-1)}{(b-a+1)(e^s-1)}$</li>
<li>In continuous random variables: <br />&emsp;For $Uniform(a,b)$, $M_X(s)=\displaystyle\frac{e^{sb}-e^{sa}}{s(b-a)}$<br />&emsp;For $Exponential(\lambda)$, $M_X(s)=\displaystyle\frac{\lambda}{\lambda-s}(s&lt;\lambda)$<br />&emsp;For $Normal(\mu,\sigma^2)$, $M_X(s)=e^{\frac{\sigma^2s^2}{2}+\mu s}$</li>
<li>$M_{X_1,…,X_n}(s_1,…,s_n)=E[e^{s_1X_1+…+s_nX_n}]$</li>
</ol>
<h1 id="Sum-of-a-Random-Number-of-Independent-Random-Variables"><a href="#Sum-of-a-Random-Number-of-Independent-Random-Variables" class="headerlink" title="Sum of a Random Number of Independent Random Variables"></a>Sum of a Random Number of Independent Random Variables</h1><ol>
<li>We consider the sum $Y=X_1+X_2+…+X_N$. <br />$N$ is a random variable that takes nonnegative integer values. <br />$X_1,X_2,…$ are identically independent distributed random variables. </li>
<li>If $N=0$, $Y=0$. </li>
<li>Fix a nonnegative integer $n$. <br />$E[Y|N=n]=E[X_1+X_2+…X_n]=nE[X]$. <br />So $E[Y|N]=NE[X]$. By the law of iterated expectation, $E[Y]=E[E[Y|N]]=E[NE[X]]=E[N]E[X]$</li>
<li>$\begin{equation}\begin{split}var(Y)&amp;=E[var(Y|N)]+var(E[Y|N])\\&amp;=E[Nvar(X)]+var(NE[X])\\&amp;=E[N]var(X)+(E[X])^2var(N)\end{split}\end{equation}$</li>
<li>$E[e^{sY}|N=n]=E[e^{sX_1}…e^{sX_n}]=E[e^{sX_1}]…E[e^{sX_n}]=(M_X(s))^n$. <br />$M_Y(s)=E[e^{sY}]=E[E[e^{sY}|N]]=E[(M_X(s))^N]=\displaystyle\sum^\infty_{n=0}(M_X(s))^np_N(n)=\sum^\infty_{n=0}e^{nlog M_X(s)}p_N(n)$<br />Compare with $M_N(s)=\displaystyle\sum^\infty_{n=0}e^{sn}p_N(n)$, $M_Y(s)=M_N(log M_X(s))$. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>概率论 (MIT 6.041)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>09. View Controller Life Cycle and Scroll View</title>
    <url>/2019/08/15/09-View-Controller-Life-Cycle-and-Scroll-View/</url>
    <content><![CDATA[<h1 id="View-Controller-Life-Cycle"><a href="#View-Controller-Life-Cycle" class="headerlink" title="View Controller Life Cycle"></a>View Controller Life Cycle</h1><h2 id="The-Start-of-View-Controller"><a href="#The-Start-of-View-Controller" class="headerlink" title="The Start of View Controller"></a>The Start of View Controller</h2><ol>
<li>Creation. </li>
<li>MVCs are most often instantiated out of a storyboard. </li>
<li>There are ways to do it in code (rare), such as segue. </li>
</ol>
<h2 id="After-Start-What-Can-We-Do"><a href="#After-Start-What-Can-We-Do" class="headerlink" title="After Start, What Can We Do"></a>After Start, What Can We Do</h2><h3 id="Preparation-If-Being-Segued-to-and-Outlet-Setting"><a href="#Preparation-If-Being-Segued-to-and-Outlet-Setting" class="headerlink" title="Preparation If Being Segued to and Outlet Setting"></a>Preparation If Being Segued to and Outlet Setting</h3><ol>
<li>To do so, we override <code>viewDidLoad</code>. </li>
<li>When this is called, all of outlets have been connected but the view is not on-screen yet, and the bounds is not set either. So in this method we cannot do anything invovled with geometry. <a id="more"></a></li>
<li>It will and only will be called at the beginning, so this is a great place to do all the one-time initialization. </li>
<li>Here we usually do the primary setup of MVC, update my View using my Model. </li>
</ol>
<h3 id="Appearing-and-Disappearing"><a href="#Appearing-and-Disappearing" class="headerlink" title="Appearing and Disappearing"></a>Appearing and Disappearing</h3><h4 id="Will-Appear"><a href="#Will-Appear" class="headerlink" title="Will Appear"></a>Will Appear</h4><ol>
<li>This method will be sent just before your MVC appears (or re-appears) on screen. </li>
<li>This method can be called repeatedly</li>
<li>It can catch my View up to date with what went on while it was off-screen. </li>
</ol>
<h4 id="Did-Appear"><a href="#Did-Appear" class="headerlink" title="Did Appear"></a>Did Appear</h4><ol>
<li>This method will be called after MVC appeared on screen, so here will not update view from model, because it’s too late. </li>
<li>Here maybe start a timer or an animation or start observing something like GPS or camera. </li>
<li>This is a good place to start something expensive(for time or battery) like network fetch. Because we know we’re on screen so it won’t be a waste.</li>
<li>We must never block our UI from user interaction (thus background fetching, etc.). Our UI might need to come up incomplete and later fill in when expensive operation is done. We use “spinning wheels” and such to let the user know we’re fetching something expensive.</li>
</ol>
<h4 id="Will-Disappear"><a href="#Will-Disappear" class="headerlink" title="Will Disappear"></a>Will Disappear</h4><ol>
<li>This method is called when MVC is still on screen, but it’s about to go off screen.</li>
<li>This may happen when the user hit “back” in a UINavigationController or they switched to another tab in a UITabBarController. </li>
<li>Here often undo what you did in viewDidAppear, for example, stop a timer that you started there or stop observing something. </li>
</ol>
<h4 id="Did-Disappear"><a href="#Did-Disappear" class="headerlink" title="Did Disappear"></a>Did Disappear</h4><ol>
<li>This method is called when MVC went off screen. </li>
<li>Somewhat rare to do something here, but occasionally you might want to “clean up” your MVC. For example, you could save some state or release some large, recreatable resource. </li>
</ol>
<h3 id="Geometry-Changes"><a href="#Geometry-Changes" class="headerlink" title="Geometry Changes."></a>Geometry Changes.</h3><h4 id="Geometry-Related-Setup"><a href="#Geometry-Related-Setup" class="headerlink" title="Geometry-Related Setup"></a>Geometry-Related Setup</h4><ol>
<li>We do it in two methods: <code>viewWillLayoutSubviews</code> and <code>viewDidLayoutSubviews</code></li>
<li>Usually we don’t need to do anything here because of Autolayout. </li>
<li>But if you do have geometry-related setup to do, this is the place to do it (not in viewDidLoad!).</li>
<li>These can be called often (just as layoutSubviews() in UIView can be called often). So don’t do anything here that can’t be properly (and efficiently) done repeatedly.</li>
<li>It doesn’t always mean your view’s bounds actually changed.</li>
</ol>
<h4 id="Autorotation"><a href="#Autorotation" class="headerlink" title="Autorotation"></a>Autorotation</h4><ol>
<li>When device rotates, view’s bounds change (and thus you’ll get viewWill/DidLayoutSubviews), and the resultant changes are also automatically animated.</li>
<li>You get to find out about that and even participate in the animation in <code>viewWillTransition</code></li>
</ol>
<h3 id="Low-memory-Situations"><a href="#Low-memory-Situations" class="headerlink" title="Low-memory Situations"></a>Low-memory Situations</h3><ol>
<li>It is rare, but occasionally your device will run low on memory.</li>
<li>This usually means a buildup of very large videos, images or maybe sounds.</li>
<li>When a low-memory situation occurs, iOS will call <code>didReceiveMemoryWarning</code> in your Controller. </li>
<li>It will stop pointing to any large-memory things (let them go from my heap) that I am not currently using (e.g. displaying on screen or processing somehow) and that I can recreate as needed (by refetching from network, for example)</li>
<li>If your application persists in using an unfair amount of memory, you can get killed by iOS.</li>
</ol>
<h3 id="Waking-up-from-an-storyboard"><a href="#Waking-up-from-an-storyboard" class="headerlink" title="Waking up from an storyboard"></a>Waking up from an storyboard</h3><ol>
<li><code>awakeFromNib</code> is sent to all objects that come out of a storyboard (including your Controller) . </li>
<li>It can initialize stuff here, but it’s VERY early, before almost all things.  It happens way before outlets are set and before you’re prepared as part of a segue</li>
<li>It’s primarily for situations where code has to be executed VERY EARLY in the lifecycle.</li>
</ol>
<h1 id="UIScrollView"><a href="#UIScrollView" class="headerlink" title="UIScrollView"></a>UIScrollView</h1><h2 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h2><ol>
<li>The size of the whole UIScrollView is content, we can set it at any time. </li>
<li>All other view appeared in scroll view is the subview of scroll view. </li>
<li>It also has a property called <code>contentOffset</code> type of <code>CGPoint</code> that tells the coordinate of origin current visible area in the coordinate system of content. </li>
<li>It is importan to understand that the <code>bounds</code> of an instance of UIScrollView is not the content. That bounds if only the current visible part. </li>
<li>To acquire the current visible area in the subview, we need to use a function of UIView called conver: <code>viewInstance1.convert(aCGRect, from: viewInstance2)</code>. This method will return a CGRect converted from aCGRect in viewInstance2’s coordinate system to the viewInstance1’s coordinate system. viewInstance2 can be nil, then It will convert from the window. So we only need to get the <code>subview.convert(scrollView.bounds, from: scrollView)</code></li>
<li>You can use <code>func scrollRectToVisible(CGRect, animated: Bool)</code> to scroll to show a rectangle into screen. </li>
<li><code>flashScrollIndicators</code> controls the flash scroll indicator. If we don’t want it, just set it false. </li>
</ol>
<h2 id="Create-a-UIScrollView"><a href="#Create-a-UIScrollView" class="headerlink" title="Create a UIScrollView"></a>Create a UIScrollView</h2><h2 id="Set-the-content"><a href="#Set-the-content" class="headerlink" title="Set the content"></a>Set the content</h2><ol>
<li>Drag out in a storyboard or use UIScrollView(frame:). Or select a UIView in your storyboard and choose “Embed In -&gt; Scroll View” from Editor menu. If go with the second way, remember to tight the ImageView with the ScrollView and set size inspect -&gt; Intrinsic Size to Placeholder which will hold a place until we set it in the code. </li>
<li>To edit its content, we need to add some views as its subview. For example, we create a UIImage then create a UIImageView with that UIImage. After that, we can add the UIImageView as the UIScrollView’s subview. </li>
<li>The contentSize if (0, 0) by default, so remember to set the contentSize</li>
</ol>
<h2 id="Set-Zooming"><a href="#Set-Zooming" class="headerlink" title="Set Zooming"></a>Set Zooming</h2><ol>
<li>Zooming is going to affect the scroll view’s affine transform, contentSize and contentOffset. The unit of coordinate system will not change. </li>
<li>First we need to set the range of zooming by setting <code>minimumZoomScale</code> and <code>maximumZoomScale</code></li>
<li>Then we need to delegate method to specify view to zoom. To do so, we need to make the class a <code>UIScrollViewDelegate</code> and set <code>scrollView.delegate = self</code></li>
<li>The last thing to do is implement function <code>viewForZooming(in scrollView: UIScrollView) -&gt; UIView</code>. If your scroll view only has one subview, you return it here. If more than one it’s up to you. </li>
<li>Some zooming propertyies and methods<br> <code>var zoomScale: CGFloat</code><br> <code>func setZoomScale(CGFloat, animated: Bool)</code><br> <code>func zoom(to rect: CGRect, animated: Bool)</code> It can zoom to make that rectangle fit the screen(at least width or height is the same as the window). </li>
<li>When zoom in, we can let the image stays centered. First, we need to center the scroll view. Second, we set its constrains with the left, right, up and down be <code>greater or equals</code>. Third, we fix the scroll view’s size and set the size constrains’ priority low. Then, we create outlet of the height and width constrains. Finally, any time we zoom, we set the value of those two variables to the content size.  </li>
</ol>
<h1 id="UIImage"><a href="#UIImage" class="headerlink" title="UIImage"></a>UIImage</h1><ol>
<li>To get an image, we need an “address” type of URL. </li>
<li>Then, we can fetch the image with Data like <code>Data(contentsOf: URL)</code>. This initializer throws errors so we need try-catch or try?</li>
<li>With the Data, we can create a UIImage with syntax <code>UIImage(data: Data)</code></li>
<li>URL is a type, not a String. We can create URL to fetch local pictures with syntax like <code>Bundle.main.url(forResource: String?, withExtension: String?)</code> the first parameter is file name, the second one is the extension. Use this way, we need to drag the picture into the project file. </li>
<li>However, we can also get a URL from String <code>URL(string: String)</code></li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>Swift开发 (Stanford CS193p)</category>
      </categories>
      <tags>
        <tag>应用开发</tag>
        <tag>Swift</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>10. Triple Integrals</title>
    <url>/2020/03/01/10-Triple-Integrals/</url>
    <content><![CDATA[<h1 id="Rectangular-Coordinates"><a href="#Rectangular-Coordinates" class="headerlink" title="Rectangular Coordinates"></a>Rectangular Coordinates</h1><ol>
<li><script type="math/tex">\displaystyle\iiint_RfdV</script>. <script type="math/tex">dV</script> is called volume element and <script type="math/tex">dV=dx\ dy\ dz</script>. </li>
<li>Volume of <script type="math/tex">R</script> is <script type="math/tex">volume(R)=\displaystyle\iiint_R1dV</script>. </li>
<li>Just like in double integral, we solve this one by one. Every time, we solve one integral. </li>
<li>The bounds of one integral contains variables of outer integrals. </li>
<li>After calculate the inner integral, the triple integral becomes a double integral. </li>
<li><script type="math/tex">\Delta V=\Delta A\cdot\Delta z</script>. So <script type="math/tex">dV=dA\cdot dz</script>. </li>
</ol>
<h1 id="Cylindrical-Coordinates"><a href="#Cylindrical-Coordinates" class="headerlink" title="Cylindrical Coordinates"></a>Cylindrical Coordinates</h1><ol>
<li>Cylindrical coordinates are just polar coordinates with an extra z-axis. </li>
<li><script type="math/tex">dx\ dy\ dz=dz\ rdr\ d\theta</script>. </li>
<li>In cylinderical coordinates, <script type="math/tex">r</script> stands for the distance to z-axis not origin. So <script type="math/tex">r=a</script> is a cylinder. </li>
<li>The convension in writing a point in cylinderical coordinates form is <script type="math/tex">(r,\theta,z)</script>. </li>
</ol>
<h1 id="Spherical-Coordinates"><a href="#Spherical-Coordinates" class="headerlink" title="Spherical Coordinates"></a>Spherical Coordinates</h1><ol>
<li>Each point is represented by <br />&emsp;a distance <script type="math/tex">\rho</script> <br />&emsp;and two angles <script type="math/tex">\theta</script> (counterclockwise from x-axis) and <script type="math/tex">\phi</script>(downwards form z-axis), <br />&emsp;namely <script type="math/tex">(\rho,\theta,\phi)</script>. </li>
<li><script type="math/tex; mode=display">r=\rho sin\ \phi$$<br />$$\left\{\begin{array}{}z=\rho cos\ \phi\\x=rcos\ \theta=\rho sin\ \phi\ cos\ \theta\\y=rsin\ \theta=\rho sin\ \phi\ sin\ \theta \end{array}\right.</script></li>
<li><script type="math/tex; mode=display">\Delta V\approx \Delta\rho\cdot\Delta s=\rho^2sin\ \phi\Delta\rho\Delta\phi\Delta\theta$$. So $$dV=\rho^2sin\ \phi\ d\rho\ d\phi\ d\theta</script></li>
</ol>
<h1 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h1><ol>
<li>Mass: <script type="math/tex">\Delta m=\delta\cdot\Delta V</script>. <script type="math/tex">Mass=\displaystyle\iiint_R\delta\ dV</script>. </li>
<li>Average value of <script type="math/tex">f(x,y,z)</script> in <script type="math/tex">R</script>: <script type="math/tex">\overline{f}=\displaystyle\frac{1}{volume(R)}\iiint_Rf\ dV</script></li>
<li>Weighted average: <script type="math/tex">\overline{f}=\displaystyle\frac{1}{Mass(R)}\iiint_Rf\delta\ dV</script></li>
<li>Center of mass: <script type="math/tex">(\overline{x}, \overline{y},\overline{z})</script>, <script type="math/tex">\overline{x}=\displaystyle\frac{1}{Mass}x\delta\ dV</script>, <script type="math/tex">\overline{y}</script> and <script type="math/tex">\overline{z}</script> are similar. </li>
<li>Moment of inertia: <script type="math/tex">I=\displaystyle\iiint_Rr^2\delta\ dV</script>. <script type="math/tex">r</script> is the distance to axis. There are three axises, so There are three moment of inertia. </li>
<li>Graviation attraction: <script type="math/tex">|\vec{F}|=\displaystyle\frac{G\cdot\Delta M\cdot m}{\rho^2}</script> and <script type="math/tex">dir\ \vec{F}=\displaystyle\frac{<x,y,z>}{\rho}</script><br />So <script type="math/tex">\vec{F}=\displaystyle\iiint\frac{Gm<x,y,z>}{\rho^3}\delta\ dV</script>. <br />Use spherical coordinates, place solid so z-axis is an axis of symmetry. <br />Then <script type="math/tex">\vec{F}=<0,0,z></script>. <br /><script type="math/tex">\begin{equation}\begin{split}z&=Gm\displaystyle\iiint\frac{z}{\rho^3}\delta\ dV\\&=\iiint\frac{z}{\rho^3}\delta\rho^2sin\ \phi\ d\rho\ d\phi\ d\theta\\&=\iiint\delta cos\ \phi sin\ \phi\ d\rho\ d\phi\ d\theta\end{split}\end{equation}</script>. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>多变量微积分 (MIT 18.02)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>10. Multithreading and Autolayout</title>
    <url>/2019/08/17/10-Multithreading-and-Autolayout/</url>
    <content><![CDATA[<h1 id="Multithreading"><a href="#Multithreading" class="headerlink" title="Multithreading"></a>Multithreading</h1><h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><ol>
<li>Multithreading is mostly about “queues”. </li>
<li>Functions (usually closures, code to be run) are simply lined up in a queue. </li>
<li>Then those functions are pulled off the queue and executed on an associated thread(s). </li>
<li><p>There are two kinds of queues in Multithreading:<br>Serial Queue: It has only one thread and excute one closure a time.<br>Concurrent Queue: It has multiple threads and can execute several closures a time</p>
<a id="more"></a>
<h2 id="Main-Queue"><a href="#Main-Queue" class="headerlink" title="Main Queue"></a>Main Queue</h2></li>
<li><p>It is a very special serial queue. </p>
</li>
<li>All UI activity MUST occur on this queue and this queue only. And, conversely, non-UI activity that is at all time consuming must NOT occur on that queue. </li>
<li>We do this because we want our UI to be highly responsive! And also because we want things that happen in the UI to happen predictably (serially). Functions are pulled off and worked on in the main queue only when it is “quiet”. </li>
<li>Only one kind of main queue are there for us to use. And we can use by <code>DispatchQueue.main</code></li>
</ol>
<h2 id="Global-Queue"><a href="#Global-Queue" class="headerlink" title="Global Queue"></a>Global Queue</h2><ol>
<li>For non-main-queue work, you’re usually going to use a shared, global, concurrent queue.</li>
<li>There are four kinds of queues we can use.<br><code>DispatchQoS.userInteractive</code>: It has high priority, only do something short and quick. However, we don’t use it usually because the closure it can excute is really short and quick that won’t affect UI at all. So we usually put closure that could put into this queue  into the main queue.<br><code>DispatchQoS.userInitiated</code>: It also has high priority, but might take a little bit of time.<br><code>DispatchQoS.background</code>: It’s not directly initiated by user, so can run as slow as needed.<br><code>DispatchQoS.utility</code>: It’s basically long-running background processes, low priority. </li>
<li>We can get global queue with syntax: <code>DispatchQueue.global(qos: DispatchQoS)</code>. </li>
</ol>
<h2 id="Sync"><a href="#Sync" class="headerlink" title="Sync"></a>Sync</h2><ol>
<li>We can push something into the queue with two kinds of syncs: <code>async</code> and <code>sync</code></li>
<li>We can use them just with <code>queue.sync/aync()</code> and put the closure in it. </li>
<li>The difference between them is that after pushed the closure into the queue, async returns and excute the following codes immediately while sync will wait until that closure is excuted then return. </li>
<li>Don’t forget that if you want to do UI stuff there, you must dispatch back to the main queue! So we need to nest a sync of main queue inside the sync of the global queue. </li>
<li>As for the order of codes to be excused, if and only if the sync is a main queue sync and at that time main queue don’t have much to do, then the codes inside the sync will be excuted before the codes after the sync, or otherwise. </li>
<li>The main purpose of using multithreading is that not to block user from UI, so that user will still be able to do something. So when passing closures to async/sync, it is highly recommend that we capture self as a weak in case that user turned of the view while waiting for the closure to be excuted and opened another view. </li>
</ol>
<h2 id="Spinning-Cycle"><a href="#Spinning-Cycle" class="headerlink" title="Spinning Cycle"></a>Spinning Cycle</h2><ol>
<li>Only to improve user’s experience, while waiting for the globle view excute the closure, we should present a spinning cycle on the screen. </li>
<li>We can drag <code>Activity Indicator View</code> from the library. We can control it in the Attributes Inspector. </li>
<li>But, if we have some complicate requirement, we best create an outlet of it. And use <code>startAnimating()</code> to make it spin and <code>stopAnimating()</code> to make it stop. </li>
<li>We had better hide it when the closure is finished and unhide it when we wait. </li>
</ol>
<h1 id="Autolayout"><a href="#Autolayout" class="headerlink" title="Autolayout"></a>Autolayout</h1><h2 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h2><ol>
<li>The document in Autolayout can be open by clicking the little button in the left buttom of Interfacebuilder. </li>
<li>When it’s opened, it will show between the Navigation and the ViewControllers. </li>
<li>Inside is everyting abount the ViewControllers, which is subview of which, constrains and so on. </li>
<li>We can modify the relationship between two views by only draging in document, all views nested in another view is that view’s subview, drag out, not any more. </li>
<li>We can also select some constrains or views in document that we can’t do with symple select, such as when two views overlapped together. </li>
<li>Remember that the constrain is the one under that view closely on the same lever. The constrains nested inside one view is the constrain of its subview. </li>
<li>After select a constrain in the document, we can modify its properties in the Inspector. </li>
<li>We can even ctrl-drag from document to View Controller to create outlet or action</li>
</ol>
<h2 id="Compact-or-Regular"><a href="#Compact-or-Regular" class="headerlink" title="Compact or Regular"></a>Compact or Regular</h2><ol>
<li>For all iPhone in portrait are compact in width and regular in height. </li>
<li>All non-Plus iPhones in landscape are compact in both dimensions. </li>
<li>But in landscape, the iPhone Plus is compact in height regular in width. </li>
<li>For iPad, always regular in both dimensions. </li>
<li>But it’s also depending on the environment an MVC is in, it might be compact (e.g. split view master)</li>
<li>With all that, we don’t need to ask what model is this iPhone or iPad, we only care of which is compact and which is regular. </li>
</ol>
<h2 id="Size-Class"><a href="#Size-Class" class="headerlink" title="Size Class"></a>Size Class</h2><ol>
<li>With size class, we can vary many properties in different situation. Here situation means compact and regular. </li>
<li>In the Inspector of Interfacebuilder, every property with a leading “+” can vary according to size class. </li>
<li>In the Interfacebuilder, after we varied the properties, we can see another property showed with the same name but have a prefix. That prefix showed when will this property active. The first lowercase alpha means dimension, <code>h</code> for height, <code>w</code> for width. The second uppercase alpha means state, <code>C</code> for compact, <code>R</code> for regular. And <code>Any</code> shows nothing. </li>
<li>If we want to do something when user rotates the device, we can do it in the ViewController override function <code>traitCollectionDidChange</code></li>
</ol>
<h2 id="Constrains"><a href="#Constrains" class="headerlink" title="Constrains"></a>Constrains</h2><ol>
<li>We can create outlet for constrains in the storyboard. We can even modify them in code. </li>
<li>If necessary, we can remove a constrain from a View with <code>view.removeConstrain(NSLayoutConstrain)</code>. </li>
<li>We can also add some extra constrain with <code>view.addConstrain(NSLayoutConstrain)</code>. It’s all parameters are the parameter in the Attributes Inspector of a constrain. </li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>Swift开发 (Stanford CS193p)</category>
      </categories>
      <tags>
        <tag>应用开发</tag>
        <tag>Swift</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>10. Poisson Porcess</title>
    <url>/2020/03/16/10-Poisson-Porcess/</url>
    <content><![CDATA[<h1 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h1><ol>
<li>The Poisson process is a continuous-time analog of the Bernoulli process. </li>
<li><script type="math/tex">\lambda</script> is the rate of one Poisson process. Namely the rate of arrivals per unit time. </li>
<li>We define <script type="math/tex">P(k,\tau)=P(there\ are\ exactly\ k\ arrivals\ during\ an\ interval\ of\ length\ \tau)</script></li>
<li>This probability is the same for all intervals of the same length <script type="math/tex">\tau</script>. Namely, arrivals are equally likely at all times. </li>
<li>The number of arrivals during a particular interval is independent of the history of arrivals outside this interval. </li>
<li><script type="math/tex">P(0,\tau)=1-\lambda\tau+o(\tau)</script><br /><script type="math/tex">P(1,\tau)=\lambda\tau+o_1(\tau)</script><br /><script type="math/tex">P(k,\tau)=o_k(\tau)\ \ (k>1)</script>. <br /><script type="math/tex">\displaystyle\lim_{\tau\to0}\frac{o(\tau)}{\tau}=0</script>, <script type="math/tex">\displaystyle\lim_{\tau\to0}\frac{o_k(\tau)}{\tau}</script>. </li>
<li>The <script type="math/tex">o(\tau)</script> and <script type="math/tex">o_k(\tau)</script> are meant to be negligible in comparison to <script type="math/tex">\tau</script>, when the interaval length <script type="math/tex">\tau</script> is very small. </li>
</ol>
<h1 id="Number-of-Arrivals-in-an-Interval"><a href="#Number-of-Arrivals-in-an-Interval" class="headerlink" title="Number of Arrivals in an Interval"></a>Number of Arrivals in an Interval</h1><ol>
<li>First fix the time interval of length <script type="math/tex">\tau</script> and partition it into <script type="math/tex">\displaystyle\frac{\tau}{\delta}</script> periods of length <script type="math/tex">\delta</script>, where <script type="math/tex">\delta</script> is a very small number. </li>
<li>Because <script type="math/tex">P(k,\tau)=o_k(\tau)</script> when <script type="math/tex">k≥2</script>, the probability of more than two arrivals during any period can be neglected. </li>
<li>Each period has one arrival with probability approximately equal to <script type="math/tex">\lambda\delta</script> and is independent of each other. </li>
<li>Therefore, the process can be approximated by a Bernoulli process with parameter <script type="math/tex">\lambda\delta</script>. </li>
<li>Hence, the PMF is <script type="math/tex">P(k,\tau)=e^{-\lambda\tau}\displaystyle\frac{(\lambda\tau)^k}{k!}</script>, the expected number of arrivals is <script type="math/tex">E[N\tau]=np=\lambda\tau</script> and the variance is <script type="math/tex">var(N_\tau)=\lambda\tau</script>. <script type="math/tex">N_\tau</script> denotes the number of arrivals during a time interval of length <script type="math/tex">\tau</script>. </li>
<li>The probability law for the time <script type="math/tex">T</script> of the first arrival, assuming that the process starts at time zero: <br /><script type="math/tex">F_T(t)=P(T≤t)=1-P(T>t)=1-P(0,t)=1-e^{-\lambda t}</script>. </li>
<li>The PDF formula: <script type="math/tex">f_T(t)=\lambda e^{-\lambda t}</script> <script type="math/tex">(t≥0)</script>. </li>
<li>The probability of <script type="math/tex">k</script> arrivals during a set of times of total length <script type="math/tex">\tau</script> is always given by <script type="math/tex">P(k,\tau)</script>, even if that set is not an interval. </li>
</ol>
<h1 id="Independence-and-Memorylessness"><a href="#Independence-and-Memorylessness" class="headerlink" title="Independence and Memorylessness"></a>Independence and Memorylessness</h1><ol>
<li>For any given time <script type="math/tex">t>0</script>, the history of the process after time <script type="math/tex">t</script> is also a Poisson process, and is independent from the history of the process until <script type="math/tex">t</script>. </li>
<li>Let <script type="math/tex">t</script> be a given time and let <script type="math/tex">\overline{T}</script> be the time of the first arrival after time <script type="math/tex">t</script>. Then <script type="math/tex">\overline{T}-t</script> has an exponential distribution with parameter <script type="math/tex">\lambda</script>, and is independent of the history of the process until time <script type="math/tex">t</script>. </li>
</ol>
<h1 id="The-kth-Arrival-Time"><a href="#The-kth-Arrival-Time" class="headerlink" title="The kth Arrival Time"></a>The kth Arrival Time</h1><ol>
<li>The definition is the same as in the Bernoulli process. </li>
<li>$E[Y_k]=E[T_1]+…+E[T_k]=\displaystyle\frac{k}{\lambda}$</li>
<li>$var(Y_k)=var(T_1)+…+var(T_k)=\displaystyle\frac{k}{\lambda^2}$</li>
<li>The PDF of <script type="math/tex">Y_k</script> (Erlang PDF of order <script type="math/tex">k</script>) is <script type="math/tex">f_{Y_k}(y)=\displaystyle\frac{\lambda^ky^{k-1}e^{-\lambda y}}{(k-1)!}\ \ (y≥0)</script>. </li>
<li>For a small <script type="math/tex">\delta</script>, the product <script type="math/tex">\delta\cdot f_{Y_k}(y)</script> approximates the probability that the <script type="math/tex">k</script>th arrival occurs between times <script type="math/tex">y</script> and <script type="math/tex">y+\delta</script>. </li>
<li>When <script type="math/tex">\delta</script> is very small, the probability of more thant one arrival during the interval <script type="math/tex">[y,y+\delta]</script> is negligible. Thus the <script type="math/tex">k</script>th arrival occurs between <script type="math/tex">y</script> and <script type="math/tex">y+\delta</script> if and only if: <br />&emsp;There is an arrival during the interval <script type="math/tex">[y,y+\delta]</script><br />&emsp;There are exactly <script type="math/tex">k-1</script> arrivals before time <script type="math/tex">y</script>. <br /><script type="math/tex">\delta f_{Y_k}(y)\approx \lambda\delta \cdot P(k-1,y)=\lambda\delta\displaystyle\frac{\lambda^{k-1}y^{k-1}e^{-\lambda y}}{(k-1)!}</script><br />So <script type="math/tex">f_{Y_k}(y)=\displaystyle\frac{\lambda^ky^{k-1}e^{-\lambda y}}{(k-1)!}</script></li>
<li>CDF: <script type="math/tex">F_{Y_k}(y)=P(Y_k≤y)=\displaystyle\sum^\infty_{n=k}P(n,y)=1-\sum^{k-1}_{n=0}P(n,y)=1-\sum^{k-1}_{n=0}\frac{(\lambda y)^ne^{-\lambda y}}{n!}</script></li>
</ol>
<h1 id="Splitting-and-Merging"><a href="#Splitting-and-Merging" class="headerlink" title="Splitting and Merging"></a>Splitting and Merging</h1><ol>
<li>As in the Bernoulli process, start with one Poisson process with rate <script type="math/tex">\lambda</script> and split its arrivals at rate <script type="math/tex">q</script> into two independent new processes with new rates <script type="math/tex">\lambda q</script> and <script type="math/tex">\lambda(1-q)</script>. </li>
<li>Alternatively, start with two Poisson processes with rates <script type="math/tex">\lambda_1</script> and <script type="math/tex">\lambda_2</script> and merge them into one process with rate <script type="math/tex">\lambda_1+\lambda_2</script>. <br/><script type="math/tex">P(0\ arrivals\ in\ the\ merged\ process)\approx(1-\lambda_1\delta)(1-\lambda_2\delta)\approx1-(\lambda_1+\lambda_2)\delta</script><br /><script type="math/tex">P(1\ arrivals\ in\ the\ merged\ process)\approx\lambda_1\delta(1-\lambda_2\delta)+(1-\lambda_1\delta)\lambda_2\delta\approx(\lambda_1+\lambda_2)\delta</script></li>
<li>Any particular arrival of the merged process has probability <script type="math/tex">\displaystyle\frac{\lambda_1}{\lambda_1+\lambda_2}</script> of originating from the first process, and probability <script type="math/tex">\displaystyle\frac{\lambda_2}{\lambda_1+\lambda_2}</script> of originating from the second process. <br /><script type="math/tex">P(1\ arrival\ of\ first\ process|1\ arrival)=\displaystyle\frac{P(1\ arrival\ of\ first\ process)}{P(1\ arrival)}\approx\frac{\lambda_1\delta}{(\lambda_1+\lambda_2)\delta}=\frac{\lambda_1}{\lambda_1+\lambda+2}</script></li>
</ol>
<h1 id="Sums-of-Random-Variables"><a href="#Sums-of-Random-Variables" class="headerlink" title="Sums of Random Variables"></a>Sums of Random Variables</h1><ol>
<li>Let <script type="math/tex">N,X_1,X_2,…</script> be independent random variables. <script type="math/tex">N</script> takes nonnegative integer values. Let <script type="math/tex">Y=X_1+…+X_N</script>. <script type="math/tex">Y=0</script> when <script type="math/tex">N=0</script>. </li>
<li>If <script type="math/tex">X_i</script> is Bernoulli with parameter <script type="math/tex">p</script>, and <script type="math/tex">N</script> is binomial with parameters <script type="math/tex">m</script> and <script type="math/tex">q</script>, then <script type="math/tex">Y</script> is binomial with parameters <script type="math/tex">m</script> and <script type="math/tex">pq</script>. </li>
<li>If <script type="math/tex">X_i</script> is Bernoulli with parameter <script type="math/tex">p</script> and <script type="math/tex">N</script> is Poisson with parameter <script type="math/tex">\lambda</script>, then <script type="math/tex">Y</script> is Poisson with parameter <script type="math/tex">\lambda p</script>. </li>
<li>If <script type="math/tex">X_i</script> is geometric with parameter <script type="math/tex">p</script>, and <script type="math/tex">N</script> is geometric with parameter <script type="math/tex">q</script>, then <script type="math/tex">Y</script> is geometirc with parametric <script type="math/tex">pq</script>. </li>
<li>If <script type="math/tex">X_i</script> is exponential with parameter <script type="math/tex">\lambda</script>, and <script type="math/tex">N</script> is geometric with parameter <script type="math/tex">q</script>, then <script type="math/tex">Y</script> is exponential with parameter <script type="math/tex">\lambda q</script>. </li>
<li>If <script type="math/tex">N_t</script> denotes the number of arrivals of a Poisson process with parameter <script type="math/tex">\lambda</script> within an interval of length <script type="math/tex">t</script>, and <script type="math/tex">T</script> is an interval with length that is exponentially distributed with parameter <script type="math/tex">\upsilon</script> and is independent of the Poisson process, then <script type="math/tex">N_T+1</script> is geometrically distributed with parameter <script type="math/tex">\displaystyle\frac{\upsilon}{\lambda+\upsilon}</script>. </li>
<li>The sum of a large number of independent arrival processes (not necessarily Poisson) can be approximated by a Poisson process with arrival rate equal to the sum of the individual arrival rates. <br />The component processes must have a small rate relative to the total, so that none of them imposes its probabilistic character on the total arrival process. </li>
</ol>
<h1 id="Random-Incidence-Paradox"><a href="#Random-Incidence-Paradox" class="headerlink" title="Random Incidence Paradox"></a>Random Incidence Paradox</h1><ol>
<li><script type="math/tex">t^*</script> is a fixed time instance with at least one prior arrival. <script type="math/tex">L</script> is the inter arrival interval that contains <script type="math/tex">t^*</script>. </li>
<li>Let <script type="math/tex">L</script> be <script type="math/tex">[U,V]</script>. Split <script type="math/tex">L</script> into two parts <script type="math/tex">L=(t^*-U)+(V-t^*)</script>. </li>
<li><script type="math/tex">t^*-U</script> is determined by the past history of the process before <script type="math/tex">t^*</script> while <script type="math/tex">V-t^*</script> is determined by the future of the process after time <script type="math/tex">t^*</script>. </li>
<li>These two are independent and both are exponential with parameter <script type="math/tex">\lambda</script>. So <script type="math/tex">L</script> is the sum of two independent exponential random variables with parameter <script type="math/tex">\lambda</script>, i.e. Erlang of order two, with mean <script type="math/tex">\displaystyle\frac{2}{\lambda}</script>. </li>
<li>This is not right, the mean should be <script type="math/tex">\displaystyle\frac{1}{\lambda}</script>. The problem is that when we insert that time instance <script type="math/tex">t^*</script> into time line, it is more likely to fall into larger intervals rather than  smaller intervals. So the expectation of the interval is larger. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>概率论 (MIT 6.041)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>11&amp;12. Drag and Drop, Table View, and Collection View, and Text Field</title>
    <url>/2019/08/17/11&amp;12-Drag-and-Drop-Table-View-and-Collection-View/</url>
    <content><![CDATA[<h1 id="Drag-and-Drop"><a href="#Drag-and-Drop" class="headerlink" title="Drag and Drop"></a>Drag and Drop</h1><ol>
<li>Drag and drop can transit data within an app in both iPhone and iPad, and can even transit from one app to the other when iPad is in multitask mode. </li>
<li>Your app continues to work normally while drag and drop is going on. </li>
<li>Multitouch allows some fingers to be doing drag and drop and other fingers working your app. </li>
</ol>
<h2 id="Create-Drag"><a href="#Create-Drag" class="headerlink" title="Create Drag"></a>Create Drag</h2><ol>
<li>It’s kind of like a “gesture recognizer” for drag and drop.</li>
<li>We can make a view support drag and drop interaction by add an Interaction type of DragInteraction, the delegate is a subclass of <code>UIDragInteractionDelegate</code> that will handle the interaction, normally speaking it’s self.  <a id="more"></a></li>
<li>When the user makes a dragging gesture, the delegate gets this method. And can return the items it is willing to have dragged from the view. </li>
<li>It returns an array because with multitouch, it is possible that user drag mutiple items at a time. Returning an empty array means “don’t drag anything after all.”</li>
<li>As for UIDragItem, they are things like: <code>UIDragItem(itemProvider: NSItemProvider(object: provider))</code>. Because the data can be very expensive, we need a provider to keep UI from being blocked. So actually the data is still where it was until we perform the drop. </li>
<li>The provider can be <code>NSAttributedString</code>, <code>NSString</code>, <code>UIImage</code>, <code>NSURL</code>, <code>UIColor</code>, <code>MKMapItem</code>, <code>CNContact</code>. Mark that when using the <code>NS…</code> types, you may want to cast them into some swift type. </li>
<li>We can add items while dragging. If so, then the delegation gets this other function. <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// . 2</span></span><br><span class="line"><span class="keyword">let</span> dragInteraction = <span class="type">UIDragInteraction</span>(delegate: theDelegate)</span><br><span class="line">view.addInteraction(dragInteraction)</span><br><span class="line"></span><br><span class="line"><span class="comment">// . 3</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dragInteraction</span><span class="params">(<span class="number">_</span> interaction: UIDragInteraction,</span></span></span><br><span class="line"><span class="function"><span class="params">    itemsForBeginning session: UIDragSession</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span> -&gt; [<span class="type">UIDragItem</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// . 7</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dragInteraction</span><span class="params">(<span class="number">_</span> interaction: UIDragInteraction,</span></span></span><br><span class="line"><span class="function"><span class="params">    itemsForAddingTo session: UIDragSession</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span> -&gt; [<span class="type">UIDragItem</span>]</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Create-Drop"><a href="#Create-Drop" class="headerlink" title="Create Drop"></a>Create Drop</h2><ol>
<li>Just like drag, we also need to add an Interaction to the delegate. And that delegate is a subclass of <code>UIDropInteractionDelegate</code>. However, compare to drag operation, the delegate of drop action needs to implement some other methods. </li>
<li>First, we need to check if we can handle the drag item. we need to write a function to verify it. Inside the function, we can judge it using <code>session.canLoadObjects(ofClass: NSItemProviderReading.type)</code>. We just need to put a type and <code>.self</code> in it. </li>
<li>If we can handle the drag item, we can choose to the way we want with the drag items. It can be <code>copy</code>, <code>move</code> and <code>cancel</code>. The difference between copy and move is whether will keep the origin item. Action move could only be used in the within app drag and drop.<br>We can decide this by write the dropInteraction and return the way we want. </li>
<li>If that all goes well, then we can perform the drop. Inside that function, we will use <code>session.loadObjects(ofClass: , completion: )</code>. The first one just like aforementioned, pass a <code>type.self</code>. And the second one is a closure which requires take an array of objects as parameter and returns nothing. The passed closure will be executed some time later on the main thread. You can call multiple loadObjects(ofClass:) for different classes.<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// . 1</span></span><br><span class="line"><span class="keyword">let</span> dropInteraction = <span class="type">UIDropInteraction</span>(delegate: theDelegate)</span><br><span class="line">view.addInteraction(dropInteraction)</span><br><span class="line"></span><br><span class="line"><span class="comment">// . 2</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dropInteraction</span><span class="params">(<span class="number">_</span> interaction: UIDropInteraction, canHandle session: UIDragSession)</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> stringAvailable = session.canLoadObjects(ofClass: <span class="type">NSAttributedString</span>.<span class="keyword">self</span>)</span><br><span class="line">  <span class="keyword">let</span> imageAvailable = session.canLoadObjects(ofClass: <span class="type">UIImage</span>.<span class="keyword">self</span>)</span><br><span class="line">  <span class="keyword">return</span> stringAvailable &amp;&amp; imageAvailable</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// . 3</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dropInteraction</span><span class="params">(<span class="number">_</span> interaction: UIDropInteraction, sessionDidUpdate session: UIDragSession)</span></span> -&gt; <span class="type">UIDropProposal</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">UIDropProposal</span>(operation: .copy/.move/.cancel)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// . 4</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dropInteraction</span><span class="params">(<span class="number">_</span> interaction: UIDropInteraction, performDrop session: UIDropSession)</span></span></span><br><span class="line">&#123;</span><br><span class="line">  session.loadObjects(ofClass: <span class="type">NSAttributedString</span>.<span class="keyword">self</span>) &#123; theStrings <span class="keyword">in</span></span><br><span class="line">		<span class="comment">// do something with the dropped NSAttributedStrings </span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Something-Else"><a href="#Something-Else" class="headerlink" title="Something Else"></a>Something Else</h2><ol>
<li>We can set <code>session.localContext = collectionView</code> at drag method <code>itemsForBeginning</code> to mark the drag item’s context. </li>
<li>And in the drop method we can use <code>session.localDragSession?.localContext</code> to get the context of the drag item from. Remember that is type of <code>Any</code>,  cast it to the type of View we want. </li>
</ol>
<h1 id="UITableView-and-UICollectionView"><a href="#UITableView-and-UICollectionView" class="headerlink" title="UITableView and UICollectionView"></a>UITableView and UICollectionView</h1><h2 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h2><ol>
<li>UITableView(TV) and UICollectionView(CV) are UIScrollView subclasses used to display unbounded amounts of information. </li>
<li>TV presents the information in a long (possibly sectioned) list. Each item will take a whole row in it. </li>
<li>As for UICollectionView, each item only takes a grid and multiple grid formed a row. </li>
<li>Given that the number of informations in each TV and CV is not limited, there might have millions of informations. It’s unnecessible and inefficient to create a cell for each view. In iOS, it will reuse the cells. It only create the cells that is represented on screen and one cells out, the information in that cell is replaced by the new information. </li>
</ol>
<h3 id="UITableView"><a href="#UITableView" class="headerlink" title="UITableView"></a>UITableView</h3><ol>
<li>The list can be simple(first) and can be devided into sections(second).<br><img src="/img/11&12.DragandDropTableViewandCollectionViewandTextField01.png" width="35%">  <img src="/img/11&12.DragandDropTableViewandCollectionViewandTextField02.png" width="25%"></li>
<li>It can show simple ancillary information in <code>Subtitle style</code>(first), <code>Left Detail style</code>(second), <code>Right Detail style</code>(third), <code>Basic style</code>(above first) and arbitrarily complex information in <code>Custom style</code>(forth)<br><img src="/img/11&12.DragandDropTableViewandCollectionViewandTextField03.png" width="20%"> <img src="/img/11&12.DragandDropTableViewandCollectionViewandTextField04.png" width="25%"> <img src="/img/11&12.DragandDropTableViewandCollectionViewandTextField05.png" width="25%"> <img src="/img/11&12.DragandDropTableViewandCollectionViewandTextField06.png" width="25%"></li>
<li>The rows can be Grouped, but usually only when the information in the table is fixed.<br><img src="/img/11&12.DragandDropTableViewandCollectionViewandTextField07.png" width="20%"></li>
</ol>
<h3 id="UICollectionView"><a href="#UICollectionView" class="headerlink" title="UICollectionView"></a>UICollectionView</h3><ol>
<li>By default, it shows the information in grids and arranges in each lines. When one line is fulled, the next grid begi`ns from next line. This way is called flow, just like text flow.<br><img src="/img/11&12.DragandDropTableViewandCollectionViewandTextField08.png" width="25%"></li>
<li>Just as TV, CV can also divide into sections.<br><img src="/img/11&12.DragandDropTableViewandCollectionViewandTextField09.png" width="25%"></li>
<li>Collection Views don’t have rows. They are just happen to be at the same line. </li>
<li>We can set the scroll direction of collection view at Attributes Inspector. </li>
<li>It’s recommanded to make the View Controller conform <code>UICollectionViewDelegateFlowLayout</code>. </li>
</ol>
<h2 id="Create-UITableView-and-UICollectionView"><a href="#Create-UITableView-and-UICollectionView" class="headerlink" title="Create UITableView and UICollectionView"></a>Create UITableView and UICollectionView</h2><h3 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h3><ol>
<li>We can drag from library and set the associated class in Identifier Inspector. </li>
<li>There are two kinds of objects for us to use for each type, View and View Controller. </li>
<li>If choose the View, they are merely a subview of another View.</li>
<li>If choose the View Controller, they are the entire View and a whole new MVC. </li>
</ol>
<h3 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h3><h4 id="Get-Data"><a href="#Get-Data" class="headerlink" title="Get Data"></a>Get Data</h4><ol>
<li>In MVC, Views cannot store datas, in the TV/CV, we set variables called <code>dataSource</code> and <code>delegate</code>, type of <code>UITable/CollectionViewDataSource</code> and <code>UITable/CollectionViewDelegate</code> in the View.</li>
<li>The type of the dataSource var is a protocol with methods that supply the data. It knows how to ask datas from View Controller. </li>
<li>These are automatically set for you if you use the prepackaged MVCs. However, if you drag out a UITableView or UICollectionView, you must set these vars yourself. To set it, we just need to create an outlet of view and in the <code>didset</code> property observer set them to <code>self</code>. </li>
<li><p>In the View Controller, we need to override three methods to perform data retrieve.<br>The first one is <code>numberOfSections</code>, it returns the number of sections.<br>The second one is a <code>tableView/collectionView</code>, it returns the number of rows in a peticular section.<br>The third one is another <code>tableView/collectionView</code>, it returns a cell to present. </p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UITableView</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">numberOfSections</span><span class="params">(<span class="keyword">in</span> tableView: UITV)</span></span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tv: UITV, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tv: UITV, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// UICollectionView</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">numberOfSections</span><span class="params">(<span class="keyword">in</span> collectionView: UICV)</span></span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(<span class="number">_</span> cv: UICV, numberOfItemsInSection section: Int)</span></span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(<span class="number">_</span> cv: UICV, cellForItemAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UICollectionViewCell</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h4><h5 id="IndexPath"><a href="#IndexPath" class="headerlink" title="IndexPath"></a>IndexPath</h5><ol>
<li>IndexPath specifies which row (in TV) or item (in CV) we’re talking about.</li>
<li>In both, you get the section the row or item is in from <code>indexPath.section</code>.</li>
<li>In TV, you get which row from <code>indexPath.row</code>; in CV you get which item from <code>indexPath.item</code>. </li>
</ol>
<h5 id="Reuse-cells"><a href="#Reuse-cells" class="headerlink" title="Reuse cells"></a>Reuse cells</h5><ol>
<li>In order to reuse cells, in the third method we need to do some special operation. </li>
<li>Instead of create one cell as what we do to UILabel, UIView, we first try to take one out of the queue of presenting items. </li>
<li>Given that we can custom the cells, we want to get the proper cells to contain the new information so we need to provide the identifier as in the segue. </li>
<li>We also need to provide which cell we want to place the information. </li>
<li>And if there is no spare cells for us to use(i.e. no information is getting out of the screen), it will copy a cell from a prototype with the same style as the identifier. </li>
<li>The fact that cells are reused has serious implications for multithreading! By the time something returns from another thread, a cell might have been reused. <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UITableView</span></span><br><span class="line"><span class="keyword">let</span> cell = tv.dequeueReusableCell(withIdentifier: “<span class="type">MyCellId</span>”, <span class="keyword">for</span>: indexPath)</span><br><span class="line"></span><br><span class="line"><span class="comment">// UICollectionView</span></span><br><span class="line"><span class="keyword">let</span> cell = cv.dequeueReusableCell(withIdentifier: “<span class="type">MyCellId</span>”, <span class="keyword">for</span>: indexPath)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Styles"><a href="#Styles" class="headerlink" title="Styles"></a>Styles</h3><ol>
<li>When using the prepackaged style of UITableView, we can load up cells with things like <code>textLabel</code>, <code>detailTextLabel</code> and <code>imageView</code>. </li>
<li>However, when we use the custom style in UITableView or use the UICollectionView, we have to provide the API. </li>
<li>If we are using custom styles, we cannot use the cell we get above directly, we need to cast it into our own style class. </li>
</ol>
<h4 id="Custom-Styles"><a href="#Custom-Styles" class="headerlink" title="Custom Styles"></a>Custom Styles</h4><ol>
<li>We need to drag a cell out of library put it in our View -&gt; Prototype Cells. </li>
<li>We will create a class which is the subclass of <code>UITableViewCell</code> or <code>UICollectionViewCell</code></li>
<li>We have to change its style to custom, its identity class to our own class, and modify its identifier in Attributed Inspector. </li>
<li>We must drag some UILabels or whatever into that cell to create our own style and create outlets in our own class. </li>
<li>As <code>dequeueReusableCell</code> returns a regular UITable/CollectionViewCell, if we want to use our own custom style, we have to cast the cell we get from <code>dequeueReusableCell</code> to our own class. </li>
</ol>
<h4 id="Static-Table-View"><a href="#Static-Table-View" class="headerlink" title="Static Table View"></a>Static Table View</h4><ol>
<li>Sometimes we just use a table view to lay out UI elements.</li>
<li>In this case, you do not need to do any of the UITableViewDataSource stuff.</li>
<li>You can connect outlets directly to your Controller (because there’s only one of each cell). </li>
<li>To do this, just set your select the Table View in Document Outline and change UITableView to have Static Cells instead of Dynamic Prototypes in Attributes Inspector -&gt; Table View -&gt; Content. </li>
<li>Usually static table views are Style Grouped.</li>
<li>You can also add sections by selecting the View and modifying it at Attributed Inspector -&gt; Table View -&gt; Sections</li>
<li>Add row by seleting the View Section and changing it in Attributes Inspector. You can also modify header and footer there, by the way. </li>
</ol>
<h4 id="Set-Table-View-Deletable"><a href="#Set-Table-View-Deletable" class="headerlink" title="Set Table View Deletable"></a>Set Table View Deletable</h4><ol>
<li>There is a predefined method called <code>tableView(canEditRowAt indexPath)</code>. It’s down at the initial file commented. If we don’t want the view deletable, we should implement it and make it returns <code>false</code>. </li>
<li>There is another method also commented call <code>tableView(commit editingStyle)</code> where we implement what will happen when user deletes a row. </li>
<li>The second method can also handle the insert situation. </li>
</ol>
<h2 id="Segue"><a href="#Segue" class="headerlink" title="Segue"></a>Segue</h2><h3 id="Extra-Buttons-in-Table-View-Cell"><a href="#Extra-Buttons-in-Table-View-Cell" class="headerlink" title="Extra Buttons in Table View Cell"></a>Extra Buttons in Table View Cell</h3><ol>
<li>At the right end of a Table View Cell, we can add some extra buttons or symbols. </li>
<li>We select the View at Document Outline and choose the buttons or symbols we need at Attributes Inspector -&gt; Table View -&gt; Accessory. </li>
</ol>
<h3 id="Set-Segue"><a href="#Set-Segue" class="headerlink" title="Set Segue"></a>Set Segue</h3><ol>
<li>For Table View, we can segue the view and the extra buttons separately or together. </li>
<li>For Collection View, probably best done from this UICollectionViewDelegate method. Use <code>performSegue(withIdentifier:)</code> from there.</li>
<li>Sometimes, we may need to know the section and row this cell in. So we can get the indexPath with a Table View or Collection View instance function <code>indexPath</code><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// . 2</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(collectionView: UICV, didSelectItemAtIndexPath indexPath: IndexPath)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// . 3</span></span><br><span class="line">tableView.indexPath(<span class="keyword">for</span>: cell)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Update-View"><a href="#Update-View" class="headerlink" title="Update View"></a>Update View</h2><ol>
<li>When Model changes, we need to update View from Model. To do so, we will call <code>reloadData</code></li>
<li>This methods will causes it to call numberOfSectionsInTableView and numberOfRows/ItemsInSection all over again and then cellForRow/ItemAt on each visible row or item. </li>
<li>That is a heavyweight method. However, if only part of Model changes, there are lighter-weight reloaders, for example<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reloadRows</span><span class="params">(at indexPaths: [IndexPath], with animation: UITableViewRowAnimation)</span></span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Control-Some-Properties"><a href="#Control-Some-Properties" class="headerlink" title="Control Some Properties"></a>Control Some Properties</h2><h3 id="Height-of-Rows-in-a-Table-View-Cell"><a href="#Height-of-Rows-in-a-Table-View-Cell" class="headerlink" title="Height of Rows in a Table View Cell"></a>Height of Rows in a Table View Cell</h3><ol>
<li>Row height can be fixed (UITableView’s var <code>rowHeight: CGFloat</code>)</li>
<li>It can be determined using autolayout (<code>rowHeight = UITableViewAutomaticDimension</code>)</li>
<li>If you do automatic, help the table view out by setting <code>estimatedRowHeight</code> to something</li>
<li>The UITableView’s delegate can also control row heights.</li>
<li>The non-estimated version of auto layout could take a lot of time. <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, &#123;estimated&#125;heightForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">CGFloat</span></span><br></pre></td></tr></table></figure>
<h3 id="Size-of-cells-in-a-Collection-View"><a href="#Size-of-cells-in-a-Collection-View" class="headerlink" title="Size of cells in a Collection View"></a>Size of cells in a Collection View</h3></li>
<li>Cell size can be fixed in the storyboard.</li>
<li>You can also drive it from autolayout similar to table view.</li>
<li><p>Or you can return the size from this delegate method</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(<span class="number">_</span> collectionView: UICollectionView,</span></span></span><br><span class="line"><span class="function"><span class="params">	layout collectionViewLayout: UICollectionViewLayout,</span></span></span><br><span class="line"><span class="function"><span class="params">	sizeForItemAt indexPath: IndexPath</span></span></span><br><span class="line"><span class="function"><span class="params">   )</span></span> -&gt; <span class="type">CGSize</span></span><br></pre></td></tr></table></figure>
<h3 id="Header-and-Footer-for-Each-Section"><a href="#Header-and-Footer-for-Each-Section" class="headerlink" title="Header and Footer for Each Section"></a>Header and Footer for Each Section</h3></li>
<li><p>For Table View, we just supply a String for the header using this method. </p>
</li>
<li>And for Collection View, You can’t just specify them as Strings.</li>
<li>First you have to “turn them on” in the storyboard.</li>
<li>They are reusable (like cells are), so you have to make a UICollectionReusableView subclass.</li>
<li>You put your UILabel or whatever for your header, then hook up an outlet.</li>
<li>Then you implement this dataSource method to dequeue and provide a header.</li>
<li>Use <code>dequeueReusableSupplementaryView(ofKind:withReuseIdentifier:for:)</code> in there. Kind will be <code>UICollectionElementKindSectionHeader or Footer</code>.<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// . 1</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tv: UITV, titleForHeaderInSection section: Int)</span></span> -&gt; <span class="type">String?</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// . 6</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(<span class="number">_</span> collectionView: UICollectionView,</span></span></span><br><span class="line"><span class="function"><span class="params">viewForSupplementaryElementOfKind kind: String,</span></span></span><br><span class="line"><span class="function"><span class="params">at indexPath: IndexPath</span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span> -&gt; <span class="type">UICollectionReusableView</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Special-Drag-and-Drop"><a href="#Special-Drag-and-Drop" class="headerlink" title="Special Drag and Drop"></a>Special Drag and Drop</h2><h3 id="Enable-Drag"><a href="#Enable-Drag" class="headerlink" title="Enable Drag"></a>Enable Drag</h3><ol>
<li>The drag interaction of Collection View is unavailable in iPhone by default. </li>
<li>We can turn it on by just set <code>collectionView.dragInteractionEnable = true</code> at the collectionView didSet. </li>
<li>We can detech if a device is an iPhone or an iPad with <code>UIDevice.current.userInterfaceIdiom</code>. <code>.pad</code> means iPad. </li>
</ol>
<h3 id="Drop-Proposal-Intent"><a href="#Drop-Proposal-Intent" class="headerlink" title="Drop Proposal Intent"></a>Drop Proposal Intent</h3><ol>
<li>In the drop method <code>dropSessionDidUpdate</code> of Collection View or Table View, we can not only return <code>UICollection/TableViewDropProposal(operation: )</code>, but also <code>UICollection/TableViewDropProposal(operation: , intent: )</code>. That intent parameter can receive three kinds of values <code>.insertAtDestinationIndexPath</code>, <code>.insertIntoDestinationIndexPath</code> and <code>.unspecified</code>. </li>
<li><code>insertAtDestinationIndexPath</code>: Insert the dropped items at the specified index path. If use this propalsal, when moving the dragged item, other items will move space for it like selection sort. </li>
<li><code>insertIntoDestinationIndexPath</code>: Dropping items is added to the drop target’s children. </li>
</ol>
<h3 id="Perform-Drop"><a href="#Perform-Drop" class="headerlink" title="Perform Drop"></a>Perform Drop</h3><h4 id="Coordinator"><a href="#Coordinator" class="headerlink" title="Coordinator"></a>Coordinator</h4><ol>
<li>Here don’t exist session. This method has a new parameter called <code>coordinator</code>. </li>
<li>It has a property called <code>destinationIndexPath</code>. This is the drop area. It could be <code>nil</code></li>
<li>It also has another property called <code>items</code>, type of <code>[UICollection/TableViewDropItem]</code>. </li>
<li>If an item from the <code>items</code> is come from self, it’s property <code>sourceIndexPath</code> is not nil. </li>
</ol>
<h4 id="PerformBatchUpdate"><a href="#PerformBatchUpdate" class="headerlink" title="PerformBatchUpdate"></a>PerformBatchUpdate</h4><ol>
<li>While perform Drop, maybe we need to modify the view more than once. This might crash our View. But we can use a method of that view called <code>performBatchUpdate</code>. </li>
<li>It takes a closure as its first parameter. It will make the whole closure as one steps to prevent View from crashing. It can have another closure <code>complete</code> as animators. </li>
<li>At the end, we have to ask coordinator drop the item to animate the drop process by calling <code>coordinator.drop(…)</code>. </li>
<li>We can also create a placeholder to take a place while waiting fetching the content. </li>
</ol>
<h4 id="Placeholder"><a href="#Placeholder" class="headerlink" title="Placeholder"></a>Placeholder</h4><ol>
<li>We can get a placeholder use another drop mehtod of coordinator. </li>
<li>Later, we can load object when we fetched the item we drop using <code>item.dragItem.itemProvider.loadObject(…)</code>. It takes an <code>ofClass</code> parameter like aforementioned, and a closure takes a provider and an error as parameters to load objects. </li>
<li>When object comes, we don’t need placeholder any more. If that object fits the cell, we can call <code>placeholder.commitInsertion(dataSourceUpdates: (IndexPath) -&gt; Void)</code> to replace the placeholder. In that closure, we change our model instead of View. If don’t fit, we can just use <code>placeholderdeletePlaceholder()</code> <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// . 1</span></span><br><span class="line"><span class="keyword">let</span> placeholderContext = coordinator.drop</span><br><span class="line">(</span><br><span class="line">	item.dragItem,  <span class="comment">// item is an element of coordinate.item</span></span><br><span class="line">	to: <span class="type">UICollection</span>/<span class="type">TableViewDropPlaceholder</span></span><br><span class="line">	(</span><br><span class="line">		insertionIndexPath: destionationIndexPath,</span><br><span class="line">		reuseIdentifier: <span class="string">"reuseIdentifier"</span></span><br><span class="line">	)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="UITextField"><a href="#UITextField" class="headerlink" title="UITextField"></a>UITextField</h1><ol>
<li>Keyboard appears because UITextField becomes “first responder”. It will do this automatically when the user taps on it. Or you can make it the first responder by sending it the <code>becomeFirstResponder</code> message.</li>
<li>To make the keyboard go away, send <code>resignFirstResponder</code> to the UITextField.</li>
<li>UITextField has an important aspect different with UILabel. UITextField is delegate. We prefer to react to some special key with delegate. For example, when “return” key is pressed, <code>func textFieldShouldReturn(sender: UITextField)-&gt;Bool</code> will get called. Here is where we can react to return key. Normally return true after actions done. </li>
<li>When the text field resigns being first responder, <code>func textFieldDidEndEditing(sender: UITextField)</code> get called. </li>
<li>UITextField is a UIControl. So you can also set up target/action to notify you when things change. Just like with a button, there are different UIControlEvents which can kick off an action. </li>
<li>Keyboards can be configured after that UITextField conformed <code>UITextInputTraits</code>. </li>
<li>Keyboards can have accessory views that appear above the keyboard (custom toolbar, etc.). var inputAccessoryView:UIView</li>
<li>The keyboard comes up over other views. So you may need to adjust your view positioning (especially to keep the text field itself visible). </li>
<li>We can get the String user typed in the text field with <code>textField.text</code></li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>Swift开发 (Stanford CS193p)</category>
      </categories>
      <tags>
        <tag>应用开发</tag>
        <tag>Swift</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>11. Application of Integrals</title>
    <url>/2020/02/14/11-Application-of-Integrals/</url>
    <content><![CDATA[<h1 id="Areas-Between-Curves"><a href="#Areas-Between-Curves" class="headerlink" title="Areas Between Curves"></a>Areas Between Curves</h1><ol>
<li>The area between <script type="math/tex">f(x)</script> and <script type="math/tex">g(x)</script> (<script type="math/tex">f(x) > g(x)</script>) is <script type="math/tex">\displaystyle\int^b_a(f(x)-g(x))dx</script>. </li>
<li>When calculating this kind of question, always draw a picture to figure out the order. </li>
<li>Sometimes we can also integrate on y-axis instead of x-axis. </li>
</ol>
<h1 id="Volumn"><a href="#Volumn" class="headerlink" title="Volumn"></a>Volumn</h1><ol>
<li>Slice the object and the function of its area is <script type="math/tex">A(x)</script>, then <script type="math/tex">\Delta V=A(x)\Delta X</script>. So <script type="math/tex">V=\displaystyle\int A(x)dx</script>. </li>
<li>Solids of revolution: graph of function <script type="math/tex">y=f(x)</script> revolve around x-axis to form a solid object. Slice the object into disks, then we can get <script type="math/tex">V=\displaystyle\int\pi y^2dx</script>. </li>
<li>The volumn of portion of width <script type="math/tex">x\ (0≤x≤a)</script> of a ball is <script type="math/tex">V(x)=\pi(a^3-\displaystyle\frac{x^3}{3})</script></li>
<li>Another way to calculate the volumn of revolution instead of disks is shells. See the volumn as thin column shells, the volumn is the sum of areas of columns. </li>
<li>When calculate the volumn, beware of the limits of integrals. Remember the symmetric of revolution. Don’t over calculate the volumns. </li>
<li><strong>Beaware of the units!!!!!</strong> The x and y values has to be both the same. In <script type="math/tex">y=x^2</script>, <script type="math/tex">x=100\ cm</script> and <script type="math/tex">x=1\ m</script> is different since the first has <script type="math/tex">y=10000\ cm</script> while the second has <script type="math/tex">y=1\ m</script>. </li>
</ol>
<h1 id="Average-Value"><a href="#Average-Value" class="headerlink" title="Average Value"></a>Average Value</h1><ol>
<li><code>Continuous average Ave(f)</code>: <script type="math/tex">\displaystyle\frac{1}{b-a}\int^b_af(x)dx</script>. </li>
<li>Riemann sum: <script type="math/tex">\begin{equation}(y_1+\dots+y_n)\Delta x\stackrel{\Delta x\to0}\longrightarrow\displaystyle\int^b_af(x)dx\end{equation}</script>. <br />Divide by <script type="math/tex">b-a</script>, <script type="math/tex">\begin{equation}\displaystyle\frac{(y_1+…+y_n)\Delta x}{b-a}x\stackrel{\Delta x\to0}\longrightarrow\displaystyle\frac{1}{b-a}\int^b_af(x)dx\end{equation}</script>. <br />And <script type="math/tex">\Delta x=\displaystyle\frac{b-a}{n}</script>. So <script type="math/tex">\begin{equation}\displaystyle\frac{y_1+…+y_n}{n}x\stackrel{\Delta x\to0}\longrightarrow\displaystyle\frac{1}{b-a}\int^b_af(x)dx\end{equation}</script></li>
<li>Even calculate the same thing, if we respect to different variables, the result can be different. </li>
<li>Weighted average: <script type="math/tex">\displaystyle\frac{\int^b_af(x)w(x)dx}{\int^b_aw(x)dx}</script>. <script type="math/tex">w(x)</script> is the weigh function</li>
<li>Probability: <script type="math/tex">a<x_1<x_2<b</script>, <script type="math/tex">P(x_1<x<x_2)=\displaystyle\frac{\int^{x_2}_{x_1}w(x)dx}{\int^b_aw(x)dx}</script>. </li>
</ol>
<h1 id="Numerical-Integration"><a href="#Numerical-Integration" class="headerlink" title="Numerical Integration"></a>Numerical Integration</h1><ol>
<li>Riemann sums: Add up rectangulars. The sum is <script type="math/tex">\Delta x(y_0+y_1+\dots+y_{n-1})</script>. </li>
<li>Trapezoidal rule: Add up trapezoids. The upper base is <script type="math/tex">y_i</script>, lower base is <script type="math/tex">y_{i-1}</script>, the height is <script type="math/tex">\Delta x</script>. So the sum is <br /><script type="math/tex">\begin{equation}\begin{split}&\Delta x(\displaystyle\frac{y_0+y_1}{2}+\frac{y_1+y_2}{2}+\dots+\frac{y_{n-1}+y_{n}}{2})\\=&\Delta x(\frac{y_0}{2}+y_2+\dots+y_{n-1}+\frac{y_n}{2})\end{split}\end{equation}</script></li>
<li>The trapezoidal rule is <script type="math/tex">\displaystyle\frac{left\ Riemann\ sum(y_0\ to\ y_{n-1})+right\ Riemann\ sum(y_n\ to\ y_1)}{2}</script></li>
<li>Simpson’s rule: Deal with two chunks one time. Add up parabolas cover two chunks together. The area is base times average height. The average heights turn out to be <script type="math/tex">\displaystyle\frac{y_{n-1}+4y_n+y_{n+1}}{6}</script>. So the sum is <br /><script type="math/tex">\begin{equation}\begin{split}&\displaystyle\frac{2\Delta x}{6}((y_0+4y_1+y2)+(y_2+4y_3+y_4)+…+(y_{n-2}+4y_{n-1}+y_n))\\=&\frac{\Delta x}{3}(y_0+4y_1+2y_2+4y_3+2y_4+…+2y_{n-2}+4y_{n-1}+y_n)\end{split}\end{equation}</script> </li>
<li>Simpson’s rule is amazingly accuracy, <script type="math/tex">|Simpson's\ rule-Exact\ answer|\approx(\Delta x)^4</script></li>
<li>Simpson’s rule is derived using the exact answer for all degree <script type="math/tex">2</script> polynomials. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>单变量微积分 (MIT 18.01)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>11. Orthogonal Vectors and Subspaces</title>
    <url>/2020/01/31/11-Orthogonal-Vectors-and-Subspaces/</url>
    <content><![CDATA[<h1 id="Orthogonality"><a href="#Orthogonality" class="headerlink" title="Orthogonality"></a>Orthogonality</h1><ol>
<li>Two vectors are <code>orthogonal</code> when their dot product is zero: <script type="math/tex">\vec{v}\cdot \vec{w}=\vec{v}^T\vec{w}=0</script>. </li>
<li>If two vectors are orthogonal, <script type="math/tex">||\vec{v}||^2+||\vec{w}||^2=||\vec{v}+\vec{w}||^2=||\vec{v}-\vec{w}||^2</script>. </li>
<li>For two subspaces <script type="math/tex">V</script> and <script type="math/tex">W</script>, if <script type="math/tex">\forall\ \vec{v}\ \forall\ \vec{w},\ \vec{v}^T\vec{w}=0</script>, we say <script type="math/tex">V</script> and <script type="math/tex">W</script> are <code>orthogonal</code> or <code>perpendicular</code>. </li>
<li>The row space is perpendicular to the nullsapce. Every row of <script type="math/tex">A</script> is perpendicular to every solution of <script type="math/tex">A\vec{x}=\vec{0}</script><br />The column space is perpendicular to the left nullspace. Every row of <script type="math/tex">A^T</script> is perpendicular to every solution of <script type="math/tex">A^T\vec{y}=\vec{0}</script> </li>
<li>If two orthogonal subspaces have intersection, the intersection can and only can contain <script type="math/tex">\vec{0}</script>, or the vector in the intersection cannot be perpendicular to itself. </li>
</ol>
<h1 id="Orthogonal-Complements"><a href="#Orthogonal-Complements" class="headerlink" title="Orthogonal Complements"></a>Orthogonal Complements</h1><ol>
<li>The orthogonal complements of a subspace <script type="math/tex">V</script> contains every vector that is perpendicular to <script type="math/tex">V</script>. It’s denoted by <script type="math/tex">V^\perp</script>. </li>
<li>Both row space and nullspace are the orhogonal complement of the other. <br />Both column space and left nullspace are the orhogonal complement of the other. </li>
<li><script type="math/tex">\forall\ \vec{x_r}\in C(A^T),\ \forall\ \vec{x_n}\in\ N(A),\ A(\vec{x_r}+\vec{x_n})=A\vec{x_r}+A\vec{x_n}=A\vec{x}+\vec{0}=A\vec{x}=\vec{b}</script>. Every <script type="math/tex">\vec{b}</script> (a vector in <script type="math/tex">C(A)</script>) corresponds to one <script type="math/tex">\vec{x_r}</script>. </li>
</ol>
<h1 id="Combining-Basis"><a href="#Combining-Basis" class="headerlink" title="Combining Basis"></a>Combining Basis</h1><ol>
<li>Any <script type="math/tex">n</script> independent vectors in <script type="math/tex">R^n</script> must span <script type="math/tex">R^n</script>. Any n vectors that span <script type="math/tex">R^n</script> must be independent. </li>
<li>If the <script type="math/tex">n</script> columns of <script type="math/tex">A</script> are independent, they span <script type="math/tex">R^n</script>. So <script type="math/tex">A\vec{x}=\vec{b}</script> is solvable. <br />If the n columns of <script type="math/tex">A</script> span <script type="math/tex">R^n</script>, they are independent. So <script type="math/tex">A\vec{x}=\vec{b}</script> has only one solution. </li>
<li>The <script type="math/tex">r</script> basis of <script type="math/tex">C(A^T)</script> combine <script type="math/tex">n-r</script> basis of <script type="math/tex">N(A)</script> is <script type="math/tex">n</script> independent vectors in <script type="math/tex">R^n</script>. So each <script type="math/tex">\vec{x}</script> is the sum <script type="math/tex">\vec{x_r}+\vec{x_n}</script>. <br />Prove of independence: <br />If a combination of all <script type="math/tex">n</script> vectors gives <script type="math/tex">\vec{x_r}+\vec{x_n}=\vec{0}</script>, then <script type="math/tex">\vec{x_r}=-\vec{x_n}</script> is in both subspaces. So <script type="math/tex">\vec{x_r}=\vec{x_n}=\vec{0}</script>. </li>
</ol>
<h1 id="When-Ax-b-fails"><a href="#When-Ax-b-fails" class="headerlink" title="When Ax=b fails"></a>When Ax=b fails</h1><ol>
<li>In application, <script type="math/tex">A\vec{x}=\vec{b}</script> is usually unsovable, especially when there are way more equations then the unknowns, the <script type="math/tex">\vec{b}</script> often has noise. </li>
<li>In order to make good use of data, we usually multiply two side with <script type="math/tex">A^T</script> to solve <script type="math/tex">A^TA\hat{\vec{x}}=A^T\vec{b}</script>. </li>
<li><script type="math/tex">N(A^TA)=N(A)</script>, and <script type="math/tex">rank\ of\ A^TA=rank\ of\ A</script>. </li>
<li><script type="math/tex">A^TA</script> is invertible when <script type="math/tex">A</script> has independent columns and this is when <script type="math/tex">A^TA\hat{\vec{x}}=A^T\vec{b}</script> has a solution. <br />Prove independence: <br />To find <script type="math/tex">N(A^TA)</script>, we find the solution space of <script type="math/tex">A^TA\vec{x}=\vec{0}</script>. <br />Multiply by <script type="math/tex">\vec{x}^T</script>, we get <script type="math/tex">\vec{x}^TA^TA\vec{x}=(A\vec{x})^T(A\vec{x})=\vec{0}</script>. <br />This means <script type="math/tex">A\vec{x}=\vec{0}</script>. <br />If <script type="math/tex">A</script> has independent columns, that equation leads to <script type="math/tex">\vec{x}=0</script>, i.e. <script type="math/tex">N(A^TA)=Z</script>. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>线性代数 (MIT 18.06)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>11. Markov Chains</title>
    <url>/2020/03/17/11-Markov-Chains/</url>
    <content><![CDATA[<h1 id="Discrete-Time-Markov-Chains"><a href="#Discrete-Time-Markov-Chains" class="headerlink" title="Discrete-Time Markov Chains"></a>Discrete-Time Markov Chains</h1><ol>
<li>The effect of the past on the future is summarized by state, which changes over time according to given probabilities. </li>
<li>In discrete-time Markoc chains, state changes at certain discrete time instants, indexed by an integer variable $n$. </li>
<li>At each time step $n$, the state of the chain is denoted by $X_n$ and belongs to a finite set $S$ of possible states, called the state space. <br />We assume that $S=\{1,…,m\}$, for some positive integer $m$. </li>
<li>The Markov chain is described in terms of its transition probabilities $p_{ij}$: whenever the state happens to be $i$, there is a probability $p_{ij}$ that the next state is equal to $j$. Mathematically, $p_{ij}=P(X_{n+1}=j|X_n=i), (i,j\in S)$. </li>
<li>The transition probabilities apply whenever state $i$ is visited, no matter what happened in the past and no matter how state $i$ was reached. <br />The Markov property requires $P(X_{n+1}=j|X_n=i,X_{n-1}=i_n-1,…,X_0=i_0)=P(X_{n+1}=j|X_n=i)=p_{ij}$, for all time $n$, all states $i,j\in S$ and all sequences $i_0,…,i_{n-1}$ of earlier states. <br />Thus, the probability law of the next state $X_{n-1}$ depends on the past only through the value of the present state $X_n$. </li>
<li>For all states, $\displaystyle\sum^m_{j=1}p_{ij}=1, \forall i$. </li>
<li>The probability $p_{ii}$ is allowed to be positive, in which case it’s possible for the next state to be the same as the current one. Even though the state doesn’t change, we still view this as a state stransition of a special type (a “self-transition”). </li>
<li>All of the elements of a Markov chain model can be encoded in a transition probability matrix. </li>
<li>It’s also helpful to lay out the model in the socalled transition probability graph, whose nodes are the states and whose arcs are the possible transitions. </li>
<li>It’s possible to use a Markov chain model even if there is a dependence on the states at several past days. The general idea is to introduce some additional states which encode relevant information from preceding periods. </li>
<li>$P(X_0=i_0,X_1=i_1,…,X_n=i_n)=P(X_0=0)p_{i_0i_1}p_{i_1i_2}…p_{i_{n-1}i_n}$<br />$P(X_1=i_1,…,X_n=i_n|X_0=i_0)=p_{i_0i_1}p_{i_1i_2}…p_{i_{n-1}i_n}$</li>
<li>Graphically, a state sequence can be identified with a sequence of arcs in the transition probability graph, and the probability of such a path (given the initial state) is given by the product of the probabilities associated with the arcs traversed by the path. </li>
</ol>
<h1 id="n-step-Transition-Probabilities"><a href="#n-step-Transition-Probabilities" class="headerlink" title="n-step Transition Probabilities"></a>n-step Transition Probabilities</h1><ol>
<li>$n$-step transition probabilities are probabilities that describe the likelihood of the state at some  future time, conditioned on the current state. </li>
<li>This is defined by $r_{ij}(n)=P(X_n=j|X_0=i)$. This is the probability that the state after $n$ time periods will be $j$, given that the current state is $i$. </li>
<li>Chapman_Kolmogorov equation: $r_{ij}(n)=\displaystyle\sum^m_{k=1}r_{ik}(n-1)p_{kj}$, for $n&gt;1$ and all $i,j$. Start with $r_{ij}(1)=p_{ij}$. <br />Namely the sum of the product of the probability of $n-1$ steps later at state $k$ and the probability of from $k$ to $j$. <br />The trick is that once we condition on $X_{n-1}=k$, the conditioning on $X_0=i$ does not affect the probability $p_{kj}$ of reaching $j$ at the next step. </li>
<li>We can view $r_{ij}(n)$  as the element at the $i$th row and $j$th column of $n$-step transition probability matrix. </li>
<li>The matrix of $n$-step transition probabilities $r_{ij}(n)$ is obtained by multiplying the $i$th row of matrix of $(n-1)$-step transition probability $r_{ik}(n-1)$, with the $j$th column of one-step transition probability matrix $p_{kj}$. <br />Thus, the $n$-step transition probability matrix is the $n$th power of the transition probability matrix. </li>
</ol>
<h1 id="Recurrent-and-Transient"><a href="#Recurrent-and-Transient" class="headerlink" title="Recurrent and Transient"></a>Recurrent and Transient</h1><ol>
<li>A state $j$ is accessible from a state $i$ if for some $n$, the $n$-step transition probability $r_{ij}(n)$ is positive. </li>
<li>Let $A(i)$ be the set of states that are accessible from $i$. </li>
<li>We say that $i$ is recurrent if for every $j$ that is accessible from $i$, $i$ is also accessible from $j$. Namely for all $j$ that belong to $A(i)$ , we have that $i$ belongs to $A(j)$. </li>
<li>From any future state, there is always som probability of returning to $i$ and , given enough time, this is certain to happen. </li>
<li>If a recurrent state is visited once, it’s certain to be revisited an infinite number of times. </li>
<li>If a state is not recurrent, then it is called transient. Thus, a state $i$ is transient if there is a stete $j\in A(i)$ such that $i$ is not accessible from $j$. <br />After each visit to state $i$, there is positive probability that the state enters such a $j$. Given enough time, this will happen, and state $i$ cannot be visited after that. Thus, a transient state will only be visited a finite number of times. </li>
<li>Transient or recurrent is determined by the arcs of the transition probability graph (wheter $p_{ij}&gt;0$) and not by the numerical values of the $p_{ij}$. </li>
<li>If $i$ is a recurrent state, the set of states $A(i)$ that are accessible from $i$ form a recurrent class, meaning that states in $A(i)$ are all accessible from each other, and no state outside $A(i)$ is accessible from them. <br />For a recurrent state $i$, we have $A(i)=A(j)$ for all $j$ that belong to $A(i)$. </li>
<li>At least one recurrent state must be accessible from any given transient state. <br />A recurrent state is accessible from all states in its class, but is not accessible from recurrent states in other classes. <br />A transient state is not accessible from any recurrent state. </li>
<li>There must exist at least one recurrent state and hence at least one class. </li>
<li>A Markov chain can be decomposed into one or more recurrent classes, plus possibly some transient states. </li>
<li>Once the state enters (or starts in) a class of recurrent states, it stays within that class; since all states in the class are accessible from each other, all states in the class will be visited an infinite number of times. </li>
<li>If the initial state is transient, then the state trajectory contains an initial portion consisting of transient states and a final portion consisting of recurrent states from the same class. </li>
</ol>
<h1 id="Periodicity"><a href="#Periodicity" class="headerlink" title="Periodicity"></a>Periodicity</h1><ol>
<li>A recurrent class is said to be periodic if its states can be grouped in $d&gt;1$ disjoint subsets $S_1,…,S_d$ so that all transitions from one subset lead to the next subset. <br />If $i\in S$ and $p_{ij}&gt;0$, then <script type="math/tex">\left\{\begin{array}{}j\in S_{k+1} & if\ k=1,…,d-1\\j\in S_1&if\ k=d \end{array}\right.</script>. </li>
<li>A recurrent class that is not periodic is said to be aperiodic. </li>
<li>In a periodic recurrent class, we move through that sequence of subsets in order, and after $d$ steps, we end up in the same subset. </li>
<li>Given a periodic recurrent class, a positive time $n$, and a state $i$ in the class, there must exist one or more states $j$ for which $r_{ij}(n)=0$. <br />Starting from $i$, only one of the sets is possible at time $n$. </li>
<li>A way to verify aperiodicity of a given recurrent class $R$, is to check whether there is a special time $n≥1$ and a special state $i\in R$ from which all states in $R$ can be reached in $n$ steps, i.e. $r_{ij}(n)&gt;0$ for all $j\in R$. </li>
<li>If a recurrent class $R$ is aperiodic, then there exists a time $n$ such that $r_{ij}(n)&gt;0$ for every $i$ and $j$ in $R$. </li>
</ol>
<h1 id="Steady-State-Behavior"><a href="#Steady-State-Behavior" class="headerlink" title="Steady-State Behavior"></a>Steady-State Behavior</h1><ol>
<li>If there are two or more classes of recurrent states, it is clear that the limiting values of the $r_{ij}(n)$ must depend on the initial state (the possibility of visiting $j$ far into the future depends on whether $j$ is in the same class as the initial state $i$). </li>
<li>Even for chains with a single recurrent class, the $r_{ij}(n)$ may fail to converge. </li>
<li>The recurrent class is periodic, and for such a class, it can be seen that the $r_{ij}(n)$ generically oscillate. </li>
<li>For every state $j$, the probability $r_{ij}(n)$ of being at state $j$ approaches a limiting value that is independent of the initial state $i$. This limiting value, denoted by $\pi_j$, has the interpretation $\pi_j\approx P(X_n=j)$, when $n$ is large, and is called the steady-state probability of $j$. </li>
<li>For a Markov chain with a single recurrent class, which is aperiodic, <br />&emsp;for each $j$, we have $\displaystyle\lim_{i\to\infty}r_{ij}(n)=\pi_j$, for all $i$; <br />&emsp;The $\pi_j$ are unique solution to the system of equation <script type="math/tex">\displaystyle\left\{\begin{array}{}the\ balance\ equations:& \pi_j=\sum^n_{k=1}\pi_kp_{kj}&j=1,…,m\\the\ normalization\ equation:&1=\sum^m_{k=1}\pi_k \end{array}\right.</script><br />&emsp;We have <script type="math/tex">\left\{\begin{array}{}\pi_j=0 &for\ all\ transient\ states\ j\\\pi_j>0&for\ all\ recurrent\ states\ j\end{array}\right.</script>. </li>
<li>The steady-state probabilities $\pi_j$ sum to $1$ and form a probability distribution on the state space, called the stationary distribution of the chain. <br />If the initial state is chosen according to this distribution, i.e. if $P(X_0=j)=\pi_j, j=1,…,m$, then, using the total probability theorem, we have $P(X_1=j)=\displaystyle\sum^m_{k=1}P(X_0=k)p_{kj}=\sum^m_{k=1}\pi_kp_{kj}=\pi_j$. <br />Similarly $P(X_n=j)=\pi_j$, for all $n$ and $j$. </li>
</ol>
<h1 id="Long-Term-Frequency-Interpretations"><a href="#Long-Term-Frequency-Interpretations" class="headerlink" title="Long-Term Frequency Interpretations"></a>Long-Term Frequency Interpretations</h1><ol>
<li>Two way to view the long-term expected value: <br />&emsp;One way is to view it as the expected value of the number on a randomly chosen day far into the future. <br />&emsp;Another way is to calculate the total expected value of the number in $n$ days, where $n$ is very large, and divide it by $n$. </li>
<li>For a Markov chain with a single class which is aperiodic, the steady-state probabilities $\pi_j$ satisfy $\pi_j=\displaystyle\lim_{n\to\infty}\frac{v_{ij}(n)}{n}$, where $v_{ij}(n)$ is the expected value of the number of visits to state $j$ within the first $n$ transitions, starting from state $i$. </li>
<li>$\pi_j$ is the long-term expected fraction of time that the state is equal to $j$. Each time that state $j$ is visited, there is probability $p_{jk}$ that the next transition takes up to state $k$. We conclude that $\pi_kp_{jk}$ can be viewed as the long-term expected fraction of transitions that move the state from $j$ to $k$. </li>
<li>Whenever we carry out a probabilistic experiment and generate a trajectory of the Markov chain over an infinite time horizon, the observed long-term frequency with which state $j$ is visited will be exactly equal to $\pi_j$, and the observed long-term frequency of transitions from $j$ to $k$ will be exactly equal to $\pi_jp_{jk}$. </li>
<li>For $n$ transitions of a Markov chain with a single class which is aperiodic, let $q_{jk}(n)$ be the expected number of such transitions that take the state from $j$ to $k$. Then regardless of the initial state, we have $\displaystyle\lim_{n\to\infty}\frac{q_{jk}(n)}{n}=\pi_jp_{jk}$. </li>
<li>Now we can see that the balance equation expresses the fact that the expected frequency $\pi_j$ of visits to $j$ is equal to the sum of the expected frequencies $\pi_kp_{kj}$ of the transition that lead to $j$. </li>
</ol>
<h1 id="Birth-Death-Process"><a href="#Birth-Death-Process" class="headerlink" title="Birth-Death Process"></a>Birth-Death Process</h1><ol>
<li>A birth-death process is a Markov chain in which the states are linearly arranged and transitions can only occur to a neighboring state, or else leave the state unchanged. <br />$b_i=P(X_{n+1}=i+1|X_n=i)$, (“birth” probability at state $i$), <br />$d_i=P(X_{n+1}=i-1|X_n=1)$, (“death” probability at state $i$). </li>
<li>In any trajectory of the Markov chain, a transition from $i$ to $i+1$ has to be followed by a transition from $i+1$ to $i$, before another transition from $i$ to $i+1$ can occur. </li>
<li>The expected frequency of transitions from $i$ to $i+1$, which is $\pi_ib_i$, must be equal to the expected frequency of transitions from $i+1$ to $i$, which is $\pi_{i+1}d_{i+1}$. This leads to the local balance equations $\pi_ib_i=\pi_{i+1}d_{i+1}$, $i=0,1,…,m-1$. </li>
<li>Using the local balance equations, we obtain $\pi_i=\pi_0\displaystyle\frac{b_0b_2…b_{i-1}}{d_1d_2…d_i}$, $i=1,…,m$. </li>
<li>If $b_i=p,d_i=q$ for all $i$, <script type="math/tex">\rho=\displaystyle\frac{p}{q}=load\ factor≠1</script>, there are $m$ states. <br />$\pi_{i+1}=\pi_i\displaystyle\frac{p}q=\pi_i\rho$. So $\pi_i=\pi_0\rho^i$, $i=0,1,…,m$. <br />$1=\displaystyle\sum^m_{i=0}\pi_i=\pi_0(1+\rho+…+\rho^m)$. So $\pi_0=\displaystyle\frac{1-\rho}{1-\rho^{m+1}}$<br />If $p<q$, $\rho<1$ and $m\to\infty$. Then $\pi_0=1-p$ $\pi_i=(1-\rho)\rho^i$, $E[X_n]=\displaystyle\frac{\rho}{1-\rho}$. <br />If $p&gt;q$, $\rho&gt;1$ and $m\to\infty$. Then $\pi_i\to0$, for all $i$. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>概率论 (MIT 6.041)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>11. Vector Fields in 3D</title>
    <url>/2020/03/01/11-Vector-Fields-in-3D/</url>
    <content><![CDATA[<h1 id="Flux"><a href="#Flux" class="headerlink" title="Flux"></a>Flux</h1><ol>
<li>At every point, <script type="math/tex">\vec{F}=<P,Q,R></script>, <script type="math/tex">P,Q,R</script> are all functions of <script type="math/tex">x,y,z</script>. </li>
<li>In 3D, flux through a surface, which requires a surface integral. </li>
<li><script type="math/tex">Flux=\displaystyle\iint_S\vec{F}\cdot\vec{n}\ dS</script>. Sometimes <script type="math/tex">d\vec{S}=\vec{n}dS</script>. </li>
<li>If <script type="math/tex">S</script> is horizontal, namely <script type="math/tex">z=a</script>, <script type="math/tex">\vec{n}=\pm\vec{k}</script>. <script type="math/tex">dS=dx\ dy</script>. <br />If <script type="math/tex">S</script> is a sphere of radius <script type="math/tex">a</script> centered at origin, <script type="math/tex">n=\pm\displaystyle\frac{<x,y,z>}{a}</script>. <script type="math/tex">dS=a^2sin\ \theta\ d\phi\ d\theta</script><br />If <script type="math/tex">S</script> is a sylinder of radius <script type="math/tex">a</script> symmetric to z-axis, <script type="math/tex">\vec{n}=\displaystyle\pm\frac{<x,y,0>}{a}</script>. <script type="math/tex">dS=adz\ d\theta</script><br />If <script type="math/tex">S</script> is graph <script type="math/tex">z=f(x,y)</script>, <script type="math/tex">\vec{n}dS=\pm<-f_x,-f_y,1>dx\ dy</script>. MARK: <script type="math/tex"><-f_x,-f_y,1></script> is not <script type="math/tex">\vec{n}</script> and <script type="math/tex">dx\ dy</script> is not <script type="math/tex">dS</script>. <br />If <script type="math/tex">S</script> is parametric description, namely <script type="math/tex">S=\left\{\begin{array}{}x=x(u,v)\\y=y(u,v)\\z=z(u,v) \end{array}\right.</script>, <script type="math/tex"><x,y,z>=\vec{r}(u,v)</script>. Then <script type="math/tex">\vec{n}dS=\pm(\displaystyle\frac{\partial\vec{r}}{\partial u}\times\frac{\partial\vec{r}}{\partial v})du\ dv</script><br />If we know a normal vector <script type="math/tex">\vec{N}</script> (not necessarily unit) to surface <script type="math/tex">S</script>, see below. </li>
<li>To set up bounds on <script type="math/tex">dx\ dy</script>, look at shadow of <script type="math/tex">S</script> in xy-plane. </li>
<li>Interpretation of <script type="math/tex">\vec{n}dS</script>: <br />&emsp;One is the area. Normally the area is a parallelogram, so <script type="math/tex">\vec{n}dS</script> is the cross product of two adjacent edges. <br />&emsp;Let’s say <script type="math/tex">\alpha</script> is the angle between <script type="math/tex">\Delta S</script> and its projection at xy-plane <script type="math/tex">\Delta A</script>. <script type="math/tex">\Delta A=\Delta S\ cos\ \alpha</script><br />&emsp;Easy to know that <script type="math/tex">\alpha</script> is also the angle between normal vector of <script type="math/tex">\Delta S</script> <script type="math/tex">\vec{N}</script> and unit vector which goes along z-axis <script type="math/tex">\vec{k}</script>. <script type="math/tex">cos\ \alpha=\displaystyle\frac{\vec{N}\cdot\vec{k}}{|\vec{N}|}</script><br />&emsp;<script type="math/tex">\Delta S=\displaystyle\frac{1}{cos\ \alpha}\Delta A=\frac{|\vec{N}|}{\vec{N}\cdot\vec{k}}</script><br />&emsp;<script type="math/tex">\vec{n}\Delta S=\displaystyle\frac{|\vec{N}|\vec{n}}{\vec{N}\cdot\vec{k}}\Delta A=\pm\frac{\vec{N}}{\vec{N}\cdot\vec{k}}\Delta A</script><br />&emsp;So <script type="math/tex">\vec{n}dS=\pm\displaystyle\frac{\vec{N}}{\vec{N}\cdot\vec{k}}dx\ dy</script></li>
</ol>
<h1 id="Divergence-Theorem"><a href="#Divergence-Theorem" class="headerlink" title="Divergence Theorem"></a>Divergence Theorem</h1><ol>
<li>Divergence theorem： If <script type="math/tex">S</script> is a closed surface enclosing a region <script type="math/tex">D</script>, oriented with <script type="math/tex">\vec{n}</script> outwards and <script type="math/tex">\vec{F}</script> defined and differentiable everywhere in D, <script type="math/tex">\displaystyle\iint_S\vec{F}dS=\iiint_Ddiv\ \vec{F}dV</script>. <script type="math/tex">div\ (P\vec{i}+Q\vec{j}+R\vec{k})=P_x+Q_y+Z_k</script>.</li>
<li><script type="math/tex">\triangledown</script> notation: <script type="math/tex">\triangledown=<\displaystyle\frac{\partial}{\partial x},\frac{\partial}{\partial y},\frac{\partial}{\partial z}></script>. </li>
<li>Gradient: <script type="math/tex">\triangledown f=<\displaystyle\frac{\partial}{\partial x},\frac{\partial}{\partial y},\frac{\partial}{\partial z}>f=<\displaystyle\frac{\partial f}{\partial x},\frac{\partial f}{\partial y},\frac{\partial f}{\partial z}></script></li>
<li>Divergence: <script type="math/tex">\triangledown\cdot\vec{F}=<\displaystyle\frac{\partial}{\partial x},\frac{\partial}{\partial y},\frac{\partial}{\partial z}>\cdot<P,Q,R>=P_x+Q_y+R_z</script></li>
<li><script type="math/tex; mode=display">\triangledown^2 f=\triangledown\cdot\triangledown f=\triangledown\cdot<\displaystyle\frac{\partial f}{\partial x},\frac{\partial f}{\partial y},\frac{\partial f}{\partial z}>=<\displaystyle\frac{\partial^2 f}{\partial x^2},\frac{\partial^2 f}{\partial y^2},\frac{\partial^2 f}{\partial z^2}>=P_{xx}+Q_{yy}+R_{zz}</script></li>
<li><script type="math/tex; mode=display">\triangledown\times f=\left|\begin{matrix}\vec{i}&\vec{j}&\vec{k}\\\frac{\partial}{\partial x}&\frac{\partial}{\partial y}&\frac{\partial}{\partial z}\\P&Q&R \end{matrix}\right|=(R_y-Q_z)\vec{i}-(R_x-P_z)\vec{j}+(Q_x-P_y)\vec{k}</script></li>
<li>Physical interpretation: <script type="math/tex">div\ \vec{F}=</script> source rate <script type="math/tex">=</script> amount of flux generated  per unit volume</li>
<li>If we sum the divergence in <script type="math/tex">D</script>, we get amount of fluid leaving <script type="math/tex">D</script> per unit time. </li>
<li>Diffusion equation<br /><script type="math/tex">u=</script> concentration at a given point <script type="math/tex">=u(x,y,z,t)</script>. <br /><script type="math/tex">\displaystyle\frac{\partial u}{\partial t}=k\triangledown^2u=k\triangledown\cdot\triangledown u=k(u_{xx}+u_{yy}+u_{zz})</script>. <br /><script type="math/tex">\vec{F}=</script> velocity field of flowing things. <br />Phycics: Things flows from high concentration towards low concentration. So <script type="math/tex">\vec{F}</script> is directed along <script type="math/tex">-\triangledown u</script>, namely <script type="math/tex">\vec{F}=-k\triangledown u</script>. <br />Math:  Flux out of <script type="math/tex">D</script> through <script type="math/tex">S</script>: <script type="math/tex">\displaystyle\iint\vec{F}\cdot\vec{n}dS=amount\ of\ smoke\ through\ S\ per\ unit\ time=-\frac{d}{dt}(\iiint_DudV)</script>. <br /><script type="math/tex">\displaystyle\iiint_Ddiv\ \vec{F}dV=\iint_S\vec{F}\cdot\vec{n}dS</script>. So <script type="math/tex">\displaystyle\iiint_Ddiv\ \vec{F}dV=-\frac{d}{dt}(\iiint_DudV)=\iiint_D-\frac{\partial u}{\partial t}dV</script><br />So <script type="math/tex">\displaystyle\frac{\partial u}{\partial t}=-div\ \vec{F}=kdiv\ (\triangledown u)=k\triangledown^2u</script>. </li>
</ol>
<h1 id="Work"><a href="#Work" class="headerlink" title="Work"></a>Work</h1><ol>
<li><script type="math/tex">\vec{F}=P\vec{i}+Q\vec{j}+R\vec{k}</script>, <script type="math/tex">d\vec{r}=<dx,dy,dz></script>. <script type="math/tex">W=\displaystyle\int_C\vec{F}\cdot d\vec{r}=\int_CPdx+Qdy+Rdz</script>. </li>
<li>Fundamental theorem of calculus for line integral is still true in 3D. </li>
<li>Test for gradient fiels: <script type="math/tex">\left\{\begin{array}{}P_y=f_{xy}=f_{yx}=Q_x\\P_z=f_{xz}=f_{zx}=R_x\\Q_z=f_{yz}=f_{zy}=R_{y} \end{array}\right.</script></li>
<li>Find potential: <br />&emsp;<script type="math/tex">f(x,y,z)=\displaystyle\int_C\vec{F}\cdot d\vec{r}</script>.<br />&emsp;Antiderivatives: Integral <script type="math/tex">P</script> to get <script type="math/tex">f=\underbrace{F(x,y,z)}_{certain}+\underbrace{G(y,z)}_{unknown}</script>. Compare <script type="math/tex">\displaystyle\frac{\partial f}{\partial y}</script> with <script type="math/tex">Q</script> to get <script type="math/tex">G_y</script>. Integral <script type="math/tex">G_y</script> to get <script type="math/tex">f=\underbrace{F(x,y,z)+G(y,z)}_{certain}+\underbrace{H(z)}_{unknown}</script>. Compare <script type="math/tex">\displaystyle\frac{\partial f}{\partial z}</script> with <script type="math/tex">R</script> to get <script type="math/tex">H'</script>. Integral to get <script type="math/tex">H</script>. </li>
<li><script type="math/tex">curl\ \vec{F}=(R_y-Q_z)\vec{i}+(P_z-R_x)\vec{j}+(Q_x-P_y)\vec{k}=\triangledown\times f</script>. </li>
<li>If <script type="math/tex">\vec{F}</script> is defined in a symply connected region, <script type="math/tex">\vec{F}</script> is conservative if and only if <script type="math/tex">curl\ \vec{F}=0</script>. </li>
<li>Curl meansures rotation component in a velocity field. </li>
</ol>
<h1 id="Stokes’-Theorem"><a href="#Stokes’-Theorem" class="headerlink" title="Stokes’ Theorem"></a>Stokes’ Theorem</h1><ol>
<li>Stokes theorem: If <script type="math/tex">C</script> is a closed curve and <script type="math/tex">S</script> is any surface bounded by <script type="math/tex">C</script>, <script type="math/tex">\displaystyle\oint_C\vec{F}\cdot d\vec{r}=\iint_S(\triangledown\times\vec{F})\cdot\vec{n}dS</script>. </li>
<li>Need orientations of <script type="math/tex">C</script> and <script type="math/tex">S</script> to compatible. <br />When walking along <script type="math/tex">C</script>, keep all <script type="math/tex">S</script> in your left-hand side. <br />Or right-hand rule: thumb along <script type="math/tex">C</script> positively, index tangent to <script type="math/tex">S</script> (towards interior of <script type="math/tex">S</script>) and middle finger parallel to <script type="math/tex">\vec{n}</script>. </li>
<li>Green’s theorem is special case of Stokes in xy-plane. </li>
<li>A region is simply-connected if every closed loop inside it bounds a surface inside it. </li>
<li>If <script type="math/tex">\vec{F}</script> is defined in a simply-connected region and <script type="math/tex">curl\ \vec{F}=0</script> then <script type="math/tex">\vec{F}</script> is a gradient and <script type="math/tex">\displaystyle\int_C\vec{F}\cdot d\vec{r}</script> is path-independent. </li>
<li>Orientability: non-orientable surfaces have only one side, like Mobius surface. Flux cannot be defined in this kind of surface. </li>
<li><script type="math/tex">div\ (curl\ \vec{F}) =div\ (\triangledown\times\vec{F})=0</script>. (For real vectors <script type="math/tex">\vec{u}\cdot(\vec{u}\times\vec{v})=0</script>)</li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>多变量微积分 (MIT 18.02)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>12. Projections onto Subspaces</title>
    <url>/2020/02/01/12-Projections-onto-Subspaces/</url>
    <content><![CDATA[<h1 id="Projection-Onto-a-Line"><a href="#Projection-Onto-a-Line" class="headerlink" title="Projection Onto a Line"></a>Projection Onto a Line</h1><ol>
<li>Denote the <code>projection</code> of <script type="math/tex">\vec{b}</script> onto a line <script type="math/tex">\vec{a}</script> by <script type="math/tex">\vec{p}</script>. <script type="math/tex">\vec{p}</script> is a part of that line along <script type="math/tex">\vec{b}</script>. </li>
<li>The line from <script type="math/tex">\vec{b}</script> to <script type="math/tex">\vec{p}</script> is  perpendicular to <script type="math/tex">\vec{a}</script>. Denote that line <code>error vector</code><script type="math/tex">\vec{e}=\vec{b}-\vec{p}</script>. </li>
<li>As <script type="math/tex">\vec{p}</script> is part of <script type="math/tex">\vec{a}</script>, we have <script type="math/tex">\vec{p}=\hat{x}\vec{a}</script>. Substitute to the dot product <script type="math/tex">\vec{a}\cdot \vec{e}=\vec{0}</script> to get <script type="math/tex">\vec{a}\cdot (\vec{b}-\hat{x}\vec{a})=\vec{0}</script><br />We can solve <script type="math/tex">\hat{x}</script> from that equation. <script type="math/tex">\hat{x}=\frac{\vec{a}\cdot \vec{b}}{\vec{a}\cdot \vec{a}}=\frac{\vec{a}^T\vec{b}}{\vec{a}^T\vec{b}}</script><br />Then we have the projection <script type="math/tex">\vec{p}=\frac{\vec{a}^T\vec{b}}{\vec{a}^T\vec{b}}\vec{a}</script></li>
<li>If <script type="math/tex">\vec{b}=\vec{a}</script>, then <script type="math/tex">\hat{x}=1</script>. The projection of <script type="math/tex">\vec{a}</script> onto <script type="math/tex">\vec{a}</script> is itself. <br />If <script type="math/tex">\vec{b}</script> is perpendicular to <script type="math/tex">\vec{a}</script>, then <script type="math/tex">\vec{a}^T\vec{b}=0</script>. The projection is <script type="math/tex">\vec{0}</script>. </li>
<li>After projection, <script type="math/tex">\vec{b}</script> is parted to two parts, the projection <script type="math/tex">\vec{p}</script> and the error vector <script type="math/tex">\vec{e}</script>. </li>
<li><script type="math/tex">\vec{p}=\frac{\vec{a}^T\vec{b}}{\vec{a}^T\vec{b}}\vec{a}=\vec{a}\frac{\vec{a}^T\vec{b}}{\vec{a}^T\vec{b}}=\frac{\vec{a}\vec{a}^T}{\vec{a}^T\vec{a}}\vec{b}=P\vec{b}</script>. <script type="math/tex">P</script> is called <code>projection matrix</code>. </li>
<li><script type="math/tex">P</script> is a column times a row which means rank of <script type="math/tex">P</script> is <script type="math/tex">1</script>. That line is the column space of <script type="math/tex">P</script>. </li>
<li>Projecting a second time dosen’t change anything, i.e. the projection of the projection of <script type="math/tex">\vec{b}</script> onto line <script type="math/tex">\vec{a}</script> is still <script type="math/tex">\vec{p}</script>. So <script type="math/tex">P^n=P</script>. </li>
<li>Notice that <script type="math/tex">(I-P)\vec{b}=\vec{b}-\vec{p}=\vec{e}</script>. When <script type="math/tex">P</script> projects onto one subspace, <script type="math/tex">I-P</script> projects onto the perpendicular subspace. </li>
</ol>
<h1 id="Projection-Onto-a-Subspace"><a href="#Projection-Onto-a-Subspace" class="headerlink" title="Projection Onto a Subspace"></a>Projection Onto a Subspace</h1><ol>
<li>When <script type="math/tex">A\vec{x}=\vec{b}</script> has no solution, we usually want to get a <script type="math/tex">\hat{\vec{x}}</script> to make <script type="math/tex">\vec{p}=A\vec{x}</script> is closest to <script type="math/tex">\vec{b}</script>. </li>
<li>We want the error vector as small as possible so we choose the projection of <script type="math/tex">\vec{b}</script> onto the column space of <script type="math/tex">A</script> to be the <script type="math/tex">\vec{p}</script>. </li>
<li>If <script type="math/tex">A</script> has only one column, this is the problem aforementioned. But normally <script type="math/tex">A</script> has more than one column. </li>
<li><script type="math/tex">\vec{e}</script> is perpendicular to the column space of <script type="math/tex">A</script>. So if <script type="math/tex">\vec{a_i}</script> is a column vector of <script type="math/tex">A</script>, for every <script type="math/tex">i</script>, <script type="math/tex">\vec{a_i}^T(\vec{b}-A\hat{\vec{x}})=0</script>. <br />The matrix with those rows <script type="math/tex">\vec{a_i}^T</script> is <script type="math/tex">A^T</script>, so <script type="math/tex">A^T(\vec{b}-A\hat{\vec{x}})=\vec{0}</script>. <br />Rewrite that equation, we have <script type="math/tex">A^TA\hat{\vec{x}}=A^T\vec{b}</script>. </li>
<li>Final solution: <br />&emsp;<script type="math/tex">\hat{\vec{x}}=(A^TA)^{-1}A^T\vec{b}</script><br />&emsp;<script type="math/tex">\vec{p}=A\hat{\vec{x}}=A(A^TA)^{-1}A^T\vec{b}</script><br />&emsp;<script type="math/tex">P=A(A^TA)^{-1}A^T</script></li>
<li>The error vector is perpendicular to the column space. Therefore it’s in the left nullspace. The left nullspace contains the error vector. </li>
<li>When calculating the projection matrix, we cannot split <script type="math/tex">(A^TA)^{-1}</script> into <script type="math/tex">A^{-1}(A^T)^{-1}</script>. Because <script type="math/tex">A</script> is definitely not invertible, or <script type="math/tex">A\vec{x}=\vec{b}</script> will be solvable. </li>
<li>The distance from <script type="math/tex">\vec{b}</script> to the subspace <script type="math/tex">C(A)</script> is <script type="math/tex">||\vec{e}||</script>. W</li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>线性代数 (MIT 18.06)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>12. Trigonometric Integrals and Substitution</title>
    <url>/2020/02/16/12-Trigonometric-Integrals-and-substitution/</url>
    <content><![CDATA[<h1 id="Trigonometric-Integrals"><a href="#Trigonometric-Integrals" class="headerlink" title="Trigonometric Integrals"></a>Trigonometric Integrals</h1><ol>
<li>Trigonomatric formulas: <br />&emsp;Double Angle Formula: <br />&emsp;&emsp;<script type="math/tex">\left\{\begin{array}{}cos (2\theta)=cos^2\ \theta-sin^2\ \theta\\sin(2\theta)=2sin\ \theta\ cos\ \theta\end{array}\right.</script><br />&emsp;Half Angle Formula: <br />&emsp;&emsp;<script type="math/tex">\left\{\begin{array}{}\displaystyle cos^2\theta=\frac{1+cos\ (2\theta)}{2}\\sin^2\theta=\displaystyle\frac{1-cos\ (2\theta)}{2}\end{array}\right.</script><br />&emsp;<script type="math/tex">sec\ \theta=\displaystyle\frac{1}{cos\ \theta}</script><br />&emsp;<script type="math/tex">csc\ \theta=\displaystyle\frac{1}{sin\ \theta}</script><br />&emsp;<script type="math/tex">cot\ \theta=\displaystyle\frac{cos\ \theta}{sin\ \theta}</script><br />&emsp;<script type="math/tex">sec^2\ \theta=1+tan^2\ \theta</script><br />&emsp;<script type="math/tex">(tan\ \theta)'=sec^2\ \theta</script><br />&emsp;<script type="math/tex">(sec\ \theta)'=sec\ \theta\ tan\ \theta</script><br />&emsp;<script type="math/tex">\displaystyle\int tan\ x\ dx=-ln\ |cos(x)|+c</script></li>
<li><script type="math/tex; mode=display">\displaystyle\int sec\ x\ dx$$<br />&emsp;Add the derivative of $$sec\ x$$ and $$tan\ x$$ together to get $$(sec\ x+tan\ x)'=(sec\ x+tan\ x)sec\ x$$. <br />&emsp;Assign $$u=sec\ x+tan\ x$$. $$sec\ x=\displaystyle\frac{u'}{u}=\frac{d}{dx}ln(u)$$. <br />&emsp;So $$\displaystyle\int sec\ x\ dx=\int\frac{d}{dx}ln\ (u)dx=ln\ (u)+c=ln\ (sec\ x+tan\ x)+c</script></li>
<li><script type="math/tex">\displaystyle\int sin^n(x)cos^m(x)dx</script><br />If at least one exponent is odd. <br />&emsp;Use <script type="math/tex">sin^2x+cos^2x=1</script> to eliminate the odd exponent to <script type="math/tex">1</script>. <br />&emsp;Then we can assign <script type="math/tex">u</script> to the other one and use the substitution. <br />If both exponents are even. <br />&emsp;Use the half angle formulas to eliminate both <script type="math/tex">sin</script> and <script type="math/tex">cos</script>. <br />&emsp;If after elimination we are still in this case, just do it again until the situation becomes the the aforementioned case. </li>
<li><script type="math/tex; mode=display">\displaystyle\int \sqrt{a^2-y^2}dy$$. Assign $$y=asin\ \theta$$. <br />$$\begin{equation}\begin{split}\displaystyle\int acos\ \theta\ (acos\ \theta)d\theta&=a^2\int cos^2\theta\ d\theta\\&=a^2\int \frac{1+cos(2\theta)}{2}d\theta\\&=a^2(\frac{\theta}{2}+\frac{sin\ (2\theta)}{4})+c\\&=a^2(\frac{\theta}{2}+\frac{sin\ \theta\ cos\ \theta}{2})+c\\&=\frac{a^2\ \theta}{2}+\frac{(a\ sin\ \theta)(a\ cos\ \theta)}{2}+c\\&= \frac{a^2\ arcsin(\frac{y}{a})}{2}+\frac{y\sqrt{a^2-y^2}}{2}+c\end{split}\end{equation}</script></li>
<li>When involve <script type="math/tex">a^2-x^2</script>, we can think about making <script type="math/tex">x=acos\ \theta</script> or <script type="math/tex">x=asin\ \theta</script>. <script type="math/tex">a^2-x^2=a^2sin^2\theta</script> and <script type="math/tex">dx=-asin\ \theta\ d\theta</script>. <br />When involve <script type="math/tex">a^2+x^2</script>, we can think about <script type="math/tex">x=atan\ \theta</script>, then <script type="math/tex">a^2+x^2=sec^2\ \theta</script> and <script type="math/tex">dx=asec\ \theta\ d\theta</script>. <br />When involve <script type="math/tex">x^2-a^2</script>, we can think about <script type="math/tex">x=asec\ \theta</script>, then <script type="math/tex">x^2-a^2=tan^2\ \theta</script> and <script type="math/tex">dx=asec\ \theta\ tan\ \theta</script></li>
<li>In the form of <script type="math/tex">f(x)=\displaystyle\frac{1}{\sqrt{x^2+2ax}}</script> or similar forms, we can complete the square to <script type="math/tex">(x+a)^2-a^2</script>, and use substitution <script type="math/tex">u=x+a</script> to change the original form to <script type="math/tex">f(x)=\displaystyle\frac{1}{\sqrt{u^2-a^2}}</script>. Now the problem returns to the trigonometric substitution. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>单变量微积分 (MIT 18.01)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>12. Weak Law of Large Numbers</title>
    <url>/2020/03/20/12-Weak-Law-of-Large-Numbers/</url>
    <content><![CDATA[<h1 id="Inequalities"><a href="#Inequalities" class="headerlink" title="Inequalities"></a>Inequalities</h1><ol>
<li>Markov inequality: If a random variable $X$ can only take nonnegative values, then $P(X≥a)≤\displaystyle\frac{E[X]}{a}$, for all $a&gt;0$. <br />Proof: <br />&emsp;First fix a positive number $a$ and let <script type="math/tex">Y_a=\left\{\begin{array}{}0&if\ X<a\\a&if\ X≥a \end{array}\right.</script>. <br />&emsp;So $Y_a≤X$ and therefore $E[Y_a]≤E[X]$. <br />&emsp;$E[Y_a]=aP(Y_a=a)=aP(X≥a)$. So $aP(X≥a)≤E[X]$. <br />&emsp;Hence, $P(X≥a)≤\displaystyle\frac{E[X]}{a}$. </li>
<li>If a nonnegative random variable has a small mean, then the probability that it takes a large value must also be small. </li>
<li>The bounds provided by the Markov inequality can be quite loose. </li>
<li>Chebyshev inequality: If $X$ is a random variable with mean $\mu$ and variance $\sigma^2$, $P(|X-\mu|≥c)≤\displaystyle\frac{\sigma^2}{c^2}$. <br />Proof: <br />&emsp;$P(|X-\mu|≥c)=P((X-\mu)^2≥c^2)≤\displaystyle\frac{E[(X-\mu)^2]}{c^2}=\frac{\sigma^2}{c^2}$. </li>
<li>Let $c=k\sigma$, $P(|X-\mu|≥k\sigma)≤\displaystyle\frac{\sigma^2}{k^2\sigma^2}=\frac{1}{k^2}$. </li>
<li>The bounds that the Chebyshev inequality provides are more accurate than Markkov inequality. But we still cannot expect the bounds to be close approximations of the exact probabilities. </li>
</ol>
<h1 id="The-Weak-Law-of-Large-Numbers"><a href="#The-Weak-Law-of-Large-Numbers" class="headerlink" title="The Weak Law of Large Numbers"></a>The Weak Law of Large Numbers</h1><ol>
<li>A sequence $X_1,X_2,…$ of independent identically distributed random vairables with mean $\mu$ and variance $\sigma^2$ and define the sample mean by $M_n=\displaystyle\frac{X_1+…+X_n}{n}$. <br />We have $E[M_n]=\displaystyle\frac{E[X_1]+…+E[X_n]}{n}=\frac{n\mu}{n}=\mu$, and $var(M_n)=\displaystyle\frac{var(X_1+…X_n)}{n^2}=\frac{var(X_1)+…+var(X_n)}{n^2}=\frac{n\sigma^2}{n}=\frac{\sigma^2}{n}$. </li>
<li>Apply the Chebyshev inequality and obtain $P(|M_n-\mu|≥\epsilon)≤\displaystyle\frac{\sigma^2}{n\epsilon^2}$, for any $\epsilon&gt;0$. </li>
<li>The weak law of large numbers: For every $\epsilon&gt;0$, we have $P(|M_n-\mu|≥\epsilon)=P\left(\left|\displaystyle\frac{X_1+…+X_n}{n}-\mu\right|≥\epsilon\right)\to0$, as $n\to\infty$. </li>
<li>For large $n$, the bulk of the distribution of $M_n$ is concentrated near $\mu$. If we consider a positive length interval $[\mu-\epsilon,\mu+\epsilon]$ around $\mu$, then there is high probability that $M_n$ will fall in that interval; as $n\to\infty$, this probability converges to $1$. If $\epsilon$ is very small, we may have to wait longer (i.e.need a larger value of $n$). </li>
</ol>
<h1 id="Convergence-in-Probability"><a href="#Convergence-in-Probability" class="headerlink" title="Convergence in Probability"></a>Convergence in Probability</h1><ol>
<li>Convergence in Probability: Let $Y_1,Y_2,…$ be a sequence of random variables (not necessarily independent), and let $a$ be a real number. We say that the sequence $Y_n$ converges to $a$ in probability, if for every $\epsilon&gt;0$, we have $\displaystyle\lim_{n\to\infty}P(|Y_n-a|≥\epsilon)=0$. </li>
<li>The weak law of large numbers simply states that the sample mean converges in probability to the true mean $\mu$. </li>
<li>The Chebyshev inequality implies that if all $Y_n$ have the same mean $\mu$, and $var(Y_n)$ converges to $0$, then $Y_n$ converges to $\mu$ in probability. </li>
<li>If the random variables $Y_1,Y_2,…$ have a PMF or a PDF and converge in probability to $a$, then according to the above definition, “almost all” of the PMF or PDF of $Y_n$ is concentrated within $\epsilon$ of $a$ for large values of $n$. </li>
<li>The definition can be rephrased as: For every $\epsilon&gt;0$, and for every $\delta&gt;0$, there exists some $n_0$ such that $P(|Y_n-a|≥\epsilon)≤\delta$, for all $n≥n_0$. </li>
<li>If we refer to $\epsilon$ as the accuracy level, and $\delta$ as the confidence level, for any given level of accuracy and confidenc, $Y_n$ will be equal to $a$, within these levels of accuracy and confidence, provided that $n$ is large enough. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>概率论 (MIT 6.041)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>13. Central Limit Theorem and Strong Law of Large Numbers</title>
    <url>/2020/03/20/13-Central-Limit-Theorem-and-Strong-Law-of-Large-Numbers/</url>
    <content><![CDATA[<h1 id="The-Central-Limit-Theorem"><a href="#The-Central-Limit-Theorem" class="headerlink" title="The Central Limit Theorem"></a>The Central Limit Theorem</h1><ol>
<li>While $M_n=\displaystyle\frac{X_1+…+X_n}{n}$ converges to the true mean $\mu$, $S_n=nM_n$ increases to infinity. </li>
<li>Consider the deviation $S_n-n\mu$ of $S_n$ from its mean $n\mu$, and scaling it by a factor proportional to $\displaystyle\frac{1}{\sqrt{n}}$ to keep the variance at a constant level. <br />We define $Z_n=\displaystyle\frac{S_n-n\mu}{\sigma\sqrt{n}}$. <br />So $E[Z_n]=\displaystyle\frac{E[X_1+…+E_n]-n\mu}{\sigma\sqrt{n}}=0$ and $var(Z_n)=\displaystyle\frac{var(X_1+…+X_n)}{\sigma^2n}=\frac{var(X_1)+…+var(X_n)}{\sigma^2n}=\frac{n\sigma^2}{n\sigma^2}=1$. </li>
<li>The central limit theorem: The CDF of $Z_n$ converges to the standard normal CDF in the sense that $\displaystyle\lim_{n\to\infty}P(Z_n≤z)=\Phi(z)$, for all $z$. </li>
<li>This law indicates that the sum of a large number of independent random variables is approximately normal. </li>
<li>This law eliminates the need for detailed probabilistic models, and for tedious manipulations of PMFs and PDFs. </li>
<li>Since normality is preserved uner linear transformations, this is equal to treating $S_n$ as a normal random variable with mean $n\mu$ and variance $\sigma^2$. </li>
<li>Let $z=\displaystyle\frac{c-n\mu}{\sigma\sqrt{n}}$. $P(S_n≤c)\approx\Phi(z)$. </li>
</ol>
<h1 id="De-Moivre-Laplace-Approximation-to-the-Binomial"><a href="#De-Moivre-Laplace-Approximation-to-the-Binomial" class="headerlink" title="De Moivre-Laplace Approximation to the Binomial"></a>De Moivre-Laplace Approximation to the Binomial</h1><ol>
<li>A binomial random variable $S_n$ with parameters $n$ and $p$ can be viewed as the sum of $n$ independent Bernoulli random variables $X_1,…,X_n$, with common parameter $p$. </li>
<li>$k≤S_n≤l\Longleftrightarrow\displaystyle\frac{k-np}{\sqrt{np(1-p)}}≤\frac{S_n-np}{\sqrt{np(1-p)}}≤\frac{l-np}{\sqrt{np(1-p)}}$. <br />$\displaystyle P(k≤S_n≤l)=P\left(\displaystyle\frac{k-np}{\sqrt{np(1-p)}}≤\frac{S_n-np}{\sqrt{np(1-p)}}≤\frac{l-np}{\sqrt{np(1-p)}}\right)\approx\Phi\left(\frac{l-np}{\sqrt{np(1-p)}}\right)-\Phi\left(\frac{k-np}{\sqrt{np(1-p)}}\right)$</li>
<li>An approximation of this form is equivalent to treat $S_n$ as a normal random variable with mean $np$ and variance $np(1-p)$. </li>
<li>A little bug in this approximation is that the approximation of $P(S_n=k)=P(k≤S_n≤k)$ is always zero. So we can fix by calculating with $k-\displaystyle\frac12$ and $l+\displaystyle\frac12$. This is the DeMoivre-Laplace approximation to the Binomial: <br />$\displaystyle P(k≤S_n≤l)\approx\Phi\left(\frac{l+\frac12-np}{\sqrt{np(1-p)}} \right)-\Phi\left(\frac{k-\frac12-np}{\sqrt{np(1-p)}} \right)$</li>
</ol>
<h1 id="The-Strong-Law-of-Large-Numbers"><a href="#The-Strong-Law-of-Large-Numbers" class="headerlink" title="The Strong Law of Large Numbers"></a>The Strong Law of Large Numbers</h1><ol>
<li>Let $X_1,X_2,…$ be a sequence of independent identically distributed random variables with mean $\mu$. Then the sequence of sample means converges to $\mu$, with probability $1$, in the sense that $P\left(\displaystyle\lim_{n\to\infty}\frac{X_1+…X_2}{n}=\mu\right)=1$. </li>
<li>Consider the experiment is infinitely long , so the sample space is a set of infinite sequences of real number. Let set $A$ consist of those sequences whose long-term average is $\mu$. The strong law of large numbers states that all of the probability is concentrated on this particular subset of the sample space. </li>
<li>The collection of outcomes that do not belong to $A$ has probability zero. </li>
<li>The weak law provides no conclusive information on the number of deviations between $M_n$ and $\mu$ as $n$ tends to infinity. The strong law implies that  for any given $\epsilon&gt;0$, the probability that the difference $|M_n-\mu|$ will exceed $\epsilon$ an infintie number of times is equal to zero. </li>
<li>Convergence with probability: $Y_1,Y_2,…$ are a sequence of random variables (not necessarily independent). $c$ is a real number. $Y_n$ converges to $c$ with probability $1$ if $P\left(\displaystyle\lim_{n\to\infty}Y_n=c\right)=1$. </li>
<li>Convergence WITH probabiltiy is different from convergence IN probability. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>概率论 (MIT 6.041)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>13. Least Squares</title>
    <url>/2020/02/01/13-Least-Squares/</url>
    <content><![CDATA[<h1 id="Minimizing-the-Error"><a href="#Minimizing-the-Error" class="headerlink" title="Minimizing the Error"></a>Minimizing the Error</h1><ol>
<li>When $A\vec{x}=\vec{b}$ has no solution, we solve $A\hat{\vec{x}}=\vec{b}’$. And $\vec{e}=\vec{b}-A\hat{\vec{x}}$ is the error vector stands for the difference between $\vec{b}$ and the $\vec{b}’$ we use instead. </li>
<li>$\hat{\vec{x}}$ is called the <code>least squares solution</code>. </li>
<li>Because $\hat{\vec{x}}$ is the best solution, $\hat{\vec{x}}$ makes $E=||e||^2$ as small as possible. </li>
<li>By geometry, to minimize $E$, we only need to make $\vec{e}$ perpendicular to $C(A)$. So the best solution to $A\hat{\vec{x}}$ is $\vec{p}$. </li>
<li>By algebra, $\vec{b}$ splits into two parts. The part in the column space is $\vec{p}$. The perpendicular part is $\vec{e}$. So remove $\vec{e}$ and solve $A\hat{\vec{x}}=\vec{p}$. </li>
<li>For any vector $\vec{x}$, $||A\vec{x}-\vec{b}||^2=||A\vec{x}-\vec{p}||^2+||\vec{e}||^2$. $A\vec{x}-\vec{p}$ which stands for the defference between $\vec{b}’$ and $\vec{p}$ is in $C(A)$ and $\vec{e}$ is in $N(A^T)$. We set $A\vec{x}-\vec{p}$ $\vec{0}$ by choosing $\vec{x}=\hat{\vec{x}}$ to minimize $||A\vec{x}-\vec{b}||$. </li>
<li>By calculus, we need to minimize the function $E=\displaystyle{\sum^n_{i=1}{e_i^2}}$. To do that, we need to solve $\frac{\partial E}{\partial x_i}=0$. After that, we can get a new system of equations $A’\vec{x}=\vec{c}$. Here $A’$ happens to be $A^TA$ and $\vec{c}$ happens to be $A^T\vec{b}$. </li>
<li>The shortage of least squares is that it cannot ignore the wrong data. If a data is wrong, it will be far a way from others and the solution will shift to it. </li>
</ol>
<h1 id="Dependent-Columns-in-A"><a href="#Dependent-Columns-in-A" class="headerlink" title="Dependent Columns in A"></a>Dependent Columns in A</h1><ol>
<li>If A has dependent columns, $A^TA$ isn’t invertible, we cannot use the aforementioned way to get the best solution. </li>
<li>If we insist the projection way, we can change an equation without solution to an equation with infinitely many solutions. </li>
<li>The pseudoinverse will choose the shortest solution to $A\hat{\vec{x}}=\vec{p}$. </li>
</ol>
<h1 id="Applications"><a href="#Applications" class="headerlink" title="Applications"></a>Applications</h1><h2 id="Fitting-a-Straight-Line"><a href="#Fitting-a-Straight-Line" class="headerlink" title="Fitting a Straight Line"></a>Fitting a Straight Line</h2><ol>
<li>We have $m$ dots and want to find a line go through all dots. When we cannot, we want a best line. </li>
<li>If we suppose that line is $C+Dt=b$, we can have the equation $A\left[\begin{matrix}C\\D\end{matrix}\right]=\vec{b}$. $A=\left[\begin{matrix}1&amp;t_1\\1&amp;t_2\\\vdots&amp;\vdots\\1&amp;t_m\end{matrix}\right]$ $\vec{b}=\left[\begin{matrix}b_1\\b_2\\\vdots\\b_m\end{matrix}\right]$</li>
<li>$A^TA=\left[\begin{matrix}m&amp;\sum{t_i}\\\sum{t_i}&amp;\sum{t_i^2}\end{matrix}\right]$<br />$A^T\vec{b}=\left[\begin{matrix}\sum{b_i}\\\sum{t_ib_i}\end{matrix}\right]$<br />The final equation is $\left[\begin{matrix}m&amp;\sum{t_i}\\\sum{t_i}&amp;\sum{t_i^2}\end{matrix}\right]\left[\begin{matrix}C\\D\end{matrix}\right]=\left[\begin{matrix}\sum{b_i}\\\sum{t_ib_i}\end{matrix}\right]$</li>
<li>If two columns of $A$ is orthogonal, i.e. $\sum{t_i}=0$, the final equation becomes $\left[\begin{matrix}m&amp;0\\0&amp;\sum{t_i^2}\end{matrix}\right]\left[\begin{matrix}C\\D\end{matrix}\right]=\left[\begin{matrix}\sum{b_i}\\\sum{t_ib_i}\end{matrix}\right]$ which is a lot easier to solve. So we can orthognize columns of $A$ first by subtracting the average time $\hat{t}=\frac{\sum{t_i}}{m}$ from the last column of $A$. </li>
</ol>
<h2 id="Fitting-by-a-Parabola"><a href="#Fitting-by-a-Parabola" class="headerlink" title="Fitting by a Parabola"></a>Fitting by a Parabola</h2><ol>
<li>Suppose $C+Dt+Et^2=b$. </li>
<li>$A=\left[\begin{matrix}1&amp;t_1&amp;t_1^2\\1&amp;t_2&amp;t_2^2\\\vdots&amp;\vdots&amp;\vdots\\1&amp;t_m&amp;t_m^2\end{matrix}\right]$</li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>线性代数 (MIT 18.06)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>13&amp;14. Persistence and Documents</title>
    <url>/2019/08/21/13&amp;14-Persistence-and-Documents/</url>
    <content><![CDATA[<h1 id="UserDefaults"><a href="#UserDefaults" class="headerlink" title="UserDefaults"></a>UserDefaults</h1><ol>
<li>It only stores Property List data. Property List is any combo of Array, Dictionary, String, Date, Data or a number (Int, etc.). Mark that CGFloat is not allowed. </li>
<li>We don’t usually create one of these databases with <code>UserDefaults()</code>. Instead, you use the static (type) var called <code>standard</code></li>
<li>It just stores and retrieves Property Lists by key.<br>Set property: <code>func set(Any?, forKey: String)</code><br>Get property: <code>func object(forKey: String) -&gt; Any?</code><a id="more"></a></li>
<li>UserDefaults also has API for getting the Property List types as a specific type. </li>
<li>Your database changes will be occasionally autosaved. But you can force them to be saved at any time with synchronize. It’s not “free” to synchronize, but it’s not that expensive either. <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// . 2</span></span><br><span class="line"><span class="keyword">let</span> defaults = <span class="type">UserDefaults</span>.standard</span><br><span class="line"></span><br><span class="line"><span class="comment">// . 3</span></span><br><span class="line"><span class="comment">// Set property</span></span><br><span class="line">defaults.<span class="keyword">set</span>(<span class="number">3.1415</span>, forKey: “pi”)</span><br><span class="line">defaults.<span class="keyword">set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], forKey: “<span class="type">My</span> <span class="type">Array</span>”)</span><br><span class="line">defaults.<span class="keyword">set</span>(<span class="literal">nil</span>, forKey: “<span class="type">Some</span> <span class="type">Setting</span>”)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get property</span></span><br><span class="line">defaults.object(forKey: “pi”)</span><br><span class="line">defaults.object(forKey: “<span class="type">My</span> <span class="type">Array</span>”)</span><br><span class="line">defaults.object(forKey: “<span class="type">Some</span> <span class="type">Setting</span>”)</span><br><span class="line"></span><br><span class="line"><span class="comment">// . 4</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">double</span><span class="params">(forKey: String)</span></span> -&gt; <span class="type">Double</span>                     <span class="comment">// returns 0 if non-Double at that key</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">array</span><span class="params">(forKey: String)</span></span> -&gt; [<span class="type">Any</span>]?                        <span class="comment">// returns nil if non-Array at that key </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dictionary</span><span class="params">(forKey: String)</span></span> -&gt; [<span class="type">String</span>:<span class="type">Any</span>]?     <span class="comment">// note that keys in return are Strings</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// . 5</span></span><br><span class="line"><span class="keyword">if</span> !defaults.synchronize()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// failed! but not clear what you can do about it </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="Archiving"><a href="#Archiving" class="headerlink" title="Archiving"></a>Archiving</h1><h2 id="NSCoder-Old-Mechanism"><a href="#NSCoder-Old-Mechanism" class="headerlink" title="NSCoder (Old Mechanism)"></a>NSCoder (Old Mechanism)</h2><ol>
<li>Requires all objects in an object graph to implement these two methods. </li>
<li>This is how storyboard saved. </li>
<li>Essentially you store all of your object’s data in the coder’s dictionary. Then you have to be able to initialize your object from a coder’s dictionary. </li>
<li>References within the object graph are handled automatically. </li>
<li>You can then take an object graph and turn it into a Data (via <code>NSKeyedArchiver</code>). And then turn a Data back into an object graph (via <code>NSKeyedUnarchiver</code>). </li>
<li><p>Once you have a Data, you can easily write it to a file or otherwise pass it around. </p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// . 1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">encode</span><span class="params">(with aCoder: NSCoder)</span></span></span><br><span class="line"><span class="keyword">init</span>(coder: <span class="type">NSCoder</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Codable-New-Mechanism"><a href="#Codable-New-Mechanism" class="headerlink" title="Codable (New Mechanism)"></a>Codable (New Mechanism)</h2><ol>
<li>Also is essentially a way to store all the vars of an object into a dictionary. To do this, all the objects in the graph of objects you want to store must implement Codable.</li>
<li>But the difference is that, for standard Swift types, Swift will do this for you. If you have non-standard types, you can do something similar to the old method.</li>
<li>Once your object graph is all Codable, you can convert it to either JSON or a Property List. Note that this encode throws. </li>
<li>You can make a String object out of this Data. </li>
<li>To get your object graph back from the JSON. It has four kinds of errors, <code>DecodingError.keyNotFound</code>, <code>DecodingError.valueNotFound</code>, <code>DecodingError.typeMismatch</code>, and <code>DecodingError.dataCorrupted</code></li>
<li>JSON is not “strongly typed.” So things like Date or URL are just strings. </li>
<li>Swift handles all this automatically and is even configurable. </li>
<li>Sometimes JSON keys might have different names than your var names (or not be included). You can configure this by adding a private enum to your type called CodingKeys. </li>
<li>You can participate directly in the decoding by implementing the decoding initializer. Note that this init throws, so we don’t need do { } inside it (it will just rethrow).<br>Also note the “keys” are from the CodingKeys enum (e.g. .someDate). Don’t call super.init with your own decoder (use your container’s superDecoder()). </li>
<li>If we want our own structure or class codable, we just conform prorocol <code>Codable</code>. <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// . 3</span></span><br><span class="line"><span class="keyword">let</span> object: <span class="type">MyType</span> = ...</span><br><span class="line"><span class="keyword">let</span> jsonData: <span class="type">Data?</span> = <span class="keyword">try</span>? <span class="type">JSONEncoder</span>().encode(object)</span><br><span class="line"></span><br><span class="line"><span class="comment">// . 4</span></span><br><span class="line"><span class="keyword">let</span> jsonString = <span class="type">String</span>(data: jsonData!, encoding: .utf8) <span class="comment">// JSON is always utf8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// . 5</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">let</span> object = <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode(<span class="type">MyType</span>.<span class="keyword">self</span>, from: jsonData!)</span><br><span class="line">	<span class="comment">// success, do something with object</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> <span class="type">DecodingError</span>.keyNotFound(<span class="keyword">let</span> key, <span class="keyword">let</span> context)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// …</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> <span class="type">DecodingError</span>.valueNotFound(<span class="keyword">let</span> type, <span class="keyword">let</span> context)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// …</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> <span class="type">DecodingError</span>.typeMismatch(<span class="keyword">let</span> type, <span class="keyword">let</span> context)</span><br><span class="line">&#123;</span><br><span class="line">  	<span class="comment">// …</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> <span class="type">DecodingError</span>.dataCorrupted(<span class="keyword">let</span> context)</span><br><span class="line">&#123;</span><br><span class="line">  	<span class="comment">// …</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// . 7</span></span><br><span class="line"><span class="keyword">let</span> decoder = <span class="type">JSONDecoder</span>()</span><br><span class="line">decoder.dateDecodingStrategy = .iso8601 <span class="comment">// or .secondsSince1970, etc. </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// . 8</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyType</span> : <span class="title">Codable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> someDate: <span class="type">Date</span></span><br><span class="line">	<span class="keyword">var</span> someString: <span class="type">String</span></span><br><span class="line">	<span class="keyword">var</span> other: <span class="type">SomeOtherType</span> <span class="comment">// SomeOtherType has to be Codable too!</span></span><br><span class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">enum</span> <span class="title">CodingKeys</span> : <span class="title">String</span>, <span class="title">CodingKey</span></span></span><br><span class="line"><span class="class">  </span>&#123;</span><br><span class="line">		<span class="keyword">case</span> someDate = “some_date”</span><br><span class="line">		<span class="comment">// note that the someString var will now not be included in the JSON</span></span><br><span class="line">		<span class="keyword">case</span> other <span class="comment">// this key is also called “other” in JSON </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// . 9</span></span><br><span class="line"><span class="keyword">init</span>(from decoder: <span class="type">Decoder</span>) <span class="keyword">throws</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">let</span> container = <span class="keyword">try</span> decoder.container(keyedBy: <span class="type">CodingKeys</span>.<span class="keyword">self</span>)</span><br><span class="line">  someDate = <span class="keyword">try</span> container.decode(<span class="type">Date</span>.<span class="keyword">self</span>, forKey: .someDate)</span><br><span class="line">  <span class="comment">// process rest of vars, perhaps validating input, etc. ...</span></span><br><span class="line">	<span class="keyword">let</span> superDecoder = <span class="keyword">try</span> container.superDecoder()</span><br><span class="line">	<span class="keyword">try</span> <span class="keyword">super</span>.<span class="keyword">init</span>(from: superDecoder) <span class="comment">// only if class</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="File-System"><a href="#File-System" class="headerlink" title="File System"></a>File System</h1><ol>
<li>Your application sees iOS file system like a normal Unix filesystem. It starts at <code>/.</code></li>
<li>There are file protections, of course, like normal Unix, so you can’t see everything. In fact, you can only read and write in your application’s “sandbox”.</li>
<li>Sandbox has three great features.<br>Security (so no one else can damage your application)<br>Privacy (so no other applications can view your application’s data)<br>Cleanup (when you delete an application, everything it has ever written goes with it)</li>
<li>In the sandbox, there are four main files.<br>Application directory — Your executable, .storyboards, .jpgs, etc.; not writeable. If have to write, copy to somewhere else then write.<br>Documents directory — Permanent storage created by and always visible to the user in the File app.<br>Application Support directory — Permanent storage not seen directly by the user.<br>Caches directory — Store temporary files here (this is not backed up by iTunes).</li>
<li>We can create those files in sandbox with <code>FileManager.default.url</code>. It returns a URL which is the URL of one of the files in sandbox. </li>
<li>FileManager (along with URL) is what you use to find out about what’s in the file system. </li>
<li>Reading binary data from a URL and Writing binary data to a URL. The options can be things like <code>.atomic</code> (write to tmp file, then swap) or <code>.withoutOverwriting</code>. </li>
<li>Reading acrions usually happens at <code>viewWillAppear</code>.  <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// . 5</span></span><br><span class="line"><span class="keyword">let</span> url: <span class="type">URL</span> = <span class="type">FileManager</span>.<span class="keyword">default</span>.url(</span><br><span class="line">	<span class="keyword">for</span> directory: <span class="type">FileManager</span>.<span class="type">SearchPathDirectory</span>.documentDirectory, <span class="comment">// for example </span></span><br><span class="line">  <span class="keyword">in</span> domainMask: .userDomainMask <span class="comment">// always .userDomainMask on iOS</span></span><br><span class="line">  appropriateFor: <span class="literal">nil</span>, <span class="comment">// only when want to replace a file, it's not nil. Otherwise, it always is nil. </span></span><br><span class="line">  create: <span class="literal">true</span> <span class="comment">// whether to create the system directory if it doesn’t already exist</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// . 7</span></span><br><span class="line"><span class="keyword">init</span>(contentsOf: <span class="type">URL</span>, options: <span class="type">Data</span>.<span class="type">ReadingOptions</span>) <span class="keyword">throws</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">write</span><span class="params">(to url: URL, options: Data.WritingOptions)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">Bool</span>  <span class="comment">// This is an instance method of Data</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="Core-Data"><a href="#Core-Data" class="headerlink" title="Core Data"></a>Core Data</h1><ol>
<li>Core Data is essentially a <code>SQL</code> database with an <code>objected-oriented</code> API. So you interact with this database it looks like Swift objects, but behind the scene those Swift objects are actually in a <code>SQL</code> database. </li>
<li>To use Core Data, we need to create a <code>visual mapping</code> (using <code>Xcode tool</code>) between database and objects. Then create and query for objects using object-oriented API. We can access the “columns in the database table” using vars on those objects. </li>
<li>Core Data is access via an <code>NSManagedObjectContext</code>. To get the NSManagedObjectContext, there are two ways.<br>First is check the <code>Use Core Data</code> when create project and that will create a method that will give you the context for you in <code>AppDelegate</code>.<br>Second is use a subclass of UIDocument. </li>
<li>When using it, we first create an instance with the context and use the instance normally. </li>
<li>We can delete objects from the context and save changes to a context which throws. </li>
<li>Query data from that context.<br>First, we create an <code>NSFetchRequest</code> of our class/structure use <code>MyClass.fetchRequest()</code><br>Seconde, we configure the NSPredicate instance such as <code>predicate</code> and <code>sortDescriptors</code><br>Last, we use the <code>fetch</code> method of context and give the NSFetchRequest to it. </li>
</ol>
<h1 id="Cloud-Kit"><a href="#Cloud-Kit" class="headerlink" title="Cloud Kit"></a>Cloud Kit</h1><ol>
<li>It’s a database in the cloud. Simple to use, but with very basic “database” operations. </li>
<li>Since it’s on the network, accessing the database could be slow or even impossible. </li>
<li>It has several important components. Record Type - like a class or struct<br>Fields - like vars in a class or struct<br>Record - an “instance” of a Record Type<br>Reference - a “pointer” to another Record<br>Database - a place where Records are stored<br>Zone - a sub-area of a Database<br>Container - collection of Databases<br>Query - an Database search<br>Subscription - a “standing Query” which sends push notifications when changes occur. </li>
<li>To do this, you must enable iCloud in Project Settings.  Under Capabilities tab, turn on iCloud (On/Off switch). Then, choose CloudKit from the Services.</li>
<li>To create a record in a database.<br>First, we create a container using <code>CKContainer.default.publicCloudDatabase</code><br>Second, we create a record using <code>CKRecord(String)</code><br>Third, we can add a record to another using <code>CKReference(record: , action: )</code><br>Last, we can save the record to container using <code>save(CKRecord, (CKRecord?, NSError?) -&gt; Void)</code>. Remember to handle 29 different <code>CKErrorCodes</code> in the closure. </li>
<li>To query records in database.<br>First, create an <code>NSPredicate</code> and a <code>CKQuery</code> with <code>CKQuery(recordType, predicate)</code>.<br>Then we let the container use the <code>perform(CKQuery, ([CKRecord]?, NSError?) -&gt; void)</code></li>
</ol>
<h1 id="UIDocument"><a href="#UIDocument" class="headerlink" title="UIDocument"></a>UIDocument</h1><h2 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h2><ol>
<li>If your application stores user information in a way the user perceives as a “document”. Or if you just want iOS to manage the primary storage of user information. That is when we use the UIDocument. </li>
<li>UIDocument has four main functions.<br>Manages all interaction with storage devices (not just filesystem, but also iCloud, Box, etc.).<br>Provides asynchronous opening, writing, reading and closing of files.<br>Autosaves your document data.<br>Makes integration with Files application essentially free. </li>
</ol>
<h2 id="Create-A-UIDocument"><a href="#Create-A-UIDocument" class="headerlink" title="Create A UIDocument"></a>Create A UIDocument</h2><ol>
<li>Create a subclass UIDocument to add vars to hold the Model of your MVC that shows your “document”. </li>
<li>Then implement one method that writes the Model to a Data and one that reads it from a Data. </li>
<li>You can use UIDocument’s opening, saving and closing methods as needed. </li>
<li>You can also use its “document has changed” method (or implement undo) to get autosaving.</li>
<li>To create a UIDocument, we can use the intializer with a parameter called <code>fileURL</code> type of <code>URL</code>. </li>
<li>Then we just need to assign our whole Model instance at View Controller to the variable at UIDocument instance. </li>
</ol>
<h2 id="Convert-between-Model-and-Data"><a href="#Convert-between-Model-and-Data" class="headerlink" title="Convert between Model and Data"></a>Convert between Model and Data</h2><ol>
<li>Override the <code>contents</code> method in your UIDocument subclass to convert your Model into a Data. </li>
<li>Note that the return type is Any, that’s because file format can also be a FileWrapper. </li>
<li>If you can’t create a Data or FileWrapper, you can throw an error here. </li>
<li>The <code>forType</code> is a <code>UTI (type identifier)</code> calculated from your fileURL’s file extension</li>
<li>A FileWrapper represents a directory full of files that make up your document. </li>
<li>Override the <code>load</code> method in your UIDocument subclass to a Data into an instance of your Model.<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// . 1</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">contents</span><span class="params">(forType typeName: String)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">Any</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="type">Model</span> converted into a <span class="type">Data</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// . 6</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">load</span><span class="params">(fromContents contents: <span class="keyword">Any</span>, ofType typeName: String?)</span></span> <span class="keyword">throws</span></span><br><span class="line">&#123;</span><br><span class="line">	emojiArt = contents converted into an instance of <span class="type">Model</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Open-and-Close"><a href="#Open-and-Close" class="headerlink" title="Open and Close"></a>Open and Close</h2><ol>
<li>You can open your document with method <code>open</code> which takes a closure as a parameter. </li>
<li>That closure takes a bool value which represent whether successfully opened that document, <code>true</code> for success and <code>false</code> for fail. </li>
<li>This method is asynchronous. The closure is called on the same thread you call open from (the main thread usually). </li>
<li>The <code>close</code> method is exactly the same. <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">myDocument.<span class="keyword">open</span> &#123; success <span class="keyword">in</span></span><br><span class="line">	<span class="keyword">if</span> success</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// your Model var(s) (e.g. emojiArt) is/are ready to use</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// there was a problem, check documentState </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myDocument.close &#123; success <span class="keyword">in</span></span><br><span class="line">	<span class="keyword">if</span> success</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// your Model has successfully been saved and closed</span></span><br><span class="line">		<span class="comment">// use the open method again if you want to use it</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// there was a problem, check documentState </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Save"><a href="#Save" class="headerlink" title="Save"></a>Save</h2><ol>
<li>You can let your document know that the Model has changed with <code>updateChangeCount</code> method. The parameter could also be <code>.undo</code> and <code>.redo</code>. </li>
<li>You can use UIDocument’s <code>undoManager</code>. UIDocument will save your changes automatically at the next best opportunity.</li>
<li>You can force a save using <code>save</code> method which takes a <code>URL</code>, a <code>UIDocumentSaveOperation</code> and a closure like the same in open method. </li>
<li><code>UIDocumentSaveOperation</code> is either <code>.forCreating</code> or <code>.forOverwriting</code>. <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// . 1</span></span><br><span class="line">myDocument.updateChangeCount(.done)</span><br><span class="line"></span><br><span class="line"><span class="comment">// . 3</span></span><br><span class="line"><span class="keyword">let</span> url = myDocument.fileURL <span class="comment">// or something else if you want “save as” </span></span><br><span class="line">myDocument.save(to url: <span class="type">URL</span>, <span class="keyword">for</span>: <span class="type">UIDocumentSaveOperation</span>) &#123; success <span class="keyword">in</span></span><br><span class="line">	<span class="keyword">if</span> success </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// your Model has successfully been saved</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// there was a problem, check documentState </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Document-State"><a href="#Document-State" class="headerlink" title="Document State"></a>Document State</h2><ol>
<li>You can find out what state it is in using <code>var documentState: UIDocumentState</code>. </li>
<li>It has the following states. </li>
<li><code>.normal</code> — document is open and ready for use!</li>
<li><code>.closed</code> — document is closed and must be opened to be used</li>
<li><code>.savingError</code> — document couldn’t be saved (override <code>handleError</code> if you want to know why)</li>
<li><code>.editingDisabled</code> — the document cannot currently be edited (so don’t let your UI do that)</li>
<li><code>.progressAvailable</code> — how far a large document is in getting loaded (check progress var)</li>
<li><code>.inConflict</code> — someone edited this document somewhere else (iCloud)</li>
<li>To resolve conflicts, you access the conflicting versions with <code>NSFileVersion.unresolvedConflictVersionsOfItem(at url: URL) -&gt; [NSFileVersion]?</code>. For the best UI, you could give your user the choice of which version to use. </li>
<li>documentState can be “observed” using the <code>UIDocumentStateChanged</code> notification. </li>
</ol>
<h2 id="Thumbnail"><a href="#Thumbnail" class="headerlink" title="Thumbnail"></a>Thumbnail</h2><ol>
<li>You can specify a thumbnail image for your UIDocument. It can make it much easier for users to find the document they want in Files. </li>
<li>Essentially you are going to override the UIDocument method which sets file attributes. The attributes are returned as a dictionary. </li>
<li>One of the keys is for the thumbnail (it’s a convoluted key)<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">fileAttributesToWrite</span><span class="params">(to url: URL, <span class="keyword">for</span> operation: UIDocumentSaveOperation)</span></span> <span class="keyword">throws</span> -&gt; [<span class="type">AnyHashable</span> : <span class="type">Any</span>] </span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">var</span> attributes = <span class="keyword">try</span> <span class="keyword">super</span>.fileAttributesToWrite(to: url, <span class="keyword">for</span>: saveOperation)</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">let</span> thumbnail: <span class="type">UIImage</span> = ... </span><br><span class="line">  &#123;</span><br><span class="line">		attributes[<span class="type">URLResourceKey</span>.thumbnailDictionaryKey] =</span><br><span class="line">		[<span class="type">URLThumbnailDictionaryItem</span>.<span class="type">NSThumbnail1024x1024SizeKey</span>:thumbnail]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> attributes</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="UIDocumentBrowserViewController"><a href="#UIDocumentBrowserViewController" class="headerlink" title="UIDocumentBrowserViewController"></a>UIDocumentBrowserViewController</h1><ol>
<li>UIDBVC allows users to be able to easily manage documents in a document-based app. Choosing files to open, renaming files, moving them, accessing iCloud drive, etc.</li>
<li>UIDBVC has to be the root view controller in storyboard (i.e. the arrow points to it). </li>
<li>Your document-editing MVC will then be presented modally on top of (i.e. takes over the screen). </li>
<li>To make all this work, you need an entry in your <code>Info.plist</code>. And add <code>Supports Document Browser</code> type of <code>Boolean</code> and value of <code>true</code>. </li>
</ol>
<h2 id="Set-Document-Type-To-Open"><a href="#Set-Document-Type-To-Open" class="headerlink" title="Set Document Type To Open"></a>Set Document Type To Open</h2><ol>
<li>To use the UIDBVC, you have to register which types your application uses. </li>
<li>You do this in the <code>Project Settings</code> in the <code>Info tab</code> with your Target selected. </li>
<li>In the Document Types area, add the types you support. </li>
<li>The Types field is the UTI of the type you want to support (e.g. public.json, public.image).<br><img src="/img/13&amp;14.PersistenceandDocuments01.png" alt="Set type"></li>
</ol>
<h2 id="Declare-Your-Own-Document-Type"><a href="#Declare-Your-Own-Document-Type" class="headerlink" title="Declare Your Own Document Type"></a>Declare Your Own Document Type</h2><ol>
<li>You might have a custom document type that your application edits. </li>
<li>You can add this under Exported UTIs in the same place in Project Settings. </li>
<li>The identifier is the “UTI” that we keep referring to. It’s like public.json is for JSON. </li>
<li>Then add it as a supported Document Type. </li>
<li>In the Additional exported UTI properties, we set <code>public.filename-extension</code> to its extension.<br><img src="/img/13&amp;14.PersistenceandDocuments02.png" alt="Declare Type"></li>
</ol>
<h2 id="Open-Document-at-the-Request-of-Other-Apps"><a href="#Open-Document-at-the-Request-of-Other-Apps" class="headerlink" title="Open Document at the Request of Other Apps"></a>Open Document at the Request of Other Apps</h2><ol>
<li>A user can now click on a document of your type in Files (or another app can ask to open one)</li>
<li>When this happens, your AppDelegate gets a message sent to <code>func application(UIApplication, open: URL, options: [UIApplicationOpenURLOptionsKey:Any]) -&gt; Bool</code></li>
<li>Inside here, you can ask your UIDocumentBrowserViewController to show this document. <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> uidbvc = window?.rootViewController <span class="keyword">as</span>? <span class="type">UIDBVC</span> <span class="comment">// since it’s “arrowed” in storyboard </span></span><br><span class="line">uidbvc.revealDocument(at: <span class="type">URL</span>, importIfNeeded: <span class="literal">true</span>) &#123; (url, error) <span class="keyword">in</span></span><br><span class="line">	<span class="keyword">if</span> error != <span class="literal">nil</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// present a UIDocument at url modally (more on how to do this in a moment)</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// handle the error </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Xcode-Template"><a href="#Xcode-Template" class="headerlink" title="Xcode Template"></a>Xcode Template</h2><h3 id="What-New-in-the-Xcode-Template"><a href="#What-New-in-the-Xcode-Template" class="headerlink" title="What New in the Xcode Template"></a>What New in the Xcode Template</h3><ol>
<li>A stub for Document Types in Project Settings (supports public.image file types)</li>
<li>The Info.plist entry <code>Supports Document Browser = YES</code>. </li>
<li>The code in AppDelegate to reveal a document. </li>
<li>A stubbed out UIDocument subclass (with empty contents and load(fromContents) methods) called <code>Document</code></li>
<li>A stubbed out MVC to display a document (just calls UIDocument’s open and close methods) called <code>DocumentViewController</code></li>
<li>A subclass of UIDocumentBrowserViewController (with almost everything implemented) <code>DocumentBrowserViewController</code></li>
</ol>
<h3 id="What-to-Do-to-Use-It"><a href="#What-to-Do-to-Use-It" class="headerlink" title="What to Do to Use It"></a>What to Do to Use It</h3><ol>
<li>Use your UIDocument subclass instead of the stubbed out one. </li>
<li>Use your document-viewing MVC code (already using UIDocument) instead of stub. </li>
<li>Configuring the UIDBVC (allow multiple selection? creation of new documents? etc.) in <code>viewDidLoad</code></li>
<li>Specify the url of a template document to copy to create new documents. Usually you would specify .copy, but you could create a new template each time and .move. Likely you would have some code here that creates that blank template (or ship with your app).</li>
<li>Presenting your document MVC modally. The Xcode template stubs out a function called <code>presentDocument(at: URL)</code> to do this. You can call this function anything you want.<br>But the point is that it takes a URL to one of your documents and you show it.<br>The Xcode template then calls this from the appropriate delegate methods in UIDBVC.</li>
<li>Update the Document Types in Project Settings to be your type. <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .  3</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">	delegate = <span class="keyword">self</span> <span class="comment">// the guts of making UIDBVC work are in its delegate methods </span></span><br><span class="line">  allowsDocumentCreation = <span class="literal">true</span></span><br><span class="line">	allowsPickingMultipleItems = <span class="literal">true</span></span><br><span class="line">	browserUserInterfaceStyle = .dark</span><br><span class="line">	view.tintColor = .white</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// . 4</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">documentBrowser</span><span class="params">(<span class="number">_</span> controller: UIDBVC, didRequestDocumentCreationWithHandler handler: @escaping <span class="params">(URL?, UIDBVC.ImportMode)</span></span></span> -&gt; <span class="type">Void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> url: <span class="type">URL?</span> = …</span><br><span class="line">	importHandler(url, .copy or .move) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// . 5</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">presentDocument</span><span class="params">(at url: URL)</span></span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">let</span> story = <span class="type">UIStoryboard</span>(name: “<span class="type">Main</span>”, bundle: <span class="literal">nil</span>)</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">let</span> docvc = story.instantiateViewController(withIdentifier: “<span class="type">DocVC</span>”) <span class="keyword">as</span>? <span class="type">DocVC</span></span><br><span class="line">  &#123;</span><br><span class="line">		docvc.document = <span class="type">MyDocument</span>(fileURL: url)</span><br><span class="line">		present(docvc, animated: <span class="literal">true</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Aside-Present-An-MVC-Without-Segue"><a href="#Aside-Present-An-MVC-Without-Segue" class="headerlink" title="Aside: Present An MVC Without Segue"></a>Aside: Present An MVC Without Segue</h3><ol>
<li>You present a new MVC from an existing MVC using <code>present(animated:)</code>.</li>
<li>You get new MVC from your storyboard using its identifier which you set in Identity Inspector . <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> storyboard = <span class="type">UIStoryboard</span>(name: “<span class="type">Main</span>”, bundle: <span class="literal">nil</span>) <span class="comment">// Main.storyboard</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> newVC = storyboard.instantiateViewController(withIdentifier: “<span class="type">MyVC</span>”) <span class="keyword">as</span>? <span class="type">MyVC</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// “prepare” newMVC and then present(animated:) it</span></span><br><span class="line">  existingVC.present(newVC, animated: <span class="literal">true</span>)</span><br><span class="line">  &#123;</span><br><span class="line">		<span class="comment">// completion handler called when the presentation completes animating</span></span><br><span class="line">		<span class="comment">// (can be left out entirely if you don’t need to do anything upon completion)</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>Swift开发 (Stanford CS193p)</category>
      </categories>
      <tags>
        <tag>应用开发</tag>
        <tag>Swift</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>14. Bayesian Statistical Inference</title>
    <url>/2020/03/21/14-Bayesian-Statistical-Inference/</url>
    <content><![CDATA[<h1 id="Statistics"><a href="#Statistics" class="headerlink" title="Statistics"></a>Statistics</h1><ol>
<li>In probability, every unambiguous question has a unique correct answer. </li>
<li>But in statistics, for any particular problem, there may be several reasonable methods, yielding different answers. In general, there is no principled way for selecting the best method, unless one makes several assumptions and imposes additional constraints on the inference problem. </li>
<li>We can narrow down the search for the right method by requiring certain desirable properties. </li>
<li>The choice of one method over another usually hinges on several factors: performance guarantees, past experience, common sense, as well as the consensus of the statistics community on the applicability of a particular method on a particular problem type. </li>
<li>Bayesian statistics treats unknown parameters as random variables with known prior distributions. </li>
<li>In parameter estimation, we want to generate estimates that are close to the true values of the parameters in some probabilistic sense. </li>
<li>In hypothesis testing, the unknown parameter takes one of a finite number of values, corresponding to competing hypotheses; we want to choose one of the hypotheses, aiming to achieve a small probability of error. </li>
</ol>
<h1 id="Bayesian-Inference-and-the-Posterior-Distribution"><a href="#Bayesian-Inference-and-the-Posterior-Distribution" class="headerlink" title="Bayesian Inference and the Posterior Distribution"></a>Bayesian Inference and the Posterior Distribution</h1><ol>
<li>In Bayesian inference, the unknown quantity of interest, which we denote by $\Theta$, is modeled as a random variable or as a finite collection of random variables. </li>
<li>We aim to extract information about $\Theta$, based on observing a collection $X=(X_1,…,X_n)$ of related random variables, called observations, measurements, or an observation vector. </li>
<li>In Bayesian Inference, we start with a prior distribution $p_\Theta$ or $f_\Theta$ for the unknown random variable $\Theta$. We have a model $p_{X|\Theta}$ or $f_{X|\Theta}$ of the observation vector $X$. After observing the value $x$ of $X$, we form the posterior distribution $p_{\Theta|X}$ or $f_{\Theta|X}$, using the appropriate version of Bayes’s rule. </li>
<li>Once a particular value $x$ of $X$ has been ovserved, a complete answer to the Bayesian inference problem is provided by the posterior distribution of $\Theta$. </li>
<li>The case of multiple unknown parameters is entirely similar. </li>
<li>After getting the posterior distribution, we are certainly to make some decision with it to minimize the probability of error. </li>
</ol>
<h1 id="Hypothesis-and-Estimate"><a href="#Hypothesis-and-Estimate" class="headerlink" title="Hypothesis and Estimate"></a>Hypothesis and Estimate</h1><ol>
<li>An estimator is a random variable of the form $\hat\Theta=g(X)$, for some function $g$. Different choices of $g$ correspond to different estimators. </li>
<li>An estimate is the value $\hat\theta$ of an estimator, as determined by the realized value $x$ of observation $X$. </li>
<li>In estimation problem, $\Theta$ is continuous. In hypothesis problem, $\Theta$ is descrete with small sample space. </li>
</ol>
<h2 id="MAP"><a href="#MAP" class="headerlink" title="MAP"></a>MAP</h2><ol>
<li>One way to make the decision is to use the Maximum a Posteriori probability (MAP) rule. <br />Given the value $x$ of the observation, we select a value of $\theta$, denoted $\hat\theta$, that maximizes the posterior distribution. Namely: <br /><script type="math/tex">\hat\theta=\left\{\begin{array}{}arg\ max_\theta\ p_{\Theta|X}(\theta|x)&\Theta\ is\ discrete\\arg\ max_\theta\ f_{\Theta|X}(\theta|x)&\Theta\ is\ continuous \end{array}\right.</script></li>
<li>The denominator of the posterior distribution $p_X$ or $f_X$ which is $\Theta$ independent. Thus, to maximize the posterior, we only need to choose a value of $\theta$ that maximizes the numerator. </li>
<li>If $\Theta$ takes only a finite number of values, the MAP rule minimizes (over all decision rules) the probability of selecting an incorrect hypothesis. This is true for both the unconditional probability of error and the conditional one, given any observation value $x$. </li>
<li>In the absence of additional assumptions, a point estimate carries no guarantees on its accuracy. Thus, it’s usually desirable to also report some additional information, such as the conditional mean squared error. </li>
</ol>
<h2 id="LMS"><a href="#LMS" class="headerlink" title="LMS"></a>LMS</h2><ol>
<li>This rule tries to minimize $E[(\Theta-c)^2]$, where $c$ is the estimate. <br />Expand this to get $E[\Theta^2]-2cE[\Theta]+c^2$. The minimum is achieved at $c=E[\Theta]$. </li>
<li>So the optimal estimate is $E[\Theta]$. And the error is $E[(\Theta-E[\Theta])^2]=var(\Theta)$. </li>
<li>The conditional case is the same. Minimize $E[(\Theta-c)^2|X=x]$ is minimized by $c=[\Theta|X=x]$. </li>
<li>$E[\Theta|X]$ minimizes $E[(\Theta-g(X))^2]$ over all estimators $g(\cdot)$. </li>
<li>If we have multiple observations, $\hat\theta=E[\Theta|X_1,…,X_n]$, $E[(\Theta-E[\Theta|X_1,…,X_n])^2]≤E[(\Theta-g(X_1,…,X_n))^2]$ for all estimators $g(X_1,…,X_n)$. </li>
<li>If we have multiple parameters, we need to minimize $E[(\Theta_1-\hat\Theta_1)^2]+…+E[(\Theta_m-\hat\Theta_m)^2]$. The result is $\hat\Theta_i=E[\Theta_i|X_1,…,X_n]$. </li>
</ol>
<h3 id="Estimation-Error"><a href="#Estimation-Error" class="headerlink" title="Estimation Error"></a>Estimation Error</h3><ol>
<li>Let $\hat\Theta=E[\Theta|X]$ be the LMS estimator and $\tilde\Theta=\hat\Theta-\Theta$ be the associated estimation error. </li>
<li>The estimation error $\tilde\Theta$ is unbiased, i.e. it has zero unconditional and conditional mean $E[\tilde\Theta]=0$ and $E[\tilde\Theta|X=x]=0$ for all $x$. </li>
<li>The estimation error $\tilde\Theta$ is uncorrelated with the estimate $\hat\Theta$: $cov(\hat\Theta, \tilde\Theta)=0$. </li>
<li>The variance of $\Theta$ can be decomposed as $var(\Theta)=var(\hat\Theta)+var(\tilde\Theta)$. </li>
</ol>
<h3 id="Linear-LMS"><a href="#Linear-LMS" class="headerlink" title="Linear LMS"></a>Linear LMS</h3><ol>
<li>The calculation for multiple observations and multiple parameters might be hard. So we might choose another way to estimate. </li>
<li>A linear estimator of a random variable $\Theta$, based on observations $X_1,…,X_n$ has form $\hat\Theta=a_1X_1+…+a_nX_n+b$. </li>
<li>Given a particular choice of the scalars $a_1,…,a_n,b$, the corresponding mean squared error is $E[(\Theta-a_1X_1-…-a_nX_n-b)^2]$. </li>
</ol>
<h4 id="Single-Observation"><a href="#Single-Observation" class="headerlink" title="Single Observation"></a>Single Observation</h4><ol>
<li>Suppose that $a$ has already been chosen. This is the same as choosing a constant $b$ to estimate the random variable $\Theta-aX$. The best choice is $b=E[\Theta-aX]=E[\Theta]-aE[X]$. </li>
<li>Now we only need to minimize $E[(\Theta-aX-E[\Theta]+aE[X])^2]$. </li>
<li>Rewrite this expression as $var(\Theta-aX)=\sigma_\Theta^2+a^2\sigma_X^2+2cov(\Theta,-aX)=\sigma_\Theta^2+a^2\sigma_X-2a\cdot cov(\Theta,X)$. </li>
<li>To minimize $var(\Theta-aX)$, we set its derivative to zero and solve for $a$. This yields $a=\displaystyle\frac{cov(\Theta,X)}{\sigma^2_X}=\frac{\rho\sigma_\Theta\sigma_X}{\sigma^2_X}=\rho\frac{\sigma_\Theta}{\sigma_X}$, where $\rho=\displaystyle\frac{cov(\Theta,X)}{\sigma_\Theta\sigma_X}$. </li>
<li>The mean squared estimation error of the resulting linear estimator $\hat\Theta$ is given by $var(\Theta-\hat\Theta)=(1-\rho^2)\sigma^2_\Theta$. </li>
</ol>
<h4 id="Multiple-Observations-and-Multiple-Parameters"><a href="#Multiple-Observations-and-Multiple-Parameters" class="headerlink" title="Multiple Observations and Multiple Parameters"></a>Multiple Observations and Multiple Parameters</h4><ol>
<li>To minimize $E[(\Theta_1-\hat\Theta_1)^2]+…+E[(\Theta_m-\hat\Theta_m)^2]$, only need to minmize each $E[(\Theta_1-\hat\Theta_i)^2]$. So we are essentially dealing with $m$ decoupled linear estimation problems, one for each unknown parameter. </li>
<li>For every observation, we have $X_i=\Theta+W_i$, where the $W_i$ are random variables with mean $0$ and variance $\sigma_i^2$, which represent observation errors. </li>
<li>The linear LMS estimator of $\Theta$ based on the observations $X_1,…,X_n$ turns out to be $\hat\Theta_i=\displaystyle\frac{\displaystyle\frac{\mu_i}{\sigma_{0i}^2}+\displaystyle\sum^n_{i=1}\frac{X_i}{\sigma^2_i}}{\displaystyle\sum^n_{i=0}\frac{1}{\sigma^2_i}}$. $\mu_i$ is the mean of $\Theta_i$ while $\sigma_{0i}^2$ is the variance of $\Theta_i$. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>概率论 (MIT 6.041)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>13. Partial Fractions and Integration by Parts</title>
    <url>/2020/02/17/13-Partial-Fractions-Integration-by-Parts/</url>
    <content><![CDATA[<h1 id="Partial-Fractions"><a href="#Partial-Fractions" class="headerlink" title="Partial Fractions"></a>Partial Fractions</h1><ol>
<li>This kind of problem has form <script type="math/tex">\displaystyle\frac{P(x)}{Q(x)}</script> where <script type="math/tex">P(x)</script> and <script type="math/tex">Q(x)</script> are polynomials with only whole powers. </li>
<li>If <script type="math/tex">Q(x)</script> can be factored into distinct linear terms and degree of <script type="math/tex">P(x)</script> is smaller than <script type="math/tex">Q(x)</script> the strategy here is: <br />&emsp;<code>Factor</code>: Factor the denominator <script type="math/tex">Q(x)</script> in to <script type="math/tex">(a_1x+b_1)(a_2x+b_2)…</script><br />&emsp;<code>Set-up</code>: Assume the original equation is equal to <script type="math/tex">\displaystyle\frac{A}{a_1x+b_1}+\frac{B}{a_2x+b_2}+…</script><br />&emsp;<code>Cover-up</code>: Solve the unknowns <script type="math/tex">A,B,…</script><br />&emsp;&emsp;When solving the unknowns, a quicker way is to multiply <script type="math/tex">a_ix+b_i</script> and then plug in <script type="math/tex">x=-\displaystyle\frac{b_i}{a_i}</script> to make all other terms <script type="math/tex">0</script>. </li>
<li>If <script type="math/tex">Q(x)</script> has repeated linear terms, in set-up step, we need to contain all terms with power from <script type="math/tex">1</script> to <script type="math/tex">n</script> for all terms <script type="math/tex">(a_ix+b_i)^n</script> in <script type="math/tex">Q(x)</script>. And in the cover-up step, all the lower order term needs some special number. </li>
<li>If <script type="math/tex">Q(x)</script> has nonlinear terms, in set-up step, the numerators are <script type="math/tex">Ax^{n-1}+Bx^{n-2}+…Cx+D</script> for all terms <script type="math/tex">a_ix^n+b_ix^{n-1}+…+c_ix+d_i</script>. And we can use the cover-up to solution the ordinary terms, but for the higher order terms, we must compare the coefficients of the two sides after multiplied the denominator. </li>
<li>If the dgree of <script type="math/tex">P(x)</script> is larger than <script type="math/tex">Q(x)</script>, we use the long-division to factor <script type="math/tex">P(x)</script> into <script type="math/tex">quotient\cdot Q(x)+remainder</script>. So the original equation is <script type="math/tex">quotient+\displaystyle\frac{remainder}{Q(x)}</script>. The first part is easy and the second part is one of the aforementioned situations. </li>
<li>After all those steps, when integrating, we split all terms into terms with only one term in the numerators. </li>
</ol>
<h1 id="Integration-by-Parts"><a href="#Integration-by-Parts" class="headerlink" title="Integration by Parts"></a>Integration by Parts</h1><ol>
<li>In derivative, <script type="math/tex">(uv)'=u'v+uv'</script>. Rewrite it to <script type="math/tex">uv'=(uv)'-u'v</script>. Integrate both sides of euqation, <script type="math/tex">\displaystyle\int uv'dx= uv-\int u'vdx</script>. </li>
<li>Use the substitution to the equation, <script type="math/tex">\displaystyle\int udv=uv-\int vdu</script></li>
<li><code>Reduction formula</code>: <br />If <script type="math/tex">F_n(x)=\displaystyle\int(ln\ x)^ndx</script>, then <script type="math/tex">F_n=x(ln\ x)^n-nF_{n-1}(x)</script>. <br />If <script type="math/tex">G_n(x)=\displaystyle\int x^ne^xdx</script>, then <script type="math/tex">G_n(x)=x^ne^x-nG_{n-1}(x)</script>. </li>
<li>We usually choose the function with easier differentiation to be <script type="math/tex">u</script> and others to be <script type="math/tex">v</script>, or the difficult integral to be <script type="math/tex">u</script>. </li>
<li>To use this technique to solve a problem, we must make sure that <script type="math/tex">du</script> did make the problem easier instead of the same or even harder. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>单变量微积分 (MIT 18.01)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>14. Geometric problems and Polar Coordinates</title>
    <url>/2020/02/17/14-Geometric-problems-and-Polar-Coordinates/</url>
    <content><![CDATA[<h1 id="Geometry"><a href="#Geometry" class="headerlink" title="Geometry"></a>Geometry</h1><ol>
<li>The arclength in the interval <script type="math/tex">[a,b]</script>. <br />Just like what we did at integral, divide the interval into small pieces. <br />So <script type="math/tex">ds^2=dx^2+dy^2</script>. So <script type="math/tex">ds=\sqrt{dx^2+dy^2}=\sqrt{1+(\displaystyle\frac{dy}{dx})^2}dx</script>. <br />Integrate both side, <script type="math/tex">S=\displaystyle\int^{s_n}_{s_0}ds=\int^b_a\sqrt{1+(\frac{dy}{dx})^2}dx</script>. </li>
<li>Surface area of rotation. <br />Divide the graph into small piece. The width of each piece is <script type="math/tex">ds</script> (arclength) and the length is <script type="math/tex">2\pi y</script> or <script type="math/tex">2\pi x</script>. <br /><br />And <script type="math/tex">ds=\displaystyle\sqrt{1+(\frac{dy}{dx})^2}dx</script><br />So <script type="math/tex">A=\displaystyle\int dA=\int(2\pi y)ds=\int(2\pi y)\displaystyle\sqrt{1+(\frac{dy}{dx})^2}dx</script></li>
<li>If parametric function is involved, <script type="math/tex">\left\{\begin{array}{}x=f(t)\\y=g(x)\end{array}\right.</script>. <br />In the arclength, <script type="math/tex">ds=\sqrt{(\displaystyle\frac{dx}{dt})^2+(\frac{dy}{dt})^2}dt</script>. <br />The speed is <script type="math/tex">\displaystyle\frac{ds}{dt}=\sqrt{(\displaystyle\frac{dx}{dt})^2+(\frac{dy}{dt})^2}</script></li>
</ol>
<h1 id="Polar-Coordinates"><a href="#Polar-Coordinates" class="headerlink" title="Polar Coordinates"></a>Polar Coordinates</h1><ol>
<li>Any points in the plane will be represented by <strong>the distance to origin</strong> <script type="math/tex">r</script> and <strong>angle of ray from origin with horizontal axis</strong> <script type="math/tex">\theta</script>. </li>
<li><script type="math/tex">x=rcos\ \theta</script> and <script type="math/tex">y=rsin\ \theta</script>. These formulas are always true. </li>
<li><script type="math/tex">r=\pm\sqrt{x^2+y^2}</script> and <script type="math/tex">\theta=tan^{-1}\displaystyle\frac{y}{x}</script>. These formulas are a bit ambiguous. We also need the graph to know the exact value of <script type="math/tex">r</script> and <script type="math/tex">\theta</script>. </li>
<li>Typical conventions: <script type="math/tex">0≤r<\infty</script> and <script type="math/tex">-\pi<\theta≤\pi</script> or <script type="math/tex">0≤\theta<2\pi</script>. These are just typical conventions not always necessary. </li>
<li>When transform a rectangular equation into a polar equation, remember to check the range of <script type="math/tex">\theta</script> and <script type="math/tex">r</script>. </li>
<li>The area of <script type="math/tex">r=r(\theta)</script>: Divide the whole area into small pieces of fan-shape with center in origin. Then <script type="math/tex">dA=\displaystyle\frac{1}{2}r^2d\theta</script>. So the whole area is <script type="math/tex">A=\displaystyle\int^{\theta_2}_{\theta_1}\frac{1}{2}r^2d\theta</script>. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>单变量微积分 (MIT 18.01)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>14. Orthogonal Matrices and Gram-Schmidt</title>
    <url>/2020/02/02/14-Orthogonal-Matrices-and-Gram-Schmidt/</url>
    <content><![CDATA[<h1 id="Orthogonal-Matrices"><a href="#Orthogonal-Matrices" class="headerlink" title="Orthogonal Matrices"></a>Orthogonal Matrices</h1><ol>
<li><code>Orthonormal</code> is a basis consisting of orthogonal unit vectors. </li>
<li>A matrix with orthonormal columns is assigned the special letter <script type="math/tex">Q</script>. </li>
<li><script type="math/tex">Q^TQ=I</script><br />Prove: <br /><script type="math/tex">Q^TQ=\left[\begin{matrix}q_1^T\\q_2^T\\\vdots\\q_n^T\end{matrix}\right]\left[\begin{matrix}q_1&q_2&\dots&q_n\end{matrix}\right]</script><br />Except for <script type="math/tex">q_i^Tq_i</script> is <script type="math/tex">1</script>, for any <script type="math/tex">q_i^Tq_j\ (i≠j)</script> is <script type="math/tex">0</script>. So only diagonals are <script type="math/tex">1</script> and all others are <script type="math/tex">0</script>. </li>
<li><script type="math/tex">Q</script> is not required to be square. </li>
<li>When <script type="math/tex">Q</script> is square, <script type="math/tex">Q^TQ=I</script> means that <script type="math/tex">Q^{-1}=Q^T</script>. So <script type="math/tex">QQ^T=I</script> is also true under this condition. In this square case, we call <script type="math/tex">Q</script> an <code>orthogonal matrix</code>. </li>
<li>Every permutaion matrix is an orthogonal matrix. </li>
<li>If <script type="math/tex">\vec{u}</script> is any unit vector, set <script type="math/tex">Q=I-2\vec{u}\vec{u}^T</script>. <br />Then <script type="math/tex">Q^T=I-2\vec{u}\vec{u}^T=Q</script> and <script type="math/tex">Q^TQ=I-4\vec{u}\vec{u}^T-4\vec{u}\vec{u}^T\vec{u}\vec{u}^T=I\ (\vec{u}^T\vec{u}=||\vec{u}||^2=1)</script><br />This <script type="math/tex">Q</script> is called the reflection matrix. It’s symmetrix and orthogonal. <br /><script type="math/tex">Q^2=Q^TQ=QQ^T=Q^{-1}Q=I</script><br />Any vector times <script type="math/tex">Q</script> will be reflected and the mirror is the space perpendicular to <script type="math/tex">\vec{u}</script>. The vectors in the mirror doesn’t change. </li>
<li>Multiplication by any orthogonal martix <script type="math/tex">Q</script>, lengths don’t change. <br />Proof: <script type="math/tex">||Q\vec{x}||^2=(Q\vec{x})^T(Q\vec{x})=\vec{x}^TQ^TQ\vec{x}=\vec{x}^T\vec{x}=||\vec{x}||^2</script></li>
<li><script type="math/tex">Q</script> also preserves dot products: <script type="math/tex">(Q\vec{x})^T(Q\vec{y})=\vec{x}^TQ^TQ\vec{y}=\vec{x}^T\vec{y}</script>. </li>
</ol>
<h1 id="Projection"><a href="#Projection" class="headerlink" title="Projection"></a>Projection</h1><ol>
<li>The least squares solution of <script type="math/tex">Q\vec{x}=\vec{b}</script> is <script type="math/tex">\hat{\vec{x}}=Q^T\vec{b}</script>. The projection matrix is <script type="math/tex">QQ^T</script>. <br /><code>MARK</code>: <script type="math/tex">QQ^T</script> is <script type="math/tex">I</script> only when <script type="math/tex">Q</script> is square. </li>
<li>Projection: <script type="math/tex">\vec{p}=Q\hat{\vec{x}}=QQ^T\vec{b}=\sum{\vec{q_i}(\vec{q_i}^T\vec{b})}</script></li>
<li>If <script type="math/tex">Q</script> is square: <br />Every <script type="math/tex">\vec{p_i}=\vec{q_i}(\vec{q_i}^T\vec{b})</script> is the projection of <script type="math/tex">\vec{b}</script> into a 1-dimentional  space. We can break <script type="math/tex">\vec{b}</script> into its projections and reconstruct <script type="math/tex">\vec{b}</script> from its projections. <br />Its columns space is the whole space. The projection of <script type="math/tex">\vec{b}</script> is itself. <script type="math/tex">P=I</script></li>
</ol>
<h1 id="Gram-Schmidt-Process"><a href="#Gram-Schmidt-Process" class="headerlink" title="Gram-Schmidt Process"></a>Gram-Schmidt Process</h1><ol>
<li><code>The Gram-Schmidt process</code> is the process to create orthonormal vectors. </li>
<li>The first direnction (column vector) is accepted as it comes. </li>
<li>The next direction must be perpendicular to all the accepted directions. And we get the next direction by subtracting all its projections in the accepted directions from itself. This leaves only the perpendicular part. </li>
<li>The process takes independent <script type="math/tex">\vec{a_i}</script> to orthonormal <script type="math/tex">\vec{q_i}</script>. <br />Start with <script type="math/tex">\vec{q_1}=\frac{\vec{a_1}}{||\vec{a_1}||}</script>. <br /><script type="math/tex">\vec{q_i}=\frac{\vec{a_i}-\vec{p}}{||\vec{a_i}-\vec{p}||}</script>. And <script type="math/tex">\vec{p_i}=\displaystyle\sum^{i-1}_{j=1}{(\vec{a_i}^T\vec{q_j})\vec{q_j}}</script></li>
<li>If we take all column vectors <script type="math/tex">\vec{a}</script> into matrix <script type="math/tex">A</script> and all <script type="math/tex">\vec{q}</script> into <script type="math/tex">Q</script>. Since all vectors in <script type="math/tex">Q</script> is merely linear combination of <script type="math/tex">A</script>, their share the same column space. That’s how we know we can factorize <script type="math/tex">A</script> into something with <script type="math/tex">Q</script>. This is <script type="math/tex">A=QR</script>. </li>
<li>Multiply by <script type="math/tex">Q^T</script>: <script type="math/tex">Q^TA=Q^TQR=R</script>. So <script type="math/tex">R=Q^TA=\left[\begin{matrix}\vec{q_1}^T\vec{a_1}&\vec{q_1}^T\vec{a_2}&\dots&\vec{q_1}^T\vec{a_n}\\&\vec{q_2}^T\vec{a_2}&\dots&\vec{q_2}^T\vec{a_n}\\&&\ddots&\vdots\\&&&\vec{q_n}^T\vec{a_n}\end{matrix}\right]</script>. </li>
<li><script type="math/tex">R</script> is upper triangular because latter <script type="math/tex">\vec{q}</script>‘s are orthogonal to earlier <script type="math/tex">\vec{a}</script>‘s. </li>
<li>The lengths of all <script type="math/tex">\vec{a}</script>‘s are in the diagonal of <script type="math/tex">R</script>. </li>
<li><script type="math/tex; mode=display">A^TA=(QR)^T(QR)=R^TQ^TQR=R^TR</script></li>
<li>The least squares equation <script type="math/tex">A^TA\hat{\vec{x}}=A^T\vec{b}</script> becomes <script type="math/tex">R^TR\hat{\vec{x}}=R^TQ^T\vec{b}</script> and finally <script type="math/tex">R\hat{\vec{x}}=Q^T\vec{b}</script>. <br />The least squares solution <script type="math/tex">\hat{\vec{x}}=R^{-1}Q^T\vec{b}</script></li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>线性代数 (MIT 18.06)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>15. Indeterminate Forms-L&#39;Hôspital&#39;s Rule and Improper Integrals</title>
    <url>/2020/02/20/15-Indeterminate-Forms-L-Hospital-s-Rule-and-Informal-Integrals/</url>
    <content><![CDATA[<h1 id="Indeterminate-Forms"><a href="#Indeterminate-Forms" class="headerlink" title="Indeterminate Forms"></a>Indeterminate Forms</h1><ol>
<li><script type="math/tex">\displaystyle\lim_{x\to a}\frac{f(x)}{g(x)}</script>, if <script type="math/tex">f(a)=g(a)=0</script>, then this is an indeterminate form of <script type="math/tex">\displaystyle\frac{0}{0}</script>. </li>
<li>To solve this limit, if <script type="math/tex">g'(a) ≠ 0</script> just divide the numerator and denominator with <script type="math/tex">x-a</script>. <br /><script type="math/tex">\displaystyle\lim_{x\to a}\frac{f(x)}{g(x)}=\lim_{x\to a}\frac{\frac{f(x)}{x-a}}{\frac{g(x)}{(x-a)}}=\frac{\lim_{x\to a}\frac{f(x)-f(a)}{x-a}}{\lim_{x\to a}\frac{g(x)-g(a)}{x-a}}=\frac{f'(a)}{g'(a)}</script></li>
<li><code>L&#39;Hôspital&#39;s Rule</code>: <script type="math/tex">\displaystyle\lim_{x\to a}\frac{f(x)}{g(x)}=\lim_{x\to a}\frac{f'(x)}{g'(x)}</script>. If derivate once cannot solve the problem, derivate again until the denominator is not zero. </li>
<li><script type="math/tex">\displaystyle\frac{\infty}{\infty}</script> form is also OK for L’Hôspital’s Rule. So does when right hand side is either finite or <script type="math/tex">\pm\infty</script> and <script type="math/tex">a</script> can be anything including <script type="math/tex">\pm\infty</script>. </li>
<li>For <script type="math/tex">0</script> and <script type="math/tex">\infty</script> product problem, rewrite the equation to the ratio form to become <script type="math/tex">\displaystyle\frac{0}{0}</script> or <script type="math/tex">\displaystyle\frac{\infty}{\infty}</script>. </li>
<li>Another form is <script type="math/tex">0^0</script>. <script type="math/tex">\displaystyle\lim_{x\to 0^+}x^x=\lim_{x\to 0^+}e^{xln\ x}</script>. And <script type="math/tex">\displaystyle\lim_{x\to 0^+}xln\ x=0</script>. So <script type="math/tex">\displaystyle\lim_{x\to 0^+}x^x=e^0=1</script>. </li>
</ol>
<h1 id="Improper-Integrals"><a href="#Improper-Integrals" class="headerlink" title="Improper Integrals"></a>Improper Integrals</h1><ol>
<li>Definition: <script type="math/tex">\displaystyle\int^\infty_af(x)dx=\lim_{x\to \infty}\int^x_af(x)dx</script>. </li>
<li>The integral converges if limit exists and diverges if limit doesn’t exist. </li>
<li>This is the total area of <script type="math/tex">f(x)</script> from <script type="math/tex">a</script> to <script type="math/tex">\infty</script>. </li>
<li>If the integral converges, the total area is finite. And if the integral diverges, the total area is infinite. </li>
<li><script type="math/tex">\displaystyle\int^\infty_1\frac{dx}{x^p}</script> diverges if <script type="math/tex">p≤1</script> and converges if <script type="math/tex">p>1</script> (the value is <script type="math/tex">\displaystyle\frac{1}{p-1}</script>). </li>
<li>If <script type="math/tex">\displaystyle\lim_{x\to\infty}\frac{f(x)}{g(x)}=1</script>, then <script type="math/tex">f(x)</script> is similar to <script type="math/tex">g(x)</script> as <script type="math/tex">x\to\infty</script>, denoted by <script type="math/tex">f(x)\sim g(x)</script>. </li>
<li>Limit Comparison: If <script type="math/tex">f(x)\sim g(x)</script> as <script type="math/tex">x\to\infty</script>, then <script type="math/tex">\displaystyle\int^\infty_af(x)dx</script> and <script type="math/tex">\displaystyle\int^\infty_ag(x)dx</script> either both converge or both diverge. </li>
<li>Sometimes when calculation or comparison, the end of the interval can be ignored since it doesn’t effect the answer. </li>
<li>Second type of improper integrals is defined <script type="math/tex">f(x)</script> is undefined at <script type="math/tex">x=a</script> when calculate the integral of <script type="math/tex">[a,b]</script>. <script type="math/tex">\displaystyle\int^b_af(x)dx=\lim_{x\to a^+}\int^b_xf(x)dx</script>. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>单变量微积分 (MIT 18.01)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>15. Classical Statistical Inference</title>
    <url>/2020/03/22/15-Classical-Statistical-Inference/</url>
    <content><![CDATA[<h1 id="General"><a href="#General" class="headerlink" title="General"></a>General</h1><ol>
<li>In classical statistics, we see the unknowns as constants instead of random variables in Bayesian statistics. </li>
<li>The distribution of $X$ depends on $\theta$. This is not a conditional distribution $p_{X|\Theta}$ or $f_{X|\Theta}$ in the Bayesian statistics but only a common distribution $p_X(x;\theta)$ or $f_X(x;\theta)$. </li>
<li>For vectors $X$ and $\theta$: $p_{X_1,…X_2}(x_1,…,x_n;\theta_1,…,\theta_m)$. </li>
<li>Problem types: <br />&emsp;Hypothesis testing: choose the correct model from several discrete model. Each model contains only one model. <br />&emsp;Composite hypotheses: some models might consist of more than one models. <br />&emsp;Estimation: design an estimator $\hat\Theta$ to keep estimation error $\hat\Theta-\theta$ small. </li>
</ol>
<h1 id="Maximum-Likelihood-Estimation"><a href="#Maximum-Likelihood-Estimation" class="headerlink" title="Maximum Likelihood Estimation"></a>Maximum Likelihood Estimation</h1><ol>
<li>Pick $\theta$ that makes data most likely. <script type="math/tex">\hat\theta_{ML}=arg\ max_\theta\ p_X(x;\theta)</script>. </li>
<li>In Bayesian MAP estimation, we actually only need to maximize <script type="math/tex">\hat\theta_{MAP}=arg\ max_\theta\ p_{X|\Theta}(x|\theta)p_\Theta(\theta)</script>. If $p_\Theta(\theta)$ is a constant, these two is going to maximize the same thing. </li>
<li>The estimate $\theta$ is the realized value of estimator $\hat\Theta$. </li>
<li>In many applications, the observations $X_i$ are assumed to be independent, in which case, the likelihood function is of the form $p_X(x_1,…,x_n;\theta)=\displaystyle\prod^n_{i=1}p_{X_i}(x_i;\theta)$. <br />In this case, it is often use the logarithm form, which is called log-likelihood function, to find the maximum. <br /><script type="math/tex">log\ p_X(x_1,…,x_n;\theta)=log\displaystyle\prod^n_{i=1}p_{X_i}(x_i;\theta)=\sum^n_{i=1}log\ p_{X_i}(x_i;\theta)</script></li>
</ol>
<h2 id="Desired-Properties-of-Estimators"><a href="#Desired-Properties-of-Estimators" class="headerlink" title="Desired Properties of Estimators"></a>Desired Properties of Estimators</h2><ol>
<li>Unbiased: $E_\theta[\hat\Theta]=\displaystyle\int f_{\hat\Theta}(\hat\theta;\theta)\hat\theta d\hat\theta =\theta$. $\theta$ is the true value. </li>
<li>Consistent: $\hat\Theta_n\to\theta$. </li>
<li>Small mean squared error: $E_\theta[(\hat\Theta-\theta)^2]=var_\theta(\hat\Theta-\theta)+(E_\theta[\hat\Theta-\theta])^2=var_\theta(\hat\Theta)+(bias_\theta)^2$</li>
</ol>
<h1 id="Confidence-Interval"><a href="#Confidence-Interval" class="headerlink" title="Confidence Interval"></a>Confidence Interval</h1><ol>
<li>An estimate $\hat\Theta_n$ may not be informative enough. </li>
<li>An $(1-\alpha)$ confidence interval is a random interval $[\Theta_n^-,\Theta_n^+]$, such that $P(\Theta^-_n≤\theta≤\Theta^+_n)≥1-\alpha,\forall\alpha$. </li>
<li>We usually use the normal table to calculate the confidence interval of sample mean. <br />&emsp;According to the central limit theorem, $P\left(\displaystyle\frac{|\hat\Theta_n-\theta|}{\displaystyle\frac{\sigma}{\sqrt{n}}}≤z \right)\approx\Phi(z)$. <br />&emsp;So $P\left(\hat\Theta_n-\displaystyle\frac{z\sigma}{\sqrt{n}}≤\theta≤\hat\Theta_n+\frac{z\sigma}{\sqrt{n}} \right)\approx1-\alpha$<br />&emsp;$\Phi(z)=1-\displaystyle\frac{\alpha}{2}$. </li>
<li>If we don’t know about $\sigma$. <br />&emsp;Option $1$: use the upper bound on $\sigma$. <br />&emsp;Option $2$: use ad hoc estimate of $\sigma$. <br />&emsp;Option $3$: use the generic estimate of variance<br />&emsp;&emsp;$\sigma^2=E[(X_i-\theta)^2]$, so $\hat\sigma^2=\displaystyle\frac{1}{n}\sum^n_{i=1}(X_i-\theta)^2$. But $\theta$ is still unknown, so we use the estimator instead. <br />&emsp;&emsp;$\hat{S}_n^2=\displaystyle\frac{1}{n-1}\sum^n_{i=1}(X_i-\hat\Theta_n)^2$. And $E[\hat{S}^2_n]=\hat\sigma^2\to\sigma^2$. </li>
</ol>
<h1 id="Linear-Regression"><a href="#Linear-Regression" class="headerlink" title="Linear Regression"></a>Linear Regression</h1><ol>
<li>Model: $y\approx\theta_0+\theta_1x$ to minimize $\displaystyle\sum^n_{i=1}(y_i-\theta_0-\theta_1x_i)^2$. </li>
<li>Interpretation: $Y_i=\theta_0+\theta_1x_i+W_i$, $W_i\sim N(0,\sigma^2)$. </li>
<li>Likelihood function $f_{X,Y|\theta}(x,y;\theta)=c\cdot exp\{\displaystyle-\frac{1}{2\sigma^2}\sum^n_{i=1}(y_i-\theta_0-\theta_1x_i)^2\}$. So we need to maximize it. </li>
<li>Take the logs, maximize <script type="math/tex">-log\ c\cdot\displaystyle\frac{1}{2\sigma^2}\sum^n_{i=1}(y_i-\theta_0-\theta_1x_i)^2</script>. The same as minimize $\displaystyle\sum^n_{i=1}(y_i-\theta_0-\theta_1x_i)^2$. </li>
<li>The solution is $\hat\theta_1=\displaystyle\frac{\displaystyle\sum^n_{i=1}(x_i-\bar{x})(y_i-\bar{y})}{\displaystyle\sum^n_{i=1}(x_i-\bar{x})^2}$ and $\hat\theta_0=\bar{y}-\hat\theta_1\bar{x}$. </li>
<li>This form can be interpreted as estimates of $\hat\theta_1=\displaystyle\frac{cov(X,Y)}{var(X)}$ and $\hat\theta_0=E[Y]-\hat\theta_1E[X]$. </li>
<li>Multiple linear regression: <br />&emsp;Model: $y\approx\theta_0+\theta_1x_1+\theta_2x_2+…$. <br />&emsp;Formulation: <script type="math/tex">min_{\theta_0,\theta_1,…}\ \displaystyle\sum^n_{i=1}(y_i-\theta_0-\theta_1x_1-\theta_2x_2-…)^2</script>. </li>
<li>General method: set the derivative to zero. </li>
<li>We can also choose different variables $y\approx\theta_0+\theta_1h(x)$. Since $\theta_0$ and $\theta_1$ are the unknowns, this is still a linear function. </li>
<li>Some concerns: <br />&emsp;noise might affect the result<br />&emsp;multiple variables have different correlation<br />&emsp;the regression function only shows the prediction based on other variables, but says nothing about the causal relations. </li>
</ol>
<h1 id="Binary-Hypothesis-Testing"><a href="#Binary-Hypothesis-Testing" class="headerlink" title="Binary Hypothesis Testing"></a>Binary Hypothesis Testing</h1><ol>
<li>Null hypothesis $H_0$: $X\sim p_X(x;H_0)$ or $X\sim f_X(x;H_0)$<br />Alternative hypothesis $H_1$: $X\sim p_X(x;H_1)$ or $X\sim f_X(x;H_1)$. </li>
<li>Partition the space of possible data vectors Rejection region R: reject $H_0$ if and only if $x\in R$. </li>
<li>Types of errors: <br />&emsp;False rejection: $H_0$ is true but rejected: $\alpha(R)=P(X\in R;H_0)$. <br />&emsp;False acceptance: $H_0$ is false but accepted: $\beta(R)=P(X\notin R;H_1)$. <br />&emsp;$\alpha$ and $\beta$ have a trade off relation. When $\alpha$ increases, $\beta$ decreases and vice versa. </li>
<li>Likelihood ratio test of Bayesian test: choose $H_1$ if <br />$P(H_1|X=x)&gt;P(H_0|X=x)$ or $\displaystyle\frac{P(X=x|H_1)P(H_1)}{P(X=x)}&gt;\frac{P(X=x|H_0)P(H_0)}{P(X=x)}$ or $\displaystyle\frac{P(X=x|H_1)}{P(X=x|H_0)}&gt;\frac{P(H_0)}{P(H_1)}$. </li>
<li>Likelihood ratio test of Nonbayesian test: choose $H_1$ if <br />$L(x)=\displaystyle\frac{P(X=x;H_1)}{P(X=x;H_0)}&gt;\epsilon$ when $X$ is discrete and if $\displaystyle\frac{f_X(x;H_1)}{f_X(x;H_0)}&gt;\epsilon$ when $X$ is continuous. <br />Normally, we can concise the inequality to $\displaystyle\sum_if(X_i)&gt;\epsilon’$, which is called the statistic. <br />Then fix the false rejection probability $\alpha$, and choose $\epsilon$ so that <script type="math/tex">P(reject\ H_0;H0)=\alpha</script>, or $P\left(\displaystyle\sum_if(X_i)&gt;\epsilon’;H_0\right)=\alpha$. <br />Usually, we can solve the later equation with CLT when statistic is large. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>概率论 (MIT 6.041)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>15. Alert, Notification, Application Lifecycle</title>
    <url>/2019/08/24/15-Alert-Notification-Application-Lifecycle/</url>
    <content><![CDATA[<h1 id="Alerts-and-Action-Sheets"><a href="#Alerts-and-Action-Sheets" class="headerlink" title="Alerts and Action Sheets"></a>Alerts and Action Sheets</h1><h2 id="Difference"><a href="#Difference" class="headerlink" title="Difference"></a>Difference</h2><p>The two mechanisms are all used to pop up and ask the user something. </p>
<h3 id="Alerts"><a href="#Alerts" class="headerlink" title="Alerts"></a>Alerts</h3><ol>
<li>It pops up in the middle of the screen.</li>
<li>Usually ask questions with only two answers (e.g. OK/Cancel, Yes/No, etc.).</li>
<li>Can be disruptive to your user-interface, so use carefully.</li>
<li>Often used for “asynchronous” problems (“connection reset” or “network fetch failed”). </li>
<li>Can have a text field to get a quick answer (e.g. password)</li>
<li>Example, sometimes when Settings needs to reconfirm your Apple ID. </li>
</ol>
<a id="more"></a>
<h3 id="Action-Sheets"><a href="#Action-Sheets" class="headerlink" title="Action Sheets"></a>Action Sheets</h3><ol>
<li>Usually slides in from the bottom of the screen on iPhone/iPod Touch, and in a popover on iPad.  </li>
<li>Can be displayed from bar button item or from any rectangular area in a view. </li>
<li>Generally asks questions that have more than two answers.</li>
<li>Think of action sheets as presenting “branching decisions” to the user (i.e. what next?). </li>
<li>Example, in Safari, long press a website or use the 3D-Touch and slide up. </li>
</ol>
<h2 id="Create-One"><a href="#Create-One" class="headerlink" title="Create One"></a>Create One</h2><ol>
<li>First, declare an alert type of <code>UIAlertController</code>. Its initializer has three parameters.<br><code>title</code> is the text at the top which describes the usage of the alert.<br><code>message</code> is a smaller-font text beneath the title to explain the title explicitly.<br><code>preferredStyle</code> is which kind of alert you want. It can be <code>.actionSheet</code> or <code>.alert</code>. </li>
<li>Then we can add actions to that alert with instance method <code>addAction</code>. It only takes a UIAlertAction as a parameter. </li>
<li>To initialize a UIAlertAction, we need to pass three parameters.<br><code>title</code> is the name of the action showed on screen.<br><code>style</code> is The way we show that label of the action. It can be <code>.cancel</code>, <code>.default</code> and <code>.destructive</code>. The <code>.cancel</code> style is a bold blue one at the bottom of Action Sheets and left of Alert. <code>.default</code> is normal blue one arranged according to the order in which they were added. <code>.destructive</code> is a normal red one usually to close or delete something.<br><code>handler</code> is what will happen when user hit this button. This closure takes one UIAlertAction as its parameter and returns nothing. </li>
<li>We can also add a text field with another instance method <code>addTextField</code> which takes one parameter called <code>configurationHandler</code>. It’s a closure takes a UITextField as parameter and returns nothing. In that closure, we can configure the added text field. Such as add a placeholder which we represented grayish and disappear after user typed something in. Also we can set if it’s a secure text (password or something), then it will appear each character as a dot. </li>
<li>We can present the alert with the <code>present</code> method. In Action sheet of iPad, we can configure it to make it show close to the button instead of in the center. We don’t need to do these things only when the device is iPad, iPhone will automatically ignore it. And on iPad, there will be no more cancel button.<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// . 1</span></span><br><span class="line"><span class="keyword">var</span> alert = <span class="type">UIAlertController</span>(</span><br><span class="line">title: <span class="type">String</span>,</span><br><span class="line">message: <span class="type">String</span>,</span><br><span class="line">preferredStyle: <span class="type">UIAlertController</span>.<span class="type">Style</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// . 2</span></span><br><span class="line">alert.addAction(<span class="type">UIAlertAction</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// . 3</span></span><br><span class="line"><span class="type">UIAlertAction</span>(</span><br><span class="line">title: <span class="type">String</span>,</span><br><span class="line">style: <span class="type">UIAlertAction</span>.<span class="type">Style</span>,</span><br><span class="line">handler: ((<span class="type">UIAlertAction</span>) -&gt; <span class="type">Void</span>)?</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// . 4</span></span><br><span class="line">alert.addTextField(configurationHandler: ((<span class="type">UITextField</span>) -&gt; <span class="type">Void</span>)?)</span><br><span class="line"></span><br><span class="line"><span class="comment">// . 5</span></span><br><span class="line">alert.modalPresentationStyle = .popover</span><br><span class="line"><span class="keyword">let</span> ppc = alert.popoverPresentationController</span><br><span class="line">ppc?.barButtonItem = theButtonPresentIt</span><br><span class="line"></span><br><span class="line">present(alert, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="Notification"><a href="#Notification" class="headerlink" title="Notification"></a>Notification</h1><ol>
<li>Model can use Notification to communicate with Controller. </li>
<li>Using Notification, we can find out what’s going on. </li>
<li>For example, it can detect keyboard appeared or Document State changed or User Font Size changed. </li>
</ol>
<h2 id="Listen-to-One-of-Radio-Station"><a href="#Listen-to-One-of-Radio-Station" class="headerlink" title="Listen to One of Radio Station"></a>Listen to One of Radio Station</h2><ol>
<li>The type of observer is <code>NSObjectProtocol</code>. </li>
<li>We can create an observer with <code>NotificationCenter.default.addObserver</code>. It has four parameters <code>forName</code>, <code>object</code>, <code>queue</code> and a closure. </li>
<li><code>forName</code> is the name of the radio station, it can specify the radio station we want to hear. Its type is <code>Notification.Name</code>. All the radio station is a static variable of Notification.Name. </li>
<li><code>object</code> is the broadcaster we want to hear. Even if something else broadcast on the same radio station, we won’t hear it. </li>
<li><code>queue</code> is <code>OperationQueue</code>. We can use it just like DispatchQueue, <code>OperationQueue.main</code> and <code>OperationQueue.globel</code>. It can be nil, that means that the closure will be run at the same queue as the broadcaster. We hardly assign it nil. </li>
<li>The closure takes one parameter type of <code>Notificatioin</code>, it contains everything it’s broadcasting. It’s whole information is contained at the <code>userInfo</code> property. This closure will be push into the proper queue when broadcasts occurs. </li>
<li>When we’re done listening, we can remove observer to stop listening. <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// . 1 ~ 6</span></span><br><span class="line"><span class="keyword">var</span> observer: <span class="type">NSObjectProtocol?</span></span><br><span class="line">observer = <span class="type">NotificationCenter</span>.<span class="keyword">default</span>.addObserver(</span><br><span class="line">	forName: <span class="type">Notification</span>.<span class="type">Name</span>,</span><br><span class="line">	object: <span class="type">Any?</span>,</span><br><span class="line">	queue: <span class="type">OperationQueue?</span></span><br><span class="line">) &#123; (notification: <span class="type">Notification</span>) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">let</span> info: <span class="type">Any?</span> = notification.userInfo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// . 7</span></span><br><span class="line"><span class="type">NotificationCenter</span>.<span class="keyword">default</span>.removeObserver(observer)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Post-A-Radio-Station"><a href="#Post-A-Radio-Station" class="headerlink" title="Post A Radio Station"></a>Post A Radio Station</h2><ol>
<li>Besides the predefined radio station, we can post our own radio station. </li>
<li>First, we need to extense a static variable at Notification.Name. We can use its initializer <code>Notification.Name(String)</code> to create one. </li>
<li>Then we need to post the radio when we want to whith <code>NotificationCenter.default.post</code>. It has three parameters, <code>name</code>, just like the <code>forName</code> aforementioned, is the radio station we want to post on. <code>object</code> is the broadcaster, usually self. <code>userInfo</code> is <code>[AnyHashable : Any]?</code> where contains any information want to pass to listeners. <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// . 2</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Notificatioin</span>.<span class="title">Name</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">let</span> theNameOfRadioStation = <span class="type">Notification</span>.<span class="type">Name</span>(<span class="string">"Any String, no matter"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// . 3</span></span><br><span class="line"><span class="type">NotificationCenter</span>.<span class="keyword">default</span>.post(</span><br><span class="line">	name: <span class="type">Notification</span>.<span class="type">Name</span>,</span><br><span class="line">	object: <span class="type">Any?</span>,</span><br><span class="line">	userInfo: [<span class="type">AnyHashable</span>:<span class="type">Any</span>]? = <span class="literal">nil</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="KVO-Key-Value-Observer"><a href="#KVO-Key-Value-Observer" class="headerlink" title="KVO (Key Value Observer)"></a>KVO (Key Value Observer)</h1><ol>
<li>KVO is also one kind of Notification. However the Notification we introduced above has a limitation. When we want to observe our own properties, sometimes we have to write our posting code several times. That’s kind of annoying. KVO is here to fix that. </li>
<li>It’s usually used by a Controller to observe either its Model or its View. </li>
<li>Not every property works with KVO. Only objects that inherit from <code>NSObject</code> can participate. </li>
<li>To use KVO, we just need to use our instance method <code>observe</code>, i.e. <code>instance.observe</code>. It has two parameters. The first one is the property we want to observe, type of <code>KeyPath</code>. Its form is <code>\Type.property</code> or even <code>\Type.property1.property2…</code>. The second one is a closure, which will be excuted when that observed property is changed. It takes two parameters, the observed instance and an <code>NSKeyValueObservedChange&lt;Value&gt;</code> which contains the old value and the new value. This method returns an <code>NSKeyValueObservation</code> as a cookie. </li>
<li>In KVO, we don’t removeObserver like in Notification, as long as the observation remains in the heap, the closure will stay active. </li>
<li>Some common used KVO: UIView’s frame and center, CALayer underneath UIView, CoreData. <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> observation = observedInstance.observe(keyPath: <span class="type">KeyPath</span>, changeHandler: (<span class="type">Value</span>, <span class="type">NSKeyValueObseredChange</span>&lt;<span class="type">Value</span>&gt;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// For example</span></span><br><span class="line"><span class="keyword">let</span> label = <span class="type">UILabel</span>()</span><br><span class="line"><span class="keyword">var</span> observation = label.observe(keyPath: \<span class="type">UILabel</span>.center) &#123; (<span class="number">_</span>, <span class="number">_</span>) <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">"Hello"</span>) &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="Application-Lifecycle"><a href="#Application-Lifecycle" class="headerlink" title="Application Lifecycle"></a>Application Lifecycle</h1><h2 id="Some-Status"><a href="#Some-Status" class="headerlink" title="Some Status"></a>Some Status</h2><ol>
<li><code>Foreground Inactive</code>: Run code without UI events. Only do something preparation. </li>
<li><code>Foreground Active</code>: Run code with receiving and processing UI events. </li>
<li><code>Background</code>: Run code without UI events for a limited time. </li>
<li><code>Suspended</code>: No code is running. Could be killed. </li>
</ol>
<h2 id="Transition"><a href="#Transition" class="headerlink" title="Transition"></a>Transition</h2><ol>
<li><code>Launch</code>: Not running -&gt; Foreground Inactive(for a short time) -&gt; Foreground Active. </li>
<li><code>Switch to another application</code>: Foreground Active -&gt; Foreground Inactive -&gt; Background -&gt; Suspended. </li>
<li><code>Killed</code>: Suspended -&gt; Not Running, no code runs between suspended and killed. </li>
</ol>
<h2 id="Get-Notified"><a href="#Get-Notified" class="headerlink" title="Get Notified"></a>Get Notified</h2><ol>
<li>All the method mentioned is at <code>AppDelegate</code>. </li>
<li><code>Not Running -&gt; Foreground Inactive</code>, <code>application-will/didFinishLaunching</code> will get called. And we can observe with <code>UIApplicationDidFinishLaunching</code>. </li>
<li>The passed dictionary (also in notification.userInfo) tells you why your application was launched. For example, someone wants you to open a URL, you entered a certain place in the world, you are continuing an activity started on another device, a notification arrived for you (push or local), Bluetooth attached device wants to interact with you. </li>
<li>It used to be that you would build your UI here. But nowadays we use storyboards for all that. So often you do not implement this method at all. </li>
<li><code>Foreground Active -&gt; Foreground Inactive</code>, <code>applicationWillResignActive</code> will get called. And we can observe with <code>UIApplicationWillResignActive</code>. We can pause the UI here. </li>
<li><code>Foreground Inactive -&gt; Foreground Active</code>, <code>applicationDidBecomeActive</code> will get called. And we can observe with <code>UIApplicationDidBecomeActive</code>. If you have paused your UI previously, here’s where you would reactivate things. </li>
<li><code>Foreground Inactive -&gt; Background</code>, <code>applicationDidEnterBackground</code> will get called. And we can observe with <code>UIApplicationDidEnterBackground</code>. </li>
<li>Here you want to (quickly) batten down the hatches. You only get to run for 30s or so. You can request more time, but don’t abuse this (or the system will start killing you instead). Prepare yourself to be eventually killed her (probably won’t happen, but be ready anyway).</li>
<li><code>Background -&gt; Foreground Inactive</code>, <code>applicationWillEnterForeground</code> will get called. And we can observe with <code>UIApplicationWillEnterForeground</code>. Time to un-batten the hatches. Maybe undo what you did in DidEnterBackground.</li>
</ol>
<h1 id="Something-Else"><a href="#Something-Else" class="headerlink" title="Something Else"></a>Something Else</h1><h2 id="Other-AppDelegate-Items-of-Interest"><a href="#Other-AppDelegate-Items-of-Interest" class="headerlink" title="Other AppDelegate Items of Interest"></a>Other AppDelegate Items of Interest</h2><ol>
<li>State Restoration (saving the state of your UI so that you can restore it even if you are killed). </li>
<li>Data Protection (files can be set to be protected when a user’s device’s screen is locked).</li>
<li>Open URL (in Xcode’s Info tab of Project Settings, you can register for certain URLs). </li>
<li>Background Fetching (you can fetch and receive results while in the background).</li>
</ol>
<h2 id="UIApplication"><a href="#UIApplication" class="headerlink" title="UIApplication"></a>UIApplication</h2><ol>
<li>Open a URL in another application. </li>
<li>Register to receive Push Notifications. Notifications, both local and push, are handled by the UNNotification framework. </li>
<li>Set the fetch interval for background fetching. Usually you will set this to UIApplicationBackgroundFetchIntervalMinimum</li>
<li>Asking for more time when backgrounded. Do NOT forget to call <code>endBackgroundTask</code> when you’re done!</li>
<li>Turning on the “network in use” spinner (status bar upper left). </li>
<li>Finding out about things. <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// . 1</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">open</span><span class="params">(URL)</span></span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">canOpenURL</span><span class="params">(URL)</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// . 2</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(un)</span></span>registerForRemoteNotifications()</span><br><span class="line"></span><br><span class="line"><span class="comment">// . 3</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setMinimumBackgroundFetchInterval</span><span class="params">(TimeInterval)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// . 4</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">beginBackgroundTask</span><span class="params">(withExpirationHandler: <span class="params">(<span class="params">()</span></span></span></span> -&gt; <span class="type">Void</span>)?) -&gt; <span class="type">UIBackgroundTaskIdentifier</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">endBackgroundTask</span><span class="params">(UIBackgroundTaskIdentifier)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// . 5</span></span><br><span class="line"><span class="keyword">var</span> isNetworkActivityIndicatorVisible: <span class="type">Bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// . 6</span></span><br><span class="line"><span class="keyword">var</span> backgroundTimeRemaining: <span class="type">TimeInterval</span> &#123; <span class="keyword">get</span> &#125; <span class="comment">// until you are suspended</span></span><br><span class="line"><span class="keyword">var</span> preferredContentSizeCategory: <span class="type">UIContentSizeCategory</span> &#123; <span class="keyword">get</span> &#125; <span class="comment">// big fonts or small fonts </span></span><br><span class="line"><span class="keyword">var</span> applicationState: <span class="type">UIApplicationState</span> &#123; <span class="keyword">get</span> &#125; <span class="comment">// foreground, background, active</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Info-plist"><a href="#Info-plist" class="headerlink" title="Info.plist"></a>Info.plist</h2><ol>
<li>You can edit this file (in Xcode’s property list editor) by clicking on Info.plist</li>
<li>Or you can even edit it as raw XML!</li>
<li>But usually you edit Info.plist settings by clicking on your project in the Navigator. </li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>Swift开发 (Stanford CS193p)</category>
      </categories>
      <tags>
        <tag>应用开发</tag>
        <tag>Swift</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>16. More Segue</title>
    <url>/2019/08/27/16-More-Segue/</url>
    <content><![CDATA[<h1 id="Modal-Segue"><a href="#Modal-Segue" class="headerlink" title="Modal Segue"></a>Modal Segue</h1><h2 id="Set-A-Modal-Segue-Up"><a href="#Set-A-Modal-Segue-Up" class="headerlink" title="Set A Modal Segue Up"></a>Set A Modal Segue Up</h2><ol>
<li>Just ctrl-drag from a button to another View Controller &amp; pick segue type “Modal”. </li>
<li>If you need to present a Modal View Controller not from a button, use a manual segue with <code>performSegue</code>. </li>
<li>If you have the View Controller itself (e.g. Alerts or from instantiateViewController), you can use the <code>present</code> to perform it directly. </li>
<li>You prepare for a Modal segue just like any other segue. <a id="more"></a>
</li>
</ol>
<h2 id="Get-Back-from-the-New-View-Controller"><a href="#Get-Back-from-the-New-View-Controller" class="headerlink" title="Get Back from the New View Controller"></a>Get Back from the New View Controller</h2><ol>
<li>If there’s nothing to be said, just dismiss the segued-to MVC. </li>
<li>To communicate results, generally you would Unwind. </li>
<li>The presenting view controller is responsible for dismissing (not the presented). You do this by sending the presenting view controller a <code>dismiss</code> message, which will dismiss whatever MVC it has presented (if any). </li>
<li>You can get at your presenting view controller with <code>presentingViewController</code> property. </li>
<li>If you send this to a presented view controller, for convenience, it will forward to its presenter (unless it itself has presented an MVC, in which case it will dismiss that MVC). <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// . 3</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dismiss</span><span class="params">(animated: Bool, completion: <span class="params">(<span class="params">()</span></span></span></span> -&gt; <span class="type">Void</span>)? = <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// . 4</span></span><br><span class="line"><span class="keyword">var</span> presentingViewController: <span class="type">UIViewController?</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Custom-Presented-View-Controller"><a href="#Custom-Presented-View-Controller" class="headerlink" title="Custom Presented View Controller"></a>Custom Presented View Controller</h2><h3 id="Appearance"><a href="#Appearance" class="headerlink" title="Appearance"></a>Appearance</h3><ol>
<li>In horizontally regular environments, the <code>modalPresentationStyle</code> determines what a presented VC looks like. </li>
<li>There are <code>.fullScreen(default)</code> and <code>.overFullScreen</code>. The first one means that the presented VC covers the presenting VC completely, while the second one means that the presented VC has a blurred background so the presenting VC is visible behind. </li>
<li>On iPad, if full screen is “too much real estate”, there’s <code>.formSheet</code> and <code>.pageSheet</code>. These two use a smaller space and with a “grayed out” presenting view controller behind. </li>
<li>In horizontally compact environments, these will all adapt to always be full screen. </li>
</ol>
<h3 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h3><ol>
<li>Depends on <code>modalTransitionStyle</code> in the view controller that is being presented. </li>
<li><code>.coverVertical</code>: slides the presented modal VC up from bottom of screen(the default)</li>
<li><code>.flipHorizontal</code>: flips the presenting view controller over to show the presented modal VC</li>
<li><code>.crossDissolve</code>: presenting VC fades out as the presented VC fades in</li>
<li><code>.partialCurl</code>: only if presenting VC is full screen and no more modal presentations coming</li>
<li>The presentation &amp; transition styles can be set in the storyboard by inspecting the segue. </li>
</ol>
<h1 id="Popover"><a href="#Popover" class="headerlink" title="Popover"></a>Popover</h1><h2 id="What-Does-It-Looks-Like"><a href="#What-Does-It-Looks-Like" class="headerlink" title="What Does It Looks Like?"></a>What Does It Looks Like?</h2><ol>
<li>Popovers pop an entire MVC over the rest of the screen. </li>
<li>Popover’s arrow pointing to what caused it to appear. </li>
<li>The grayed out area here is inactive. Touching in it will dismiss the popover. </li>
</ol>
<h2 id="Prepare-for-A-Popover-Segue"><a href="#Prepare-for-A-Popover-Segue" class="headerlink" title="Prepare for A Popover Segue"></a>Prepare for A Popover Segue</h2><ol>
<li>All segues are managed via a <code>UIPresentationController</code></li>
<li>In a popover’s <code>UIPopoverPresentationController</code>, It notes what caused the popover to appear (a bar button item or just a rectangle in a view). </li>
<li>You can also control what direction the popover’s arrow is allowed to point. Or you can control how a popover adapts to different sizes classes (e.g. iPad vs iPhone)</li>
<li>To set those things, while preparing the segue, we need to retrieving the <code>popoverPresentationController</code> from the destination View Controller. </li>
<li>We can use the popoverPresentationController we get to configure hao the popover pops up. </li>
<li>And we can control the presentation by setting ourself (the Controller) as the delegate. <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">prepare</span><span class="params">(<span class="keyword">for</span> segue: UIStoryboardSegue, sender: <span class="keyword">Any</span>?)</span></span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">let</span> identifier = segue.identifier</span><br><span class="line">  &#123;</span><br><span class="line">		<span class="keyword">switch</span> identifier</span><br><span class="line">    &#123;</span><br><span class="line">			<span class="keyword">case</span> “<span class="type">Do</span> <span class="type">Something</span> <span class="keyword">in</span> a <span class="type">Popover</span> <span class="type">Segue</span>”:</span><br><span class="line">				<span class="keyword">if</span> <span class="keyword">let</span> vc = segue.destination <span class="keyword">as</span>? <span class="type">MyController</span></span><br><span class="line">      	&#123;</span><br><span class="line">					<span class="keyword">if</span> <span class="keyword">let</span> ppc = vc.popoverPresentationController</span><br><span class="line">          &#123;</span><br><span class="line">						ppc.permittedArrowDirections = <span class="type">UIPopoverArrowDirection</span>.any</span><br><span class="line">						ppc.delegate = <span class="keyword">self</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			<span class="keyword">default</span>: <span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Adapt"><a href="#Adapt" class="headerlink" title="Adapt"></a>Adapt</h2><ol>
<li>When a popover is presenting itself in a horizontally compact environment (e.g. iPhone), there might not be enough room to show a popover window comfortably, so by default it “adapts” and shows the MVC in full screen modal instead. </li>
<li>But the popover presentation controller’s delegate can control this “adaptation” behavior. </li>
<li>The first way is to implement method <code>adaptivePresentationStyle</code>. If it returns <code>none</code>, iOS will not adapt it, i.e. still keep popover even in iPhone. </li>
<li>The second way is to give another MVC to represent. In this way, we usually only wrap the original MVC we want to present into a Navigation Controller or so. To do this, we need to implement the <code>presentationController</code> method. <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// . 1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adaptivePresentationStyle</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">for</span> controller: UIPresentationController,</span></span></span><br><span class="line"><span class="function"><span class="params">	traitCollection: UITraitCollection</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span> -&gt; <span class="type">UIModalPresentationStyle</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="type">UIModalPresentationStyle</span>.<span class="keyword">none</span> <span class="comment">// don’t adapt</span></span><br><span class="line">	<span class="comment">// the default in horizontally compact environments (iPhone) is .fullScreen</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// . 2</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">presentationController</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  controller: UIPresentationController,</span></span></span><br><span class="line"><span class="function"><span class="params">	viewControllerForAdaptivePresentationStyle: UIModalPresentationStyle</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span> -&gt; <span class="type">UIViewController?</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// return a UIViewController to use (e.g. wrap a Navigation Controller around your MVC)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Size"><a href="#Size" class="headerlink" title="Size"></a>Size</h2><ol>
<li>A popover will be made pretty large unless someone tells it otherwise.</li>
<li>The MVC being presented knows best what it’s “preferred” size inside a popover would be.</li>
<li>It expresses that via <code>preferredContentSize</code> in itself (i.e. in the Controller of the MVC being presented)</li>
<li>The MVC is not guaranteed to be that size, but the system will try its best.</li>
<li>You can set or override the var to always return an appropriate size. </li>
<li>Sometimes we need the size to fit a certain view. We can use the syntax <code>view?.sizeThatFits(…)</code>. If we want to fit as small as possible, then we pass <code>UILayoutFittingCompressedSize</code>, or we pass <code>UILayoutFittingExpandedSize</code>. </li>
</ol>
<h1 id="Unwind"><a href="#Unwind" class="headerlink" title="Unwind"></a>Unwind</h1><ol>
<li>This is the only segue that does <code>not</code> create a new MVC. It can only segue to other MVCs that (directly or indirectly) presented the current MVC. </li>
<li>To make it work, instead of ctrl-dragging to another MVC, you ctrl-drag to the “Exit” button in the same MVC. </li>
<li>Then you can choose a special <code>@IBAction</code> method you’ve created in another MVC. This means “segue by exiting me and finding a presenter who implements that method”. </li>
<li>If no presenter (directly or indirectly) implements that method, the segue will not happen. </li>
<li>This method must be marked <code>@IBAction</code>, and it must have a <code>UIStoryboardSegue</code> as its only argument. </li>
<li>If the @IBAction can be found, the presented MVC will get to prepare as normal. </li>
<li>Then the special @IBAction will be called in the other MVC and that MVC will be shown on screen. </li>
<li>The presenting MVC will be dismissed in the process and be “unpresented” and thrown away.  </li>
</ol>
<h1 id="Embed"><a href="#Embed" class="headerlink" title="Embed"></a>Embed</h1><ol>
<li>Putting a VC’s self.view in another VC’s view hierarchy. This can be a very powerful encapsulation technique. </li>
<li>Drag out a Container View from the object palette into the scene you want to embed it in.</li>
<li>Automatically sets up an “Embed Segue” from container VC to the contained VC.</li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>Swift开发 (Stanford CS193p)</category>
      </categories>
      <tags>
        <tag>应用开发</tag>
        <tag>Swift</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>16. Series</title>
    <url>/2020/02/20/16-Series/</url>
    <content><![CDATA[<h1 id="Infinite-Series"><a href="#Infinite-Series" class="headerlink" title="Infinite Series"></a>Infinite Series</h1><ol>
<li><script type="math/tex">S_N=\displaystyle\sum^N_{n=0}a_n</script>. <script type="math/tex">S=\displaystyle\sum^\infty_{n= 0}a_n=\lim_{N\to\infty}\sum^N_{n=0}a_n</script>. <script type="math/tex">S</script> converges if limit exists. </li>
<li><script type="math/tex">S_N</script> is larger than the lower Riemann sum of <script type="math/tex">\displaystyle\int^N_1f(x)dx</script> when <script type="math/tex">\Delta x=1</script> and is less than the upper Riemann sum of when <script type="math/tex">\Delta x=1</script>. </li>
<li><code>Integral comparison</code>: If <script type="math/tex">f(x)</script> is decreasing, <script type="math/tex">f(x)>0</script>, then <script type="math/tex">\Bigg|\displaystyle\sum^\infty_{n=0}f(n)-\int^\infty_1f(x)dx\Bigg|<f(1)</script>. <script type="math/tex">\displaystyle\sum^\infty_{n=0}f(n)</script> and <script type="math/tex">\int^\infty_1f(x)dx</script> either both converge or both diverge. </li>
<li>If <script type="math/tex">f(n)\sim g(n)</script>, and <script type="math/tex">g(n)>0</script> as <script type="math/tex">n\to\infty</script> for all <script type="math/tex">n</script> then <script type="math/tex">\displaystyle\sum^\infty_{n=0} f(n),\sum^\infty_{n=0} g(n)</script> either both converge or both diverge. </li>
</ol>
<h1 id="Power-Series"><a href="#Power-Series" class="headerlink" title="Power Series"></a>Power Series</h1><ol>
<li>Geometric series: <script type="math/tex">1+x+x^2+x^3+…=\displaystyle\frac{1}{1-x}</script> when <script type="math/tex">|x|<1</script>. <br />&emsp;Proof: Assume <script type="math/tex">1+x+x^2+…=S</script>. Multiply with <script type="math/tex">x</script>, <script type="math/tex">x+x^2+x^2+…=Sx</script>. <br />&emsp;Subtract the second equation from the first one <script type="math/tex">1=S(1-x)</script>. So <script type="math/tex">S=\displaystyle\frac{1}{1-x}</script>. </li>
<li>General power series: <script type="math/tex">a_0+a_1x+a_2x^2+…=\displaystyle\sum^\infty_{n=0}a_nx^n</script>. </li>
<li><script type="math/tex">|x|<R</script> (<script type="math/tex">R</script> is the radius of convergence <script type="math/tex">0≤R≤\infty</script>) where seriese converges and <script type="math/tex">|a_nx^n|</script> tends to zero exponentially fast. <script type="math/tex">|x|>R,\  \displaystyle\sum^\infty_{n=0}a_nx^n</script> diverges, and <script type="math/tex">|a_nx^n|</script> doesn’t tend to zero at all. <script type="math/tex">|x|=R</script> is a very delicate borderline. </li>
<li>Rules for convergent power series are just like polynomials. We can do add, multiplication, division, substitution, differentiation and integrate them. </li>
<li><code>Taylor&#39;s formula</code>: <script type="math/tex">f(x)=\displaystyle\sum^\infty_{n=0}\frac{f^{(n)}(0)}{n!}x^n</script>, for any <script type="math/tex">f(x)</script>. </li>
<li><script type="math/tex; mode=display">e^x=\displaystyle\sum^\infty_{n=0}\frac{1}{n!}x^n$$<br />So $$e=e^x\Big|_{x=1}=\displaystyle\sum^\infty_{x=0}\frac{1}{n!}</script></li>
<li>Another expresion of Taylor’s formula is <script type="math/tex">a_n=\displaystyle\frac{f^{(n)}(0)}{n!}</script>. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>单变量微积分 (MIT 18.01)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>16. Determinant Formulas and Cofactors</title>
    <url>/2020/02/02/16-Determinant-Formulas-and-Cofactors/</url>
    <content><![CDATA[<h1 id="Pivot-Formula"><a href="#Pivot-Formula" class="headerlink" title="Pivot Formula"></a>Pivot Formula</h1><ol>
<li>We can eliminate to factorize <script type="math/tex">PA=LU</script>. So <script type="math/tex">|P||A|=|L||U|= \displaystyle\prod^{n}_{i=1}1\displaystyle \prod^{n}_{i=1}{d_i}</script>, which gives us <script type="math/tex">|A|=\pm(d_1d_2…d_n)</script>. Here <script type="math/tex">d_i</script> is the pivots in the diagonal of <script type="math/tex">U</script>. </li>
<li>Without row exchanges, if we take the upper left <script type="math/tex">k</script> by <script type="math/tex">k</script> square in <script type="math/tex">A</script> as <script type="math/tex">A_k</script>, the kth pivot is <script type="math/tex">d_k=\frac{|A_k|}{|A_{k-1}|}</script>. </li>
</ol>
<h1 id="The-Big-Formula"><a href="#The-Big-Formula" class="headerlink" title="The Big Formula"></a>The Big Formula</h1><ol>
<li>One row a time, we use the linearity to split determinant into <script type="math/tex">n</script> determinant with only one nonzero entry in the current row. <br />After <script type="math/tex">n</script> rows, we get <script type="math/tex">n^n</script> determinant and most of them are zero. <br />For example, <script type="math/tex">\left|\begin{array}{aa}a&b\\c&d\end{array}\right|=\left|\begin{array}{aa}a&0\\c&d\end{array}\right|+\left|\begin{array}{aa}0&b\\c&d\end{array}\right|=\left|\begin{array}{aa}a&0\\0&d\end{array}\right|+\left|\begin{array}{aa}a&0\\c&0\end{array}\right|+\left|\begin{array}{aa}0&b\\0&d\end{array}\right|+\left|\begin{array}{aa}0&b\\c&0\end{array}\right|</script><br />The new determinants are nonzero if and only if all none zero entries are not one the same row and the same column. </li>
<li>All the “survived” determinants are a form of permutation and we can calculate with permutation by factoring all entries out. </li>
<li>Each product had one entry from each row and also one entry from each column. </li>
<li>The formula has <script type="math/tex">n!</script> terms to add up. Half the terms have minus signs while the other half have plus signs determined by the permutation matrix. </li>
<li>The <script type="math/tex">n!</script> possibilities are <script type="math/tex">n</script> columns <script type="math/tex">(1,2,…,n)</script> go into each possible order <script type="math/tex">(\alpha,\beta,…,\omega)</script>. And the result is the sum over all <script type="math/tex">n!</script> column permutations <script type="math/tex">P=(\alpha,\beta,…,\omega)</script>. <script type="math/tex">|A|=\sum|P|a_{1\alpha}a_{2\beta}…a_{n\omega}</script>. </li>
<li>When <script type="math/tex">U</script> is upper triangular, only one of the <script type="math/tex">n!</script> products can be nonzero. </li>
</ol>
<h1 id="Cofactors"><a href="#Cofactors" class="headerlink" title="Cofactors"></a>Cofactors</h1><ol>
<li>We note a submatrix <script type="math/tex">M_{ij}</script> of size <script type="math/tex">n-1</script> which comes from the original matrix without row <script type="math/tex">i</script> and column <script type="math/tex">j</script>. </li>
<li>The <code>cofactors</code> <script type="math/tex">C_{ij}=(-1)^{i+j}|M_{ij}|</script>. </li>
<li>The determinant is the sum of all entries in one row times its cofactor. By its cofactor, we mean that the cofactor of <script type="math/tex">a_{ij}</script> is <script type="math/tex">C_{ij}</script>. </li>
<li><script type="math/tex">|A|=\displaystyle\sum^{n}_{j=1}{a_{ij}C_{ij}}</script>. </li>
<li>This is a recursive way to calculate determinants. The determinant to calculate goes from order <script type="math/tex">n</script> to order <script type="math/tex">n-1</script> and finally comes to order <script type="math/tex">1</script> which don’t need calculation. </li>
<li>Cofactors are useful when matrices have many zeros. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>线性代数 (MIT 18.06)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>15. Properties of Determinants</title>
    <url>/2020/02/02/15-Properties-of-Determinants/</url>
    <content><![CDATA[<ol>
<li>The determinant of the identity matrix is <script type="math/tex">1</script>. </li>
<li>The determinant changes sign when two rows (or columns) are exchanged. </li>
<li>The determinant is a linear function of each row separately. <br />If one raw is mutiplied by <script type="math/tex">t</script>, the determinant is multiplied by <script type="math/tex">t</script>. <br /><code>MARK</code>: If multiply an <script type="math/tex">n</script> by <script type="math/tex">n</script> matrix with a scalar <script type="math/tex">t</script>, the determinant becomes <script type="math/tex">t^n</script> for all rows are multiplied by <script type="math/tex">t</script><br />If two matrices share all rows <strong>but one</strong>, the determinant of the sum of that two matrices is the sum of the determinant of the two separate matrices. <br /><code>MARK</code>: <script type="math/tex">|A+B|≠|A|+|B|</script></li>
<li>If two rows of <script type="math/tex">A</script> are equal, then <script type="math/tex">|A|=0</script>. <br />If exhange that two rows, the determinnat changes sign but is stil the same determinant with the same value. Only <script type="math/tex">0</script> can do that. </li>
<li>Subtracting a multiple of one row from another leaves <script type="math/tex">|A|</script> unchanged. <br />We can split the subtraction into a substraction of two matrices. The subtracting matrix has to have two dependent rows, which makes its determinant zero. </li>
<li>A matrix with a row of zeros has <script type="math/tex">|A|=0</script>. <br />Multiply the zero row with any nonzero scalar. The determinant is not changed. </li>
<li>If <script type="math/tex">A</script> is triangular then <script type="math/tex">|A|=\displaystyle\prod^{n}_{i=1}{a_{ii}}=product\ of\ diagonal\ entries</script>. <br />If all entries of <script type="math/tex">A</script> is not zero, eliminate the triangular matrix to a diagonal matrix. Factor all entries from their row to get <script type="math/tex">|A|=\displaystyle\prod^{n}_{i=1}{a_{ii}} \times |I|=\displaystyle\prod^{n}_{i=1}{a_{ii}}</script>. <br />If one entry of <script type="math/tex">A</script> is zero, we can eliminate to make that row a zero row to know its determinant is zero. </li>
<li>If <script type="math/tex">A</script> is singular then <script type="math/tex">|A|=0</script>. If <script type="math/tex">A</script> is invertible then <script type="math/tex">|A|≠0</script>. <br />Eliminate <script type="math/tex">A</script> to triangular <script type="math/tex">U</script>, if <script type="math/tex">A</script> is singular, <script type="math/tex">U</script> must has a zero in the diagonal to make the determinant zero or the determinant is the mutiplication of diagonal nonzero. </li>
<li><script type="math/tex">|AB|=|A||B|</script>. <br />If <script type="math/tex">B=A^{-1}</script>, <script type="math/tex">|A||A^{-1}|=|AA^{-1}|=|I|=1</script>. So <script type="math/tex">|A^{-1}|=\frac{1}{|A|}</script>. </li>
<li>The transpose <script type="math/tex">A^T</script> has the same determinant as <script type="math/tex">A</script>. <br />Factor them into <script type="math/tex">PA=LU</script> and <script type="math/tex">A^TP^T=U^TL^T</script>. <br />So <script type="math/tex">|P||A|=|L||U|</script> and <script type="math/tex">|A^T||P^T|=|U^T||L^T|</script>. <br /><script type="math/tex">|L|=|L^T|=1</script> (diagonal is all 1s). <script type="math/tex">|U|=|U^T|</script> (pivots don’t change). <br /><script type="math/tex">|P||P^T|=1</script>, so <script type="math/tex">|P|=|P^T|=\pm 1</script>. <br />Conclusion, <script type="math/tex">|A|=|A^T|</script></li>
<li>With rule 10, all properties of rows can be applied to columns (just need a little transpose). </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>线性代数 (MIT 18.06)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>18. Eigenvalues and Eigenvectors</title>
    <url>/2020/02/03/18-Eigenvalues-and-Eigenvectors/</url>
    <content><![CDATA[<h1 id="Eigenvalues-and-Eigenvectors"><a href="#Eigenvalues-and-Eigenvectors" class="headerlink" title="Eigenvalues and Eigenvectors"></a>Eigenvalues and Eigenvectors</h1><ol>
<li>An <code>eigenvector</code> is a vector doesn’t change direction even when multiplied by <script type="math/tex">A</script>. </li>
<li>So the basis equation is <script type="math/tex">A\vec{x}=\lambda\vec{x}</script>. The number <script type="math/tex">\lambda</script> is an <code>eigenvalue</code> of <script type="math/tex">A</script>. </li>
<li><script type="math/tex">\lambda=0</script> means the eigenvector is in <script type="math/tex">N(A)</script>. <br /><script type="math/tex">\lambda=1</script> means the eigenvector is a steady state that doesn’t change. </li>
<li>If <script type="math/tex">\lambda</script> is the eigenvalue and <script type="math/tex">\vec{x}</script> is the eigenvector of <script type="math/tex">A</script>, for <script type="math/tex">B=A^n</script>, its eigenvector stays the same while its eigenvalue <script type="math/tex">\lambda'=\lambda^n</script>. And the eigenvalue of <script type="math/tex">A^{-1}</script> is <script type="math/tex">\lambda^{-1}</script>. </li>
<li>For the projection matrix <script type="math/tex">P</script>, <script type="math/tex">P\vec{x}=\vec{x}</script>. Its eigenvalue is <script type="math/tex">1</script> and <script type="math/tex">0</script>. The eigenvectors for <script type="math/tex">\lambda=1</script> and <script type="math/tex">\lambda=0</script> fill the column space (in the projection plane) and nullspace (perpendicular to the projection plane). </li>
<li>If each column of a matrix adds to <script type="math/tex">1</script>, that martix is <code>Markov matrix</code>. <script type="math/tex">\lambda=1</script> is its largest eigenvalue. </li>
<li>The reflection matrix <script type="math/tex">R=\left[\begin{matrix}0&1\\1&0\end{matrix}\right]</script> has eigenvalues <script type="math/tex">1</script> and <script type="math/tex">-1</script>. </li>
<li>When a matrix is shifted by <script type="math/tex">I</script>, each <script type="math/tex">\lambda</script> is shifted by <script type="math/tex">1</script>. NO change in eigenvectors. </li>
<li>If <script type="math/tex">A</script> is singular, <script type="math/tex">0</script> must be one of the eigenvalues. </li>
<li>The eigenvalues might not be real numbers. </li>
<li>An orthogonal martix (<script type="math/tex">Q^TQ=I</script>) corresponds to a complex number with <script type="math/tex">|\lambda|=1</script>. </li>
<li><script type="math/tex">A</script> and <script type="math/tex">A^T</script> share the same eigenvalues. </li>
</ol>
<h1 id="Equation-for-the-Eigenvalues"><a href="#Equation-for-the-Eigenvalues" class="headerlink" title="Equation for the Eigenvalues"></a>Equation for the Eigenvalues</h1><ol>
<li>For projection matrices we found <script type="math/tex">\lambda</script>‘s and <script type="math/tex">\vec{x}</script>‘s by geometry: <script type="math/tex">P\vec{x}=\vec{x}</script> and <script type="math/tex">P\vec{x}=\vec{0}</script>. </li>
<li>For others, we need to solve the equation <script type="math/tex">A\vec{x}=\lambda\vec{x}</script>. <br />First move <script type="math/tex">\lambda\vec{x}</script> to the left side, to get <script type="math/tex">(A-\lambda I)\vec{x}=\vec{0}</script>. <br />This means that eigenvectors make up <script type="math/tex">N(A-\lambda I)</script>. <br />If that new equation has a nonzero solution, <script type="math/tex">A-\lambda I</script> must be singular, which leads us to its determinant is zero. </li>
<li>The equation we really need to solve is <script type="math/tex">|A-\lambda I|=0</script>. This is called the <code>eigenequation</code> or <code>characteristic equation</code>. </li>
<li>When <script type="math/tex">A</script> is <script type="math/tex">n</script> by <script type="math/tex">n</script>, <script type="math/tex">A</script> has <script type="math/tex">n</script> eigenvalues (they might repeat). Each <script type="math/tex">\lambda</script> leads to one <script type="math/tex">\vec{x}</script>. We can solve <script type="math/tex">(A-\lambda I)\vec{x}=\vec{0}</script> or <script type="math/tex">A\vec{x}=\lambda \vec{x}</script> to find eigenvectors. </li>
</ol>
<h1 id="Determinant-and-Trace"><a href="#Determinant-and-Trace" class="headerlink" title="Determinant and Trace"></a>Determinant and Trace</h1><ol>
<li>Elimination does noe preserve the <script type="math/tex">\lambda</script>‘s. </li>
<li>The product of the <script type="math/tex">n</script> eigenvalues equals the determinant. </li>
<li>The sum of the <script type="math/tex">n</script> eigenvalues equals the sum of the <script type="math/tex">n</script> diagonal entries. We can the sum <code>trance of martix</code>. </li>
<li>The diagonal of triangualr martix is the eigenvalues. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>线性代数 (MIT 18.06)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>17. Cramers Rule, Inverse Matrix, and Volume</title>
    <url>/2020/02/03/17.%20Cramers-Rule-Inverse-Matrix-and-Volume/</url>
    <content><![CDATA[<h1 id="Cramer’s-Rule"><a href="#Cramer’s-Rule" class="headerlink" title="Cramer’s Rule"></a>Cramer’s Rule</h1><ol>
<li>This is a new way to solve <script type="math/tex">A\vec{x}=\vec{b}</script>. </li>
<li>First let’s sovle the first unknown <script type="math/tex">x_1</script>. <br />Replace the first column of <script type="math/tex">I</script> with <script type="math/tex">\vec{x}</script>. <br /><script type="math/tex">A</script> multiplies that matrix will give a new matrix <script type="math/tex">B</script>. <script type="math/tex">B</script> is actually <script type="math/tex">A</script> replacing first column with <script type="math/tex">\vec{b}</script>. </li>
<li>Calculate their determinants, <script type="math/tex">|A|(x_1)=|B|</script>. To get <script type="math/tex">x_1=\frac{|A|}{|B|}</script></li>
<li>Just like how we solved <script type="math/tex">x_1</script>, replace the second column of <script type="math/tex">A</script> with <script type="math/tex">\vec{x}</script>, the third, …, the nth. We can solve all components of <script type="math/tex">\vec{x}</script>. </li>
<li><code>Cramer&#39;s Ruie</code>: <script type="math/tex">x_i=\frac{|B_i|}{|A|}</script>. Here <script type="math/tex">B_i</script> has the ith column of <script type="math/tex">A</script> replaced by <script type="math/tex">\vec{b}</script>. </li>
<li>With Cramer’s Rule, we can find another solution to <script type="math/tex">A^{-1}</script>. <br />To solve the equation of <script type="math/tex">AA^{-1}=I</script>, we can split it into <script type="math/tex">n</script> <script type="math/tex">A\vec{x}=\vec{b}</script> form equations. <br />Now all <script type="math/tex">\vec{b}</script>s are a column with only a <script type="math/tex">1</script> and <script type="math/tex">n-1</script> 0s. Calculate the <script type="math/tex">|B_{ij}|</script> (the determinant we need to solve the <script type="math/tex">jth</script> component of the <script type="math/tex">ith</script> equation) with cofactor along that column <script type="math/tex">\vec{b}</script>, we can find <script type="math/tex">|B_{ij}|=|C_{ji}|</script>. <br />So <script type="math/tex">(A^{-1})_{ij}=\frac{C_{ji}}{|A|}</script>.   <code>MARK</code>: NOT <script type="math/tex">C_{ij}</script>. Because the <script type="math/tex">1</script> in <script type="math/tex">B_{ij}</script> is in the <script type="math/tex">ith</script> column <script type="math/tex">jth</script> row. <br />Put the <script type="math/tex">C_{ij}</script> into the corresponding entry of a matrix, we can get the <code>cofactor matrix</code> <script type="math/tex">C</script>. <script type="math/tex">A^{-1}=\frac{C^T}{|A|}</script></li>
<li>We can directly calculate the result <script type="math/tex">I'</script> of <script type="math/tex">AC^T</script>. <br />In the diagonal, we have <script type="math/tex">I'_{ii}=(row\ i\ of\ A)\cdot(column\ i\ of\ C^T)=\sum a_{ik}C_{ik}=|A|</script>. <br />Off the main diagonal, we have <script type="math/tex">I'_{ij}=(row\ i\ of\ A)\cdot(column\ j\ of\ C^T)=\sum a_{ik}C_{jk}</script>. This is the value of a new matrix with <script type="math/tex">jth</script> row of <script type="math/tex">A</script> replaced by <script type="math/tex">ith</script>. <br />So that determinant has two equal rows which makes its value <script type="math/tex">0</script>. <br />Concolusion, <script type="math/tex">I'</script> has <script type="math/tex">|A|</script> in its main diagonal and <script type="math/tex">0</script>s in other entries. <br /><script type="math/tex">AC^T=|A|I \Longrightarrow A\frac{C^T}{|A|}=I \Longrightarrow A^{-1}=\frac{C^T}{|A|}</script></li>
<li>If <script type="math/tex">A</script> is a triangular matrix, if <script type="math/tex">a_{ij}</script> is in the nonezero part of martix, <script type="math/tex">C_{ij}</script> has zeros in the diagonal. So <script type="math/tex">C_{ij}=0</script> when <script type="math/tex">a_{ij}≠0</script>. And after transpose, we can get a matrix <script type="math/tex">C^T</script> the same shape as <script type="math/tex">A</script>. So the inverse of a triangular is also a triangualar. </li>
</ol>
<h1 id="Area-of-a-Triangular"><a href="#Area-of-a-Triangular" class="headerlink" title="Area of a Triangular"></a>Area of a Triangular</h1><ol>
<li>If three points of <script type="math/tex">A</script> is <script type="math/tex">(x_1, y_1)</script>, <script type="math/tex">(x_2,y_2)</script>, <script type="math/tex">(x_3,y_3)</script>, its area is <script type="math/tex">S=\frac{1}{2}\left|\begin{array}{ccc}x_1&y_1&1\\x_2&y_2&1\\x_3&y_3&1\end{array}\right|</script>. </li>
<li>If <script type="math/tex">(x_3,y_3)=(0,0)</script>, <script type="math/tex">S=\frac{1}{2}\left|\begin{array}{ccc}x_1&y_1\\x_2&y_2\end{array}\right|</script></li>
<li>A triangular is half of a parallelogram. If the four points of a parallelogram are <script type="math/tex">(0,0)</script>, <script type="math/tex">(x_1, y_1)</script>, <script type="math/tex">(x_2,y_2)</script>, <script type="math/tex">(x_1+x_2,y_1+y_2)</script>, its area is <script type="math/tex">S=\left|\begin{array}{ccc}x_1&y_1\\x_2&y_2\end{array}\right|</script>. </li>
<li>This law can expand to higher dimension, like the volume in 3-dimension. The volume of box <script type="math/tex">V=|3\ by\ 3\ determinant|</script>. That determinant is formed by three independent edge vectors. </li>
</ol>
<h1 id="Cross-Product"><a href="#Cross-Product" class="headerlink" title="Cross Product"></a>Cross Product</h1><ol>
<li>The <code>cross product</code> is a vector in the same dimension written <script type="math/tex">\vec{u}\times \vec{v}</script> called “<script type="math/tex">\vec{u}</script> cross <script type="math/tex">\vec{v}</script>“. </li>
<li>The components of this cross product are <script type="math/tex">2</script> by <script type="math/tex">2</script> cofactors. </li>
<li>If we write <script type="math/tex">\vec{u}=\left[\begin{matrix}u_1\\u_2\\u_3\end{matrix}\right]=u_1\vec{i}+u_2\vec{j}+u_3\vec{k}</script> and <script type="math/tex">\vec{v}=\left[\begin{matrix}v_1\\v_2\\v_3\end{matrix}\right]=v_1\vec{i}+v_2\vec{j}+v_3\vec{k}</script>, then <script type="math/tex">\vec{u}\times\vec{v}=\left|\begin{array}{cccc}\vec{i}&\vec{j}&\vec{k}\\u_1&u_2&u_3\\v_1&v_2&v_3\end{array}\right|</script>. </li>
<li><script type="math/tex">\vec{v}\times\vec{u}=-(\vec{u}\times\vec{v})</script> for it exchanging the lower two rows. </li>
<li><script type="math/tex">\vec{u}\times\vec{v}</script> is perpedicular to <script type="math/tex">\vec{u}</script> and <script type="math/tex">\vec{v}</script>. </li>
<li>The cross product of two dependent vector with itself is zero. </li>
<li><script type="math/tex; mode=display">||\vec{u}\times\vec{v}||=||\vec{u}||\ ||\vec{v}||\ |sin\ \theta|</script></li>
<li>The length os <script type="math/tex">\vec{u}\times\vec{v}</script> is the area of parallelogram with sides <script type="math/tex">\vec{u}</script> and <script type="math/tex">\vec{v}</script>. </li>
<li>The direction obeys the <code>right hand rule</code>. </li>
<li>Triple product <script type="math/tex">(\vec{u}\times\vec{v})\cdot\vec{w}</script> can replace the vector row in the cross product determinant with <script type="math/tex">\vec{w}^T</script>. </li>
<li>The triple product is the volumn of box. The cross product is the vector perpendicular to the base and its length is the area. The dot product is the area times the height in its direction.  </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>线性代数 (MIT 18.06)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>19. Diagonalization</title>
    <url>/2020/02/03/19-Diagonalization/</url>
    <content><![CDATA[<h1 id="Diagonization"><a href="#Diagonization" class="headerlink" title="Diagonization"></a>Diagonization</h1><ol>
<li>Suppose the <script type="math/tex">n</script> by <script type="math/tex">n</script> martix <script type="math/tex">A</script> has <script type="math/tex">n</script> independent eigenvectors <script type="math/tex">\vec{x_1},\ …,\ \vec{x_n}</script>. Put them into the columns of an <code>eigenvector martix</code> <script type="math/tex">X</script>. <br /><script type="math/tex">X^{-1}AX=\Lambda=\left[\begin{matrix}\lambda_1\\&\ddots\\&&\lambda_n\end{matrix}\right]</script></li>
<li>We can also get <script type="math/tex">A=X\Lambda X^{-1}</script>. </li>
<li><script type="math/tex; mode=display">AX =A\left[\begin{matrix}\\\vec{x_1}&…&\vec{x_n}\\&\end{matrix}\right]=\left[\begin{matrix}\\A\vec{x_1}&&A\vec{x_n}\\&\end{matrix}\right]=\left[\begin{matrix}\\\lambda_1\vec{x_1}&…&\lambda_n\vec{x_n}\\&\end{matrix}\right]=\left[\begin{matrix}\\\vec{x_1}&…&\vec{x_n}\\&\end{matrix}\right]\left[\begin{matrix}\lambda_1\\&\ddots\\&&\lambda_n\end{matrix}\right]=X\Lambda</script></li>
<li>The powers of <script type="math/tex">A</script>: <script type="math/tex">A^k=(X\Lambda X^{-1})(X\Lambda X^{-1})…(X\Lambda X^{-1})=X\Lambda^k X^{-1}</script> (<script type="math/tex">k</script> can even be <script type="math/tex">-1</script>)</li>
<li>if <script type="math/tex">n</script> eigenvalues are different, <script type="math/tex">n</script> eigenvectors are different, <script type="math/tex">A</script> is diagonizable. </li>
<li>If <script type="math/tex">A</script> has repeated eigenvalues, <script type="math/tex">A</script> still has a chance to be diagonizable. </li>
<li>Eigenvectors can be multiplied by any nonzero constants. </li>
<li>The eigenvectors in <script type="math/tex">X</script> come in the same order as the eigenvalues in <script type="math/tex">\Lambda</script>. </li>
<li>Invertibility only affects if one eigenvalue is <script type="math/tex">0</script>. But diagonalizability is concerned with the number of different eigenvalues. </li>
</ol>
<h1 id="Fibonacci"><a href="#Fibonacci" class="headerlink" title="Fibonacci"></a>Fibonacci</h1><ol>
<li>If <script type="math/tex">n</script> eigenvectors are independent, all vectors in <script type="math/tex">R^n</script> can be represented by eigenvectors. </li>
<li>If <script type="math/tex">\vec{u_{k+1}}=A\vec{u_k}</script> for any dimension vector <script type="math/tex">\vec{u_i}</script> and given a known vector <script type="math/tex">\vec{u_0}</script>. This is the classical Fibonacci formula. </li>
<li>We can factorize <script type="math/tex">\vec{u_0}=c_1\vec{x_1}+…+c_n\vec{x_n}</script>. Here <script type="math/tex">\vec{x_i}</script>‘s are eigenvecgtors of <script type="math/tex">A</script>. </li>
<li>For <script type="math/tex">\vec{u_k}</script>, we can find <script type="math/tex">\vec{u_k}=A^k\vec{u_0}=c_1A^k\vec{x_1}+…+c_nA^k\vec{x_n}=c_1\lambda^k\vec{x_1}+…+c_n\lambda^k\vec{x_n}</script>. </li>
<li>When <script type="math/tex">k \rightarrow \infty</script>, all terms with <script type="math/tex">|\lambda_i| < 1</script> approach to zero which can be ignored. </li>
<li>For Fibonacci, two eigenvalues are <script type="math/tex">\frac{1 \pm\sqrt5}{2}</script>. <script type="math/tex">|\frac{1-\sqrt5}{2}| < 1</script>, so its value are mostly determined by <script type="math/tex">\frac{1+\sqrt5}{2}</script>. </li>
</ol>
<h1 id="Similar-Matrices"><a href="#Similar-Matrices" class="headerlink" title="Similar Matrices"></a>Similar Matrices</h1><ol>
<li>All matrices with the same <script type="math/tex">\Lambda</script> are called <code>similar</code>. </li>
<li>Extend this idea to non-diagonizable matrices, if <script type="math/tex">B</script> is any invertible matrix, <script type="math/tex">C</script> is any matrix, <script type="math/tex">A=BCB^{-1}</script>. Then we say <script type="math/tex">A</script> and <script type="math/tex">C</script> are similar. </li>
<li>Similar matrices have the same eigenvalues. <br />&emsp; Proof: if <script type="math/tex">A\vec{x}=\lambda\vec{x}</script>, multily a <script type="math/tex">B^{-1}</script> on the left and add a <script type="math/tex">BB^{-1}</script> between <script type="math/tex">A</script> and <script type="math/tex">\vec{x}</script>. <br />&emsp;We get <script type="math/tex">(B^{-1}AB)B^{-1}\vec{x}=\lambda B^{-1}\vec{x}</script>. So <script type="math/tex">CB^{-1}\vec{x}=\lambda B^{-1}\vec{x}</script>. <br />So <script type="math/tex">\lambda</script> is also an eigenvalue of <script type="math/tex">C</script> and its corresponding eigenvector is <script type="math/tex">B^{-1}\vec{x}</script>. </li>
<li>If <script type="math/tex">C=I</script>, <script type="math/tex">BIB^{-1}=I</script>. Only <script type="math/tex">I</script> is similar to <script type="math/tex">I</script>. So <script type="math/tex">I</script> is the only diagonizable matrix with all eigenvalues <script type="math/tex">\lambda=1</script>. </li>
<li><code>Jordan block</code>: for a <script type="math/tex">n</script> by <script type="math/tex">n</script> square block, it has <script type="math/tex">n</script> repeated eigenvalues on the main diagonal and the left of each eigenvalue is a <script type="math/tex">1</script> except the last one and all other entries are <script type="math/tex">0</script>. <script type="math/tex">J_i=\left[\begin{matrix}\lambda_i&1\\&\lambda_i&1\\&&\ddots&\ddots\\&&&\lambda_i&1\\&&&&\lambda_i\end{matrix}\right]</script>. </li>
<li>Each Jordan block has only one eigenvectors. </li>
<li><code>Jordan form matrix</code>: This is a kind of matrices with Jordan blocks on the diagonal and <script type="math/tex">0</script>‘s on other place. </li>
<li>The number of eigenvectors of a Jordan matrix is the number of Jordan blocks. </li>
<li>Jordan matrix is the representation of a similar family. </li>
</ol>
<h1 id="Multiplicity"><a href="#Multiplicity" class="headerlink" title="Multiplicity"></a>Multiplicity</h1><ol>
<li>The <code>geometric multiplicity (GM)</code> is the independent eigenvectors for <script type="math/tex">\lambda</script>. GM is the dimension of <script type="math/tex">N(A-\lambda I)</script>. </li>
<li>The <code>algebraic multiplicity (AM)</code> is the repetition of <script type="math/tex">\lambda</script> among the eigenvalues. AM is depend on the roots of <script type="math/tex">|A-\lambda I|=0</script>. </li>
<li>Always <script type="math/tex">GM ≤ AM</script> for each <script type="math/tex">\lambda</script>. </li>
<li>When <script type="math/tex">GM < AM</script>, <script type="math/tex">A</script> is not diagonalizable. <script type="math/tex">A</script> is diagonizable if and only if <script type="math/tex">GM=AM</script>.</li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>线性代数 (MIT 18.06)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>20. Differential Equations and exp(At)</title>
    <url>/2020/02/04/20-Differential-Equations-and-exp-At/</url>
    <content><![CDATA[<h1 id="First-Order-Equations"><a href="#First-Order-Equations" class="headerlink" title="First Order Equations"></a>First Order Equations</h1><ol>
<li>System of <script type="math/tex">n</script> equations form an equation of vector <script type="math/tex">\frac{d\vec{u}}{dt}=A\vec{u}</script> starting from the vector <script type="math/tex">\vec{u}(0)=\left[\begin{matrix}u_1(0)\\\dots\\u_n(0)\end{matrix}\right]</script> at <script type="math/tex">t=0</script>. </li>
<li>Every this kind of equation is actually <script type="math/tex">n</script> equations. We can solve them separately and then combine them together. </li>
<li>These differential equations are linear. If <script type="math/tex">\vec{u}(t)</script> and <script type="math/tex">\vec{v}(t)</script> are solutions, so is <script type="math/tex">C\vec{u}(t)+D\vec{v}(t)</script>. </li>
<li>Choose <script type="math/tex">\vec{u}=e^{\lambda t}\vec{x}</script> when <script type="math/tex">A\vec{x}=\lambda\vec{x}</script>. <script type="math/tex">\frac{d\vec{u}}{dt}=\lambda e^{\lambda t}\vec{x}</script> agrees with <script type="math/tex">A\vec{u}=Ae^{\lambda t}\vec{x}</script>. <script type="math/tex">\lambda</script> is the eigenvalue of <script type="math/tex">A</script> and <script type="math/tex">\vec{x}</script> is the corresponding eigenvector. </li>
<li>The solution grows when <script type="math/tex">\lambda >0</script> and decays when <script type="math/tex">\lambda <0</script>. If <script type="math/tex">\lambda</script> is a complex number, its real part decides growth or decay. the imaginary part <script type="math/tex">\omega</script> gives oscillation <script type="math/tex">e^{i\omega t}</script> like a sine wave. </li>
<li>That solution still has an undeterminted constant <script type="math/tex">C</script> in every term and it’s given by the <script type="math/tex">u_0(t)</script>. We just need to write <script type="math/tex">u_0(t)</script> with eigenvectors of <script type="math/tex">A</script>. </li>
<li>If <script type="math/tex">\vec{u}(0)=c_1\vec{x_1}+…+c_n\vec{x_n}</script>, the final solution is <script type="math/tex">u(t)=c_1e^{\lambda_1t}\vec{x_1}+…+c_ne^{\lambda_nt}\vec{x_n}</script>. </li>
<li>If two <script type="math/tex">\lambda</script>‘s are equal, with only one eigenvector, another solution is needed. </li>
</ol>
<h1 id="Second-Order-Equations"><a href="#Second-Order-Equations" class="headerlink" title="Second Order Equations"></a>Second Order Equations</h1><ol>
<li>To solve the equation <script type="math/tex">m\frac{d^2y}{dt^2}+b\frac{dy}{dt}+ky=\vec{0}</script>. </li>
<li>We can have two euquations <script type="math/tex">\frac{dy}{dt}=y'</script> and <script type="math/tex">\frac{dy'}{dt}=-\frac{k}{m}y-\frac{b}{m}y'</script>. So we can create a differential equation <script type="math/tex">\frac{d}{dt}\left[\begin{matrix}y\\y'\end{matrix}\right]=\left[\begin{matrix}0&1\\-\frac{k}{m}&-\frac{b}{m}\end{matrix}\right]\left[\begin{matrix}y\\y'\end{matrix}\right]</script>. <br />Now we only need to solve the new equation. <br />To find eigenvalues and eigenvectors of <script type="math/tex">A</script>, solve <script type="math/tex">|A-\lambda I|=\left|\begin{matrix}-\lambda&1\\ - \frac{k}{m}&-\frac{b}{m}-\lambda\end{matrix}\right|=0</script>. <br />We get two eigenvalues <script type="math/tex">\lambda_1</script> and <script type="math/tex">\lambda_2</script> and two eigenvectors <script type="math/tex">\left[\begin{matrix}1\\\lambda_1\end{matrix}\right]</script> and <script type="math/tex">\left[\begin{matrix}1\\\lambda_2\end{matrix}\right]</script>. <br />So <script type="math/tex">\vec{u(t)}=c_1e^{\lambda_1 t}\left[\begin{matrix}1\\\lambda_1\end{matrix}\right]+c_2e^{\lambda_2t}\left[\begin{matrix}1\\\lambda_2\end{matrix}\right]</script>. <br /><script type="math/tex">y</script> is the first component of <script type="math/tex">\vec{u}(t)</script>, <script type="math/tex">y=c_1e^{\lambda_1t}+c_2e^{\lambda_2t}</script>. </li>
<li>Substitute <script type="math/tex">y=e^{\lambda t}</script> to get <script type="math/tex">(m\lambda^2+b\lambda+k)e^{\lambda t}=0</script>. <br />That equation depends on <script type="math/tex">m\lambda^2+b\lambda+k=0</script>. It has two root <script type="math/tex">\lambda_1</script>and <script type="math/tex">\lambda_2</script>. <br />So <script type="math/tex">y=c_1e^{\lambda_1t}+c_2e^{\lambda_2t}</script>. </li>
</ol>
<h1 id="Exponential-of-a-Matrix"><a href="#Exponential-of-a-Matrix" class="headerlink" title="Exponential of a Matrix"></a>Exponential of a Matrix</h1><ol>
<li>According to Taylor Formula <script type="math/tex">e^x=1+\displaystyle\sum^\infty_{i=1}\frac{1}{i\ !}x^i</script>, we define <script type="math/tex">e^{At}=I+\displaystyle\sum^\infty_{i=1}{\frac{1}{i\ !}(At)^i}</script></li>
<li><script type="math/tex">\frac{de^{At}}{dt}=A+A^2t+\frac{1}{2}A^3t^2+…=Ae^{At}</script>. </li>
<li>The eigenvalues of <script type="math/tex">e^{At}</script> are <script type="math/tex">e^{\lambda t}</script>. </li>
<li>We can write the solution of frist order equation <script type="math/tex">\vec{u}(t)=e^{At}\vec{u}(0)</script>. </li>
<li>If <script type="math/tex">A</script> is diagonalizable, substitute <script type="math/tex">A</script> with <script type="math/tex">X\Lambda X^{-1}</script>, <script type="math/tex">e^{At}=Xe^{\Lambda T}X^{-1}</script>. </li>
<li><script type="math/tex; mode=display">(e^{At})^{-1}=e^{-At}</script></li>
<li>When <script type="math/tex">A</script> is antisymmetric, <script type="math/tex">e^{At}</script> is orthogonal. Inverse = transpose = <script type="math/tex">e^{-AT}</script>. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>线性代数 (MIT 18.06)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>21. Markov Matrices; Fourier Series</title>
    <url>/2020/02/04/21-Markov-Matrices-Fourier-Series/</url>
    <content><![CDATA[<h1 id="Markov-Matrices"><a href="#Markov-Matrices" class="headerlink" title="Markov Matrices"></a>Markov Matrices</h1><ol>
<li>If every entry of <script type="math/tex">A</script> is positive and every column of <script type="math/tex">A</script> adds to <script type="math/tex">1</script>, <script type="math/tex">A</script> is a <code>Markov Matrices</code>. </li>
<li>Columns of Markov matrices are probability vectors. </li>
<li><script type="math/tex">1</script> is an eigenvalue for any Markov matrix. <br />Proof: columns of <script type="math/tex">A-I</script> add to <script type="math/tex">0</script>. So the sum of rows is <script type="math/tex">\vec{0}^T</script>. So <script type="math/tex">A-I</script> is singular, with determinant <script type="math/tex">0</script>. </li>
<li><script type="math/tex">\vec{u_k}=A\vec{u_{k-1}}</script>, after <script type="math/tex">k</script> steps we have <script type="math/tex">A^k\vec{u_0}</script>. The vectors will approach a steady state <script type="math/tex">\vec{u_\infty}</script>. </li>
<li>The steady state equation <script type="math/tex">A\vec{u_\infty}=\vec{u_\infty}</script> makes <script type="math/tex">\vec{u_\infty}</script> and eigenvector with eigenvalue <script type="math/tex">1</script>. </li>
<li><script type="math/tex">\vec{u_\infty}=\displaystyle\lim_{k\to \infty}{A^k\vec{u_0}}</script>. So <script type="math/tex">\vec{u_\infty}</script> depends on <script type="math/tex">A^k</script>. Since a Markov matrix is always diagonalizable, <script type="math/tex">A^k=X\Lambda^kX^{-1}</script>. <br /><script type="math/tex">1</script> must be one of the eigenvalues. we can write <script type="math/tex">\vec{u_k}=c_11^k\vec{x_1}+c_2(\lambda_2)^k\vec{x_2}+…+c_n(\lambda_n)^k\vec{x_n}</script>. Since <script type="math/tex">|\lambda_i|<1</script>, when <script type="math/tex">k</script> approaches to infinity, <script type="math/tex">k</script> power of all other eigenvalues approach zero. <br />So <script type="math/tex">\vec{u_\infty}=c_1\vec{x_1}</script>. </li>
</ol>
<h1 id="Fourier-Series"><a href="#Fourier-Series" class="headerlink" title="Fourier Series"></a>Fourier Series</h1><ol>
<li>Dot product between functions is <script type="math/tex">f^Tg=\displaystyle\int_0^{2\pi}{f(x)g(x)\ dx}</script>. Functions <script type="math/tex">f</script> and <script type="math/tex">g</script> are orthogonal if <script type="math/tex">f^Tg=0</script>. </li>
<li>Projection into orthonormal basis. If <script type="math/tex">\vec{v}=Q\vec{x}</script>, then <script type="math/tex">x_i=\vec{q_i}^T\vec{v}</script>. </li>
<li><code>Fourier series</code>: <script type="math/tex">f(x)=a_01+a_1cos\ x+b_1sin\ x+a_2cos\ 2x+b_2sin\ 2x+…</script></li>
<li>Notice that <script type="math/tex">f(x)</script> are similar to the projection since <script type="math/tex">1,cos\ x,sin\ x,cos\ 2x, sin\ 2x</script> are all orthonormal basis. </li>
<li>We can find the coeffecients with <script type="math/tex">\vec{q_i}^T\vec{v}</script>. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>线性代数 (MIT 18.06)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>22. Symmetric Matrices</title>
    <url>/2020/02/04/22-Symmetric-Matrices/</url>
    <content><![CDATA[<h1 id="Symmetric-Matrices"><a href="#Symmetric-Matrices" class="headerlink" title="Symmetric Matrices"></a>Symmetric Matrices</h1><ol>
<li><script type="math/tex">S</script> is a real symmetric matrix. <br />Diagonalize <script type="math/tex">S=X\Lambda X^{-1}</script>. Since <script type="math/tex">S^T=S</script>, <script type="math/tex">S^T=(X^{-1})^T\Lambda X^T=S</script>. <br />Compare two equations, it’s easy to see that <script type="math/tex">X^T=X^{-1}</script>. So <script type="math/tex">X^TX=I</script>, which makes <script type="math/tex">X</script> orthogonal matrix. <br />To make things easier, we usually choose orthonormal vectors to be the eigenvectors. </li>
<li>All eigenvalues and all components of all eigenvectors are real. <br />Proof: Take the conjugate of <script type="math/tex">\lambda</script> as <script type="math/tex">\overline\lambda</script>, <script type="math/tex">\vec{x}</script> as <script type="math/tex">\overline{\vec{x}}</script>. <br /><script type="math/tex">\overline\lambda\overline{\vec{x}}=\overline{\lambda\vec{x}}</script>. Substitute to <script type="math/tex">S\vec{x}=\lambda\vec{x}</script>, <script type="math/tex">S\overline{\vec{x}}=\overline{\lambda}\overline{\vec{x}}</script>. <br />Take the transpose <script type="math/tex">\overline{\vec{x}}^TS=\overline{\vec{x}}^T\overline\lambda</script>. <br />Take the dot product <script type="math/tex">\overline{\vec{x}}^T(S\vec{x})=\overline{\vec{x}}^T(\lambda\vec{x})</script> and <script type="math/tex">(\overline{\vec{x}}^TS)\vec{x}=(\overline{\vec{x}}^T\overline\lambda)\vec{x}</script>. <br />Compare them we know that <script type="math/tex">\overline{\vec{x}}^T\lambda\vec{x}=\overline{\vec{x}}^T\lambda\vec{x}</script><br />So <script type="math/tex">\lambda=\overline\lambda</script>, i.e. <script type="math/tex">a+bi=a-bi\ (a,b\in R)</script>. <br />Conclusion, <script type="math/tex">b=0</script>, <script type="math/tex">\lambda</script> is real. </li>
<li><code>Spectral Theorem</code>: Every symmetric matrix has the factorization <script type="math/tex">S=Q\Lambda Q^{-1}=Q\Lambda Q^T</script> with <strong>real</strong> eigenvalues in <script type="math/tex">\Lambda</script> and orthonormal eigenvectors in the columns of <script type="math/tex">Q</script>. </li>
<li>Every symmetric matrix <script type="math/tex">S=Q\Lambda Q^T=\lambda_1\vec{q_1}^T\vec{q_1}+…+\lambda_n\vec{q_n}^T\vec{q_n}</script>. </li>
<li><script type="math/tex">S\vec{q_i}=(\lambda_1\vec{q_1}^T\vec{q_1}+…+\lambda_n\vec{q_n}^T\vec{q_n})\vec{q_i}=\lambda_i\vec{q_i}</script>. </li>
<li>For symmetric matrices, the number of positive eigenvalues equals the number of positive pivots. </li>
<li><code>Schur&#39;s Theorem</code>: Every square <script type="math/tex">A</script> factors into <script type="math/tex">QTQ^{-1}</script> where <script type="math/tex">T</script> is upper triangular and <script type="math/tex">\overline{Q}^T=Q^{-1}</script>. If <script type="math/tex">A</script> has real eigenvalues then <script type="math/tex">Q</script> and <script type="math/tex">T</script> can be chosen real: <script type="math/tex">Q^TQ=I</script>. </li>
<li>Eigenvalues of <script type="math/tex">S</script> can be repeated, but <script type="math/tex">S</script> is always diagonizable. <br />Proof: Factor <script type="math/tex">S=QTQ^{-1}</script>, <script type="math/tex">T=Q^TSQ</script>. <script type="math/tex">T^T=T</script>, so <script type="math/tex">T</script> is symatric. <script type="math/tex">T</script> is also uppertriangular, so <script type="math/tex">T</script> is <script type="math/tex">\Lambda</script>.  </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>线性代数 (MIT 18.06)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>2-sat算法</title>
    <url>/2019/11/09/2-sat%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>2-sat算法为可满足算法中的特例，对于k-sat算法，若k &gt; 2，则问题是一个NP完全问题，但2-sat不是。2-sat问题一般是：每一个集合里都有两个元素，不同集合里的元素之间可能有矛盾，现在要从每一个集合里都取出一个元素作为代表，且取出的元素两两之间没有矛盾</p>
<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p><strong>构图</strong>：记i和i’是同一个集合里的两个元素，则易得如果i和j有矛盾，则选了i就必选j’，选了j就必选i’。如果选了i就必选j’我们就连一条从i到j’的有向边<br><strong>主体思想</strong>：从一个点出发沿着有向边一直走，选择路过的每一个点<br><strong>失败判断</strong>：走到一个点，那个点所在的集合内的两个点都被标记了<br><strong>失败后的处理</strong>：先清空标记，把失败这次的开始节点换成该集合内的另一个节点，如果还失败就说明无解<br><strong>代码</strong>(假设2i - 1和2i是在同一个集合里)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; mp[MAXN];</span><br><span class="line"><span class="keyword">int</span> mark[MAXN], ans[MAXN];</span><br><span class="line"><span class="comment">//mark记录在该次遍历中经过的点，用于清除记录(如果失败)，ans就标记的是选中的点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAnother</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">//获得该集合内另一点的标号</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span> ? x + <span class="number">1</span> : x - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> m)</span>   <span class="comment">//m：矛盾对的个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        mp[arr[i].x].push_back(getAnother(arr[i].y));</span><br><span class="line">        mp[arr[i].y].push_back(getAnother(arr[i].x));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n, <span class="keyword">int</span> &amp; len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ans[getAnother(x)]) <span class="comment">//一个集合内有两个点被标记</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans[x])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans[x] = <span class="number">1</span>;</span><br><span class="line">    mark[len++] = x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mp[x].<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!dfs(mp[x][i], n, len))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">two_sat</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="keyword">sizeof</span>(ans));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="comment">//遍历所有的集合</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!ans[i &lt;&lt; <span class="number">1</span>] &amp;&amp; !ans[(i &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            len = <span class="number">0</span>; <span class="comment">//在这次遍历中直到失败/结束访问的节点的个数</span></span><br><span class="line">            <span class="keyword">if</span>(!dfs((i &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>, n, len)) <span class="comment">//失败</span></span><br><span class="line">            &#123;</span><br><span class="line">            	<span class="comment">//先清除记录</span></span><br><span class="line">                <span class="keyword">while</span>(len)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans[mark[--len]] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//再从集合内另一个点开始遍历</span></span><br><span class="line">                <span class="keyword">if</span>(!dfs((i &lt;&lt; <span class="number">1</span>), n, len))</span><br><span class="line">                &#123;</span><br><span class="line">                	<span class="comment">//再失败就说明无解</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>有向图中经常会有环，根据上面对边的定义，可以发现环中的每一个元素要么都选要么都不选，而且这个问题中的环都是对称的，我们就可以利用强连通分量把多个形成环的点缩成一个点，减少点数</p>
]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>17. Core Motion and Camera</title>
    <url>/2019/08/28/17-Core-Motion-and-Camera/</url>
    <content><![CDATA[<h1 id="Core-Motion"><a href="#Core-Motion" class="headerlink" title="Core Motion"></a>Core Motion</h1><h2 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h2><ol>
<li>Core Motion is an API to access motion sensing hardware on your device. </li>
<li>Its primary inputs are <code>Accelerometer</code>, <code>Gyro</code>, <code>Magnetometer</code>. Not all devices have all inputs. </li>
<li>Class used to get this input is <code>CMMotionManager</code>. Use only one instance per application (else performance hit). It is a “global resource,” so getting one via a class method somewhere is okay</li>
<li>There are two main usages of it. The first step of both usage is <code>Check to see what hardware is available</code>. Then we can either <code>Start the sampling going and poll the motion manager for the latest sample it has</code> or <code>Set the rate at which you want data to be reported from the hardware and register a closure (and a queue to run it on) to call each time a sample is taken</code>. <a id="more"></a>
</li>
</ol>
<h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><ol>
<li>Of all the variables to check availability of hardware sensors, there is one special called <code>deviceMotionAvailable</code>, which is a combination of all available (accelerometer, magnetometer, gyro). </li>
<li>To start the hardware sensors collecting data, you only need to do this if you are going to poll for data. Generally used when some architecture in your app is already periodic. </li>
<li>There are also some variables to check if the hardware is currently collecting data. </li>
<li>It is a performance hit to be collecting data, so stop during times you don’t need the data. </li>
<li><code>CMAccelerometerData</code> object provides <code>var acceleration: CMAcceleration</code> which has three properties <code>x</code>, <code>y</code>, and <code>z</code>. Their units are all g(9.8 m/s<sup>2</sup>). </li>
<li><code>CMGyroData</code> object provides <code>var rotationRate: CMRotationRate</code> which is also three dimension with units of radians/s. </li>
<li><code>CMMagnetometerData</code> object provides <code>var magneticField: CMMagneticField</code> which is also three dimension with units of microteslas. </li>
</ol>
<h2 id="Register-A-Block-to-Receive-Data"><a href="#Register-A-Block-to-Receive-Data" class="headerlink" title="Register A Block to Receive Data"></a>Register A Block to Receive Data</h2><ol>
<li>Register a block to receive Accelerometer data. </li>
<li>Register a block to receive Gyro data. </li>
<li>Register a block to receive Magnetometer data. </li>
<li>Register a block to receive DeviceMotion data. </li>
<li>Set the rate at which your block gets executed</li>
<li>Queue can be an OperationQueue() you create or Operation.mainQueue (or currentQueue)</li>
<li>It is okay to add multiple handler blocksEven, though you are only allowed one CMMotionManager. However, each of the blocks will receive the data at the same rate (as set above) (Multiple objects are allowed to poll at the same time as well, of course.)<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// . 1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">startAccelerometerUpdatesToQueue</span><span class="params">(queue: OperationQueue, withHandler: CMAccelerometerHandler)</span></span></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">CMAccelerationHandler</span> = (<span class="type">CMAccelerometerData?</span>, <span class="type">Error?</span>) -&gt; <span class="type">Void</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// . 2</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">startGyroUpdatesToQueue</span><span class="params">(queue: OperationQueue, withHandler: CMGyroHandler)</span></span></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">CMGyroHandler</span> = (<span class="type">CMGyroData?</span>, <span class="type">Error?</span>) -&gt; <span class="type">Void</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// . 3</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">startMagnetometerUpdatesToQueue</span><span class="params">(queue: OperationQueue, withHandler: CMMagnetometerHandler)</span></span></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">CMMagnetometerHandler</span> = (<span class="type">CMMagnetometerData?</span>, <span class="type">Error?</span>) -&gt; <span class="type">Void</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// . 4</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">startDeviceMotionUpdates</span><span class="params">(using: CMAttitudeReferenceFrame, queue: OperationQueue, withHandler: <span class="params">(CMDeviceMotion?, Error?)</span></span></span> -&gt; <span class="type">Void</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// . 5</span></span><br><span class="line"><span class="keyword">var</span> accelerometerUpdateInterval: <span class="type">TimeInterval</span></span><br><span class="line"><span class="keyword">var</span> gyroUpdateInterval: <span class="type">TimeInterval</span></span><br><span class="line"><span class="keyword">var</span> magnetometerUpdateInterval: <span class="type">TimeInterval</span></span><br><span class="line"><span class="keyword">var</span> deviceMotionUpdateInterval: <span class="type">TimeInterval</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="CMDeviceMotion"><a href="#CMDeviceMotion" class="headerlink" title="CMDeviceMotion"></a>CMDeviceMotion</h2><ol>
<li>CMDeviceMotion is a “combined” motion data source. It uses information from all the hardware to improve the data from each. </li>
<li>The Acceleration Data in CMDeviceMotion has two main variables <code>gravity</code> and <code>userAcceleration</code>. The later one is gravity factored out using gyro. </li>
<li><code>rotationRate</code> is bias removed from raw data using accelerometer. </li>
<li><code>attitude</code> is device’s attitude (orientation) in 3D space. </li>
<li>In the nested class <code>CMAttitude</code>, there are three properties. <code>roll</code> is around longitudinal axis passing through top/bottom. <code>pitch</code> is around lateral axis passing through sides. <code>yaw</code> is around axis with origin at CofG and vertical to screen directed down. </li>
<li><code>heading</code> is degrees, where 0 is north (true or magnetic depending on frame). </li>
</ol>
<h2 id="Accelerometer-Over-Time"><a href="#Accelerometer-Over-Time" class="headerlink" title="Accelerometer Over Time"></a>Accelerometer Over Time</h2><ol>
<li>Sometimes you don’t need to look at the accelerometer in real time.</li>
<li>You just want to know what happened over a period of time in the past.</li>
<li>The class CMSensorRecorder can record (at 50hz) and then play back accelerometer data.</li>
<li>Not all devices are capable of this (iPhone 7 and later, Apple Watch).</li>
<li>We can check if recording is available with method <code>isAccelerometerRecordingAvailable()</code></li>
<li>We can start recording data and retrieving the recorded data. </li>
<li>You enumerate over the CMAccelerometerData objects in a CMSensorDataList with for-in. <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// . 6</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">recordAccelerometer</span><span class="params">(forDuration: TimeInterval)</span></span> <span class="comment">// keep this short for performance</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">accelerometerData</span><span class="params">(from: Date, to: Date)</span></span> -&gt; <span class="type">CMSensorDataList</span> <span class="comment">// 3 day max</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// . 7</span></span><br><span class="line"><span class="keyword">for</span> dataPoint: <span class="type">CMRecordedAccelerometerData</span> <span class="keyword">in</span> sensorDataList &#123; . . . &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Activity-Monitoring"><a href="#Activity-Monitoring" class="headerlink" title="Activity Monitoring"></a>Activity Monitoring</h2><ol>
<li>It’s rough estimate of what the user is doing. For example, stationary, walking, running, automotive, or cycling. </li>
<li>You track this with a <code>CMMotionActivityManager</code> (not a CMMotionManager!). </li>
<li><code>CMMotionActivity</code> is one of the above activities.</li>
<li>You can also query historical activity. <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// . 3</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">startActivityUpdates</span><span class="params">(to: OperationQueue, withHandler: <span class="params">(CMMotionActivity?)</span></span></span> -&gt; <span class="type">Void</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// . 4</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryActivityStarting</span><span class="params">(from: Date, to: Date, to: OperationQueue, withHandler: ...)</span></span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Pedometer"><a href="#Pedometer" class="headerlink" title="Pedometer"></a>Pedometer</h2><ol>
<li>Getting the user’s “step” information only makes sense over time.</li>
<li>Create a CMPedometer and then send it the message. </li>
<li>The from Date is allowed to be in the past (but only last 7 days are recorded).</li>
<li>Your handler will be called periodically with the struct CMPedometerData which has <code>startDate</code> and <code>endDate</code> of the data, <code>numberOfSteps</code>, <code>distance</code>, <code>averageActivePace</code>, and <code>currentPace</code> during the time also <code>floorsAscended</code> and <code>floorsDescended</code>. </li>
<li>It can also get relative altitude changes. </li>
<li>CMAltitudeData has both change in altitude in meters and raw atmospheric pressure data.<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// . 2</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">startUpdates</span><span class="params">(from: Date, withHandler: <span class="params">(CMPedometerData?, Error?)</span></span></span> -&gt; <span class="type">Void</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// . 5</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">startRelativeAltitudeUpdates</span><span class="params">(to: OperationQueue, withHandler: <span class="params">(CMAltitudeData?, Error?)</span></span></span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Authorization"><a href="#Authorization" class="headerlink" title="Authorization"></a>Authorization</h2><ol>
<li>Some information is considered “private” to the user (e.g. fitness data). Specifically <code>CMPedometer</code>, <code>CMSensorRecorder</code>, <code>CMMotionActivityManager</code> and <code>CMAltimeter</code>. </li>
<li>iOS will automatically ask the user (once) for permission to access this information.</li>
<li>You can find out what the status is at any time with this static func on each of these.</li>
<li>Lack of authorization may also show up as an error when you request data. </li>
<li>It has four status. <code>notDetermined</code> means that user has not yet been asked. <code>restricted</code> means that fitness data access disabled in Settings. <code>denied</code> means that user has explicitly denied your app access. <code>authorized</code> means that ``ready to go. <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">authorizationStatus</span><span class="params">()</span></span> -&gt; <span class="type">CMAuthorizationStatus</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CMAuthorizationStatus</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">case</span> notDetermined</span><br><span class="line">	<span class="keyword">case</span> restricted</span><br><span class="line">	<span class="keyword">case</span> denied</span><br><span class="line">	<span class="keyword">case</span> authorized</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="UIImagePickerController"><a href="#UIImagePickerController" class="headerlink" title="UIImagePickerController"></a>UIImagePickerController</h1><ol>
<li>It can get media from camera or photo library. </li>
<li>You can only offer camera or photo library on iPad. </li>
<li>We can check what operation is abailable with method <code>isSourceTypeAvailable</code>. It takes one parameter <code>sourceType</code> type of <code>UIImagePickerControllerSourceType</code> which can be <code>.photoLibrary</code> or <code>.camera</code> or <code>.savedPhotosAlbum</code>. It returns a Bool. </li>
<li>We can also check what kind of media is available with method <code>availableMediaTypes</code>. It takes one parameter <code>for</code> type of <code>UIImagePickerControllerSourceType</code>. It returns an optional array of String. Depending on device, it will return one or more of these. <code>kUTTypeImage</code> means pretty much all sources provide this, hardly worth checking for even. <code>kUTTypeLivePhoto</code> means must also say kUTTypeImage for this one to work. <code>kUTTypeMovie</code> means audio and video together, only some sources provide this. These are declared in the <code>MobileCoreServices</code> framework.</li>
<li>To set the picker, we need to first create an instance of <code>UIImagePickerController</code>. And set its <code>delegate</code> to self. After check the availability, we can set its <code>sourceType</code> and <code>mediaTypes</code>. mediaTypes is an array of String. To configure it, we need to cast the <code>kUTType…</code> into a String. </li>
<li>If set <code>allowsEditing</code> true, then the user will have opportunity to edit the image/video inside the picker. When your delegate is notified that the user is done, you’ll get <code>both raw and edited</code> versions. </li>
<li>We can set the quality of captured vedio to the variable <code>videoQuality</code>. It can be <code>.typeMedium (default)</code>, <code>.typeHigh</code>, <code>.type640x480</code>, <code>.typeLow</code>, <code>.typeIFrame1280x720</code> or <code>.typeIFrame960x540</code>. The last two is native on some devices. </li>
<li>We can also set the maximun time to capture medias with <code>videoMaximumDuration</code> which is default 10 minutes. </li>
<li>The captured media can be presented as a VC. </li>
<li>On iPad, if you are not offering Camera (just photo library), you must present with popover. If you are offering the Camera on iPad, then full-screen is preferred.</li>
<li>Delegate will be notified when user is done. </li>
<li>Dismiss it when cancel happens. </li>
<li>There is an <code>Info</code> array which contains all the media source. It’s a dictionary and its keys are multiple.<br><code>UIImagePickerControllerMediaType</code> → <code>kUTTypeImage</code>, <code>kUTTypeMovie</code>.<br><code>UIImagePickerControllerOriginalImage</code> and <code>UIImagePickerControllerEditedImage</code> → <code>UIImage</code>. <code>UIImagePickerControllerImageURL</code> → <code>URL (in a temp location, so move it to keep it)</code>.<br><code>UIImagePickerControllerCropRect</code> → <code>CGRect (in an NSValue)</code>.<br><code>UIImagePickerControllerMediaMetadata</code> → <code>Dictionary of info about the image</code>.<br><code>UIImagePickerControllerLivePhoto</code> → <code>a PHLivePhoto</code><br><code>UIImagePickerControllerPHAsset</code> → <code>a PHAsset (see PHPhotoLibrary)</code><br><code>UIImagePickerControllerMediaURL</code> → <code>URL of the video if kUTTypeMovie</code></li>
<li>You can save the image you just took to the user’s Camera Roll. <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// . 3</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">isSourceTypeAvailable</span><span class="params">(sourceType: UIImagePickerControllerSourceType)</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// . 4</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">availableMediaTypes</span><span class="params">(<span class="keyword">for</span>: UIImagePickerControllerSourceType)</span></span> -&gt; [<span class="type">String</span>]?</span><br><span class="line"></span><br><span class="line"><span class="comment">// . 5</span></span><br><span class="line"><span class="keyword">let</span> picker = <span class="type">UIImagePickerController</span>()</span><br><span class="line"><span class="keyword">let</span> mediaTypeMovie = kUTTypeMovie <span class="keyword">as</span> <span class="type">String</span></span><br><span class="line">picker.delegate = <span class="keyword">self</span> <span class="comment">// self must implement UINavigationControllerDelegate too </span></span><br><span class="line"><span class="keyword">if</span> <span class="type">UIIPC</span>.isSourceTypeAvailable(.camera)</span><br><span class="line">&#123;</span><br><span class="line">	picker.sourceType = .camera</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">let</span> availableTypes = <span class="type">UIIPC</span>.availableMediaTypesForSourceType(.camera)</span><br><span class="line">  &#123;</span><br><span class="line">		<span class="keyword">if</span> availableTypes.<span class="built_in">contains</span>(mediaTypeMovie)</span><br><span class="line">    &#123;</span><br><span class="line">			picker.mediaTypes = [mediaTypeMovie]</span><br><span class="line">			<span class="comment">// proceed to put the picker up</span></span><br><span class="line">		&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// .11</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">imagePickerController</span><span class="params">(UIImagePickerController, didFinishPickingMediaWithInfo info: [String:<span class="keyword">Any</span>])</span></span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// extract image/movie data/metadata here from info, more on the next slide </span></span><br><span class="line">  picker.presentingViewController?.dismiss(animated: <span class="literal">true</span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// . 12</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">imagePickerControllerDidCancel</span><span class="params">(UIImagePickerController)</span></span></span><br><span class="line">&#123;</span><br><span class="line">	picker.presentingViewController?.dismiss(animated: <span class="literal">true</span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// . 14</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">UIImageWriteToSavedPhotosAlbum</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="number">_</span> image: UIImage,</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="number">_</span> target: <span class="keyword">Any</span>?, // the object to send selector to when finished writing</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="number">_</span> selector: Selector? // selector to send to target when finished writing</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="number">_</span> context: UnsafeMutableRawPointer? // passed to the selector</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>Swift开发 (Stanford CS193p)</category>
      </categories>
      <tags>
        <tag>应用开发</tag>
        <tag>Swift</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>23. Complex Matrices; Fast Fourier Transform</title>
    <url>/2020/02/05/23-Complex-Matrices-Fast-Fourier-Transform/</url>
    <content><![CDATA[<h1 id="Complex-Numbers"><a href="#Complex-Numbers" class="headerlink" title="Complex Numbers"></a>Complex Numbers</h1><h2 id="Basic-Rules"><a href="#Basic-Rules" class="headerlink" title="Basic Rules"></a>Basic Rules</h2><ol>
<li>Two basic equations: <br /><script type="math/tex">i^2=-1</script><br /><script type="math/tex">e^{2\pi i}=1</script></li>
<li>A <code>complex number</code> is a <code>real number</code> plus an <code>imaginary number</code>. Addition keeps the real and imaginary parts separate. </li>
<li>The <code>real part</code> is <script type="math/tex">a=Re(a+bi)</script> while the imaginary part is <script type="math/tex">b=Im(a+bi)</script>. </li>
<li>In the complex plane, real numbers go along x-axis and pure imaginary number are on the y-axis. The complex number <script type="math/tex">a+bi</script> is at the point with coordinates <script type="math/tex">(a,b)</script>. </li>
<li>The complex plane <script type="math/tex">C^1</script> is like the ordinary two-dimensional plane <script type="math/tex">R^2</script>. </li>
<li>The <code>complex conjugate</code> of <script type="math/tex">z=a+bi</script> is <script type="math/tex">\overline z=a-bi</script>. <script type="math/tex">\overline z</script> is the image of <script type="math/tex">z</script> on the other side of the real axis. </li>
<li><script type="math/tex; mode=display">\overline{z_1}+\overline{z_2}=\overline{z_1+z_2}$$<br />$$\overline{z_1}\times\overline{z_2}=\overline{z_1\times z_2}</script></li>
<li>When <script type="math/tex">A</script> is real, then <script type="math/tex">A\vec{x}=\lambda\vec{x} \Leftrightarrow A\overline{\vec{x}}=\overline{\lambda}\overline{\vec{x}}</script>. </li>
<li><script type="math/tex">|z|^2=z\overline z=a^2+b^2=r^2</script>. </li>
<li><script type="math/tex; mode=display">\displaystyle\frac{1}{z}=\frac{1}{z}\frac{\overline z}{\overline z}=\frac{1}{a+bi}\frac{a-bi}{a-bi}=\frac{a-bi}{a^2+b^2}</script></li>
</ol>
<h2 id="Polar-Form"><a href="#Polar-Form" class="headerlink" title="Polar Form"></a>Polar Form</h2><ol>
<li>In <code>polar form</code> <script type="math/tex">z=a+bi=rcos\ \theta+irsin\ \theta=re^{i\theta}</script></li>
<li>The angle of a complex number in polar form doubles when the number is squared. </li>
<li>If <script type="math/tex">z</script> is at angle <script type="math/tex">\theta</script>, its conjugate <script type="math/tex">\overline z</script> is at <script type="math/tex">-\theta</script>. </li>
<li><script type="math/tex">z=r(cos\ \theta+isin\ \theta)</script>, then <script type="math/tex">z^n=r^n(cos\ n\theta+isin\ n\theta)</script>. <br /><script type="math/tex">x=r'(cos\ \theta '+isin\ \theta ')</script>, <script type="math/tex">zx=rr'(cos\ (\theta+\theta ')+isin\ (\theta+\theta'))</script>. </li>
<li>Euler’s formula: <script type="math/tex">e^{i\theta}=cos\ \theta+isin\ \theta</script>. So <script type="math/tex">z=re^{i\theta}</script>. <br />When <script type="math/tex">\theta=2\pi</script>, <script type="math/tex">e^{2\pi i}=1</script></li>
<li><script type="math/tex; mode=display">e^{i\theta}e^{i\theta '}=e^{i(\theta+\theta')}</script></li>
<li><script type="math/tex; mode=display">(re^{i\theta})^n=r^ne^{in\theta}</script></li>
<li>Set <script type="math/tex">w=e^{\frac{2\pi i}{n}}</script>, the <script type="math/tex">nth</script> power of <script type="math/tex">1,w,w^2,…,w^{n-1}</script> all equal 1. </li>
</ol>
<h1 id="Hermitian-and-Unitary-Matrices"><a href="#Hermitian-and-Unitary-Matrices" class="headerlink" title="Hermitian and Unitary Matrices"></a>Hermitian and Unitary Matrices</h1><h2 id="Hermitian"><a href="#Hermitian" class="headerlink" title="Hermitian"></a>Hermitian</h2><ol>
<li><script type="math/tex; mode=display">\overline{z}^Tz=\left[\begin{matrix}\overline{z_1}&…&\overline{z_n}\end{matrix}\right]\left[\begin{matrix}z_1\\\vdots\\z_n\end{matrix}\right]=|z_1|^2+…+|z_n|^2=||z||^2</script></li>
<li><script type="math/tex">z</script> <code>Hermitian</code> is the conjugate transpose of <script type="math/tex">z</script>, <script type="math/tex">\overline{z}^T=z^H</script>. It also works on matrices. </li>
<li>The inner product of real or complex vectors <script type="math/tex">\vec{u}</script> and <script type="math/tex">\vec{v}</script> is <script type="math/tex">\vec{u}^H\vec{v}=\left[\begin{matrix}\overline{u_1}&…&\overline{u_n}\end{matrix}\right]\left[\begin{matrix}v_1\\\vdots\\v_n\end{matrix}\right]=\overline{u_1}v_1+…+\overline{u_n}v_n</script>. </li>
<li>A zero inner product still means that the (complex) ectros are othogonal. </li>
<li><script type="math/tex">(A\vec{u})^H\vec{v}=\vec{u}^H(A^H\vec{v})</script>. </li>
<li><script type="math/tex">A^H</script> is also called the adjoint of <script type="math/tex">A</script>. </li>
<li><script type="math/tex">(AB)^H=B^HA^H</script>. </li>
</ol>
<h2 id="Hermitian-Matrix"><a href="#Hermitian-Matrix" class="headerlink" title="Hermitian Matrix"></a>Hermitian Matrix</h2><ol>
<li>The <code>Hermitian matrix</code> has <script type="math/tex">S=S^H</script>. </li>
<li>The condition on the entries is <script type="math/tex">s_{ij}=\overline{s_{ji}}</script>. </li>
<li>The main diagonal of a Hermitian matrix must be real. </li>
<li>If <script type="math/tex">\vec{z}</script> is any real or complex column vectors, the number <script type="math/tex">\vec{z}^HS\vec{z}</script> is real. <br /><script type="math/tex">(\vec{z}^HS\vec{z})^H=\vec{z}^HS\vec{z}</script></li>
<li>Every eigenvalue of <script type="math/tex">S</script> is real. <br /><script type="math/tex">S\vec{z}=\lambda \vec{z}</script>, <script type="math/tex">\vec{z}^HS\vec{z}=\lambda \vec{z}^H\vec{z}</script>. <script type="math/tex">z^HSz</script> is real and <script type="math/tex">z^Hz</script> is length squared. So <script type="math/tex">\lambda</script> is real. </li>
<li>The eigenvectors of <script type="math/tex">S</script> are orthogonal (when they correspond to different eigenvalues). If <script type="math/tex">S\vec{z}=\lambda \vec{z}</script> and <script type="math/tex">S\vec{y}=\beta\vec{y}</script>, then <script type="math/tex">\vec{y}^H\vec{z}=0</script>. <br /><script type="math/tex">\vec{y}^HS\vec{z}=\vec{y}^H\lambda\vec{z}</script> and <script type="math/tex">\vec{y}^HS^H\vec{z}=\beta\vec{y}^H\vec{z}</script>. So <script type="math/tex">\lambda\vec{y}^H\vec{z}=\beta\vec{y}^H\vec{z}</script>. Since <script type="math/tex">\lambda≠\beta</script>, <script type="math/tex">\vec{y}^H\vec{z}=0</script>. </li>
<li>We can choose orthonormal eigenvectors of <script type="math/tex">S</script> to form an orthogonal matrix <script type="math/tex">Q</script>. This <script type="math/tex">Q</script> is like <script type="math/tex">X</script> in the symmetric matrix, but <script type="math/tex">Q^HQ=I</script>. </li>
</ol>
<h2 id="Unitary-matrix"><a href="#Unitary-matrix" class="headerlink" title="Unitary matrix"></a>Unitary matrix</h2><ol>
<li>A <code>unitary matrix</code> <script type="math/tex">Q</script> is a complex square matrix that has orthonormal columns. </li>
<li>Every matrix <script type="math/tex">Q</script> with orthonormal columns has <script type="math/tex">Q^HQ=I</script>. If <script type="math/tex">Q</script> is square, it’s unitary matrix. Thene <script type="math/tex">Q^{-1}=Q^H</script>. </li>
<li><script type="math/tex">||Q\vec{z}||=||\vec{z}||</script>, Therefore <script type="math/tex">Q\vec{z}=\lambda\vec{z}</script> leads to <script type="math/tex">|\lambda|=1</script>. </li>
</ol>
<h1 id="Fast-Fourier-Transform"><a href="#Fast-Fourier-Transform" class="headerlink" title="Fast Fourier Transform"></a>Fast Fourier Transform</h1><ol>
<li><script type="math/tex">w_n</script> is a root of <script type="math/tex">z^n=1</script>. So is <script type="math/tex">1, w_n,w_n^2,…,w_n^{n-1}</script>. They evenly spaced around the unit circle in the complex plane. Their angle difference is <script type="math/tex">\displaystyle\frac{2\pi}{n}</script>. </li>
<li><code>Fourier matrix</code> is a <script type="math/tex">n</script> by <script type="math/tex">n</script> matrix with <script type="math/tex">w</script> which is the root of <script type="math/tex">z^n=1</script>. <script type="math/tex">F_n=\left[\begin{matrix}1&1&1&\dots&1\\1&w&w^2&\dots&w^{n-1}\\1&w^2&w^4&\dots&w^{2(n-1)}\\\vdots&\vdots&\vdots&&\vdots\\1&w^{n-1}&w^{2(n-1)}&\dots&w^{(n-1)^2}\end{matrix}\right]</script>, the entry in row <script type="math/tex">j</script>, column <script type="math/tex">k</script> (<script type="math/tex">j</script> and <script type="math/tex">k</script> start from <script type="math/tex">0</script> not <script type="math/tex">1</script>) is <script type="math/tex">w^{jk}</script>. Row zero and column zero contain <script type="math/tex">w^0=1</script>. </li>
<li><script type="math/tex">F</script> is not Hermitian. But <script type="math/tex">\displaystyle\frac{1}{\sqrt n}F</script> is a unitary matrix, which means <script type="math/tex">(\displaystyle\frac{1}{\sqrt n}F^H)(\displaystyle\frac{1}{\sqrt n}F)=I</script>. So <script type="math/tex">F^HF=nI</script> and <script type="math/tex">F^{-1}=\displaystyle\frac{1}{n}\overline F</script>. </li>
<li>Ordinary we use <script type="math/tex">n^2</script> multiplications to calculate <script type="math/tex">F\vec{c}</script> (<script type="math/tex">\vec{c}</script> has <script type="math/tex">n</script> complex components). But <code>Fast Fourier Transform</code> can do it in <script type="math/tex">\displaystyle\frac{1}{2}nlog_2n</script>. </li>
<li>The first component of the output is <script type="math/tex">y_0=\displaystyle\sum^{n-1}_{i=0}{c_i}</script>. This is the value of Fourier series <script type="math/tex">\sum c_ke^{ikx}</script> at <script type="math/tex">x=0</script>. <br />The <script type="math/tex">ith</script> component of the output is <script type="math/tex">y_i</script>, which is the value of Fourier series at <script type="math/tex">x=\theta</script> (<script type="math/tex">i</script> starts at <script type="math/tex">0</script>, <script type="math/tex">\theta</script> is the angle of <script type="math/tex">w^i</script>). </li>
<li><script type="math/tex">m=\displaystyle\frac{1}{2}n</script>. The key to FFT is to connect <script type="math/tex">F_n</script> with <script type="math/tex">F_m</script>. <br /><script type="math/tex">F_n=\left[\begin{matrix}I_m&D_m\\I_m&-D_m\end{matrix}\right]\left[\begin{matrix}F_m&\\&F_m\end{matrix}\right]\left[\begin{matrix}even-odd\\permutation\end{matrix}\right]</script>. <br /><script type="math/tex">D_m</script> is athe diagonal matrix with entries <script type="math/tex">1,w,…,w^{m-1}</script>. <br />The last permutation matrix puts all the even rows ahead of all the odd rows (for example, exchange rows <script type="math/tex">0,1,2,3</script> into <script type="math/tex">0,2,1,3</script>). </li>
<li>The last permutation matrix split <script type="math/tex">\vec{c}</script> into even part <script type="math/tex">\vec{c}'</script> and odd part <script type="math/tex">\vec{c}''</script>. <script type="math/tex">\vec{y}'=F_m\vec{c}'</script> and <script type="math/tex">\vec{y}''=F_m\vec{c}''</script>. Reconstruct <script type="math/tex">\vec{y}</script> from <script type="math/tex">\vec{y}'</script> and <script type="math/tex">\vec{y}''</script>: <br /><script type="math/tex">\vec{y_j}=\vec{y_j}'+(w_n)^j\vec{y_j}''</script> for <script type="math/tex">j=0,…,m-1</script><br /><script type="math/tex">\vec{y_{j+m}}=\vec{y_j}'-(w_n)^j\vec{y_j}''</script> for <script type="math/tex">j=0,…,m-1</script></li>
<li>This method comes from <script type="math/tex">y_j=\displaystyle\sum^{n-1}_{k=0}w^{jk}c_k=\displaystyle\sum^{m-1}_{k=0}{w^{2jk}c_{2k}}+\displaystyle\sum^{m-1}_{k=0}{w^{j(2k+1)}c_{2k+1}}\ (m=\displaystyle\frac{1}{2}n)</script></li>
<li>This still need to calculate <script type="math/tex">F_m\vec{c}</script>. we can recurse it to a base that cost only few multiplications to calculate. </li>
</ol>
<h1 id="Fourier-Series"><a href="#Fourier-Series" class="headerlink" title="Fourier Series"></a>Fourier Series</h1><ol>
<li>An infinite dimension vector means that vector is infinitely long or we can say that vector is a function. </li>
<li>The vector <script type="math/tex">\vec{v}</script> and the function <script type="math/tex">f(x)</script> are in our infinite-dimensional <code>Hilbert spaces</code> if and only if their lengths <script type="math/tex">||\vec{v}||</script> and <script type="math/tex">||f||</script> are finite. </li>
<li><script type="math/tex">||\vec{v}||=\vec{v}\cdot\vec{v}=\displaystyle\sum^\infty_{i=0}{v_i^2}</script>. <br /><script type="math/tex">||f||=(f,f)=\displaystyle\int^{b}_a{|f(x)|^2dx}</script>, when <script type="math/tex">f(x)</script> is defined for <script type="math/tex">a≤x≤b</script>. <br />The inner product between functions are defined at <a href="http://www.laughingtree.cn/2020/01/19/05-Transposes-Permutations-Spaces-R-n/" target="_blank" rel="noopener">05. Transposes, Permutations, Spaces Rⁿ</a></li>
<li><code>Schwarz Inequality</code>: <script type="math/tex">|\vec{v}\cdot\vec{w}|≤||\vec{v}||\ ||\vec{w}||</script>. </li>
<li>The Fourier series are defined as <script type="math/tex">f(x)=a_0+a_1cos\ x+b_1sin\ x+a_2cos\ 2x+b_2sin\ 2x+…</script></li>
<li>The cycle of Fourier series is <script type="math/tex">2\pi</script>. </li>
<li>The basis of Fourier series in the function space is <script type="math/tex">1,cos\ x,sin\ x,cos\ 2x, sin\ 2x, …</script>. This is an orthogonal basis. </li>
<li>The length of Fourier series: <br /><script type="math/tex">\begin{align}(f,f)&=\displaystyle\int^{2\pi}_0{(a_0+a_1cos\ x+b_1sin\ x+a_2cos\ 2x+b_2sin\ 2x+…)^2dx}\\&=\displaystyle\int^{2\pi}_0{(a_0^2+a_1^2cos^2\ x+b_1^2sin^2\ x+a_2^2cos^2\ 2x+b_2^2sin^2\ 2x+…)dx}\\&=2\pi a_0^2+\pi(a_1^2+b_1^2+a_2^2+b_2^2+…)\end{align}</script><br />From equation <script type="math/tex">(1)</script> to <script type="math/tex">(2)</script>, we use the orthogonal. All terms except ones that multiplies itself will integrate to <script type="math/tex">0</script>. </li>
<li>Further more, we can choose orthonormal basis <script type="math/tex">\displaystyle\frac{1}{\sqrt{2\pi}},\displaystyle\frac{cos\ x}{\sqrt{\pi}},\displaystyle\frac{sin\ x}{\sqrt{\pi}},\displaystyle\frac{cos\ 2x}{\sqrt{\pi}},\displaystyle\frac{sin\ 2x}{\sqrt{\pi}},…</script><br />Then we can have the length without <script type="math/tex">\pi</script>‘s, <script type="math/tex">||F||^2=(F,F)=A_0^2+A_1^2+B_1^2+A_2^2+B_2^2+…</script></li>
<li>The function space contains <script type="math/tex">f(x)</script> exactly when the Hilbert space contains the vector <script type="math/tex">\vec{v}=(a_0,a_1,b_1,a_2,b_2,…)</script> of <code>Fourier coefficients</code> of <script type="math/tex">f(x)</script>. Both must have finite length. </li>
<li>For coefficient <script type="math/tex">a_k</script>, <script type="math/tex">\displaystyle\int^{2\pi}_{0}{f(x)cos\ kx\ dx}=\displaystyle\int^{2\pi}_{0}{a_kcos^2\ kx\ dx}=\pi a_k</script>. <br />For coefficient <script type="math/tex">b_k</script>, <script type="math/tex">\displaystyle\int^{2\pi}_{0}{f(x)sin\ kx\ dx}=\displaystyle\int^{2\pi}_{0}{b_ksin^2\ kx\ dx}=\pi b_k</script>. <br />For constant term <script type="math/tex">a_0=\displaystyle\int^{2\pi}_0{f(x)\cdot1dx}=average\ value\ of\ f(x)</script>.    </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>线性代数 (MIT 18.06)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>25. Singular Value Decomposition</title>
    <url>/2020/02/06/25-Singular-Value-Decomposition/</url>
    <content><![CDATA[<h1 id="SVD"><a href="#SVD" class="headerlink" title="SVD"></a>SVD</h1><ol>
<li><code>SVD</code> is used to decomposite matrices into small pieces. This is often used in the image storage. </li>
<li>In <a href="http://www.laughingtree.cn/2020/01/30/09-The-Four-Fundamental-Subspaces/" target="_blank" rel="noopener">09. The Four Fundamental Subspaces</a>, we know that every matrix can be written as the sum of several rank <script type="math/tex">1</script> matrices, i.e. all matrices has the form <script type="math/tex">A=\sum \vec{u}\vec{v}^T</script>. </li>
<li>To factorize a matrix, we need two sets of vectors. We use the eigenvectors <script type="math/tex">\vec{u}</script> of <script type="math/tex">AA^T</script> and the eigenvectors <script type="math/tex">\vec{v}</script> of <script type="math/tex">A^TA</script>. </li>
<li>We usually make eigenvectors orthonormal, so the expression of <script type="math/tex">A</script> is <script type="math/tex">A=\displaystyle\sum^r_{i=1} \sigma_i\vec{u_i}\vec{v_i}^T</script>. </li>
<li>The <script type="math/tex">\vec{u}</script>‘s from the SVD are called <code>left singular vectors</code> and the <script type="math/tex">\vec{v}</script>‘s are <code>right singular vectors</code>. The <script type="math/tex">\sigma</script>‘s are <code>singular values</code>. </li>
<li><script type="math/tex; mode=display">AA^T\vec{u_i}=\sigma_1^2\vec{u_i}$$<br />$$A^TA\vec{v_i}=\sigma_i^2\vec{v_i}$$<br />$$A\vec{v_i}=\sigma_i\vec{u_i}</script></li>
<li>The <script type="math/tex">\sigma</script>‘s are the square root of the equal eigenvalues of <script type="math/tex">AA^T</script> and <script type="math/tex">A^TA</script>. </li>
</ol>
<h1 id="Bases-and-Matrices-in-the-SVD"><a href="#Bases-and-Matrices-in-the-SVD" class="headerlink" title="Bases and Matrices in the SVD"></a>Bases and Matrices in the SVD</h1><ol>
<li>Basis of the four fundamental subspaces: <br />&emsp;<script type="math/tex">\vec{u_1},…\vec{u_r}</script> is an <strong>orthonormal</strong> basis for the <strong>column space</strong>. <br />&emsp;<script type="math/tex">\vec{u_{r+1}},…,\vec{u_m}</script> is an <strong>orthonormal</strong> basis for the <strong>left nulspace</strong>. <br />&emsp;<script type="math/tex">\vec{v_1},…,\vec{v_r}</script> is an <strong>orthonormal</strong> basis for the <strong>row space</strong>. <br />&emsp;<script type="math/tex">\vec{v_{r+1}},…,\vec{v_n}</script> is an <strong>orthonormal</strong> basis for the <strong>nullspace</strong>. </li>
<li><code>Reduced SVD</code>: Since <script type="math/tex">A\vec{v_i}=\sigma_i\vec{u_i}</script>, we can have <script type="math/tex">AV_r=U_r\Sigma_r</script>, i.e. <br />$$$$A\left[\begin{matrix}\vec{v_1}&amp;\dots&amp;\vec{v_r}\end{matrix}\right]=\left[\begin{matrix}\vec{u_1}&amp;\dots&amp;\vec{u_r}\end{matrix}\right]\left[\begin{matrix}\sigma_1\\&amp;\ddots\\&amp;&amp;\sigma_r\end{matrix}\right]$$$$. <br />This form only contains the row space and the column space. </li>
<li><code>Full SVD</code>: Include all <script type="math/tex">\vec{v}</script>‘s and <script type="math/tex">\vec{u}</script>‘s, <br /><script type="math/tex">$$A\left[\begin{matrix}\vec{v_1}&\dots&\vec{v_r}&\dots&\vec{v_n}\end{matrix}\right]=\left[\begin{matrix}\vec{u_1}&\dots&\vec{u_r}&\dots&\vec{u_m}\end{matrix}\right]\left[\begin{matrix}\sigma_1\\&\ddots\\&&\sigma_r\\&&&\end{matrix}\right]$$$$. <br />The new</script>\Sigma<script type="math/tex">is suppose to be an</script>m<script type="math/tex">by</script>n<script type="math/tex">matrix, so it has</script>m-r<script type="math/tex">extra zero rows and</script>n-r$$ extra zero columns. This form contains all four fundamental subspaces. </li>
<li>In equation <script type="math/tex">A=\vec{u_1}\sigma_1\vec{v_1}^T+…+\vec{u_r}\sigma_r\vec{v_r}^T</script>, if we put <script type="math/tex">\sigma_i</script> in decending order, this equation gives the <script type="math/tex">r</script> rank-one pieces of <script type="math/tex">A</script> in order of importance. </li>
<li>When <script type="math/tex">A</script> is a positive simidefinite (or definite) symmetric matrix, <script type="math/tex">A=U\Sigma V^T=X\Lambda X^{-1}=Q\Lambda Q^T</script>. </li>
<li>Singular values are more stable then eigenvalues. The changes of singular values won’t be larger than the change in <script type="math/tex">A</script> while the changes in eigenvalues can be a lot larger. <br />Here by change in <script type="math/tex">A</script> means one entry of <script type="math/tex">A</script> is shifted by <script type="math/tex">x</script>. </li>
<li>How the SVD picks off the largest term? <br /><code>Rayleigh quotient</code>: <script type="math/tex">r(x)=\displaystyle\frac{\vec{x}^TS\vec{x}}{\vec{x}^T\vec{x}}</script>. <br />The eigenvectors and eigenvalues can be found with this quotient. First, we try to find <script type="math/tex">\lambda_1=max\ r(x)</script>, we find the vector <script type="math/tex">\vec{q_1}</script> and the value <script type="math/tex">\lambda_1</script>. Second, we try to find <script type="math/tex">\lambda_2=max\ r(x)</script> among all <script type="math/tex">\vec{x}</script>‘s with <script type="math/tex">\vec{q_1}^T\vec{x}=0</script>, and so on to find all eigenvalues and vectors. <br />As for singular values, <script type="math/tex">\sigma=max\ \displaystyle\frac{||A\vec{x}||}{||\vec{x}||}</script>. Maximize <script type="math/tex">\displaystyle\frac{||A\vec{x}||}{||\vec{x}||}</script> also maximize <script type="math/tex">(\displaystyle\frac{||A\vec{x}||}{||\vec{x}||})^2=\displaystyle\frac{\vec{x}^TA^TA\vec{x}}{\vec{x}^T\vec{x}}=\displaystyle\frac{\vec{x}^TS\vec{x}}{\vec{x}^T\vec{x}}=r(x)</script>. So we can find singular values just like when we find eigenvalues. <br />What we find here is in <script type="math/tex">V</script>, later we use <script type="math/tex">A\vec{v}=\sigma\vec{u}</script> to find the corresponding <script type="math/tex">\vec{u}</script>. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>线性代数 (MIT 18.06)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>24. Positive Definite Matrices and Minima</title>
    <url>/2020/02/06/24-Positive-Definite-Matrices-and-Minima/</url>
    <content><![CDATA[<h1 id="Positive-Definite-Matrices"><a href="#Positive-Definite-Matrices" class="headerlink" title="Positive Definite Matrices"></a>Positive Definite Matrices</h1><ol>
<li><code>Positive definite matrix</code>: A symmetric matrix with all eigenvalues positive. </li>
<li>A <script type="math/tex">2</script> by <script type="math/tex">2</script> matrix <script type="math/tex">S=\left[\begin{matrix}a&b\\b&c\end{matrix}\right]</script> is a positive definite, if and only if <script type="math/tex">a>0</script> and <script type="math/tex">ac-b^2>0</script>. <br /><script type="math/tex">ac-b^2>0</script> means <script type="math/tex">ac>0</script>, so <script type="math/tex">a</script> and <script type="math/tex">c</script> have the same sign. And <script type="math/tex">a>0</script>, so <script type="math/tex">c>0</script>. <br />Trace <script type="math/tex">a+c >0</script>, determinant <script type="math/tex">ac-b^2>0</script>, so <script type="math/tex">\lambda_1+\lambda_2>0</script> and <script type="math/tex">\lambda_1\lambda_2>0</script>. <br />So <script type="math/tex">\lambda_1>0</script> and <script type="math/tex">\lambda_2>0</script>. </li>
<li>The eigenvalues of <script type="math/tex">S</script> are positive if and only if the pivots are all positive. </li>
<li>All <script type="math/tex">n</script> upper-left subdeterminants are positive. </li>
</ol>
<h1 id="Energy-based-Definition"><a href="#Energy-based-Definition" class="headerlink" title="Energy-based Definition"></a>Energy-based Definition</h1><ol>
<li><script type="math/tex">S</script> is positive definite if <script type="math/tex">\vec{x}^TS\vec{x}>0</script> for every nonzero vector <script type="math/tex">\vec{x}</script> not only eigenvectors. </li>
<li>If <script type="math/tex">S</script> and <script type="math/tex">T</script> are symmetric positive definite, so is <script type="math/tex">S+T</script>. <br />&emsp;<script type="math/tex">\vec{x}^T(S+T)\vec{x}=\vec{x}^TS\vec{x}+\vec{x}^TT\vec{x}>0</script>. </li>
<li>If the columns of <script type="math/tex">A</script> are independent, then <script type="math/tex">S=A^TA</script> is positive definite. <br />&emsp;<script type="math/tex">\vec{x}^TS\vec{x}=\vec{x}^TA^TA\vec{x}=(A\vec{x})^T(A\vec{x})=||A\vec{x}||^2≥0</script>. <br />&emsp;Since <script type="math/tex">A</script> has independent columns, <script type="math/tex">A\vec{x}≠\vec{0}</script> except when <script type="math/tex">\vec{x}=\vec{0}</script>. But <script type="math/tex">\vec{x}≠\vec{0}</script>. So <script type="math/tex">||A\vec{x}||^2>0</script>. </li>
<li>The <code>Cholesky factor</code>: <script type="math/tex">S=LDL^T=(L\sqrt D)(L\sqrt D)^T</script>. </li>
<li>The eigenvalues can also give a factor: <script type="math/tex">S=(Q\sqrt\Lambda Q^T)(Q\sqrt\Lambda Q^T)^T</script>. </li>
</ol>
<h1 id="Positive-Semidefinite-Matrices"><a href="#Positive-Semidefinite-Matrices" class="headerlink" title="Positive Semidefinite Matrices"></a>Positive Semidefinite Matrices</h1><ol>
<li>If we failed the tests of positive definite matrix at <script type="math/tex">0</script>. Like the smallest eigenvalue is <script type="math/tex">0</script>, one of the determinants is <script type="math/tex">0</script> or <script type="math/tex">\vec{x}^TS\vec{x}=0</script>, then we call those matrices <code>positive semidefinite matrices</code>. </li>
<li>A matrix is positive semidefinite: <br />&emsp;All eigenvalues <script type="math/tex">\lambda≥0</script><br />&emsp;All <script type="math/tex">\vec{x}^TS\vec{x}≥0</script><br />&emsp;All upper-left determinant <script type="math/tex">≥0</script><br />&emsp;All pivots <script type="math/tex">≥0</script></li>
</ol>
<h1 id="Applications"><a href="#Applications" class="headerlink" title="Applications"></a>Applications</h1><ol>
<li>Ellipse <script type="math/tex">ax^2+2bxy+cy^2=1</script>, can be written as the matrix form <script type="math/tex">\vec{x}^TS\vec{x}=\left[\begin{matrix}x&y\end{matrix}\right]\left[\begin{matrix}a&b\\b&c\end{matrix}\right]\left[\begin{matrix}x\\y\end{matrix}\right]=1</script>. </li>
<li>The axes of the tilted ellipse along the direction of eigenvectors of <script type="math/tex">S</script> and their half-lengths are <script type="math/tex">\displaystyle\frac{1}{\lambda_1}</script> and <script type="math/tex">\displaystyle\frac{1}{\lambda_2}</script>. </li>
<li>We can also factorize <script type="math/tex">S=Q\Lambda Q^T</script> and multiply by <script type="math/tex">\vec{x}</script>. <script type="math/tex">\vec{x}^TS\vec{x}=\vec{X}\Lambda\vec{Y}=\lambda_1\vec{X}+\lambda_2\vec{Y}=1</script>. </li>
<li>Function <script type="math/tex">F(x,y)</script> have a minimum if <script type="math/tex">\displaystyle\frac{\partial F}{\partial x}=\displaystyle\frac{\partial F}{\partial y}=0</script> and <script type="math/tex">S=\left[\begin{matrix}\frac{\partial^2F}{\partial x^2}&\frac{\partial^2F}{\partial x\partial y}\\\frac{\partial^2F}{\partial y\partial x}&\frac{\partial^2F}{\partial y^2}\end{matrix}\right]</script> is positive definite. </li>
<li>Extend the law to <script type="math/tex">n</script> variables function, <script type="math/tex">\displaystyle\frac{\partial F}{\partial x_i}=0</script> and <script type="math/tex">S=\left[\begin{matrix}\frac{\partial^2F}{\partial x_1^2}&\frac{\partial^2F}{\partial x_1\partial x_2}&…&\frac{\partial^2F}{\partial x_1\partial x_n}\\\frac{\partial^2F}{\partial x_2\partial x_1}&\frac{\partial^2F}{\partial x_2^2}&…&\frac{\partial^2F}{\partial x_2\partial x_n}\\\vdots&\vdots&\ddots&\vdots\\\frac{\partial^2F}{\partial x_n \partial x_1}&\frac{\partial^2F}{\partial x_n\partial x_2}&…&\frac{\partial^2F}{\partial x_n^2}\end{matrix}\right]</script> is positive definite. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>线性代数 (MIT 18.06)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>26. Linear Transformations and Their Matrices</title>
    <url>/2020/02/06/26-Linear-Transformations-and-Their-Matrices/</url>
    <content><![CDATA[<h1 id="Linear-Transformation"><a href="#Linear-Transformation" class="headerlink" title="Linear Transformation"></a>Linear Transformation</h1><ol>
<li>When a matrix <script type="math/tex">A</script> multiplies a vector <script type="math/tex">\vec{v}</script>, it transforms <script type="math/tex">\vec{v}</script> into another vector <script type="math/tex">A\vec{v}</script>. </li>
<li>In goes <script type="math/tex">\vec{v}</script>, out comes <script type="math/tex">T(\vec{v})=A\vec{v}</script>. </li>
<li><code>Linear transformation</code>: <script type="math/tex">T(c\vec{v}+d\vec{w})=cT(\vec{v})+dT(\vec{w})</script>. </li>
<li><script type="math/tex">T(\vec{0}+\vec{0})=T(\vec{0})+T(\vec{0})\Rightarrow T(\vec{0})=\vec{0}</script>. </li>
<li><code>Identity transformation</code>: <script type="math/tex">T(\vec{v})=\vec{v}</script>. </li>
<li>The <code>linear-plus-shift transformation (affine)</code>: <script type="math/tex">T(\vec{v})=A\vec{v}+\vec{u_0}</script>. This is not linear transformation. </li>
<li>Every point on the input line goes onto the output line and equally spaced points go to equally spaced points. </li>
</ol>
<h1 id="Basis"><a href="#Basis" class="headerlink" title="Basis"></a>Basis</h1><ol>
<li><script type="math/tex">n</script>-dimension linearity: <script type="math/tex">\vec{u}=\sum c_i\vec{v_i}</script>, <script type="math/tex">T(\vec{u})=\sum c_iT(\vec{v_i})</script>. </li>
<li>Suppose we know <script type="math/tex">T(\vec{v})</script> for all vectors <script type="math/tex">\vec{v_1},…,\vec{v_n}</script> in a basis. Then we can know <script type="math/tex">T(\vec{u})</script> for every vector <script type="math/tex">\vec{u}</script> in the spacef for all vectors are a combination of basis. </li>
<li>Derivative can be expressed by <script type="math/tex">T(u)=\displaystyle\frac{du}{dx}</script>. For a quadratics fuction <script type="math/tex">y=a+bx+cx^2</script>, <script type="math/tex">T(\vec{u})</script> also satisfies the linearity, and <script type="math/tex">1,x,x^2</script> can be its basis. This can be written as <script type="math/tex">T(\vec{u})=A\vec{u}=\left[\begin{matrix}0&1&0\\0&0&2\end{matrix}\right]\left[\begin{matrix}a\\b\\c\end{matrix}\right]=\left[\begin{matrix}b\\2c\end{matrix}\right]</script>. </li>
<li>Integration <script type="math/tex">T^+</script> is also linear. For <script type="math/tex">T^+(u)=\displaystyle^x_0(D+Ex)dx=Dx+\displaystyle\frac{1}{2}Ex^2</script>. The input basis is <script type="math/tex">1,x</script>. The output basis is <script type="math/tex">1,x,x^2</script>. <script type="math/tex">T^+(\vec{u})=A^+\vec{u}=\left[\begin{matrix}0&0\\1&0\\0&\frac{1}{2}\end{matrix}\right]\left[\begin{matrix}D\\E\end{matrix}\right]=\left[\begin{matrix}0\\D\\\frac{1}{2}E\end{matrix}\right]</script>. </li>
<li><code>The Fundamental Theorem of Calculus</code>: integration is the pseudo inverse of differentiation. <br /><script type="math/tex">A^+A=\left[\begin{matrix}0&0&0\\0&1&0\\0&0&1\end{matrix}\right]</script>. <script type="math/tex">AA^+=\left[\begin{matrix}1&0\\0&1\end{matrix}\right]</script>. </li>
<li><code>Range of T</code>: all outputs of <script type="math/tex">T(\vec{v})</script>. Corresponds to column space. </li>
<li><code>Kernel of T</code>: all inputs for which <script type="math/tex">T(\vec{v})=\vec{0}</script>. Corresponds to nullspace. </li>
</ol>
<h1 id="Change-of-Basis"><a href="#Change-of-Basis" class="headerlink" title="Change of Basis"></a>Change of Basis</h1><ol>
<li><script type="math/tex">T(\vec{v})=\vec{v}</script> don’t change basis of the vector. </li>
<li>When the input basis is in the columns of a matrix <script type="math/tex">V</script>, and the output basis is in the columns of <script type="math/tex">W</script>, the change of basis matrixfor <script type="math/tex">T=I</script> is <script type="math/tex">B=W^{-1}V</script>. <br /><script type="math/tex">\vec{u}=Vc=Wd</script>, so <script type="math/tex">d=W^{-1}Vd</script>. </li>
<li>Construct input from output or construct matrix from input basis and output basis: <script type="math/tex">T(v_j)=\displaystyle\sum^m_{i=1}{a_{ij}w_i}</script>. </li>
<li>Choose bases that diagonalize the matrix. </li>
<li>If transformation is from <script type="math/tex">R^n</script> to <script type="math/tex">R^n</script>, <script type="math/tex">A</script> must be square. We can choose the eigenvectors to be the basis. This will make <script type="math/tex">A</script> the diagonal matrix with eigenvalues. </li>
<li>The new basis of input space is <script type="math/tex">B_{in}=B</script>, and the new basis of output space is <script type="math/tex">B_{out}=B^{-1}</script>. The new transmation matrix <script type="math/tex">A_{new}=B^{-1}AB</script>. </li>
<li>For different spaces <script type="math/tex">V</script> and <script type="math/tex">W</script>, we take the singular vectors. </li>
<li>In image compression, we first get a signal <script type="math/tex">P</script>, but <script type="math/tex">P</script> is too large to storage. Then we choose a good basis <script type="math/tex">W</script>. Change columns of <script type="math/tex">P</script> into that basis. For every column, we calculate the new coefficients <script type="math/tex">\vec{c}=W^{-1}P</script>. Then if there are some coefficient that doesn’t matter, we can throw them away to get a new <script type="math/tex">\hat{\vec{c}}</script> with many zeros. Then reconstruct the image from <script type="math/tex">\hat{\vec{c}}</script>. </li>
<li>A good basis is: <br />&emsp;Fast to calculate. <br />&emsp;Few is enough. </li>
<li>Two more basis: <code>Fourier basis</code>, <code>Wavelet basis</code>. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>线性代数 (MIT 18.06)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>27. Left and Right Inverses; Pseudoinverse</title>
    <url>/2020/02/07/27-Left-and-Right-Inverses-Pseudoinverse/</url>
    <content><![CDATA[<h1 id="Inverse-of-Rectangular-Matrices"><a href="#Inverse-of-Rectangular-Matrices" class="headerlink" title="Inverse of Rectangular Matrices"></a>Inverse of Rectangular Matrices</h1><ol>
<li><script type="math/tex">A</script> is an <script type="math/tex">m</script> by <script type="math/tex">n</script> matrix. If <script type="math/tex">m=n</script>, it’s nature to get an inverse of <script type="math/tex">A</script>. </li>
<li>But if <script type="math/tex">m≠n</script>, <script type="math/tex">A</script> can have two different inverses, right inverse and left inverse. </li>
<li><script type="math/tex">AA^T(AA^T)^{-1}=I</script>. So the right inverse of <script type="math/tex">A</script> is <script type="math/tex">A^{-1}_{right}=A^T(AA^T)^{-1}</script>. <br />Similarity, <script type="math/tex">(A^TA)^{-1}A^TA=I</script>. So the left inver of <script type="math/tex">A</script> is <script type="math/tex">A^{-1}_{left}=(A^TA)^{-1}A^T</script>. </li>
<li><script type="math/tex">A^{-1}_{right}A=A^T(AA^T)^{-1}A=P_{row\ space}</script>. This is the projection matrix to row space. <br /><script type="math/tex">AA^{-1}_{left}=A(A^TA)^{-1}A^T=P_{column\ space}</script>. This is the projection matrix to column space. </li>
</ol>
<h1 id="Pseudoinverse"><a href="#Pseudoinverse" class="headerlink" title="Pseudoinverse"></a>Pseudoinverse</h1><ol>
<li>If <script type="math/tex">\vec{x}≠\vec{y}</script> both in row space, then <script type="math/tex">A\vec{x}≠ A\vec{y}</script> both in column space. <br />&emsp;Proof: Suppose <script type="math/tex">A\vec{x}=A\vec{y}</script>. Then <script type="math/tex">A\vec{x}-A\vec{y}=A(\vec{x}-\vec{y})</script>. <script type="math/tex">\vec{x}-\vec{y}</script> is in the row space, So <script type="math/tex">A(\vec{x}-\vec{y})</script> is also in the column space. But <script type="math/tex">A\vec{x}-A\vec{y}=\vec{0}</script>. So <script type="math/tex">\vec{x}-\vec{y}</script> is also in nullspace. So <script type="math/tex">\vec{x}-\vec{y}=\vec{0}</script>, i.e. <script type="math/tex">\vec{x}=\vec{y}</script>. </li>
<li>So every vector in row space has and only has one vector in column space that is <script type="math/tex">A\vec{x}</script>. </li>
<li><script type="math/tex">A</script> is a map from row space to column space. And the pseudoinverse <script type="math/tex">A^+</script> is the map from columns space to row space. For every <script type="math/tex">\vec{x}</script> in row space, <script type="math/tex">A^+(A\vec{y})=\vec{y}</script>. </li>
<li><script type="math/tex">A^+</script> on the left brings projection to the row space while on the right brings the projection to the columns. </li>
<li>The pseudoinverse of <script type="math/tex">\Sigma</script> in the SVD is <script type="math/tex">\Sigma^+=\left[\begin{matrix}\frac{1}{\sigma_1}\\&\ddots\\&&\frac{1}{\sigma_r}&&\\&\end{matrix}\right]</script>. <script type="math/tex">\Sigma\Sigma^+</script> gives <script type="math/tex">\left[\begin{matrix}1\\&\ddots\\&&1\\&&&\end{matrix}\right]</script> not <script type="math/tex">I</script>. </li>
<li>Any vector <script type="math/tex">A=U\Sigma V^T</script>, <script type="math/tex">A^+=V\Sigma^+U^T</script>. </li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
        <category>线性代数 (MIT 18.06)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>DP之子序列问题</title>
    <url>/2019/11/09/DP%E4%B9%8B%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="最大m段子序列和"><a href="#最大m段子序列和" class="headerlink" title="最大m段子序列和"></a>最大m段子序列和</h1><p><strong>问题描述</strong>：给定一个数列，从中选取$m$段互不重叠的子段，使那$m$个子段的和最大</p>
<p><strong>解决</strong>：定义状态$dp[i][j]$表示由前j个元素分成$i$段的最优解且是以$num[j]$结尾。因为是以$num[j]$结尾，所以只有两种可能，即$num[j]$属于最后一个子段或独立成为一个子段。又若独立称为一个子段的话前面至少要有$i - 1$个元素，要不然就做不到$i - 1$个互不重叠的子段。则有状态转移方程$dp[i][j] = max(dp[i][j - 1] + num[j], dp[i - 1][k] + num<a href="i - 1 ≤ k &lt; j">j</a>)$</p>
<p><strong>优化</strong>：<br>&emsp;时间优化：在规划过程中，时间主要消耗在寻找$dp[i - 1][k]$的最大值，我们可以在计算$dp[i - 1]$那行的时候就把这个最大值算好，记录在$preMax$数组中<br>&emsp;空间优化：我们发现和背包问题类似，$preMax$数组只对一行有效，故我们可以用完一次就更新一次，使之适用于下一行，这样我们就只需要一个一维数组就可以解决问题，因此$dp$数组也可以缩小到一维</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num[maxn], dp[maxn], preMax[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> <span class="comment">//n为数字个数，m为子段数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">	<span class="built_in">memset</span>(preMax, <span class="number">0</span>, <span class="keyword">sizeof</span>(preMax));</span><br><span class="line">	<span class="keyword">int</span> maxmun;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		maxmun = -INF;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			dp[j] = <span class="built_in">max</span>(dp[j - <span class="number">1</span>], preMax[j - <span class="number">1</span>]) + num[j]; </span><br><span class="line">			preMax[j - <span class="number">1</span>] = maxmun;</span><br><span class="line">			maxmun = <span class="built_in">max</span>(dp[j], mx);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> maxmun;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="最大连续子序列和"><a href="#最大连续子序列和" class="headerlink" title="最大连续子序列和"></a>最大连续子序列和</h1><p><strong>问题描述</strong>：给定一个数列，求其中连续的一段子序列的和的最大值。和上一题的区别就是子序列要求连续<br><strong>暴力求解</strong>：枚举所有的连续子序列，找出其中的最大值。这种解法要枚举所有的区间开始$i$和结束$j$，还要把他们都加起来，复杂度是$O(n^3)$，有一个优化的方法：定一个数组$sum$，$sum[i]$表示的是前$i$个元素的和。这样区间$[i, j]$的和就可以表示为$sum[j] - sum[i - 1]$，就只需要枚举所有的$i$和$j$，只要$O(n^2)$的时间<br><strong>DP求解</strong>：定义状态$dp[i]$表示的是以第$i$个元素结尾的最大连续子序列和。所以对于第$i$个元素只有两种情况<br>&emsp;单独成为一个子序列，和为$num[i]$<br>&emsp;和前面的一起组成一个子序列，因为$num[i]$是固定的，所以要最大和就要之前的子序列和最大，又要连续的子序列，所以就要以$num[i - 1]$结尾，即$dp[i - 1] + num[i]$<br>所以有状态转移方程：$dp[i] = max(num[i], dp[i - 1] + num[i])$<br>初始时只需要使$dp[0] = num[0]$</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num[maxn], dp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans;</span><br><span class="line">	ans = dp[<span class="number">0</span>] = num[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		dp[i] = <span class="built_in">max</span>(num[i], dp[i - <span class="number">1</span>] + num[i]);</span><br><span class="line">		<span class="keyword">if</span>(dp[i] &gt; ans)</span><br><span class="line">		&#123;</span><br><span class="line">			ans = dp[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h1><p><strong>问题描述</strong>：给定一个数列，求出一个子序列，使这个子序列中后一个元素都比之前的数大。求这样的子序列的长度最大值<br><strong>解决</strong>：<br>维护一维数组$dp[i]$表示以$num[i]$结尾的最长上升子序列的长度。易知，$dp$数组应该初始化为$1$.<br>&emsp;<strong>暴力枚举法$O(n^2)$</strong>：对每一个结尾，枚举之前的所有可能长度，取其中最大值加一。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num[maxn], dp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LIS</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dp, <span class="number">1</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(num[j] &lt; num[i] &amp;&amp; dp[i] &lt; dp[j] + <span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				dp[i] = dp[j] + <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dp[n - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>暴力枚举虽然暴力，但在有些题中必须得用这种方式，如：<a href="https://vjudge.net/problem/HDU-1069" target="_blank" rel="noopener">HDOJ 1069</a><br>这题把每块砖都按长宽高不同排序分割为六个不同状态，并按长宽中某一种排序。排序后不管怎么选，那一种一定是满足要求的。但排好之后的另一种还是无序的，所以就要从中选出权值最大的递增数列。因为要求两维都是单调的，所以只能暴力枚举。</p>
<p>&emsp;<strong>优化$O(nlogn)$</strong>：定义$dp[i]$的含义为长度为$i$的递增序列的最小结尾元素。这时$dp$数组的初始化就要为$INF$，$dp$数组的第一个元素就是$num$原数组的第一个元素。因为是最长上升子序列，所以$dp$数组一定有序，所以我们就可以利用二分法查找不大于$num[i]$的最长序列</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LIS</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fill</span>(dp, dp + n, INF);</span><br><span class="line">    dp[<span class="number">1</span>] = num[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(num[i] &gt; dp[len])</span><br><span class="line">        &#123;</span><br><span class="line">            dp[++len] = num[i];</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">1</span>, r = len + <span class="number">1</span>, mid;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)</span><br><span class="line">        &#123;</span><br><span class="line">            mid = l + ((r - l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(dp[mid] &gt; num[i])</span><br><span class="line">            &#123;</span><br><span class="line">                r = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[l] = <span class="built_in">min</span>(num[i], dp[l]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;<strong>路径记录</strong>：每次更新的时候都记录一下前一个被选择的数字，然后递归输出即可</p>
<h1 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h1><p>定义一个二维数组$dp$，第一维表示第一个数组的前$i$位，第二维表示第二个数组的前$j$位，即$dp[i][j]$表示的是第一个数组的前$i$位和第二个数组的前$j$位的最长公共子序列。这时就有两种情况：<br>&emsp;如果$num1[i] == num2[j]$，那$dp[i][j] = dp[i - 1][j - 1] + 1$，即如果相等的话，$dp[i][j]$就是把这两个元素不考虑的第一个数列的前$i - 1$项和第二个数列的前$j - 1$项的公共子序列加$1$<br>&emsp;如果$num1[i] != num2[j]$，那$dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1])$，即不相等的话$dp[i][j]$就是把第一个数列的第$i$项裁掉或把第二个数列的第$j$项裁掉或都裁掉的最大值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num1[maxn], num2[maxn], dp[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCS</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(num1[i] == num2[j])</span><br><span class="line">			&#123;</span><br><span class="line">				dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], <span class="built_in">max</span>(dp[i][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j - <span class="number">1</span>]));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dp[n][m];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="最长单调子序列"><a href="#最长单调子序列" class="headerlink" title="最长单调子序列"></a>最长单调子序列</h1><p><a href="https://vjudge.net/problem/HDU-1257" target="_blank" rel="noopener">HDOJ 1257</a><br>这题就是最长递减子序列的一个变形：定义$dp$数组，使$dp[i]$表示的是第$i$个发射台发射的上一个炮弹的高度。对于每一枚导弹，要找到可以拦截且前一个导弹高度最小的系统去拦截。我们初始只用一个系统，每次无法拦截的时候就新增一个系统，由此可知$dp$数组一定是单调增长的，所以只需要从前往后遍历，第一个可以拦截的系统即可</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        dp[<span class="number">0</span>] = INF;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> inp;</span><br><span class="line">        <span class="keyword">while</span>(n--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;inp);</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(j &lt; cnt)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[j] &gt;= inp)</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[j] = inp;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j == cnt)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[cnt] = inp;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>动态规划</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>GTD</title>
    <url>/2020/05/06/GTD/</url>
    <content><![CDATA[<p><img src="/img/GTD.png" alt=""></p>
]]></content>
      <categories>
        <category>看过的书</category>
      </categories>
      <tags>
        <tag>时间管理</tag>
        <tag>书</tag>
      </tags>
  </entry>
  <entry>
    <title>OmniFocus</title>
    <url>/2020/07/19/OmniFocus/</url>
    <content><![CDATA[<p><img src="/img/OmniFocus.png" alt=""></p>
]]></content>
      <categories>
        <category>看过的书</category>
      </categories>
      <tags>
        <tag>时间管理</tag>
        <tag>书</tag>
      </tags>
  </entry>
  <entry>
    <title>Tricks in Xcode</title>
    <url>/2019/07/17/Tricks%20in%20Xcode/</url>
    <content><![CDATA[<h1 id="Debugger"><a href="#Debugger" class="headerlink" title="Debugger"></a>Debugger</h1><p>During a Debugger, in the Console, after the word <code>(lldg)</code>, we can use some syntax to print something we want.<br><code>po + sth.</code> print an object<br><code>p + sth.</code> print like in swift<br><a id="more"></a></p>
<h1 id="Key-command-in-Xcode"><a href="#Key-command-in-Xcode" class="headerlink" title="Key command in Xcode"></a>Key command in Xcode</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Function</th>
<th style="text-align:center">Key Command</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Run project</td>
<td style="text-align:center">cmd + R</td>
</tr>
<tr>
<td style="text-align:center">show the left pane (Nevigator)</td>
<td style="text-align:center"><code>cmd + 0</code></td>
</tr>
<tr>
<td style="text-align:center">show the right pane</td>
<td style="text-align:center"><code>cmd + option + 0</code></td>
</tr>
<tr>
<td style="text-align:center">In Navigator, change through the tabs</td>
<td style="text-align:center"><code>cmd + 1, 2, 3…</code></td>
</tr>
<tr>
<td style="text-align:center">In right pane, change through the tabs</td>
<td style="text-align:center"><code>cmd + option + 1, 2, 3…</code></td>
</tr>
<tr>
<td style="text-align:center">show the Debugger and Console</td>
<td style="text-align:center"><code>cmd + shift + y</code></td>
</tr>
<tr>
<td style="text-align:center">show the associate editor</td>
<td style="text-align:center"><code>cmd + option + enter</code></td>
</tr>
<tr>
<td style="text-align:center">open file</td>
<td style="text-align:center"><code>cmd + shigt + O then search the file (It&#39;s better to choose Uses focused editor in preference -&gt; Navigation -&gt; Navigation)</code></td>
</tr>
<tr>
<td style="text-align:center">mark position</td>
<td style="text-align:center"><code>A comment start with &quot;MARK: &quot;, It will than shows in the navigation above, where it shows where we are now</code></td>
</tr>
<tr>
<td style="text-align:center">move forward a tab</td>
<td style="text-align:center"><code>cmd + [</code></td>
</tr>
<tr>
<td style="text-align:center">move backward a tab</td>
<td style="text-align:center"><code>cmd + ]</code></td>
</tr>
<tr>
<td style="text-align:center">make every lines have the right number of tabs (like python)</td>
<td style="text-align:center"><code>select and cmd + i</code></td>
</tr>
</tbody>
</table>
</div>
<h1 id="Something-Else"><a href="#Something-Else" class="headerlink" title="Something Else"></a>Something Else</h1><ol>
<li>If we draw something in code, it won’t show in storyboard by default. But we make it show by adding <code>@IBDesignable</code> right before the declare of the drawing view class. </li>
<li>We can even make some properties inspectable in the attributed inspector by adding <code>@IBInspectable</code> right before the declare in the class. </li>
<li>When some objects overlap at Interface Builder that we can hardly create outlet for them, we can either use the Document Outline or shift-click to choose the object. </li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>Swift开发 (Stanford CS193p)</category>
      </categories>
      <tags>
        <tag>应用开发</tag>
        <tag>Swift</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>KMP串匹配算法</title>
    <url>/2019/11/09/KMP%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="串匹配问题"><a href="#串匹配问题" class="headerlink" title="串匹配问题"></a>串匹配问题</h1><p>给定两个串，一个是主串，一个是模式串，要求从主串中找到模式串的匹配<br>直观地，很容易就想得到蛮力算法，即一个一个比较，直到找到或匹配结束</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> mainString, modeString;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">match</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mainPos = <span class="number">0</span>, modePos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len = mainString.length();</span><br><span class="line">    <span class="keyword">int</span> modeLen = modeString.length();</span><br><span class="line">    <span class="keyword">while</span>(mainPos &lt; len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mainString[mainPos] == modeString[modePos])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> pos = mainPos + <span class="number">1</span>;</span><br><span class="line">            modePos++;</span><br><span class="line">            <span class="keyword">while</span>(mainString[pos] == modeString[modePos] &amp;&amp; modePos &lt; modeLen)</span><br><span class="line">            &#123;</span><br><span class="line">                pos++;</span><br><span class="line">                modePos++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(modePos == modeLen)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                modePos = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mainPos++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h1><p>先来看一下蛮力算法慢的原因：到一个点匹配失败，可以得出在这个点之前到都是匹配成功的，这样我们就可以通过模式串知道主串在那一段中的信息，利用这些信息，我们就可以提前知道哪些值得匹配，哪些不值得花时间匹配，就可以跳过一些内容，省下时间。而蛮力算法的问题就是没有好好利用我们已知的模式串的信息。<br>于是我们就有了改进的方向——对模式串进行预处理，知道当我们在模式串的第$i$个点匹配失败时应该跳到第$nex[ i ]$而不是都回到原点</p>
<h1 id="nex数组"><a href="#nex数组" class="headerlink" title="nex数组"></a>nex数组</h1><p><strong>含义</strong>：<br>我们思考一下为什么我们可以直接从$nex[ i ]$开始匹配而不需像蛮力算法一样，从头开始？因为跳过的那些已经匹配了。那那些是和什么匹配了？首先想一下，匹配失败了以后，主串上的指针是不同的，我们所做的操作只是移动了模式串让$nex[ i ]$去和主串之前失败的地方匹配。所以移过去了以后，模式串跳过的那些前缀就和主串中失败点之前到一段等长后缀匹配。又主串失败点之前的内容已经和模式串的失败点之前的子串匹配所以实际就是模式串在失败点之前的子串的一个前缀和后缀在匹配，而跳过的长度就是匹配前缀的长度，$nex[ i ]$存储的值就是这个长度。<br><img src="/img/KMP串匹配算法01.jpg" width="80%"><br><strong>构造</strong>：<br>构造就是模式串自匹配的过程。子匹配时两个指针，一个$mainPos$指的是主串，一个$modePos$指的是模式串，虽然两个都指在同一个串中。匹配时有两种情况：<br>&emsp;1、如果主串和模式串匹配，则$nex[mainPos] = modeString + 1$，因为$modePos$及其以前的子串已经和$mainPos$之前的后缀匹配了，所以在这里的最长前缀只能全部取，长度就是$modePos+1$<br>&emsp;2、如果不匹配，$modePos = nex[modePos]$，道理同主串和模式串不同时，直到匹配成功<br>为了防止第一个就不匹配，我们设定一个哨兵，在整个字符串的前面，假设这个哨兵可以和任意字符匹配，位置为-1，所以$nex[0] = -1$，第一个都失败的话就让哨兵去匹配现在的那个点才能成功<br>$modePos$初始就设为$nex[ 0 ] = -1$</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildNext</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nex[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> mainString = <span class="number">0</span>, modeString = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(mainString &lt; str2.length() - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(str2[mainString] == str2[modeString] || modeString &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            nex[++mainString] = ++modeString;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            modeString = nex[modeString];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>！！！！！nex数组的下标$i$都是模式串的第$i$位，而不是主串的第$i$位</strong></p>
<h1 id="KMP主算法"><a href="#KMP主算法" class="headerlink" title="KMP主算法"></a>KMP主算法</h1><p>和蛮力算法的区别就是不匹配时$modeString = nex[modeString]$</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">kmp</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ori = <span class="number">0</span>, cmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len1 = (<span class="keyword">int</span>)str1.length();</span><br><span class="line">    <span class="keyword">int</span> len2 = (<span class="keyword">int</span>)str2.length();</span><br><span class="line">    <span class="keyword">while</span>(ori &lt; len1 &amp;&amp; cmp &lt; len2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span> || str1[ori] == str2[cmp])</span><br><span class="line">        &#123;</span><br><span class="line">            ori++;</span><br><span class="line">            cmp++;</span><br><span class="line">            <span class="keyword">if</span>(cmp == str2.length())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cmp = nex[cmp];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>串都是从0开始的</p>
<h1 id="串的周期性"><a href="#串的周期性" class="headerlink" title="串的周期性"></a>串的周期性</h1><p>建立nex数组时，while循环的条件改为$mainString &lt; str2.length()$，设串长为$len$，则：<br>&emsp;1、如果$nex[len] == 0$，则该串毫无循环；<br>&emsp;2、如果有$len % (len - nex[len]) == 0$，则这是一个循环串，且循环节长度为$len - nex[len]$，循环次数为$len / (len - nex[len])$；<br>&emsp;3、否则该串有部分循环，且最少再补$(len - nex[len]) - len % (len - nex[len])$个元素就可以成为循环<br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3746" target="_blank" rel="noopener">HDOJ 3746</a><br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1358" target="_blank" rel="noopener">HDOJ 1358</a></p>
<h1 id="nex数组的妙用"><a href="#nex数组的妙用" class="headerlink" title="nex数组的妙用"></a>nex数组的妙用</h1><p>除了用在KMP查询上，$nex$数组还可以用在如下方面：<br>&emsp;任意前缀的重复次数：$nex[i]$可以理解为串的长为$nex[i]$的前缀在自身上以第$i$个元素开头，长为$nex[i]$的子串重合，即前缀重复了一次。所以利用$nex$数组，我们就可以知道任意前缀的重复次数<br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3336" target="_blank" rel="noopener">HDOJ 3336</a></p>
]]></content>
      <categories>
        <category>算法</category>
        <category>串</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>day 01</title>
    <url>/2019/11/04/day-01/</url>
    <content><![CDATA[<style>
table th:first-of-type {
    width: 150px;
}
</style>


<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">单词</th>
<th style="text-align:center">释意</th>
<th style="text-align:center">备注</th>
<th style="text-align:center">分解</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">plethora</td>
<td style="text-align:center">n. 过多，过剩</td>
<td style="text-align:center"><code>ple-  plenty of</code></td>
<td style="text-align:center">ple·thora</td>
</tr>
<tr>
<td style="text-align:center">replete</td>
<td style="text-align:center">adj. 充满的</td>
<td style="text-align:center"><code>re- again</code><br />be replete with</td>
<td style="text-align:center">re·ple·te</td>
</tr>
<tr>
<td style="text-align:center">deplete</td>
<td style="text-align:center">v. 耗尽</td>
<td style="text-align:center"><code>de- not</code></td>
<td style="text-align:center">de·ple·te</td>
</tr>
<tr>
<td style="text-align:center">provident</td>
<td style="text-align:center">adj. 有远见的，未雨绸缪的</td>
<td style="text-align:center"><code>pro- 向前</code><br /><code>vis/vid- to see(visit)</code></td>
<td style="text-align:center">pro·vid·ent</td>
</tr>
<tr>
<td style="text-align:center">envisage</td>
<td style="text-align:center">v. 展望</td>
<td style="text-align:center"><code>en- to</code></td>
<td style="text-align:center">en·vis·age</td>
</tr>
<tr>
<td style="text-align:center">invidious</td>
<td style="text-align:center">adj. 令人讨厌的</td>
<td style="text-align:center"><code>in- not</code><br />不愿意看一眼</td>
<td style="text-align:center">in·vid·ious</td>
</tr>
<tr>
<td style="text-align:center">improvise</td>
<td style="text-align:center">v. 即兴创作</td>
<td style="text-align:center"><code>im- not</code><br />没有提前看</td>
<td style="text-align:center">im·pro·vise</td>
</tr>
<tr>
<td style="text-align:center">clarity</td>
<td style="text-align:center">n. 清楚，明晰</td>
<td style="text-align:center">clear   ea→a + ity</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">nominate</td>
<td style="text-align:center">v. 提名</td>
<td style="text-align:center">name   a→o</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gild</td>
<td style="text-align:center">v. 镀金</td>
<td style="text-align:center">gold   o→i</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">grisly</td>
<td style="text-align:center">adj. 可怕的，毛骨悚然的</td>
<td style="text-align:center">grey   ey→i + sly</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">fetter</td>
<td style="text-align:center">n. 脚镣</td>
<td style="text-align:center">feet   ee→e</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">rummage</td>
<td style="text-align:center">v. 翻找</td>
<td style="text-align:center">room   oo→u<br />双写词尾动作反复</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">reimburse</td>
<td style="text-align:center">v. 报偿，偿还</td>
<td style="text-align:center"><code>re- back</code><br /><code>im- to</code><br />burse = purse钱包</td>
<td style="text-align:center">re·im·burse</td>
</tr>
<tr>
<td style="text-align:center">sunder</td>
<td style="text-align:center">v. 分开，分裂</td>
<td style="text-align:center">thunder   th→s</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ascetic</td>
<td style="text-align:center">adj. 苦行的，禁欲的</td>
<td style="text-align:center">athletic   th→sc</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">masquerade</td>
<td style="text-align:center">n. 假面舞会</td>
<td style="text-align:center">mask   k→qu</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">miscellaneous</td>
<td style="text-align:center">adj. 混杂的</td>
<td style="text-align:center">mix + cell   x→s</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sheeny</td>
<td style="text-align:center">adj. 亮光的，有光泽的</td>
<td style="text-align:center">shine   i→ee<br />shine来自sun<br />u→i 再加个h</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">feint</td>
<td style="text-align:center">v./n. 假装</td>
<td style="text-align:center">feign v. 假装<br />g脱落 + t</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">arduous</td>
<td style="text-align:center">adj. 辛苦的，费力的</td>
<td style="text-align:center">hard   h脱落</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">lurk</td>
<td style="text-align:center">v. 潜伏</td>
<td style="text-align:center">lower   ow→u</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">renovate</td>
<td style="text-align:center">v. 翻新</td>
<td style="text-align:center"><code>re- again</code><br />new   e→o   w→v</td>
<td style="text-align:center">re·nov·ate</td>
</tr>
<tr>
<td style="text-align:center">prudent</td>
<td style="text-align:center">adj. 谨慎的</td>
<td style="text-align:center">provident   v→u</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">amorphous</td>
<td style="text-align:center">adj. 无固定形状的</td>
<td style="text-align:center"><code>a- not</code><br />form  先倒写成morf<br />再f→ph</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">dissent</td>
<td style="text-align:center">v. 不同意</td>
<td style="text-align:center"><code>dis- not</code><br />sense   s→t</td>
<td style="text-align:center">dis·sent</td>
</tr>
<tr>
<td style="text-align:center">pyromania</td>
<td style="text-align:center">n. 纵火狂</td>
<td style="text-align:center">fire   f→p i→y</td>
<td style="text-align:center">pyr·o·mania</td>
</tr>
<tr>
<td style="text-align:center">consecrate</td>
<td style="text-align:center">v. 供奉，奉为神圣</td>
<td style="text-align:center"><code>con- 一起</code><br /><code>sacr- sacred</code></td>
<td style="text-align:center">con·secr·ate</td>
</tr>
<tr>
<td style="text-align:center">sacrilege</td>
<td style="text-align:center">v. 亵渎</td>
<td style="text-align:center">脚伸到圣地里</td>
<td style="text-align:center">sacr·i·leg·e</td>
</tr>
<tr>
<td style="text-align:center">desecrate</td>
<td style="text-align:center">v. 亵渎；玷污</td>
<td style="text-align:center">de→not</td>
<td style="text-align:center">de·secr·ate</td>
</tr>
<tr>
<td style="text-align:center">execrate</td>
<td style="text-align:center">v. 憎恶；咒骂</td>
<td style="text-align:center"><code>e- out</code><br />sacr s→x a→e<br />向外骂出圣地</td>
<td style="text-align:center">e·xecr·ate</td>
</tr>
<tr>
<td style="text-align:center">evoke</td>
<td style="text-align:center">v. 唤起；引起</td>
<td style="text-align:center">e- out<br /><code>vok/voc- to call</code>(voice)</td>
<td style="text-align:center">e·voke</td>
</tr>
<tr>
<td style="text-align:center">convoke</td>
<td style="text-align:center">v. 召集</td>
<td style="text-align:center">con + vok  叫到一起</td>
<td style="text-align:center">con·voke</td>
</tr>
<tr>
<td style="text-align:center">revoke</td>
<td style="text-align:center">v. 撤回</td>
<td style="text-align:center">把喊的话收回来</td>
<td style="text-align:center">re·voke</td>
</tr>
<tr>
<td style="text-align:center">equivocal</td>
<td style="text-align:center">adj. 模棱两可的</td>
<td style="text-align:center">equi- equal<br />一样的声音分不清<br />同：ambiguous</td>
<td style="text-align:center">equi·vocal</td>
</tr>
<tr>
<td style="text-align:center">invoke</td>
<td style="text-align:center">v. 恳求</td>
<td style="text-align:center"><code>in- to</code><br />加强说</td>
<td style="text-align:center">in·voke</td>
</tr>
<tr>
<td style="text-align:center">vociferous</td>
<td style="text-align:center">adj. 嘈杂的，吵闹的</td>
<td style="text-align:center"><code>-ous adj.</code> <br />声音多的</td>
<td style="text-align:center">voci·fer·ous</td>
</tr>
<tr>
<td style="text-align:center">fuel</td>
<td style="text-align:center">v. 引发，引起</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">trigger</td>
<td style="text-align:center">v. 引起</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">bereave</td>
<td style="text-align:center">v. 使丧失，剥夺</td>
<td style="text-align:center"><code>rav/rab- 抢夺(rob)/吸引</code><br /><code>be- to</code><br />be bereaved of</td>
<td style="text-align:center">be·reav·e</td>
</tr>
<tr>
<td style="text-align:center">rapacious</td>
<td style="text-align:center">adj. 贪婪的，强夺的</td>
<td style="text-align:center"><code>-acious 多的</code><br />抢得多的</td>
<td style="text-align:center">rap·acious</td>
</tr>
<tr>
<td style="text-align:center">rapt</td>
<td style="text-align:center">adj. 狂喜的</td>
<td style="text-align:center">抢走了心</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">enrapture</td>
<td style="text-align:center">v. 使狂喜</td>
<td style="text-align:center">en- to<br />来自rapt</td>
<td style="text-align:center">en·rap·ture</td>
</tr>
<tr>
<td style="text-align:center">ravage</td>
<td style="text-align:center">n. 蹂躏，破坏</td>
<td style="text-align:center"><code>-age 名词后缀，表结果</code></td>
<td style="text-align:center">rav·age</td>
</tr>
<tr>
<td style="text-align:center">ravish</td>
<td style="text-align:center">v. 抢夺；使销魂</td>
<td style="text-align:center"><code>-ish  adj./v.后缀</code></td>
<td style="text-align:center">rav·ish</td>
</tr>
<tr>
<td style="text-align:center">deprive</td>
<td style="text-align:center">v. 使剥夺</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">loot</td>
<td style="text-align:center">v. 洗劫；掠夺</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">despoil</td>
<td style="text-align:center">v. 洗劫；掠夺</td>
<td style="text-align:center"></td>
<td style="text-align:center">de·spoil</td>
</tr>
<tr>
<td style="text-align:center">abdomen</td>
<td style="text-align:center">n. 腹部，肚子</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">belly</td>
<td style="text-align:center">n. 小腹</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">paunch</td>
<td style="text-align:center">n. 大肚子，啤酒肚</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">obsolete</td>
<td style="text-align:center">adj. 作废的，过时的</td>
<td style="text-align:center"><code>ob- against</code><br /><code>sol- be used to</code><br />与习惯不符，过时的</td>
<td style="text-align:center">ob·sol·ete</td>
</tr>
<tr>
<td style="text-align:center">outmoded</td>
<td style="text-align:center">adj. 过时的</td>
<td style="text-align:center">mode 时尚<br />不是时尚，过时</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">antiquated</td>
<td style="text-align:center">adj. 过时的</td>
<td style="text-align:center">antique 古董</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">groove</td>
<td style="text-align:center">n. 凹槽，沟</td>
<td style="text-align:center">grave   a→oo<br />坟墓就是一个凹槽</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">furrow</td>
<td style="text-align:center">n. 犁沟；车辙</td>
<td style="text-align:center">row<br />犁沟和车辙都是一排排的</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">rut</td>
<td style="text-align:center">n. 车辙；凹槽</td>
<td style="text-align:center">route   ou→u</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">jolt</td>
<td style="text-align:center">n. 摇动；颠簸</td>
<td style="text-align:center">j- journey<br />旅行有颠簸</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">molt</td>
<td style="text-align:center">v. 脱毛；换羽</td>
<td style="text-align:center">m- 毛</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">dolt</td>
<td style="text-align:center">n. 傻瓜</td>
<td style="text-align:center">dull   呆</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">bolt</td>
<td style="text-align:center">v. 急逃，夺门而逃；门拴</td>
<td style="text-align:center">博尔特</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">joggle</td>
<td style="text-align:center">v. 摇晃</td>
<td style="text-align:center">jog<br />反复跑</td>
<td style="text-align:center">jog·gle</td>
</tr>
<tr>
<td style="text-align:center">prowl</td>
<td style="text-align:center">v. 潜行，徘徊</td>
<td style="text-align:center">扑咬</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">rove</td>
<td style="text-align:center">v. 徘徊</td>
<td style="text-align:center">round   u→v</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">roam</td>
<td style="text-align:center">v. 徘徊</td>
<td style="text-align:center">round   u→a n→m</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">loiter</td>
<td style="text-align:center">v. (公共场合)闲逛</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">scoop</td>
<td style="text-align:center">v. (用勺子)挖</td>
<td style="text-align:center">spoon</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">shovel</td>
<td style="text-align:center">v. (用铲子)挖</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">excavate</td>
<td style="text-align:center">v. 出土</td>
<td style="text-align:center"><code>ex- out</code><br />cav = cave<br />出洞穴</td>
<td style="text-align:center">ex·cav·ate</td>
</tr>
<tr>
<td style="text-align:center">sue</td>
<td style="text-align:center">v. 起诉，控告</td>
<td style="text-align:center">su 诉</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">cue</td>
<td style="text-align:center">n./v. 暗示</td>
<td style="text-align:center">c有包含的意思<br />包含的意思，暗示</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">hue</td>
<td style="text-align:center">n. 色度；色彩</td>
<td style="text-align:center">湖光山色</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">rue</td>
<td style="text-align:center">n./v. 后悔</td>
<td style="text-align:center">如果再来一次机会</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">indict</td>
<td style="text-align:center">v. 起诉</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">prosecute</td>
<td style="text-align:center">v. 起诉</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">deviation</td>
<td style="text-align:center">n. 偏离，偏差</td>
<td style="text-align:center"><code>de- off</code><br />via/voy  way<br />远离道路</td>
<td style="text-align:center">de·via·tion</td>
</tr>
<tr>
<td style="text-align:center">deviate</td>
<td style="text-align:center">v. 偏离</td>
<td style="text-align:center">同上<br />deviate from</td>
<td style="text-align:center">de·via·te</td>
</tr>
<tr>
<td style="text-align:center">deviant</td>
<td style="text-align:center">adj. 变态的，异常的</td>
<td style="text-align:center">偏离的人(ant)变态</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">devious</td>
<td style="text-align:center">adj. 绕道的；不坦率的</td>
<td style="text-align:center">偏离的路</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">trivial</td>
<td style="text-align:center">adj. 不重要的</td>
<td style="text-align:center"><code>tri- 三</code><br />三叉路口聊天</td>
<td style="text-align:center">tri·vial</td>
</tr>
<tr>
<td style="text-align:center">convoy</td>
<td style="text-align:center">n./v. 护航</td>
<td style="text-align:center">一起走</td>
<td style="text-align:center">con·voy</td>
</tr>
<tr>
<td style="text-align:center">obviate</td>
<td style="text-align:center">v. 避免，防止</td>
<td style="text-align:center"><code>ob- against</code><br />阻碍道路，防止通行</td>
<td style="text-align:center">ob·via·te</td>
</tr>
<tr>
<td style="text-align:center">impervious</td>
<td style="text-align:center">adj. 透不过的；不受影响</td>
<td style="text-align:center"><code>im- not</code><br />per- through<br />穿不过的</td>
<td style="text-align:center">im·per·vi·ous</td>
</tr>
<tr>
<td style="text-align:center">digress</td>
<td style="text-align:center">v. 偏离(题目)</td>
<td style="text-align:center"><code>di- 离开</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">diverge</td>
<td style="text-align:center">v. 使偏离</td>
<td style="text-align:center">同上</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">deflect</td>
<td style="text-align:center">v. 使偏斜，使转向</td>
<td style="text-align:center">reflect</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">fortitude</td>
<td style="text-align:center">n. 坚毅；刚毅</td>
<td style="text-align:center"><code>fort- force</code><br /><code>-itude 抽象名词后缀</code></td>
<td style="text-align:center">fort·itude</td>
</tr>
<tr>
<td style="text-align:center">fortify</td>
<td style="text-align:center">v. 增强；设防</td>
<td style="text-align:center"><code>-fy 动词</code></td>
<td style="text-align:center">forti·fy</td>
</tr>
<tr>
<td style="text-align:center">fort</td>
<td style="text-align:center">n. 要塞，堡垒</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">forte</td>
<td style="text-align:center">n. 优点</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">endurance</td>
<td style="text-align:center">n. 忍耐力</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">stamina</td>
<td style="text-align:center">n. 毅力；持久力</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">inconsolable</td>
<td style="text-align:center">adj. 伤心的</td>
<td style="text-align:center"><code>in- not</code><br />console 安慰<br /><code>sol- along</code><br />  一起孤独，安慰<br />无法安慰的</td>
<td style="text-align:center">in·console·able</td>
</tr>
<tr>
<td style="text-align:center">solitude</td>
<td style="text-align:center">n. 孤独</td>
<td style="text-align:center"></td>
<td style="text-align:center">sol·itude</td>
</tr>
<tr>
<td style="text-align:center">solance</td>
<td style="text-align:center">n./v. 安慰</td>
<td style="text-align:center">孤独需要安慰</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">desolate</td>
<td style="text-align:center">adj. 荒凉的；荒废的</td>
<td style="text-align:center">十分孤独</td>
<td style="text-align:center">de·sol·ate</td>
</tr>
<tr>
<td style="text-align:center">brokenhearted</td>
<td style="text-align:center">adj. 伤心的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">grieved</td>
<td style="text-align:center">adj. 悲伤的</td>
<td style="text-align:center">grave   a→ie</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">commemorate</td>
<td style="text-align:center">v. 纪念；庆祝</td>
<td style="text-align:center">com = con 一起<br />memory 记忆<br />一起记住</td>
<td style="text-align:center">com·memor·ate</td>
</tr>
<tr>
<td style="text-align:center">memorial</td>
<td style="text-align:center">n. 纪念碑</td>
<td style="text-align:center"></td>
<td style="text-align:center">memor·ial</td>
</tr>
<tr>
<td style="text-align:center">memorize</td>
<td style="text-align:center">v. 熟记</td>
<td style="text-align:center"></td>
<td style="text-align:center">memor·ize</td>
</tr>
<tr>
<td style="text-align:center">amnesia</td>
<td style="text-align:center">n. 健忘症</td>
<td style="text-align:center">a- not<br />memory<br />去e m→n o→e</td>
<td style="text-align:center">a·mne·sia</td>
</tr>
<tr>
<td style="text-align:center">amnesty</td>
<td style="text-align:center">n. 赦免</td>
<td style="text-align:center">同上</td>
<td style="text-align:center">a·mne·sty</td>
</tr>
<tr>
<td style="text-align:center">celebrate</td>
<td style="text-align:center">v. 纪念</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">in memory of</td>
<td style="text-align:center">纪念</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">defile</td>
<td style="text-align:center">v. 弄脏</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">contaminate</td>
<td style="text-align:center">v. 污染</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sully</td>
<td style="text-align:center">v. 弄脏；玷污</td>
<td style="text-align:center">soil   oi→u<br />见下</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">soil</td>
<td style="text-align:center">v. 弄脏；侮辱</td>
<td style="text-align:center">弄了一身泥，脏了</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>英语</category>
        <category>曲根万词班</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>单词</tag>
      </tags>
  </entry>
  <entry>
    <title>day 02</title>
    <url>/2019/11/05/day-02/</url>
    <content><![CDATA[<style>
table th:first-of-type {
    width: 150px;
}
</style>


<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">单词</th>
<th style="text-align:center">释意</th>
<th style="text-align:center">备注</th>
<th style="text-align:center">分解</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">tumble</td>
<td style="text-align:center">v. 跌落，跌倒</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">stumble</td>
<td style="text-align:center">v. 踉跄；绊倒</td>
<td style="text-align:center">同cross</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">jumble</td>
<td style="text-align:center">n. 混乱</td>
<td style="text-align:center">j - jam 阻塞造成混乱</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">humble</td>
<td style="text-align:center">adj. 卑微的；谦虚的</td>
<td style="text-align:center">human 做人要谦卑</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">fumble</td>
<td style="text-align:center">v. 摸索</td>
<td style="text-align:center">fu-扶着墙摸索</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">grumble</td>
<td style="text-align:center">v. 抱怨</td>
<td style="text-align:center"><code>gru - 心情不好</code></td>
<td style="text-align:center">gru·mble</td>
</tr>
<tr>
<td style="text-align:center">crumble</td>
<td style="text-align:center">v. 崩溃，破碎</td>
<td style="text-align:center">cry<br />大哭崩溃<br />crumb 面包屑</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">mumble</td>
<td style="text-align:center">v. 楠楠而语；嘀咕抱怨</td>
<td style="text-align:center">mum<br />妈妈嘀咕</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">bandit</td>
<td style="text-align:center">n. 土匪，强盗</td>
<td style="text-align:center">band - 一群<br />it - to go<br />一群人成帮结伙地走</td>
<td style="text-align:center">band·it</td>
</tr>
<tr>
<td style="text-align:center">brigand</td>
<td style="text-align:center">n. 土匪</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gangster</td>
<td style="text-align:center">n. 歹徒</td>
<td style="text-align:center">gang 黑帮</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">desperado</td>
<td style="text-align:center">n. 亡命之徒</td>
<td style="text-align:center">desperate<br />绝望的亡命之徒</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">outlaw</td>
<td style="text-align:center">n. 逃犯，歹徒</td>
<td style="text-align:center">法律之外的人</td>
<td style="text-align:center">out·law</td>
</tr>
<tr>
<td style="text-align:center">nibble</td>
<td style="text-align:center">n. 小口咬</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">nipple</td>
<td style="text-align:center">n. 乳头</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">pageant</td>
<td style="text-align:center">n. 壮观的场面</td>
<td style="text-align:center">page + ant<br />在历史上留有一页的壮观场面</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">parade</td>
<td style="text-align:center">n. 游行</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">spectacle</td>
<td style="text-align:center">n. 壮丽的景色，场面</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">scourge</td>
<td style="text-align:center">n. 引起灾害的人或事物；灾难</td>
<td style="text-align:center">source<br />灾难的源头</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">disaster</td>
<td style="text-align:center">n. 灾难</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">calamity</td>
<td style="text-align:center">n. 灾难</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">catastrophe</td>
<td style="text-align:center">n. 灾难</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">bane</td>
<td style="text-align:center">n. 祸根</td>
<td style="text-align:center">ban<br />禁止的是祸根</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">dissimulation</td>
<td style="text-align:center">n. 假装，掩饰</td>
<td style="text-align:center"><code>simul/simil - same</code><br />dis - to<br />变得更像</td>
<td style="text-align:center">dis·simul·ation</td>
</tr>
<tr>
<td style="text-align:center">dissimulate</td>
<td style="text-align:center">v. 掩饰</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">assimilate</td>
<td style="text-align:center">v. 同化</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">simultaneous</td>
<td style="text-align:center">adj. 同步的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">simulate</td>
<td style="text-align:center">v. 模仿，模拟</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">cloak</td>
<td style="text-align:center">v. 掩饰</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">disguise</td>
<td style="text-align:center">v. 假装</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">masquerade</td>
<td style="text-align:center">v. 伪装，掩饰</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">inscription</td>
<td style="text-align:center">n. 题字，碑铭</td>
<td style="text-align:center"><code>scrip/scribe - to write(describe)</code></td>
<td style="text-align:center">in·scrip·tion</td>
</tr>
<tr>
<td style="text-align:center">inscribe</td>
<td style="text-align:center">v. 题字，题写</td>
<td style="text-align:center"></td>
<td style="text-align:center">in·scribe</td>
</tr>
<tr>
<td style="text-align:center">proscribe</td>
<td style="text-align:center">v. 禁止</td>
<td style="text-align:center">前方写明；明令禁止<br />同prohibit</td>
<td style="text-align:center">pro·scribe</td>
</tr>
<tr>
<td style="text-align:center">transcribe</td>
<td style="text-align:center">v. 眷写，抄写</td>
<td style="text-align:center"><code>trans - from … to</code><br />从一个地方写到另一个地方</td>
<td style="text-align:center">trans·(s)cribe</td>
</tr>
<tr>
<td style="text-align:center">circumscribe</td>
<td style="text-align:center">v. 限制</td>
<td style="text-align:center"><code>circum - circle</code><br />画一个圈，限制范围</td>
<td style="text-align:center">circum·scribe</td>
</tr>
<tr>
<td style="text-align:center">scribble</td>
<td style="text-align:center">n. 乱写，乱涂</td>
<td style="text-align:center"><code>词尾辅音双写表动作反复</code><br />不断写，乱写</td>
<td style="text-align:center">scrib·ble</td>
</tr>
<tr>
<td style="text-align:center">caption</td>
<td style="text-align:center">n. 插图说明</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">epigraph</td>
<td style="text-align:center">n. 碑文</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">epitaph</td>
<td style="text-align:center">n. 碑文，墓志铭</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">meddle</td>
<td style="text-align:center">v. 干涉， 干扰</td>
<td style="text-align:center"><code>medi - middle</code><br />在事情中间，要干涉事情的发展<br />meddle in/with</td>
<td style="text-align:center">med·dle</td>
</tr>
<tr>
<td style="text-align:center">mediate</td>
<td style="text-align:center">v. 调停，斡旋</td>
<td style="text-align:center">游走于两者之间</td>
<td style="text-align:center">medi·ate</td>
</tr>
<tr>
<td style="text-align:center">medieval</td>
<td style="text-align:center">adj. 中世纪</td>
<td style="text-align:center"><code>eval 世纪</code></td>
<td style="text-align:center">medi·eval</td>
</tr>
<tr>
<td style="text-align:center">mediocre</td>
<td style="text-align:center">adj. 中庸的，普通的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">interfere</td>
<td style="text-align:center">v. 干涉</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">intervene</td>
<td style="text-align:center">v. 干涉</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">butt in</td>
<td style="text-align:center">插嘴；管闲事</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">nosy</td>
<td style="text-align:center">adj. 爱管闲事的</td>
<td style="text-align:center">nose</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">officious</td>
<td style="text-align:center">adj. 爱管闲事的</td>
<td style="text-align:center">很多office爱管闲事</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">afflict</td>
<td style="text-align:center">v. 使痛苦</td>
<td style="text-align:center"><code>flict - to strike (conflict)</code><br /><code>a + 辅音双写表强调</code><br />被打很痛苦</td>
<td style="text-align:center">af·flict</td>
</tr>
<tr>
<td style="text-align:center">inflict</td>
<td style="text-align:center">v. 使遭受</td>
<td style="text-align:center"></td>
<td style="text-align:center">in·flict</td>
</tr>
<tr>
<td style="text-align:center">flog</td>
<td style="text-align:center">v. 重打，鞭笞</td>
<td style="text-align:center">father’s log<br />爸爸拿木棒打我<br />同whip</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">distress</td>
<td style="text-align:center">v. 使不安，使忧虑</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ail</td>
<td style="text-align:center">v. 使痛苦；生病</td>
<td style="text-align:center">ill</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">torture</td>
<td style="text-align:center">v./n. 折磨；酷刑</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">censure</td>
<td style="text-align:center">v. 责难，指责</td>
<td style="text-align:center">审查员严厉谴责人口普查的一致</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">censor</td>
<td style="text-align:center">v./n. 审查员；审查</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">census</td>
<td style="text-align:center">n. 人口普查</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">consensus</td>
<td style="text-align:center">n. 共识，一致</td>
<td style="text-align:center">con + sense 感觉一样</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">blame</td>
<td style="text-align:center">v. 谴责</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">scold</td>
<td style="text-align:center">v. 谴责</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">condemn</td>
<td style="text-align:center">v. 谴责</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">reproach</td>
<td style="text-align:center">v. 谴责</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">reprove</td>
<td style="text-align:center">v. 谴责</td>
<td style="text-align:center"><code>re - against</code><br /><code>prove - 赞同(approve)</code></td>
<td style="text-align:center">re·prove</td>
</tr>
<tr>
<td style="text-align:center">posture</td>
<td style="text-align:center">n. 姿势；态度</td>
<td style="text-align:center"><code>pose - put</code><br />摆放的姿势、态度</td>
<td style="text-align:center">pos·ture</td>
</tr>
<tr>
<td style="text-align:center">repose</td>
<td style="text-align:center">v. 休息，睡觉</td>
<td style="text-align:center"><code>re - back</code><br />身体往后放，休息</td>
<td style="text-align:center">re·pose</td>
</tr>
<tr>
<td style="text-align:center">depose</td>
<td style="text-align:center">v. 免职</td>
<td style="text-align:center"><code>de - down</code><br />下放，罢免</td>
<td style="text-align:center">de·pose</td>
</tr>
<tr>
<td style="text-align:center">superimpose</td>
<td style="text-align:center">v. 叠加</td>
<td style="text-align:center"><code>super - on</code><br />放在上面</td>
<td style="text-align:center">super·im·pose</td>
</tr>
<tr>
<td style="text-align:center">discompose</td>
<td style="text-align:center">v. 不安</td>
<td style="text-align:center">dis + composure，见下</td>
<td style="text-align:center">dis·compose</td>
</tr>
<tr>
<td style="text-align:center">composure</td>
<td style="text-align:center">n. 镇定</td>
<td style="text-align:center">compose，见下</td>
<td style="text-align:center">compos(e)·ure</td>
</tr>
<tr>
<td style="text-align:center">compose</td>
<td style="text-align:center">v. 组成；作曲；镇定</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">composition</td>
<td style="text-align:center">n. 组成</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">juxtapose</td>
<td style="text-align:center">v. 并排放置</td>
<td style="text-align:center"><code>junct - 连着</code><br />c → x  n脱落</td>
<td style="text-align:center">juxt·a·pose</td>
</tr>
<tr>
<td style="text-align:center">conjunction</td>
<td style="text-align:center">n. 连词</td>
<td style="text-align:center"></td>
<td style="text-align:center">con·junct·ion</td>
</tr>
<tr>
<td style="text-align:center">transpose</td>
<td style="text-align:center">v. 变换位置</td>
<td style="text-align:center">从这里放到那里</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">apposite</td>
<td style="text-align:center">adj. 适当的</td>
<td style="text-align:center">opposite</td>
<td style="text-align:center">ap·posite</td>
</tr>
<tr>
<td style="text-align:center">demeanor</td>
<td style="text-align:center">n. 行为，举止</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">deportment</td>
<td style="text-align:center">n. 举止，态度</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ransack</td>
<td style="text-align:center">v. 彻底搜索；洗劫</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">frisk sb. down</td>
<td style="text-align:center">搜身</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">spout</td>
<td style="text-align:center">v. 喷出；涌出</td>
<td style="text-align:center"><code>sp - 发散，发出</code><br />向外发出</td>
<td style="text-align:center">sp·out</td>
</tr>
<tr>
<td style="text-align:center">spurt</td>
<td style="text-align:center">v. (液体，火焰)喷出</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sprout</td>
<td style="text-align:center">v. 发芽</td>
<td style="text-align:center">注意比spout多一个r</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sprawl</td>
<td style="text-align:center">v. 蔓延；张开四肢平躺</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">split</td>
<td style="text-align:center">v. 分裂，分开</td>
<td style="text-align:center">split up</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">exude</td>
<td style="text-align:center">v. 流出</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gush</td>
<td style="text-align:center">v. 涌出；迸发</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">traverse</td>
<td style="text-align:center">n./v. 走过；横断</td>
<td style="text-align:center"><code>trans - from … to</code><br />travel</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">intersect</td>
<td style="text-align:center">v. 横断；相交</td>
<td style="text-align:center"><code>sect - cut (section)</code><br /><code>inter - 相互</code></td>
<td style="text-align:center">inter·sect</td>
</tr>
<tr>
<td style="text-align:center">bisect</td>
<td style="text-align:center">v. 一刀两断</td>
<td style="text-align:center"><code>bi - 两</code></td>
<td style="text-align:center">bi·sect</td>
</tr>
<tr>
<td style="text-align:center">wistful</td>
<td style="text-align:center">adj. 渴望的，惆怅的</td>
<td style="text-align:center">wish</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">yearning</td>
<td style="text-align:center">adj./n. 渴望(的)</td>
<td style="text-align:center">年复一年的渴望</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">longing</td>
<td style="text-align:center">adj./n. 渴望(的)</td>
<td style="text-align:center">长久的渴望</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">covet</td>
<td style="text-align:center">v. 觊觎， 垂涎</td>
<td style="text-align:center">cover</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">covetous</td>
<td style="text-align:center">n. 觊觎，垂涎</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">amicable</td>
<td style="text-align:center">adj. 友好的</td>
<td style="text-align:center"><code>am/amor - love</code><br />可以爱的</td>
<td style="text-align:center">am·icable</td>
</tr>
<tr>
<td style="text-align:center">amour</td>
<td style="text-align:center">n. (秘密的)恋情</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">amateur</td>
<td style="text-align:center">n. 业余爱好者</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">amiable</td>
<td style="text-align:center">adj. 和蔼的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">amity</td>
<td style="text-align:center">n. 友好</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">hospitable</td>
<td style="text-align:center">n. 友好</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">enmity</td>
<td style="text-align:center">n. 敌意</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">hostile</td>
<td style="text-align:center">n. 敌意</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">enamor</td>
<td style="text-align:center">v. 使迷恋</td>
<td style="text-align:center">be enamored of …</td>
<td style="text-align:center">en·amor</td>
</tr>
<tr>
<td style="text-align:center">affable</td>
<td style="text-align:center">adj. 和蔼的</td>
<td style="text-align:center"><code>fa - speak</code><br />可以一起讲话的</td>
<td style="text-align:center">af·fa·(a)ble</td>
</tr>
<tr>
<td style="text-align:center">genial</td>
<td style="text-align:center">adj. 和蔼的；愉快的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">eradicate</td>
<td style="text-align:center">vt. 根除</td>
<td style="text-align:center"><code>e - out</code><br /><code>radic - root</code></td>
<td style="text-align:center">e·radic·ate</td>
</tr>
<tr>
<td style="text-align:center">radical</td>
<td style="text-align:center">adj. 根本的</td>
<td style="text-align:center"></td>
<td style="text-align:center">radic·al</td>
</tr>
<tr>
<td style="text-align:center">irradiate</td>
<td style="text-align:center">v. 照耀，照亮</td>
<td style="text-align:center"><code>ir - to</code><br /><code>radi - send out(radiation)</code><br />把光送出去照亮</td>
<td style="text-align:center">ir·radi·ate</td>
</tr>
<tr>
<td style="text-align:center">radioactive</td>
<td style="text-align:center">adj. 有放射性的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">extirpate</td>
<td style="text-align:center">v. 根除</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">uproot</td>
<td style="text-align:center">v. 根除</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">cruise</td>
<td style="text-align:center">v. 巡航；往返航行</td>
<td style="text-align:center"><code>cruc/crus - cross 穿过</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">crux</td>
<td style="text-align:center">n. 关键，要点</td>
<td style="text-align:center"><code>cruc/crus - cross 十字架</code><br />s → x<br />十字架的交点，要点</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">crucify</td>
<td style="text-align:center">v. 折磨；钉在十字架上</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">excruciate</td>
<td style="text-align:center">v. 受酷刑；拷打</td>
<td style="text-align:center"><code>ex - to</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">crusade</td>
<td style="text-align:center">n. 十字军东征；改革运动</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">voyage</td>
<td style="text-align:center">n./v. 航行</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">navigate</td>
<td style="text-align:center">v. 航行；导航</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">glimmer</td>
<td style="text-align:center">n. 微光</td>
<td style="text-align:center"><code>gl - light(glass)</code><br />m 闷光，微光</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">glare</td>
<td style="text-align:center">v./n. 发强光</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">glisten</td>
<td style="text-align:center">n./v. (湿物体或油)发光</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">glitter</td>
<td style="text-align:center">n./v. 闪闪发光</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gleam</td>
<td style="text-align:center">n./v. 发光</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">slash</td>
<td style="text-align:center">v. 砍；削减</td>
<td style="text-align:center"><code>sl - slip</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">slump</td>
<td style="text-align:center">n./v. 暴跌；下陷</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">slack</td>
<td style="text-align:center">adj. 萧条的；松弛的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sloppy</td>
<td style="text-align:center">adj. 邋遢的，不整洁的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">slippers</td>
<td style="text-align:center">n. 拖鞋</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">slovenly</td>
<td style="text-align:center">adj. 邋遢的，不整洁的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">slumber</td>
<td style="text-align:center">v. 睡觉</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gash</td>
<td style="text-align:center">v. 砍入很深；划开</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">hack</td>
<td style="text-align:center">v. 砍</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">blizzard</td>
<td style="text-align:center">n. 暴风雪</td>
<td style="text-align:center"><code>ard - 名词后缀</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">laggard</td>
<td style="text-align:center">n. 落后者</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sluggard</td>
<td style="text-align:center">n. 懒鬼</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">coward</td>
<td style="text-align:center">n. 胆小鬼</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">tempest</td>
<td style="text-align:center">n. 暴风雪</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">lump</td>
<td style="text-align:center">n. 堆；大量；肿块</td>
<td style="text-align:center"><code>ump - 许多</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">umpteen</td>
<td style="text-align:center">det. 无数</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">bump</td>
<td style="text-align:center">n. 肿块</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">plump</td>
<td style="text-align:center">adj. 丰满的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">clump</td>
<td style="text-align:center">n. 一簇，一丛</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">block</td>
<td style="text-align:center">n. 一大块</td>
<td style="text-align:center">a block of</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>英语</category>
        <category>曲根万词班</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>单词</tag>
      </tags>
  </entry>
  <entry>
    <title>day 03</title>
    <url>/2019/11/17/day-03/</url>
    <content><![CDATA[<style>
table th:first-of-type {
    width: 150px;
}
</style>


<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">单词</th>
<th style="text-align:center">释义</th>
<th style="text-align:center">备注</th>
<th style="text-align:center">分解</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ransack</td>
<td style="text-align:center">v. 细细搜索；洗劫</td>
<td style="text-align:center">ran + sack<br />装进麻袋就跑</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">plunder</td>
<td style="text-align:center">v. (以暴力)掠夺</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">plummet</td>
<td style="text-align:center">v. 暴跌</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">plunge</td>
<td style="text-align:center">v. 急降；跳入</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sag</td>
<td style="text-align:center">v./n. 下降</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">vogue</td>
<td style="text-align:center">n. 时尚；流行</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">fad</td>
<td style="text-align:center">n. 时尚</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">vague</td>
<td style="text-align:center">adj. 模糊的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ascribe</td>
<td style="text-align:center">v. 归因于</td>
<td style="text-align:center"><code>a - to</code><br /><code>scribe - to write</code></td>
<td style="text-align:center">a·scribe</td>
</tr>
<tr>
<td style="text-align:center">attribute</td>
<td style="text-align:center">v. 归因于</td>
<td style="text-align:center">attribute to</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">credit</td>
<td style="text-align:center">v. 归因于</td>
<td style="text-align:center">credit to</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">owe</td>
<td style="text-align:center">v. 归因于</td>
<td style="text-align:center">owe to</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">impute</td>
<td style="text-align:center">v. 归因于</td>
<td style="text-align:center"><code>im - to</code><br /><code>put - think</code><br />impute to</td>
<td style="text-align:center">im·pute</td>
</tr>
<tr>
<td style="text-align:center">facet</td>
<td style="text-align:center">n. (事情的)一方面；小平面</td>
<td style="text-align:center"><code>face - 脸</code><br /><code>et - 小</code></td>
<td style="text-align:center">face·(e)t</td>
</tr>
<tr>
<td style="text-align:center">facetious</td>
<td style="text-align:center">adj. 诙谐的</td>
<td style="text-align:center">嬉皮笑脸的，不合时宜的诙谐</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">deface</td>
<td style="text-align:center">v. 损坏(表面)</td>
<td style="text-align:center">把脸(表面)向下挖</td>
<td style="text-align:center">de·face</td>
</tr>
<tr>
<td style="text-align:center">efface</td>
<td style="text-align:center">v. 抹去，擦除</td>
<td style="text-align:center"><code>ef - ex - out</code><br />擦除表面</td>
<td style="text-align:center">ef·face</td>
</tr>
<tr>
<td style="text-align:center">facade</td>
<td style="text-align:center">n. (建筑物的)正面；假象</td>
<td style="text-align:center"><code>ade - 名词后缀</code></td>
<td style="text-align:center">fac(e)·ade</td>
</tr>
<tr>
<td style="text-align:center">phase</td>
<td style="text-align:center">n. 方面；阶段</td>
<td style="text-align:center">ph - f</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">aspect</td>
<td style="text-align:center">n. 方面</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">dubious</td>
<td style="text-align:center">adj. 怀疑的</td>
<td style="text-align:center">doubt</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">skeptical<br />sceptical</td>
<td style="text-align:center">adj. 怀疑的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">mumble</td>
<td style="text-align:center">v. 喃喃而语；嘀咕抱怨</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">murmur</td>
<td style="text-align:center">v. 低声抱怨；低声说</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">mutter</td>
<td style="text-align:center">v./n. 咕哝；喃喃自语</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">heed</td>
<td style="text-align:center">n. 注意</td>
<td style="text-align:center">give/pay heed (to sb./sth.)<br />take heed (of sb./sth.)</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">smog</td>
<td style="text-align:center">n. 烟雾</td>
<td style="text-align:center">smoke + fog</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">haze</td>
<td style="text-align:center">n. 雾霾</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">fume</td>
<td style="text-align:center">n. 烟  v. 冒烟</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">bulwark</td>
<td style="text-align:center">n. 堡垒</td>
<td style="text-align:center">bole(树干) + work<br />用树干围成堡垒防御</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">fort</td>
<td style="text-align:center">n. 堡垒</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">rampart</td>
<td style="text-align:center">n. 壁垒；保护物</td>
<td style="text-align:center">rim(i → a) - round + part<br />在一个圆圈里保护起来</td>
<td style="text-align:center">ram·part</td>
</tr>
<tr>
<td style="text-align:center">huddle</td>
<td style="text-align:center">v. 挤成一团；蜷缩</td>
<td style="text-align:center">hide(i → u) d双写<br />蜷缩成一团躲起来</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">relic</td>
<td style="text-align:center">n. 遗迹；遗俗</td>
<td style="text-align:center"><code>re - back</code><br /><code>lic - link</code><br />联系过去的东西</td>
<td style="text-align:center">re·lic</td>
</tr>
<tr>
<td style="text-align:center">relinquish</td>
<td style="text-align:center">v. 放弃</td>
<td style="text-align:center">relic(c - qu)</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">remainder</td>
<td style="text-align:center">n. 遗物；遗迹</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">wayfarer</td>
<td style="text-align:center">n. 徒步旅行者；旅行者</td>
<td style="text-align:center">way + far + er<br />路走得很远的人</td>
<td style="text-align:center">way·far·er</td>
</tr>
<tr>
<td style="text-align:center">hitchhiker</td>
<td style="text-align:center">n. 搭便车旅行的人</td>
<td style="text-align:center">hitch(搭便车)</td>
<td style="text-align:center">hitch·hiker</td>
</tr>
<tr>
<td style="text-align:center">wont</td>
<td style="text-align:center">n. 习惯</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">custom</td>
<td style="text-align:center">n. 习惯</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">habitude</td>
<td style="text-align:center">n. 习惯</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">practice</td>
<td style="text-align:center">n. 习惯</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">absolve</td>
<td style="text-align:center">v. 赦免</td>
<td style="text-align:center"><code>ab - away</code><br /><code>solve - loosen(松开)</code></td>
<td style="text-align:center">ab·solve</td>
</tr>
<tr>
<td style="text-align:center">dissolve</td>
<td style="text-align:center">v. 溶解</td>
<td style="text-align:center"><code>dis - apart</code></td>
<td style="text-align:center">dis·solve</td>
</tr>
<tr>
<td style="text-align:center">insolvent</td>
<td style="text-align:center">adj. 破产的；无力偿还债务的</td>
<td style="text-align:center">无法解开的债务</td>
<td style="text-align:center">in·solve·nt</td>
</tr>
<tr>
<td style="text-align:center">exonerate</td>
<td style="text-align:center">v. 免除(对某人的)指控</td>
<td style="text-align:center"><code>oner - 负担</code><br />把某人从负担中解脱出来</td>
<td style="text-align:center">ex·oner·ate</td>
</tr>
<tr>
<td style="text-align:center">exculpate</td>
<td style="text-align:center">v. 证明某人无罪</td>
<td style="text-align:center"><code>culp - guilt</code><br />把某人从罪名中解脱出来</td>
<td style="text-align:center">ex·culp·ate</td>
</tr>
<tr>
<td style="text-align:center">inculpate</td>
<td style="text-align:center">v. 证明某人有罪</td>
<td style="text-align:center">把某人证明到罪名中</td>
<td style="text-align:center">in·culp·ate</td>
</tr>
<tr>
<td style="text-align:center">spare</td>
<td style="text-align:center">v. 赦免</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">deplore</td>
<td style="text-align:center">v. 悲痛；深悔</td>
<td style="text-align:center"><code>de - to</code><br /><code>plore - to cry; weep</code></td>
<td style="text-align:center">de·plore</td>
</tr>
<tr>
<td style="text-align:center">implore</td>
<td style="text-align:center">v. 恳求；哀求</td>
<td style="text-align:center"><code>im - to</code><br />哭着哀求</td>
<td style="text-align:center">im·plore</td>
</tr>
<tr>
<td style="text-align:center">mourn</td>
<td style="text-align:center">v. 悼念；哀悼</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">lament</td>
<td style="text-align:center">n./v. 悲痛</td>
<td style="text-align:center">mental → ment</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">condolence</td>
<td style="text-align:center">n. 哀悼，吊唁</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">contend</td>
<td style="text-align:center">v. 竞争；争论；主张</td>
<td style="text-align:center"><code>tend/tent/tens - to stretch</code><br />一起向外伸展自己的想法<br />向外伸展会引起竞争</td>
<td style="text-align:center">con·tend</td>
</tr>
<tr>
<td style="text-align:center">distend</td>
<td style="text-align:center">v. 扩张，膨胀</td>
<td style="text-align:center"><code>dis - apart</code><br />分开伸展</td>
<td style="text-align:center">dis·tend</td>
</tr>
<tr>
<td style="text-align:center">portend</td>
<td style="text-align:center">v. 预示</td>
<td style="text-align:center"><code>por = pro - 向前</code><br />向前展望</td>
<td style="text-align:center">por·tend</td>
</tr>
<tr>
<td style="text-align:center">tentative</td>
<td style="text-align:center">adj. 暂时的；实验的</td>
<td style="text-align:center"><code>tent - 帐篷 - 临时的</code></td>
<td style="text-align:center">tent·a·tive</td>
</tr>
<tr>
<td style="text-align:center">vie</td>
<td style="text-align:center">v. 竞争</td>
<td style="text-align:center">way(w → v ay → ie)<br />狭路相逢有竞争</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">via</td>
<td style="text-align:center">v. 通过</td>
<td style="text-align:center">way(w → v ay → ia)<br />通过一条路</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">fracture</td>
<td style="text-align:center">n. 骨折；断裂</td>
<td style="text-align:center"><code>fract/frag - to break(fragment)</code></td>
<td style="text-align:center">fract·ure</td>
</tr>
<tr>
<td style="text-align:center">fraction</td>
<td style="text-align:center">n. 部分</td>
<td style="text-align:center">分开的一部分</td>
<td style="text-align:center">fract·ion</td>
</tr>
<tr>
<td style="text-align:center">fractious</td>
<td style="text-align:center">adj. 易怒的；脾气坏的</td>
<td style="text-align:center">爱打破东西的</td>
<td style="text-align:center">fract·ious</td>
</tr>
<tr>
<td style="text-align:center">infraction</td>
<td style="text-align:center">n. 违法行为；违法</td>
<td style="text-align:center"><code>in - to</code><br />往里打破，打破规则</td>
<td style="text-align:center">in·fract·ion</td>
</tr>
<tr>
<td style="text-align:center">fracas</td>
<td style="text-align:center">n. 喧闹</td>
<td style="text-align:center">as frac(t)<br />和打破一样吵闹</td>
<td style="text-align:center">frac·as</td>
</tr>
<tr>
<td style="text-align:center">fragile</td>
<td style="text-align:center">adj. 易碎的</td>
<td style="text-align:center"><code>ile - 易于… 形容词后缀</code></td>
<td style="text-align:center">frag·ile</td>
</tr>
<tr>
<td style="text-align:center">suffrage</td>
<td style="text-align:center">n. 投票权</td>
<td style="text-align:center"><code>su + 辅音双写 = sub</code><br />把陶片打碎以后投下去(陶片放逐法)</td>
<td style="text-align:center">suf·frage</td>
</tr>
<tr>
<td style="text-align:center">shatter</td>
<td style="text-align:center">v./n. 粉碎</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">split</td>
<td style="text-align:center">v. 分裂</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">splinter</td>
<td style="text-align:center">n./v. 碎片；分裂</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">magnitude</td>
<td style="text-align:center">n. 大小；量级；重要性</td>
<td style="text-align:center"><code>magnit - 大max</code></td>
<td style="text-align:center">magnit·ude</td>
</tr>
<tr>
<td style="text-align:center">magnify</td>
<td style="text-align:center">v. 放大；夸大</td>
<td style="text-align:center"><code>fy - 动词后缀</code></td>
<td style="text-align:center">magni·fy</td>
</tr>
<tr>
<td style="text-align:center">magnate</td>
<td style="text-align:center">n. 大人物</td>
<td style="text-align:center"><code>ate - 表示人的后缀</code></td>
<td style="text-align:center">magn·ate</td>
</tr>
<tr>
<td style="text-align:center">magnificent</td>
<td style="text-align:center">adj. 宏伟的，壮丽的</td>
<td style="text-align:center"></td>
<td style="text-align:center">magni·ficent</td>
</tr>
<tr>
<td style="text-align:center">bulk</td>
<td style="text-align:center">n. 大量；大小</td>
<td style="text-align:center">in bulk 大量</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">bias</td>
<td style="text-align:center">n./v. 偏见</td>
<td style="text-align:center">be biased against …</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">unbiased</td>
<td style="text-align:center">adj. 公平的</td>
<td style="text-align:center"></td>
<td style="text-align:center">un·bias·ed</td>
</tr>
<tr>
<td style="text-align:center">prejudice</td>
<td style="text-align:center">n./v. 偏见</td>
<td style="text-align:center"><code>pre - 提前</code><br />提前判断，偏见</td>
<td style="text-align:center">pre·judice</td>
</tr>
<tr>
<td style="text-align:center">discrimination</td>
<td style="text-align:center">n. 偏见</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">nepotism</td>
<td style="text-align:center">n. 裙带关系</td>
<td style="text-align:center">来自nephew</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">pith</td>
<td style="text-align:center">n. 精华部分</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">marrow</td>
<td style="text-align:center">n. 骨髓；精髓</td>
<td style="text-align:center">narrow path<br />marrow pith</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">essence</td>
<td style="text-align:center">n. 精髓；本质</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">core</td>
<td style="text-align:center">n. 核心</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">relish</td>
<td style="text-align:center">v./n. 胃口；喜好</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">zest</td>
<td style="text-align:center">n. 风味</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">savor</td>
<td style="text-align:center">n. 滋味；食欲</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sneak</td>
<td style="text-align:center">v. 潜行</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sneaky</td>
<td style="text-align:center">adj. 偷偷摸摸的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">stealthy</td>
<td style="text-align:center">adj. 鬼鬼祟祟的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">tide</td>
<td style="text-align:center">n. 潮汐 v. 发生</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">tidings</td>
<td style="text-align:center">n. 消息</td>
<td style="text-align:center">tide - ing<br />正在发生的事</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">intelligence</td>
<td style="text-align:center">n. 情报</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gossip</td>
<td style="text-align:center">n. 流言蜚语；闲话</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">rumor</td>
<td style="text-align:center">n. 谣言</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">scandal</td>
<td style="text-align:center">n. 丑闻</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sanctuary</td>
<td style="text-align:center">n. 神殿；圣所</td>
<td style="text-align:center"><code>sanct = sacr(saint)</code><br /><code>ary - 表示人或地点</code></td>
<td style="text-align:center">sanct·u·ary</td>
</tr>
<tr>
<td style="text-align:center">sacrosanct</td>
<td style="text-align:center">adj. 神圣不可侵犯的</td>
<td style="text-align:center"></td>
<td style="text-align:center">sacro·sanct</td>
</tr>
<tr>
<td style="text-align:center">sanction</td>
<td style="text-align:center">n. 授权；制裁</td>
<td style="text-align:center">sanct + action</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sanctimonious</td>
<td style="text-align:center">adj. 假装虔诚的</td>
<td style="text-align:center">sanct + money<br />为了钱才神圣</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sanctimony</td>
<td style="text-align:center">n. 假装虔诚</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sanctify</td>
<td style="text-align:center">v. 使神圣</td>
<td style="text-align:center"></td>
<td style="text-align:center">sanct·ify</td>
</tr>
<tr>
<td style="text-align:center">shrine</td>
<td style="text-align:center">n. 圣殿；圣所</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">precipice</td>
<td style="text-align:center">n. 悬崖</td>
<td style="text-align:center"><code>cip/cap - head</code><br />道路的尽头</td>
<td style="text-align:center">pre·cip·ice</td>
</tr>
<tr>
<td style="text-align:center">precipitous</td>
<td style="text-align:center">adj. 陡峭的</td>
<td style="text-align:center"></td>
<td style="text-align:center">precipi·tous</td>
</tr>
<tr>
<td style="text-align:center">recapitulate</td>
<td style="text-align:center">v. 重述要点</td>
<td style="text-align:center"><code>re - back</code><br />重新把head(重要的)说一遍</td>
<td style="text-align:center">re·cap·itulate</td>
</tr>
<tr>
<td style="text-align:center">capitulate</td>
<td style="text-align:center">v. 投降</td>
<td style="text-align:center">头低下认输</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">cliff</td>
<td style="text-align:center">n. 悬崖</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">cumber</td>
<td style="text-align:center">v. 阻碍</td>
<td style="text-align:center"><code>cumb/cub - lie down</code><br />cucumber 黄瓜立不起来只能躺着<br />横在前方阻碍行动</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">encumber</td>
<td style="text-align:center">v. 阻碍</td>
<td style="text-align:center"></td>
<td style="text-align:center">en·cumber</td>
</tr>
<tr>
<td style="text-align:center">recumbent</td>
<td style="text-align:center">adj. 侧卧的，倚靠的</td>
<td style="text-align:center"><code>re - back</code><br />向后躺，侧卧</td>
<td style="text-align:center">re·cumb·ent</td>
</tr>
<tr>
<td style="text-align:center">incumbent</td>
<td style="text-align:center">adj./n. 在职者(的)；有责任(的)</td>
<td style="text-align:center">it’s incumbent on sb. to do<br />躺在某人怀里，某人有责任<br />躺在职位上，在职</td>
<td style="text-align:center">in·cumbent</td>
</tr>
<tr>
<td style="text-align:center">succumb</td>
<td style="text-align:center">v. 屈服</td>
<td style="text-align:center">躺在地上</td>
<td style="text-align:center">suc·cumb</td>
</tr>
<tr>
<td style="text-align:center">incubate</td>
<td style="text-align:center">v. 孵化</td>
<td style="text-align:center"><code>cub - 幼崽</code><br /><code>in + 名词 + ate 动词</code></td>
<td style="text-align:center">in·cub·ate</td>
</tr>
<tr>
<td style="text-align:center">incubus</td>
<td style="text-align:center">n. 噩梦</td>
<td style="text-align:center">无法躺下睡觉</td>
<td style="text-align:center">in·cub·us</td>
</tr>
<tr>
<td style="text-align:center">hinder</td>
<td style="text-align:center">v. 阻碍</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">hamper</td>
<td style="text-align:center">v. 阻碍</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">impede</td>
<td style="text-align:center">v. 阻碍</td>
<td style="text-align:center"><code>ped - foot</code><br />向里伸脚，阻碍</td>
<td style="text-align:center">im·pede</td>
</tr>
<tr>
<td style="text-align:center">decree</td>
<td style="text-align:center">n./v. 命令；决定</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">aghast</td>
<td style="text-align:center">adj. 惊骇的，恐怖的</td>
<td style="text-align:center">ghost (o → a)<br /><code>a - 表状态的形容词前缀</code></td>
<td style="text-align:center">a·ghast</td>
</tr>
<tr>
<td style="text-align:center">ghastly</td>
<td style="text-align:center">adj. 可怕的，吓人的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">afoot</td>
<td style="text-align:center">adj./adv. 徒步的；进行中的</td>
<td style="text-align:center">在用脚的状态，徒步的</td>
<td style="text-align:center">a·foot</td>
</tr>
<tr>
<td style="text-align:center">aground</td>
<td style="text-align:center">adj./adv. 搁浅的</td>
<td style="text-align:center">在地上的状态</td>
<td style="text-align:center">a·ground</td>
</tr>
<tr>
<td style="text-align:center">alight</td>
<td style="text-align:center">adj. 燃烧着的，点亮着的</td>
<td style="text-align:center">亮的状态</td>
<td style="text-align:center">a·light</td>
</tr>
<tr>
<td style="text-align:center">akin</td>
<td style="text-align:center">adj. 同族的；类似的</td>
<td style="text-align:center">是亲属的状态</td>
<td style="text-align:center">a·kin</td>
</tr>
<tr>
<td style="text-align:center">frolic</td>
<td style="text-align:center">v. 嬉戏；作乐</td>
<td style="text-align:center"><code>lic - lure(delicious)</code><br /><code>fro - 相互</code><br />动名词：frolicking<br />过去分词：frolicked</td>
<td style="text-align:center">fro·lic</td>
</tr>
<tr>
<td style="text-align:center">elicit</td>
<td style="text-align:center">v. 引出</td>
<td style="text-align:center"><code>e - ex - out</code><br />诱惑出来</td>
<td style="text-align:center">e·lic·it</td>
</tr>
<tr>
<td style="text-align:center">frisk</td>
<td style="text-align:center">v. 雀跃</td>
<td style="text-align:center">free + sky<br />frisk around</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">lark</td>
<td style="text-align:center">v. 嬉戏</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">cavort</td>
<td style="text-align:center">v. 欢跃，嬉戏</td>
<td style="text-align:center"><code>ca - co - 一起</code><br /><code>vort - vert - ture</code></td>
<td style="text-align:center">ca·vort</td>
</tr>
<tr>
<td style="text-align:center">intercourse</td>
<td style="text-align:center">n. 交流；性交</td>
<td style="text-align:center"><code>inter - 互相</code><br /><code>cour/cur - to run</code><br />相互走动交流</td>
<td style="text-align:center">inter·cour·se</td>
</tr>
<tr>
<td style="text-align:center">discourse</td>
<td style="text-align:center">n. 谈论；演讲</td>
<td style="text-align:center"><code>dis - apart</code><br />四处走动讲课</td>
<td style="text-align:center">dis·cour·se</td>
</tr>
<tr>
<td style="text-align:center">recourse</td>
<td style="text-align:center">n. 求助</td>
<td style="text-align:center"><code>re - back</code><br />向后跑，向后方求助</td>
<td style="text-align:center">re·cour·se</td>
</tr>
<tr>
<td style="text-align:center">succor</td>
<td style="text-align:center">v. 援救</td>
<td style="text-align:center"><code>su + 辅音双写 - down</code><br />向下走动，救援底下的人</td>
<td style="text-align:center">suc·cor</td>
</tr>
<tr>
<td style="text-align:center">incursion</td>
<td style="text-align:center">n. 入侵</td>
<td style="text-align:center">cour把o脱掉<br />走到别的国家里面</td>
<td style="text-align:center">in·cur·sion</td>
</tr>
<tr>
<td style="text-align:center">excursion</td>
<td style="text-align:center">n. 远足</td>
<td style="text-align:center">同上<br />走到外面去</td>
<td style="text-align:center">ex·cur·sion</td>
</tr>
<tr>
<td style="text-align:center">cursive</td>
<td style="text-align:center">adj. 潦草的</td>
<td style="text-align:center">cursive writing<br />边跑边写字，字迹潦草</td>
<td style="text-align:center">cur·sive</td>
</tr>
<tr>
<td style="text-align:center">cursory</td>
<td style="text-align:center">adj. 鲁莽的；匆忙的</td>
<td style="text-align:center">跑来跑去</td>
<td style="text-align:center">cur·sory</td>
</tr>
<tr>
<td style="text-align:center">menace</td>
<td style="text-align:center">n. 威胁</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">intimidation</td>
<td style="text-align:center">n. 威胁</td>
<td style="text-align:center"><code>in - to</code><br />威胁让一个人害怕(timid)</td>
<td style="text-align:center">in·timid·ation</td>
</tr>
<tr>
<td style="text-align:center">cow</td>
<td style="text-align:center">v. 恐吓</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">coerce</td>
<td style="text-align:center">v. 恐吓</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">browbeat</td>
<td style="text-align:center">v. 恐吓</td>
<td style="text-align:center">eyebrow吹胡子瞪眼</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">germinate</td>
<td style="text-align:center">v. 发芽，生长</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">shoot</td>
<td style="text-align:center">v. 发芽</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">tread</td>
<td style="text-align:center">v. 行走；踩</td>
<td style="text-align:center">过去式：trod<br />过去分词：trodden</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">trample</td>
<td style="text-align:center">v. 踩；踩踏</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">step on<br />stamp</td>
<td style="text-align:center">v. 踏，用力踩</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>英语</category>
        <category>曲根万词班</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>单词</tag>
      </tags>
  </entry>
  <entry>
    <title>day 04</title>
    <url>/2019/11/19/day-04/</url>
    <content><![CDATA[<style>
table th:first-of-type {
    width: 150px;
}
</style>


<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">单词</th>
<th style="text-align:center">释义</th>
<th style="text-align:center">备注</th>
<th style="text-align:center">分解</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ammunition</td>
<td style="text-align:center">n. 军火；弹药</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">munition</td>
<td style="text-align:center">n. 军火</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">bullet</td>
<td style="text-align:center">n. 弹药；子弹</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">cartridge</td>
<td style="text-align:center">n. 弹药；子弹</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">dote</td>
<td style="text-align:center">v. 溺爱</td>
<td style="text-align:center"><code>dot/don/dow - to give(donate)</code><br />无条件地给就是溺爱</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">doting</td>
<td style="text-align:center">adj. 溺爱的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">endow</td>
<td style="text-align:center">v. 捐赠</td>
<td style="text-align:center"><code>en - to</code><br />to give 捐赠</td>
<td style="text-align:center">en·dow</td>
</tr>
<tr>
<td style="text-align:center">condone</td>
<td style="text-align:center">v. 原谅，宽恕</td>
<td style="text-align:center">一起给予他人宽容</td>
<td style="text-align:center">con·done</td>
</tr>
<tr>
<td style="text-align:center">indulge</td>
<td style="text-align:center">v. 纵容，溺爱</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">pamper</td>
<td style="text-align:center">v. 溺爱</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">cosset</td>
<td style="text-align:center">v. 宠爱，纵容</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">coddle</td>
<td style="text-align:center">v. 溺爱</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gross</td>
<td style="text-align:center">adj. 全部的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">engross</td>
<td style="text-align:center">v. 全神贯注</td>
<td style="text-align:center">be engrossed in</td>
<td style="text-align:center">en·gross</td>
</tr>
<tr>
<td style="text-align:center">preoccupy</td>
<td style="text-align:center">v. 使全神贯注</td>
<td style="text-align:center">be preoccupied with<br />提前占有了所有空间</td>
<td style="text-align:center">pre·occupy</td>
</tr>
<tr>
<td style="text-align:center">rapt</td>
<td style="text-align:center">adj. 全神贯注的；狂喜的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">be absorbed in</td>
<td style="text-align:center">全神贯注</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">geyser</td>
<td style="text-align:center">n. 喷泉</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gush</td>
<td style="text-align:center">n./v. 涌出；滔滔不绝地讲话</td>
<td style="text-align:center">geyser<br />ey → u<br />s →sh</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">hush</td>
<td style="text-align:center">n./v. 安静</td>
<td style="text-align:center">安静得听到呼(hu)吸声</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">lush</td>
<td style="text-align:center">adj. 繁茂的，茂盛的</td>
<td style="text-align:center"><code>lux - a lot</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">plush</td>
<td style="text-align:center">adj. 豪华的</td>
<td style="text-align:center">漂(p)亮(l)得豪华</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">insuperable</td>
<td style="text-align:center">adj. 不能超越的；不能克服的</td>
<td style="text-align:center"><code>super - 超级；过多；上面</code><br /><code>in - not</code></td>
<td style="text-align:center">in·super·able</td>
</tr>
<tr>
<td style="text-align:center">superimpose</td>
<td style="text-align:center">v. 叠加</td>
<td style="text-align:center">引入到上面</td>
<td style="text-align:center">super·impose</td>
</tr>
<tr>
<td style="text-align:center">superfluous</td>
<td style="text-align:center">adj. 过剩的</td>
<td style="text-align:center">flow<br />w → u o脱落<br />超级流</td>
<td style="text-align:center">super·flu·ous</td>
</tr>
<tr>
<td style="text-align:center">superstition</td>
<td style="text-align:center">n. 迷信</td>
<td style="text-align:center"><code>stit - stand</code><br />站在真理之上，迷信</td>
<td style="text-align:center">super·stition</td>
</tr>
<tr>
<td style="text-align:center">supercilious</td>
<td style="text-align:center">adj. 高傲的</td>
<td style="text-align:center"><code>cil - call</code><br />高高在上地叫喊，傲慢</td>
<td style="text-align:center">super·cil·ious</td>
</tr>
<tr>
<td style="text-align:center">unconquerable</td>
<td style="text-align:center">adj. 不能征服的</td>
<td style="text-align:center"></td>
<td style="text-align:center">un·conquer·abel</td>
</tr>
<tr>
<td style="text-align:center">ordeal</td>
<td style="text-align:center">n. 痛苦的考验</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">trial</td>
<td style="text-align:center">n. 磨难，考验</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">tribulation</td>
<td style="text-align:center">n. 磨难</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">pouch</td>
<td style="text-align:center">n. 小袋；囊</td>
<td style="text-align:center">来自pocket<br />o → ou<br />ck → ch</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sack</td>
<td style="text-align:center">n. 麻袋</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">poke</td>
<td style="text-align:center">n. (顾客买东西的)袋子</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">screech</td>
<td style="text-align:center">v. 尖叫</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">shrill</td>
<td style="text-align:center">n./v. 尖叫</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">thriller</td>
<td style="text-align:center">n. 恐怖片</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">shriek</td>
<td style="text-align:center">n./v. 尖叫</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">stature</td>
<td style="text-align:center">n. 身材</td>
<td style="text-align:center"><code>st - stand / steady</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">static</td>
<td style="text-align:center">adj. 静止的；无改变的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">steadfast</td>
<td style="text-align:center">adj. 坚定的，忠诚的</td>
<td style="text-align:center">态度不动</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">stodgy</td>
<td style="text-align:center">adj. 平庸的；非常守旧的</td>
<td style="text-align:center">思想不变</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">stolid</td>
<td style="text-align:center">adj. 无动于衷的</td>
<td style="text-align:center">行为不变</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">stoic</td>
<td style="text-align:center">adj. 禁欲主义的；坚忍的；冷静的</td>
<td style="text-align:center">不动欲望/感情</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">stymie</td>
<td style="text-align:center">v. 阻碍</td>
<td style="text-align:center">stand + me<br />站在我面前阻碍我</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">stunt</td>
<td style="text-align:center">v. 阻碍</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">undermine</td>
<td style="text-align:center">v. 暗中破坏；在下面挖</td>
<td style="text-align:center"><code>under - 下面；不足；少于</code><br />挖底下的矿</td>
<td style="text-align:center">under·mine</td>
</tr>
<tr>
<td style="text-align:center">underdog</td>
<td style="text-align:center">n. 受害者；输家</td>
<td style="text-align:center">像狗一样趴在地上</td>
<td style="text-align:center">under·dog</td>
</tr>
<tr>
<td style="text-align:center">underscore</td>
<td style="text-align:center">v. 强调</td>
<td style="text-align:center">score  划线<br />在下面划线</td>
<td style="text-align:center">under·score</td>
</tr>
<tr>
<td style="text-align:center">understate</td>
<td style="text-align:center">v. 保守陈述</td>
<td style="text-align:center">讲少一点，保守</td>
<td style="text-align:center">under·state</td>
</tr>
<tr>
<td style="text-align:center">underrate</td>
<td style="text-align:center">v. 低估</td>
<td style="text-align:center">少估计了，低估</td>
<td style="text-align:center">under·rate</td>
</tr>
<tr>
<td style="text-align:center">erode</td>
<td style="text-align:center">v. 削弱；腐蚀</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">corrode</td>
<td style="text-align:center">v. 腐蚀；损害</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">debilitate</td>
<td style="text-align:center">v. 使衰弱</td>
<td style="text-align:center"><code>de - down</code><br /><code>bilit - ability</code></td>
<td style="text-align:center">de·bilit·ate</td>
</tr>
<tr>
<td style="text-align:center">enervate</td>
<td style="text-align:center">v. 使衰弱</td>
<td style="text-align:center"><code>e - out</code><br /><code>nerv - nerve</code><br />消耗神经让人衰弱</td>
<td style="text-align:center">e·nerv·ate</td>
</tr>
<tr>
<td style="text-align:center">assess</td>
<td style="text-align:center">v. 评估；评价</td>
<td style="text-align:center"><code>a + 辅音双写 - to</code><br /><code>sess - to sit</code><br />坐下来评估<br />assess assets(评估资产)</td>
<td style="text-align:center">as·sess</td>
</tr>
<tr>
<td style="text-align:center">obsess</td>
<td style="text-align:center">v. 困扰；着迷</td>
<td style="text-align:center"><code>ob - against</code><br />无法坐定</td>
<td style="text-align:center">ob·sess</td>
</tr>
<tr>
<td style="text-align:center">evaluate</td>
<td style="text-align:center">v. 评估</td>
<td style="text-align:center">把价值说出来</td>
<td style="text-align:center">e·valu·ate</td>
</tr>
<tr>
<td style="text-align:center">appraise</td>
<td style="text-align:center">v. 评估</td>
<td style="text-align:center"><code>praise - 评估</code><br />来自price</td>
<td style="text-align:center">ap·praise</td>
</tr>
<tr>
<td style="text-align:center">value</td>
<td style="text-align:center">v. 评价，定价</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">disdain</td>
<td style="text-align:center">v. 鄙视；轻视</td>
<td style="text-align:center"><code>dign - worthy(dignity)</code><br />dain - dign</td>
<td style="text-align:center">dis·dain</td>
</tr>
<tr>
<td style="text-align:center">distain</td>
<td style="text-align:center">v. 贬低</td>
<td style="text-align:center">tain - dign</td>
<td style="text-align:center">dis·tain</td>
</tr>
<tr>
<td style="text-align:center">belittle</td>
<td style="text-align:center">v. 小看</td>
<td style="text-align:center">把看小</td>
<td style="text-align:center">be·little</td>
</tr>
<tr>
<td style="text-align:center">despise</td>
<td style="text-align:center">v. 鄙视</td>
<td style="text-align:center"><code>spis/spect - look</code><br />不愿意看一眼</td>
<td style="text-align:center">de·spise</td>
</tr>
<tr>
<td style="text-align:center">scorn</td>
<td style="text-align:center">n./v. 鄙视</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">contempt</td>
<td style="text-align:center">n. 鄙视</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">espy</td>
<td style="text-align:center">v. 看到</td>
<td style="text-align:center"><code>spect - to see</code></td>
<td style="text-align:center">e·spy</td>
</tr>
<tr>
<td style="text-align:center">circumspect</td>
<td style="text-align:center">adj. 谨慎的</td>
<td style="text-align:center"><code>circum - circle</code><br />来回看，谨慎</td>
<td style="text-align:center">circum·spect</td>
</tr>
<tr>
<td style="text-align:center">introspect</td>
<td style="text-align:center">v. 内省</td>
<td style="text-align:center"><code>intro - 向里</code><br />向里看自己</td>
<td style="text-align:center">intro·spect</td>
</tr>
<tr>
<td style="text-align:center">retrospect</td>
<td style="text-align:center">v./n. 回顾</td>
<td style="text-align:center"><code>retro - back</code><br />向后往回看</td>
<td style="text-align:center">retro·spect</td>
</tr>
<tr>
<td style="text-align:center">speculate</td>
<td style="text-align:center">v. 推测；投机</td>
<td style="text-align:center">看准了投机</td>
<td style="text-align:center">spec·ul·ate</td>
</tr>
<tr>
<td style="text-align:center">perceive</td>
<td style="text-align:center">v. 察觉出</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">glossy</td>
<td style="text-align:center">adj. 平滑的；有光泽的</td>
<td style="text-align:center"><code>gl - light(glow)</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sleek</td>
<td style="text-align:center">adj. 光滑的；圆滑的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sheeny</td>
<td style="text-align:center">adj. 有光泽的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">janitor</td>
<td style="text-align:center">n. 看门人</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">doorman</td>
<td style="text-align:center">n. 看门人</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">rivulet</td>
<td style="text-align:center">n. 小溪</td>
<td style="text-align:center"><code>et - 小</code><br />rival - rivul (a → u)</td>
<td style="text-align:center">rivul·et</td>
</tr>
<tr>
<td style="text-align:center">amulet</td>
<td style="text-align:center">n. 护身符</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">omelet</td>
<td style="text-align:center">n. 鸡蛋饼</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">parcel</td>
<td style="text-align:center">n. 包裹</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">pulpit</td>
<td style="text-align:center">n. 布道台</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">lectern</td>
<td style="text-align:center">n. 讲台</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">dais</td>
<td style="text-align:center">n. 讲台</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">scorch</td>
<td style="text-align:center">v. 烤焦；使枯萎</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">scorching</td>
<td style="text-align:center">adj. 灼热的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">singe</td>
<td style="text-align:center">v. 烧焦</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">parch</td>
<td style="text-align:center">v. 使干枯</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sear</td>
<td style="text-align:center">v. 烤焦；枯萎</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sere</td>
<td style="text-align:center">adj. 干枯的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">surge</td>
<td style="text-align:center">v. (波涛)起伏；汹涌；激增 n. 波涛</td>
<td style="text-align:center"><code>surge - rise</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">insurgent</td>
<td style="text-align:center">n. 暴动者；adj. 造反的</td>
<td style="text-align:center"><code>in - to</code><br />人民站起来反抗</td>
<td style="text-align:center">in·surgent</td>
</tr>
<tr>
<td style="text-align:center">resurgent</td>
<td style="text-align:center">adj. 复活的</td>
<td style="text-align:center"><code>re - again</code><br />再一次站起来</td>
<td style="text-align:center">re·surgent</td>
</tr>
<tr>
<td style="text-align:center">upsurge</td>
<td style="text-align:center">n. 剧增；高涨</td>
<td style="text-align:center">向上涨起来</td>
<td style="text-align:center">up·surge</td>
</tr>
<tr>
<td style="text-align:center">mushroom</td>
<td style="text-align:center">v. 激增</td>
<td style="text-align:center">蘑菇长得很快</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">rocket</td>
<td style="text-align:center">v. 激增</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">utensil</td>
<td style="text-align:center">n. 器皿；用具</td>
<td style="text-align:center"><code>us/ut - use</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">utilize</td>
<td style="text-align:center">v. 利用</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">utilitarian</td>
<td style="text-align:center">adj. 实用的，有用的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">implement</td>
<td style="text-align:center">n. (不插电的)工具</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">appliance</td>
<td style="text-align:center">n. 家用电器</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">apparatus</td>
<td style="text-align:center">n. 仪器</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">kit</td>
<td style="text-align:center">n. 成套的工具</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">outfit</td>
<td style="text-align:center">n. 全套设备</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">detain</td>
<td style="text-align:center">v. 扣留；使延迟</td>
<td style="text-align:center"><code>tain - to keep</code><br />留下来，扣留</td>
<td style="text-align:center">de·tain</td>
</tr>
<tr>
<td style="text-align:center">abstain</td>
<td style="text-align:center">v. 禁绝；放弃</td>
<td style="text-align:center"><code>abs - away</code><br />远离保留，不保留，放弃</td>
<td style="text-align:center">abs·tain</td>
</tr>
<tr>
<td style="text-align:center">pertain</td>
<td style="text-align:center">v. 关于；属于</td>
<td style="text-align:center"><code>per - through</code><br />一直留住，属于</td>
<td style="text-align:center">per·tain</td>
</tr>
<tr>
<td style="text-align:center">pertinent</td>
<td style="text-align:center">adj. 相关的</td>
<td style="text-align:center"><code>ent - 形容词后缀</code></td>
<td style="text-align:center">pertin·ent</td>
</tr>
<tr>
<td style="text-align:center">contain</td>
<td style="text-align:center">v. 控制；抑制</td>
<td style="text-align:center">一起留住</td>
<td style="text-align:center">con·tain</td>
</tr>
<tr>
<td style="text-align:center">confine</td>
<td style="text-align:center">v. 限制；监禁</td>
<td style="text-align:center"><code>con - to</code><br /><code>fin - 界限</code></td>
<td style="text-align:center">con·fine</td>
</tr>
<tr>
<td style="text-align:center">retard</td>
<td style="text-align:center">v. 延迟</td>
<td style="text-align:center"><code>tard - 慢</code></td>
<td style="text-align:center">re·tard</td>
</tr>
<tr>
<td style="text-align:center">compassion</td>
<td style="text-align:center">n. 同情；怜悯</td>
<td style="text-align:center"><code>pass/path - feeling</code><br />一起感觉同情<br />compassion leave 事假</td>
<td style="text-align:center">com·pass·ion</td>
</tr>
<tr>
<td style="text-align:center">impassive</td>
<td style="text-align:center">adj. 冷漠的</td>
<td style="text-align:center">没有感情的</td>
<td style="text-align:center">im·pass·ive</td>
</tr>
<tr>
<td style="text-align:center">antipathy</td>
<td style="text-align:center">n. 反感</td>
<td style="text-align:center"><code>anti - against</code></td>
<td style="text-align:center">anti·path·y</td>
</tr>
<tr>
<td style="text-align:center">pathetic</td>
<td style="text-align:center">adj. 可怜的；悲哀的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">clemency</td>
<td style="text-align:center">n. 宽厚，温和</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">clement</td>
<td style="text-align:center">adj. 温和的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">faction</td>
<td style="text-align:center">n. 小党派</td>
<td style="text-align:center"><code>fact - to make/do</code><br />为做事而造的团体</td>
<td style="text-align:center">fact·ion</td>
</tr>
<tr>
<td style="text-align:center">factious</td>
<td style="text-align:center">adj. 搞派系的</td>
<td style="text-align:center"></td>
<td style="text-align:center">fact·ious</td>
</tr>
<tr>
<td style="text-align:center">fictitious</td>
<td style="text-align:center">adj. 虚构的；编造的</td>
<td style="text-align:center">来自fiction<br />a → i</td>
<td style="text-align:center">fict·itious</td>
</tr>
<tr>
<td style="text-align:center">affectation</td>
<td style="text-align:center">n. 假装；装腔作势</td>
<td style="text-align:center">做作，强调做<br />注意与affection区分</td>
<td style="text-align:center">af·fect·ation</td>
</tr>
<tr>
<td style="text-align:center">affect</td>
<td style="text-align:center">v. 影响；感染(疾病)；假装；炫耀</td>
<td style="text-align:center"></td>
<td style="text-align:center">af·fect</td>
</tr>
<tr>
<td style="text-align:center">facile</td>
<td style="text-align:center">adj. 容易做的；灵巧的</td>
<td style="text-align:center">t脱落</td>
<td style="text-align:center">fac·ile</td>
</tr>
<tr>
<td style="text-align:center">clique</td>
<td style="text-align:center">n. 派系，小圈子</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">luster</td>
<td style="text-align:center">n. 光彩；光荣</td>
<td style="text-align:center"><code>lust/luc - light</code><br />脸上有光的人</td>
<td style="text-align:center">lust·er</td>
</tr>
<tr>
<td style="text-align:center">lustrous</td>
<td style="text-align:center">adj. 光亮的，有光泽的</td>
<td style="text-align:center"></td>
<td style="text-align:center">lust·rous</td>
</tr>
<tr>
<td style="text-align:center">shimmer</td>
<td style="text-align:center">n. 闪光；微光</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">glory</td>
<td style="text-align:center">n. 光荣</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">splendor</td>
<td style="text-align:center">n. 光辉，光彩</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">persevere</td>
<td style="text-align:center">v. 坚持不懈</td>
<td style="text-align:center"><code>per - through</code><br />严厉(severe)贯穿始终，坚持不懈</td>
<td style="text-align:center">per·severe</td>
</tr>
<tr>
<td style="text-align:center">perseverance</td>
<td style="text-align:center">n. 坚持不懈</td>
<td style="text-align:center"></td>
<td style="text-align:center">persever·ance</td>
</tr>
<tr>
<td style="text-align:center">persist</td>
<td style="text-align:center">v. 坚持</td>
<td style="text-align:center">persist in</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">tint</td>
<td style="text-align:center">n. 色彩</td>
<td style="text-align:center">a tint of …  一抹…</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">rave</td>
<td style="text-align:center">v. 胡言乱语；狂热赞扬；咆哮</td>
<td style="text-align:center">rave about</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ravish</td>
<td style="text-align:center">v. 使着迷</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">effervesce</td>
<td style="text-align:center">v. 兴奋；冒泡</td>
<td style="text-align:center"><code>ef - ex - out</code><br /><code>ferv - boil(fever)</code><br /><code>esce - 动词后缀</code></td>
<td style="text-align:center">ef·ferv·esce</td>
</tr>
<tr>
<td style="text-align:center">fervid</td>
<td style="text-align:center">adj. 热心的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">fervent</td>
<td style="text-align:center">adj. 热心的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">perfervid</td>
<td style="text-align:center">adj. 非常热心的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">massacre</td>
<td style="text-align:center">n. 屠杀</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">strangle</td>
<td style="text-align:center">v. 勒死</td>
<td style="text-align:center">string，用绳子勒死</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">smother</td>
<td style="text-align:center">v. 使窒息</td>
<td style="text-align:center">smoke，烟使人窒息</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">tablet</td>
<td style="text-align:center">n. 药片</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">capsule</td>
<td style="text-align:center">n. 胶囊</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">voluptuous</td>
<td style="text-align:center">adj. 肉感的；色情的</td>
<td style="text-align:center"><code>vol - will(voluntary)</code><br />主动送去意愿的</td>
<td style="text-align:center">vol·up·tuous</td>
</tr>
<tr>
<td style="text-align:center">volition</td>
<td style="text-align:center">n. 意志力</td>
<td style="text-align:center"></td>
<td style="text-align:center">vol·i·tion</td>
</tr>
<tr>
<td style="text-align:center">benevolence</td>
<td style="text-align:center">n. 慈善；博爱</td>
<td style="text-align:center">bene = benefit<br />愿意让他人受益</td>
<td style="text-align:center">bene·vol·ence</td>
</tr>
<tr>
<td style="text-align:center">carnal</td>
<td style="text-align:center">adj. 肉欲的；色情的</td>
<td style="text-align:center"><code>carn - 肉</code></td>
<td style="text-align:center">carn·al</td>
</tr>
<tr>
<td style="text-align:center">sensuous</td>
<td style="text-align:center">adj. 性感的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">bayonet</td>
<td style="text-align:center">n. 刺刀</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">dirk</td>
<td style="text-align:center">n. 短剑</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>英语</category>
        <category>曲根万词班</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>单词</tag>
      </tags>
  </entry>
  <entry>
    <title>day 05</title>
    <url>/2019/11/20/day-05/</url>
    <content><![CDATA[<style>
table th:first-of-type {
    width: 150px;
}
</style>


<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">单词</th>
<th style="text-align:center">释义</th>
<th style="text-align:center">备注</th>
<th style="text-align:center">分解</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">access</td>
<td style="text-align:center">n. 进入</td>
<td style="text-align:center"><code>cess/ced - to go</code><br />走过去，进去</td>
<td style="text-align:center">ac·cess</td>
</tr>
<tr>
<td style="text-align:center">recession</td>
<td style="text-align:center">n. 经济衰退；后退</td>
<td style="text-align:center">经济向后走，经济衰退<br />人向后走，后退</td>
<td style="text-align:center">re·cession</td>
</tr>
<tr>
<td style="text-align:center">secede</td>
<td style="text-align:center">v. 脱离，退出</td>
<td style="text-align:center"><code>se - apart(separate)</code><br />走开，退出</td>
<td style="text-align:center">se·cede</td>
</tr>
<tr>
<td style="text-align:center">accede</td>
<td style="text-align:center">v. 同意，加入</td>
<td style="text-align:center">走过去，加入</td>
<td style="text-align:center">ac·cede</td>
</tr>
<tr>
<td style="text-align:center">recede</td>
<td style="text-align:center">v. 后退，倒退</td>
<td style="text-align:center">向后走，后退</td>
<td style="text-align:center">re·cede</td>
</tr>
<tr>
<td style="text-align:center">antecede</td>
<td style="text-align:center">v. 胜过，超过</td>
<td style="text-align:center"><code>ante - 前</code><br />走在前面，超过</td>
<td style="text-align:center">ante·cede</td>
</tr>
<tr>
<td style="text-align:center">cede</td>
<td style="text-align:center">v. 放弃，割让领土</td>
<td style="text-align:center">领土走掉了</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">accession</td>
<td style="text-align:center">n. 就职</td>
<td style="text-align:center">走上任职台<br />accession to the throne 登基</td>
<td style="text-align:center">ac·cess·ion</td>
</tr>
<tr>
<td style="text-align:center">approach</td>
<td style="text-align:center">v. 接近</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">concur</td>
<td style="text-align:center">v. 同时发生；同意</td>
<td style="text-align:center"><code>cut - run</code><br />一起发生，同时发生<br />发生到一起，同意</td>
<td style="text-align:center">con·cur</td>
</tr>
<tr>
<td style="text-align:center">recur</td>
<td style="text-align:center">v. 再次发生</td>
<td style="text-align:center"></td>
<td style="text-align:center">re·cur</td>
</tr>
<tr>
<td style="text-align:center">incur</td>
<td style="text-align:center">v. 引起，导致</td>
<td style="text-align:center"><code>in - to</code><br />发生了，引起</td>
<td style="text-align:center">in·cur</td>
</tr>
<tr>
<td style="text-align:center">fuel</td>
<td style="text-align:center">v. 引起</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">trigger</td>
<td style="text-align:center">v. 引起</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">subscribe</td>
<td style="text-align:center">v. 赞成；订购</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">denounce</td>
<td style="text-align:center">v. 当众指责</td>
<td style="text-align:center"><code>de - negative</code><br /><code>nounce - to claim(annouce)</code><br />说不好的话</td>
<td style="text-align:center">de·nounce</td>
</tr>
<tr>
<td style="text-align:center">renounce</td>
<td style="text-align:center">v. 放弃(权利，信仰)</td>
<td style="text-align:center">收回claim，放弃</td>
<td style="text-align:center">re·nounce</td>
</tr>
<tr>
<td style="text-align:center">enunciate</td>
<td style="text-align:center">v. 阐明</td>
<td style="text-align:center">o脱落<br /><code>e - out</code><br />说出来</td>
<td style="text-align:center">e·nunc·iate</td>
</tr>
<tr>
<td style="text-align:center">pronounced</td>
<td style="text-align:center">adj. 显著的</td>
<td style="text-align:center">声音叫得大</td>
<td style="text-align:center">pro·nounce·d</td>
</tr>
<tr>
<td style="text-align:center">reproach</td>
<td style="text-align:center">v. 谴责</td>
<td style="text-align:center"><code>proach - near(approach)</code><br />不靠近</td>
<td style="text-align:center">re·proach</td>
</tr>
<tr>
<td style="text-align:center">decry</td>
<td style="text-align:center">v. 谴责</td>
<td style="text-align:center">让哭喊</td>
<td style="text-align:center">de·cry</td>
</tr>
<tr>
<td style="text-align:center">deprecate</td>
<td style="text-align:center">v. 反对</td>
<td style="text-align:center"><code>prec - pray</code><br />祈求恶魔离开，泛化成反对</td>
<td style="text-align:center">de·prec·ate</td>
</tr>
<tr>
<td style="text-align:center">depreciate</td>
<td style="text-align:center">v. 贬值；贬低</td>
<td style="text-align:center"><code>preci - price</code><br />价值降低</td>
<td style="text-align:center">de·preci·ate</td>
</tr>
<tr>
<td style="text-align:center">malady</td>
<td style="text-align:center">n. 疾病</td>
<td style="text-align:center"><code>mal - evil</code></td>
<td style="text-align:center">mal·ady</td>
</tr>
<tr>
<td style="text-align:center">malnutrition</td>
<td style="text-align:center">n. 营养失调</td>
<td style="text-align:center">坏营养</td>
<td style="text-align:center">mal·nutrition</td>
</tr>
<tr>
<td style="text-align:center">malfunction</td>
<td style="text-align:center">n. 失灵</td>
<td style="text-align:center">坏功能</td>
<td style="text-align:center">mal·function</td>
</tr>
<tr>
<td style="text-align:center">malevolence</td>
<td style="text-align:center">n. 恶意，恶毒</td>
<td style="text-align:center">恶毒的意志</td>
<td style="text-align:center">mal·e·vol·ence</td>
</tr>
<tr>
<td style="text-align:center">malign</td>
<td style="text-align:center">v. 诽谤；恶意中伤</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">malignant</td>
<td style="text-align:center">adj. 恶性的</td>
<td style="text-align:center">来自malign</td>
<td style="text-align:center">malign·ant</td>
</tr>
<tr>
<td style="text-align:center">malice</td>
<td style="text-align:center">n. 恶意</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">malicious</td>
<td style="text-align:center">adj. 恶毒的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">malaise</td>
<td style="text-align:center">n. 不舒服</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ailment</td>
<td style="text-align:center">n. 小病</td>
<td style="text-align:center">illment</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">aliment</td>
<td style="text-align:center">n. 营养</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">alimentary</td>
<td style="text-align:center">adj. 营养的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">indisposition</td>
<td style="text-align:center">n. 小病</td>
<td style="text-align:center"><code>in -  not</code><br />不在位置(状态)上，小病</td>
<td style="text-align:center">in·dis·position</td>
</tr>
<tr>
<td style="text-align:center">pestilence</td>
<td style="text-align:center">n. 瘟疫</td>
<td style="text-align:center">害虫传播瘟疫</td>
<td style="text-align:center">pest·ilence</td>
</tr>
<tr>
<td style="text-align:center">plague</td>
<td style="text-align:center">n. 瘟疫</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">curb</td>
<td style="text-align:center">v. 阻碍</td>
<td style="text-align:center">刻薄</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">inhibit</td>
<td style="text-align:center">v. 阻碍</td>
<td style="text-align:center"><code>hibit - hold</code><br />拉进来</td>
<td style="text-align:center">in·hibit</td>
</tr>
<tr>
<td style="text-align:center">prohibit</td>
<td style="text-align:center">v. 阻止</td>
<td style="text-align:center">提前拉住</td>
<td style="text-align:center">pro·hibit</td>
</tr>
<tr>
<td style="text-align:center">exhibit</td>
<td style="text-align:center">n./v. 展览</td>
<td style="text-align:center">拿出去</td>
<td style="text-align:center">ex·hibit</td>
</tr>
<tr>
<td style="text-align:center">adhibit</td>
<td style="text-align:center">v. 粘，贴</td>
<td style="text-align:center">拿上去</td>
<td style="text-align:center">ad·hibit</td>
</tr>
<tr>
<td style="text-align:center">thwart</td>
<td style="text-align:center">v. 阻碍；挫败</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">fray</td>
<td style="text-align:center">n. 争吵；斗争<br />v. 磨破</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">squabble</td>
<td style="text-align:center">v./n. 争吵，口角</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">wrangle</td>
<td style="text-align:center">v. 争吵</td>
<td style="text-align:center"><code>wr - twist</code><br />扭曲角度</td>
<td style="text-align:center">wr·angle</td>
</tr>
<tr>
<td style="text-align:center">affray</td>
<td style="text-align:center">n. 斗殴</td>
<td style="text-align:center">来自fray</td>
<td style="text-align:center">af·fray</td>
</tr>
<tr>
<td style="text-align:center">remnant</td>
<td style="text-align:center">n. 残余物</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">residue</td>
<td style="text-align:center">n. 残余物</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">leftover</td>
<td style="text-align:center">n. 残余物</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">debris</td>
<td style="text-align:center">n. 残骸</td>
<td style="text-align:center">break(ea → i)</td>
<td style="text-align:center">de·bris</td>
</tr>
<tr>
<td style="text-align:center">snore</td>
<td style="text-align:center">v. 打鼾</td>
<td style="text-align:center"><code>sno - nose</code><br />用鼻子打鼾</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sneeze</td>
<td style="text-align:center">v. 打喷嚏</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sniff</td>
<td style="text-align:center">v. 闻；用力吸</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sneer</td>
<td style="text-align:center">v. 冷笑；讥笑</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">snoop</td>
<td style="text-align:center">vi. 探查</td>
<td style="text-align:center">Snoopy<br />像狗一样用鼻子嗅出线索</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">wheeze</td>
<td style="text-align:center">v. 喘气</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">tinge</td>
<td style="text-align:center">v. 微染</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">tincture</td>
<td style="text-align:center">n./v. (药、物理)染色</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">stain</td>
<td style="text-align:center">v. 污染；着色<br />n. 污点</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">stainless</td>
<td style="text-align:center">adj. 不锈的；无暇的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">beckon</td>
<td style="text-align:center">v. 招手示意</td>
<td style="text-align:center">刚铎点亮beacon烽火像洛汗求援</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">plod</td>
<td style="text-align:center">v. 重步走；辛苦工作</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">trudge</td>
<td style="text-align:center">v. 重步走</td>
<td style="text-align:center">tread 行走</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">stagger</td>
<td style="text-align:center">v. 蹒跚</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">staggering</td>
<td style="text-align:center">adj. (坏事)令人震惊的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">stumble</td>
<td style="text-align:center">v. 蹒跚；踉跄</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">bicker</td>
<td style="text-align:center">v. 争吵</td>
<td style="text-align:center">bicker with sb. about sth. <br />为了琐事争吵</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">spat</td>
<td style="text-align:center">n. 口角</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">tiff</td>
<td style="text-align:center">n./v. 小争吵</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">row</td>
<td style="text-align:center">v. (熟人间短时)争吵</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">mortify</td>
<td style="text-align:center">v. 使蒙羞</td>
<td style="text-align:center"><code>mort/mori - death(mortal)</code><br />受到羞辱不想活了</td>
<td style="text-align:center">mort·ify</td>
</tr>
<tr>
<td style="text-align:center">mortality</td>
<td style="text-align:center">n. 死亡率</td>
<td style="text-align:center">死亡的数量</td>
<td style="text-align:center">mort·ality</td>
</tr>
<tr>
<td style="text-align:center">morbid</td>
<td style="text-align:center">adj. 病态的</td>
<td style="text-align:center">t → b<br />快死的</td>
<td style="text-align:center">morb·id</td>
</tr>
<tr>
<td style="text-align:center">moribund</td>
<td style="text-align:center">adj. 垂死的</td>
<td style="text-align:center"><code>und - 形容词后缀</code><br />mori bound在死亡的边界上</td>
<td style="text-align:center">mori·b·und</td>
</tr>
<tr>
<td style="text-align:center">postmortem</td>
<td style="text-align:center">n. 验尸</td>
<td style="text-align:center"><code>post - behind</code><br />死后验尸</td>
<td style="text-align:center">post·mort·em</td>
</tr>
<tr>
<td style="text-align:center">autopsy</td>
<td style="text-align:center">n. 验尸</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">mortuary</td>
<td style="text-align:center">n. 太平间</td>
<td style="text-align:center"><code>ary - 人或地点</code><br />死的地方</td>
<td style="text-align:center">mort·uary</td>
</tr>
<tr>
<td style="text-align:center">abash</td>
<td style="text-align:center">v. 使羞愧</td>
<td style="text-align:center"><code>bash - 窘迫</code></td>
<td style="text-align:center">a·bash</td>
</tr>
<tr>
<td style="text-align:center">bashful</td>
<td style="text-align:center">adj. 害羞的</td>
<td style="text-align:center"></td>
<td style="text-align:center">bash·ful</td>
</tr>
<tr>
<td style="text-align:center">bash</td>
<td style="text-align:center">v. 猛击；严厉批评<br />n. 猛击</td>
<td style="text-align:center">beat<br />ea → a，t → sh</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">predominant</td>
<td style="text-align:center">adj. 主要的；显著的</td>
<td style="text-align:center">提前占领</td>
<td style="text-align:center">pre·domin·ant</td>
</tr>
<tr>
<td style="text-align:center">dormineering</td>
<td style="text-align:center">adj. 专横的</td>
<td style="text-align:center"><code>dom - to rule</code><br />rule others</td>
<td style="text-align:center">dom·ineer·ing</td>
</tr>
<tr>
<td style="text-align:center">indomitable</td>
<td style="text-align:center">adj. 不可征服的</td>
<td style="text-align:center">无法统治的</td>
<td style="text-align:center">in·dom·it·able</td>
</tr>
<tr>
<td style="text-align:center">domestic</td>
<td style="text-align:center">adj. 家庭的</td>
<td style="text-align:center"><code>dom - home</code></td>
<td style="text-align:center">dom·estic</td>
</tr>
<tr>
<td style="text-align:center">domesticate</td>
<td style="text-align:center">v. 驯服</td>
<td style="text-align:center">家养前要先驯服</td>
<td style="text-align:center">dom·estic·ate</td>
</tr>
<tr>
<td style="text-align:center">domain</td>
<td style="text-align:center">n. 领域</td>
<td style="text-align:center">和家一样的地方</td>
<td style="text-align:center">dom·ain</td>
</tr>
<tr>
<td style="text-align:center">domicile</td>
<td style="text-align:center">n. 住所，家</td>
<td style="text-align:center"></td>
<td style="text-align:center">dom·icile</td>
</tr>
<tr>
<td style="text-align:center">salient</td>
<td style="text-align:center">adj. 显著的</td>
<td style="text-align:center">excellent</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">conspicuous</td>
<td style="text-align:center">adj. 显著的</td>
<td style="text-align:center"><code>spic - spect - see</code><br />大家一起看向一个地方，显著</td>
<td style="text-align:center">con·spic·uous</td>
</tr>
<tr>
<td style="text-align:center">sanitary</td>
<td style="text-align:center">adj. 公共卫生的</td>
<td style="text-align:center"><code>san/sanit - healthy(insane)</code><br />sanitary bag 卫生袋<br />sanitary and medical services卫生医疗</td>
<td style="text-align:center">sanit·ary</td>
</tr>
<tr>
<td style="text-align:center">sane</td>
<td style="text-align:center">adj. 神志清楚的</td>
<td style="text-align:center">神志健康，insane的母词</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sanitation</td>
<td style="text-align:center">n. 卫生(设备)</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sanitarium</td>
<td style="text-align:center">n. 疗养院</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">hygienic</td>
<td style="text-align:center">adj. 卫生的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">hygiene</td>
<td style="text-align:center">n. 卫生</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">warrant</td>
<td style="text-align:center">n. 正当理由；权利<br />v. 保证</td>
<td style="text-align:center">worried<br />o → a + ant<br />arrest/search warrant 逮捕/搜查令</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">warranty</td>
<td style="text-align:center">n. 保证；保修单</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">contrive</td>
<td style="text-align:center">v. 发明；谋划</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">contrivance</td>
<td style="text-align:center">n. 发明物；计谋</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">hatch</td>
<td style="text-align:center">v. 密谋</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">scheme</td>
<td style="text-align:center">n./v. 谋划</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">conspire</td>
<td style="text-align:center">v. 密谋，勾结</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">dazzle</td>
<td style="text-align:center">v. 以强光使目眩</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">dazzling</td>
<td style="text-align:center">adj. 耀眼的；眼花缭乱的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">dizzy</td>
<td style="text-align:center">adj. 眩晕的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">daze</td>
<td style="text-align:center">v. 使眼花缭乱；使茫然</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">impair</td>
<td style="text-align:center">v. 损害</td>
<td style="text-align:center">repair<br />不修理反而损坏</td>
<td style="text-align:center">im·pair</td>
</tr>
<tr>
<td style="text-align:center">vandalism</td>
<td style="text-align:center">n. 破坏(公物)</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">dent</td>
<td style="text-align:center">v. 削弱，减少</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">grope</td>
<td style="text-align:center">v. 摸索</td>
<td style="text-align:center">grab 抓住摸索</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">allocate</td>
<td style="text-align:center">v. 分配</td>
<td style="text-align:center"><code>loc - to put(locate)</code><br /><code>al - to</code><br />去发放</td>
<td style="text-align:center">al·loc·ate</td>
</tr>
<tr>
<td style="text-align:center">dislocate</td>
<td style="text-align:center">v. 使脱臼；扰乱</td>
<td style="text-align:center"><code>dis - apart</code><br />分开放置</td>
<td style="text-align:center">dis·loc·ate</td>
</tr>
<tr>
<td style="text-align:center">relocate</td>
<td style="text-align:center">v. 重新定位</td>
<td style="text-align:center"></td>
<td style="text-align:center">re·loc·ate</td>
</tr>
<tr>
<td style="text-align:center">allot</td>
<td style="text-align:center">v. 分发</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">apportion</td>
<td style="text-align:center">v. 分配</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">dispense</td>
<td style="text-align:center">v. 分配</td>
<td style="text-align:center"><code>pens - expand</code><br />把花费分开花</td>
<td style="text-align:center">dis·pense</td>
</tr>
<tr>
<td style="text-align:center">expense</td>
<td style="text-align:center">n. 费用</td>
<td style="text-align:center">把花费花出去</td>
<td style="text-align:center">ex·pense</td>
</tr>
<tr>
<td style="text-align:center">satiate</td>
<td style="text-align:center">v. 使厌腻，使满足</td>
<td style="text-align:center"><code>sat - full(satisfy)</code></td>
<td style="text-align:center">sat·iate</td>
</tr>
<tr>
<td style="text-align:center">sate</td>
<td style="text-align:center">v. 使厌腻</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">saturate</td>
<td style="text-align:center">v. 使饱和</td>
<td style="text-align:center"></td>
<td style="text-align:center">sat·urate</td>
</tr>
<tr>
<td style="text-align:center">satire</td>
<td style="text-align:center">n. 讽刺</td>
<td style="text-align:center">吃饱了该干活了，却累了</td>
<td style="text-align:center">sat·(t)ire</td>
</tr>
<tr>
<td style="text-align:center">surfeit</td>
<td style="text-align:center">n. 过度<br />v. 过度饮食</td>
<td style="text-align:center"><code>sur - on/more</code><br /><code>feit - fact - make</code></td>
<td style="text-align:center">sur·feit</td>
</tr>
<tr>
<td style="text-align:center">immerse</td>
<td style="text-align:center">v. 浸入；沉浸于</td>
<td style="text-align:center"><code>im - into</code><br /><code>merge - sink(emerge)</code></td>
<td style="text-align:center">im·merse</td>
</tr>
<tr>
<td style="text-align:center">submerge</td>
<td style="text-align:center">v. 淹没</td>
<td style="text-align:center">沉在下面</td>
<td style="text-align:center">sub·merge</td>
</tr>
<tr>
<td style="text-align:center">plunge</td>
<td style="text-align:center">v. 投入</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">dip</td>
<td style="text-align:center">v. 蘸，浸</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ostentatious</td>
<td style="text-align:center">adj. 夸张的，炫耀的</td>
<td style="text-align:center"><code>os - ex</code><br /><code>tent - 张开</code><br />向外张开，张扬的</td>
<td style="text-align:center">os·tent·atious</td>
</tr>
<tr>
<td style="text-align:center">ostensible</td>
<td style="text-align:center">adj. 表面的；假装的</td>
<td style="text-align:center">炫耀都是假装自己很厉害</td>
<td style="text-align:center">os·tens·ible</td>
</tr>
<tr>
<td style="text-align:center">showy</td>
<td style="text-align:center">adj. 炫耀的</td>
<td style="text-align:center">show</td>
<td style="text-align:center">show·y</td>
</tr>
<tr>
<td style="text-align:center">pretentious</td>
<td style="text-align:center">adj. 自命不凡的；炫耀的</td>
<td style="text-align:center">pretend<br />同上</td>
<td style="text-align:center">pretent·ious</td>
</tr>
<tr>
<td style="text-align:center">flamboyant</td>
<td style="text-align:center">adj. (衣着)浮夸的</td>
<td style="text-align:center">穿得像火一样的男孩</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">pompous</td>
<td style="text-align:center">adj. 爱炫耀的；浮夸的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gaudy</td>
<td style="text-align:center">adj. 俗艳的</td>
<td style="text-align:center">G - 贵<br />audy - audi 奥迪</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">presentiment</td>
<td style="text-align:center">n. 预感</td>
<td style="text-align:center"><code>sent - sense</code><br />提前感觉到，预感</td>
<td style="text-align:center">pre·sentiment</td>
</tr>
<tr>
<td style="text-align:center">assent</td>
<td style="text-align:center">v. 同意</td>
<td style="text-align:center">相同的感觉，同意</td>
<td style="text-align:center">as·sent</td>
</tr>
<tr>
<td style="text-align:center">consent</td>
<td style="text-align:center">n./v. 同意</td>
<td style="text-align:center">同上</td>
<td style="text-align:center">con·sent</td>
</tr>
<tr>
<td style="text-align:center">dissent</td>
<td style="text-align:center">v. 不同意</td>
<td style="text-align:center">不同的感觉</td>
<td style="text-align:center">dis·sent</td>
</tr>
<tr>
<td style="text-align:center">nonsense</td>
<td style="text-align:center">n. 无意义，胡说八道</td>
<td style="text-align:center">没有感觉</td>
<td style="text-align:center">non·sense</td>
</tr>
<tr>
<td style="text-align:center">foreboding</td>
<td style="text-align:center">n. (对不好的事物)预感</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">premonition</td>
<td style="text-align:center">n. 预感</td>
<td style="text-align:center"><code>monit - warn</code><br />提前警告</td>
<td style="text-align:center">pre·monit·ion</td>
</tr>
<tr>
<td style="text-align:center">omen</td>
<td style="text-align:center">n. 凶兆</td>
<td style="text-align:center">Amen 遇见凶兆求上帝保佑</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">intuition</td>
<td style="text-align:center">n. 直觉</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">cynical</td>
<td style="text-align:center">adj. 怀疑人生价值的；讽刺的；犬儒主义的</td>
<td style="text-align:center"><code>cyn - dog</code></td>
<td style="text-align:center">cyn·ical</td>
</tr>
<tr>
<td style="text-align:center">cynic</td>
<td style="text-align:center">n. 犬儒主义者；愤世嫉俗者</td>
<td style="text-align:center"></td>
<td style="text-align:center">cyn·ic</td>
</tr>
<tr>
<td style="text-align:center">cynicism</td>
<td style="text-align:center">n. 犬儒主义</td>
<td style="text-align:center"></td>
<td style="text-align:center">cyn·icism</td>
</tr>
<tr>
<td style="text-align:center">sardonic</td>
<td style="text-align:center">adj. 讽刺的；嘲笑的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sarcastic</td>
<td style="text-align:center">adj. 讽刺的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ironic</td>
<td style="text-align:center">adj. 讽刺的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">brawl</td>
<td style="text-align:center">n. 吵架；打架</td>
<td style="text-align:center"><code>br - 分歧(break)</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">breach</td>
<td style="text-align:center">n./v. 违反</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">brooch</td>
<td style="text-align:center">n. 胸针</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">breech</td>
<td style="text-align:center">n. 臀部</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">brittle</td>
<td style="text-align:center">adj. 易碎的</td>
<td style="text-align:center">break little</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">embellish</td>
<td style="text-align:center">v. 装饰</td>
<td style="text-align:center">用铃铛装饰</td>
<td style="text-align:center">em·bell·ish</td>
</tr>
<tr>
<td style="text-align:center">adorn</td>
<td style="text-align:center">v. 装饰</td>
<td style="text-align:center"><code>orn - 装饰</code></td>
<td style="text-align:center">ad·orn</td>
</tr>
<tr>
<td style="text-align:center">ornament</td>
<td style="text-align:center">n. 装饰物</td>
<td style="text-align:center"></td>
<td style="text-align:center">orn·a·ment</td>
</tr>
<tr>
<td style="text-align:center">garnish</td>
<td style="text-align:center">v. 装饰菜肴</td>
<td style="text-align:center">用garlic(大蒜)装饰菜肴</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">emblazon</td>
<td style="text-align:center">v. (文字或图案的)装饰</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>英语</category>
        <category>曲根万词班</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>单词</tag>
      </tags>
  </entry>
  <entry>
    <title>day 06</title>
    <url>/2019/11/21/day-06/</url>
    <content><![CDATA[<style>
table th:first-of-type {
    width: 150px;
}
</style>


<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">单词</th>
<th style="text-align:center">释义</th>
<th style="text-align:center">备注</th>
<th style="text-align:center">分解</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">gallant</td>
<td style="text-align:center">adj.  英勇的</td>
<td style="text-align:center">gall(胆汁)</td>
<td style="text-align:center">gall·ant</td>
</tr>
<tr>
<td style="text-align:center">intrepid</td>
<td style="text-align:center">adj. 勇敢的</td>
<td style="text-align:center"><code>trepid - tremble</code><br />不颤抖，勇敢</td>
<td style="text-align:center">in·trepid</td>
</tr>
<tr>
<td style="text-align:center">valiant</td>
<td style="text-align:center">adj. 英勇的</td>
<td style="text-align:center"><code>val - value/strong</code></td>
<td style="text-align:center">val·iant</td>
</tr>
<tr>
<td style="text-align:center">plucky</td>
<td style="text-align:center">adj. 勇敢的</td>
<td style="text-align:center">勇敢的人运气不会差<br />大力出奇迹</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">dauntless</td>
<td style="text-align:center">adj. 无畏的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">undulate</td>
<td style="text-align:center">v. 波动；起伏</td>
<td style="text-align:center"><code>und - to wave/overflow</code></td>
<td style="text-align:center">und·ul·ate</td>
</tr>
<tr>
<td style="text-align:center">abundant</td>
<td style="text-align:center">adj. 丰富的</td>
<td style="text-align:center">溢出来的</td>
<td style="text-align:center">ab·und·ant</td>
</tr>
<tr>
<td style="text-align:center">inundate</td>
<td style="text-align:center">v. 淹没</td>
<td style="text-align:center">强调溢出来，里面的都淹没了</td>
<td style="text-align:center">in·und·ate</td>
</tr>
<tr>
<td style="text-align:center">redundant</td>
<td style="text-align:center">adj. 多余的，冗余的</td>
<td style="text-align:center"><code>red - to</code></td>
<td style="text-align:center">red·und·ant</td>
</tr>
<tr>
<td style="text-align:center">redundancy</td>
<td style="text-align:center">n. 备份，冗余</td>
<td style="text-align:center"></td>
<td style="text-align:center">red·und·ancy</td>
</tr>
<tr>
<td style="text-align:center">fluctuate</td>
<td style="text-align:center">v. 波动，起伏</td>
<td style="text-align:center">flow(o → u, w → c)</td>
<td style="text-align:center">fluc·tuate</td>
</tr>
<tr>
<td style="text-align:center">billow</td>
<td style="text-align:center">n. 巨浪<br />v. 翻腾；起伏</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">discard</td>
<td style="text-align:center">v. 抛弃</td>
<td style="text-align:center"><code>card/cord - heart(core)</code><br />没心了，没人爱了，被抛弃</td>
<td style="text-align:center">dis·card</td>
</tr>
<tr>
<td style="text-align:center">cardiac</td>
<td style="text-align:center">adj. 心脏的</td>
<td style="text-align:center">cardiac disease 心脏病</td>
<td style="text-align:center">card·iac</td>
</tr>
<tr>
<td style="text-align:center">cardinal</td>
<td style="text-align:center">adj. 首要的，主要的</td>
<td style="text-align:center"><code>in - into</code><br />在心里的，首要</td>
<td style="text-align:center">card·in·al</td>
</tr>
<tr>
<td style="text-align:center">cordial</td>
<td style="text-align:center">adj. 热心的；真诚的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">concord</td>
<td style="text-align:center">n. 一致</td>
<td style="text-align:center">心在一起</td>
<td style="text-align:center">con·cord</td>
</tr>
<tr>
<td style="text-align:center">discord</td>
<td style="text-align:center">n./v. 不一致</td>
<td style="text-align:center">心不在一起</td>
<td style="text-align:center">dis·cord</td>
</tr>
<tr>
<td style="text-align:center">apparel</td>
<td style="text-align:center">n. 衣服，服装</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">garment</td>
<td style="text-align:center">n. 衣服</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">garb</td>
<td style="text-align:center">n. 制服</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">attire</td>
<td style="text-align:center">n. 盛装</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">costume</td>
<td style="text-align:center">n. 服装</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">cajole</td>
<td style="text-align:center">v. 以甜言蜜语哄骗</td>
<td style="text-align:center"><code>ca - co - together</code><br /><code>jo - joy</code><br />哄骗得开心</td>
<td style="text-align:center">ca·jo·le</td>
</tr>
<tr>
<td style="text-align:center">coax</td>
<td style="text-align:center">n./v. 哄骗</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">hoax</td>
<td style="text-align:center">n. 欺骗</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">inveigle</td>
<td style="text-align:center">v. 诱惑</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">entice</td>
<td style="text-align:center">v. 诱惑；唆使</td>
<td style="text-align:center">唆使enter ice</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">effete</td>
<td style="text-align:center">adj. 疲惫的；枯竭的</td>
<td style="text-align:center"><code>ef - ex - out</code><br /><code>fet - fact - to do/make</code><br />无法产出，枯竭</td>
<td style="text-align:center">ef·fete</td>
</tr>
<tr>
<td style="text-align:center">grudge</td>
<td style="text-align:center">n./v. 怨恨；不情愿做</td>
<td style="text-align:center"><code>gru - 心情不好</code></td>
<td style="text-align:center">gru·dge</td>
</tr>
<tr>
<td style="text-align:center">grumble</td>
<td style="text-align:center">v. 抱怨</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">grouse</td>
<td style="text-align:center">v. 抱怨，不高兴</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">grouch</td>
<td style="text-align:center">n. 心怀不满的人</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">grumpy</td>
<td style="text-align:center">adj. 暴躁的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">kidnap</td>
<td style="text-align:center">v. 绑架</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">abduct</td>
<td style="text-align:center">v. 诱拐</td>
<td style="text-align:center"><code>ab - away</code><br /><code>duct/duce - to lead(conduct)</code><br />引导离开</td>
<td style="text-align:center">ab·duct</td>
</tr>
<tr>
<td style="text-align:center">viaduct</td>
<td style="text-align:center">n. 高架桥</td>
<td style="text-align:center"><code>via - way</code><br />引导的路</td>
<td style="text-align:center">via·duct</td>
</tr>
<tr>
<td style="text-align:center">ductile</td>
<td style="text-align:center">adj. 易于延展的；易引导的</td>
<td style="text-align:center"><code>ile - 易于</code></td>
<td style="text-align:center">duct·ile</td>
</tr>
<tr>
<td style="text-align:center">deduct</td>
<td style="text-align:center">v. 扣除，扣款</td>
<td style="text-align:center">把金额引导下去</td>
<td style="text-align:center">de·duct</td>
</tr>
<tr>
<td style="text-align:center">induce</td>
<td style="text-align:center">v. 引诱</td>
<td style="text-align:center">引导进来</td>
<td style="text-align:center">in·duce</td>
</tr>
<tr>
<td style="text-align:center">seduce</td>
<td style="text-align:center">v. 色诱</td>
<td style="text-align:center">se - 色</td>
<td style="text-align:center">se·duce</td>
</tr>
<tr>
<td style="text-align:center">traduce</td>
<td style="text-align:center">v. 中伤，诽谤</td>
<td style="text-align:center"><code>tra - 转变</code></td>
<td style="text-align:center">tra·duce</td>
</tr>
<tr>
<td style="text-align:center">conduce</td>
<td style="text-align:center">v. 有益于</td>
<td style="text-align:center">一起引导向更好<br />conduce to<br />= contribute to</td>
<td style="text-align:center">con·duce</td>
</tr>
<tr>
<td style="text-align:center">pact</td>
<td style="text-align:center">n. 协定，公约</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">compact</td>
<td style="text-align:center">n. 合同，契约</td>
<td style="text-align:center">一起的协定</td>
<td style="text-align:center">com·pact</td>
</tr>
<tr>
<td style="text-align:center">armistice</td>
<td style="text-align:center">n. 停战协议；停战</td>
<td style="text-align:center">army + stand</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">pry</td>
<td style="text-align:center">v. 细查，探问</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">probe</td>
<td style="text-align:center">v. 探究；查明</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">delve</td>
<td style="text-align:center">v. 探究；翻寻</td>
<td style="text-align:center">delve into</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">poke</td>
<td style="text-align:center">v. 打听，刺探</td>
<td style="text-align:center">poke about</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">scour</td>
<td style="text-align:center">v. 四处搜索；擦洗</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">scout</td>
<td style="text-align:center">n./v. 侦查；童子军</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">scrub</td>
<td style="text-align:center">v. 刷洗</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">swagger</td>
<td style="text-align:center">v. 昂首阔步走</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">strut</td>
<td style="text-align:center">v. 趾高气昂地走</td>
<td style="text-align:center">stride (d → t)</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">prance</td>
<td style="text-align:center">n./v. 昂首阔步</td>
<td style="text-align:center">走出prince的感觉</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">vagary</td>
<td style="text-align:center">n. 奇异的幻想；妄想；多变</td>
<td style="text-align:center"><code>vag - wander</code><br />想法走来走去</td>
<td style="text-align:center">vag·ary</td>
</tr>
<tr>
<td style="text-align:center">vague</td>
<td style="text-align:center">adj. 模糊的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">vagabond</td>
<td style="text-align:center">v. 流浪汉</td>
<td style="text-align:center">流浪汉得到处走</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">vagrant</td>
<td style="text-align:center">adj./n. 流浪的</td>
<td style="text-align:center">走来走去的人</td>
<td style="text-align:center">vag·r·ant</td>
</tr>
<tr>
<td style="text-align:center">pervade</td>
<td style="text-align:center">v. 弥漫，遍布</td>
<td style="text-align:center"><code>vade - to go(invade)</code><br /><code>per - through</code><br />到过了所有地方</td>
<td style="text-align:center">per·vade</td>
</tr>
<tr>
<td style="text-align:center">evade</td>
<td style="text-align:center">v. 逃避</td>
<td style="text-align:center">走出去</td>
<td style="text-align:center">e·vade</td>
</tr>
<tr>
<td style="text-align:center">wade</td>
<td style="text-align:center">v. 涉水</td>
<td style="text-align:center">w: water<br />v → w</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">waddle</td>
<td style="text-align:center">v. 蹒跚</td>
<td style="text-align:center"><code>词尾辅音双写表重复</code><br />反复在水里走会蹒跚</td>
<td style="text-align:center">wad·dle</td>
</tr>
<tr>
<td style="text-align:center">permeate</td>
<td style="text-align:center">v. 渗透；弥漫</td>
<td style="text-align:center">肉香散发出来</td>
<td style="text-align:center">per·meat·e</td>
</tr>
<tr>
<td style="text-align:center">impregnate</td>
<td style="text-align:center">v. 使浸透；使怀孕</td>
<td style="text-align:center"><code>im - to</code><br />怀孕表面精子浸透了卵子</td>
<td style="text-align:center">im·pregnant</td>
</tr>
<tr>
<td style="text-align:center">diffuse</td>
<td style="text-align:center">v. 散布</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">recant</td>
<td style="text-align:center">v. 撤销</td>
<td style="text-align:center"><code>cant/chant - to sing(accent)</code><br />反过来唱</td>
<td style="text-align:center">re·cant</td>
</tr>
<tr>
<td style="text-align:center">cant</td>
<td style="text-align:center">n. 行话；术语</td>
<td style="text-align:center">唱的东西让外行人can’t 懂</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">chant</td>
<td style="text-align:center">n. 圣歌</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">enchant</td>
<td style="text-align:center">n. 使陶醉</td>
<td style="text-align:center">唱的歌让人陶醉</td>
<td style="text-align:center">en·chant</td>
</tr>
<tr>
<td style="text-align:center">incantation</td>
<td style="text-align:center">n. 咒语</td>
<td style="text-align:center">吟唱咒语</td>
<td style="text-align:center">in·cant·ation</td>
</tr>
<tr>
<td style="text-align:center">withdraw</td>
<td style="text-align:center">v. 收回，取消</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">revoke</td>
<td style="text-align:center">v. 取消</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">retract</td>
<td style="text-align:center">v. 收回(承诺)</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">asset</td>
<td style="text-align:center">n. 资产；有价值的东西</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">real estate</td>
<td style="text-align:center">房地产</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">chasm</td>
<td style="text-align:center">n. 深坑，裂缝</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">abyss</td>
<td style="text-align:center">n. 深渊</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">canyon</td>
<td style="text-align:center">n. 大峡谷</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">crater</td>
<td style="text-align:center">n. 火山口</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">seam</td>
<td style="text-align:center">n. 接缝</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">crevice</td>
<td style="text-align:center">n. 岩石裂缝</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">despoil</td>
<td style="text-align:center">v. 夺取，抢夺</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">depredate</td>
<td style="text-align:center">v. 掠夺，破坏</td>
<td style="text-align:center"><code>pred - prey plunder</code></td>
<td style="text-align:center">de·pred·ate</td>
</tr>
<tr>
<td style="text-align:center">predacious</td>
<td style="text-align:center">adj. 掠食性的，食肉的</td>
<td style="text-align:center"><code>acious - 很多的</code><br />掠夺多的</td>
<td style="text-align:center">pred·acious</td>
</tr>
<tr>
<td style="text-align:center">facetious</td>
<td style="text-align:center">adj. 好开玩笑的，诙谐的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">jocular</td>
<td style="text-align:center">adj. 诙谐的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">jocose</td>
<td style="text-align:center">adj. 诙谐的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">waggish</td>
<td style="text-align:center">adj. 诙谐的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">wag</td>
<td style="text-align:center">n. 诙谐幽默的人<br />v. 摇摆尾巴</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">hurtle</td>
<td style="text-align:center">v. 碰撞；猛冲</td>
<td style="text-align:center">碰撞导致hurt</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">hurl</td>
<td style="text-align:center">v. 猛扔</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">hurdle</td>
<td style="text-align:center">n. 栏，跨栏</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">lunge</td>
<td style="text-align:center">v. 猛冲</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">plunge</td>
<td style="text-align:center">v. 跳入</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">swoop</td>
<td style="text-align:center">v./n. 向下猛冲</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">larceny</td>
<td style="text-align:center">n. 盗窃，偷窃</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">burglary</td>
<td style="text-align:center">n. 入室行窃</td>
<td style="text-align:center">break + larceny</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">plagiarism</td>
<td style="text-align:center">n. 剽窃，抄袭</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">shambles</td>
<td style="text-align:center">n. 混乱；迷惑</td>
<td style="text-align:center">分不清shame了</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">bedlam</td>
<td style="text-align:center">n. 喧闹嘈杂的局面；混乱</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">babel</td>
<td style="text-align:center">n. 嘈杂，混乱的场所</td>
<td style="text-align:center">和babe一样嘈杂</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">commotion</td>
<td style="text-align:center">n. 骚乱</td>
<td style="text-align:center">公共场合(common)发生骚乱</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">pandemonium</td>
<td style="text-align:center">n. 大混乱</td>
<td style="text-align:center"><code>pan - all</code><br />都是魔鬼</td>
<td style="text-align:center">pan·demon·ium</td>
</tr>
<tr>
<td style="text-align:center">taboo</td>
<td style="text-align:center">n. 禁止，禁忌</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">tattoo</td>
<td style="text-align:center">n. 纹身</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">trappings</td>
<td style="text-align:center">n. 装饰，马的装饰物</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">abdicate</td>
<td style="text-align:center">v. 放弃权利</td>
<td style="text-align:center"><code>ab - away</code><br /><code>dic/dict - to speak</code></td>
<td style="text-align:center">ab·dic·ate</td>
</tr>
<tr>
<td style="text-align:center">contradict</td>
<td style="text-align:center">v. 反驳</td>
<td style="text-align:center"><code>contra - against</code></td>
<td style="text-align:center">contra·dict</td>
</tr>
<tr>
<td style="text-align:center">benediction</td>
<td style="text-align:center">n. 祝福</td>
<td style="text-align:center"><code>bene - benefit</code><br />说好话，祝福</td>
<td style="text-align:center">bene·dict·ion</td>
</tr>
<tr>
<td style="text-align:center">malediction</td>
<td style="text-align:center">n. 诅咒</td>
<td style="text-align:center"><code>male - evil</code><br />讲坏话，诅咒</td>
<td style="text-align:center">male·dict·ion</td>
</tr>
<tr>
<td style="text-align:center">interdict</td>
<td style="text-align:center">n. 禁止</td>
<td style="text-align:center"><code>inter - between</code><br />在中间说不</td>
<td style="text-align:center">inter·dict</td>
</tr>
<tr>
<td style="text-align:center">indict</td>
<td style="text-align:center">v. 起诉</td>
<td style="text-align:center">把一个人说进监狱</td>
<td style="text-align:center">in·dict</td>
</tr>
<tr>
<td style="text-align:center">valediction</td>
<td style="text-align:center">n. 告别词</td>
<td style="text-align:center">well(w → v, 去一个l)<br />farewell</td>
<td style="text-align:center">vale·dict·ion</td>
</tr>
<tr>
<td style="text-align:center">vindicate</td>
<td style="text-align:center">v. 辩护</td>
<td style="text-align:center">win(w → v)<br />目的是说赢</td>
<td style="text-align:center">vin·dic·ate</td>
</tr>
<tr>
<td style="text-align:center">vindictive</td>
<td style="text-align:center">adj. 报复性的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">forego</td>
<td style="text-align:center">v. 放弃</td>
<td style="text-align:center">提前走了</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">forsake</td>
<td style="text-align:center">v. 放弃</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">forswear</td>
<td style="text-align:center">v. 放弃</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">abjure</td>
<td style="text-align:center">v. 宣誓放弃</td>
<td style="text-align:center"><code>jure - swear</code></td>
<td style="text-align:center">ab·jure</td>
</tr>
<tr>
<td style="text-align:center">conjecture</td>
<td style="text-align:center">v. 推测</td>
<td style="text-align:center"><code>ject - to throw</code><br />多人头脑风暴中抛出一个推测</td>
<td style="text-align:center">con·ject·ure</td>
</tr>
<tr>
<td style="text-align:center">abject</td>
<td style="text-align:center">adj. 悲惨的</td>
<td style="text-align:center">被抛弃的人悲惨</td>
<td style="text-align:center">ab·ject</td>
</tr>
<tr>
<td style="text-align:center">deject</td>
<td style="text-align:center">v. 使沮丧</td>
<td style="text-align:center">心情向下扔</td>
<td style="text-align:center">de·ject</td>
</tr>
<tr>
<td style="text-align:center">adjacent</td>
<td style="text-align:center">adj. 邻近的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">surmise</td>
<td style="text-align:center">v. 猜测</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">speculate</td>
<td style="text-align:center">v. 推测</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">accrue</td>
<td style="text-align:center">v. 增加</td>
<td style="text-align:center"><code>cru - creat</code><br />不断创造，积累</td>
<td style="text-align:center">ac·crue</td>
</tr>
<tr>
<td style="text-align:center">amass</td>
<td style="text-align:center">v. 积累</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">mount</td>
<td style="text-align:center">v. 增加</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">baffle</td>
<td style="text-align:center">v. 使迷惑，阻碍</td>
<td style="text-align:center">battle中要迷惑敌人</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">babble</td>
<td style="text-align:center">v. 牙牙学语；含糊不清地说</td>
<td style="text-align:center">babe</td>
<td style="text-align:center">bab·ble</td>
</tr>
<tr>
<td style="text-align:center">bewilder</td>
<td style="text-align:center">v. 使困惑</td>
<td style="text-align:center">在荒地(wild)方向让人困惑</td>
<td style="text-align:center">be·wild·er</td>
</tr>
<tr>
<td style="text-align:center">muddle</td>
<td style="text-align:center">v. 使迷惑</td>
<td style="text-align:center">脑子和泥浆一样</td>
<td style="text-align:center">mud·dle</td>
</tr>
<tr>
<td style="text-align:center">perplex</td>
<td style="text-align:center">v. 困惑</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">fuddle</td>
<td style="text-align:center">v. 迷惑</td>
<td style="text-align:center">发抖</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">befuddle</td>
<td style="text-align:center">v. 迷惑</td>
<td style="text-align:center"></td>
<td style="text-align:center">be·fuddle</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>英语</category>
        <category>曲根万词班</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>单词</tag>
      </tags>
  </entry>
  <entry>
    <title>day 07</title>
    <url>/2019/11/22/day-07/</url>
    <content><![CDATA[<style>
table th:first-of-type {
    width: 150px;
}
</style>


<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">单词</th>
<th style="text-align:center">释义</th>
<th style="text-align:center">备注</th>
<th style="text-align:center">分解</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">badger</td>
<td style="text-align:center">v. 困扰；逗弄</td>
<td style="text-align:center">胸前带一个badge，到处要喝的人很困扰别人</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">pester</td>
<td style="text-align:center">v. 纠缠</td>
<td style="text-align:center">蚊虫这类pest纠缠人很烦</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">harry</td>
<td style="text-align:center">v. 不断困扰；使纠缠</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">harass</td>
<td style="text-align:center">v. 骚扰</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">molest</td>
<td style="text-align:center">n./v. 骚扰；猥亵</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">derange</td>
<td style="text-align:center">v. 使错乱；扰乱</td>
<td style="text-align:center">没有事先安排到时就会乱</td>
<td style="text-align:center">de·range</td>
</tr>
<tr>
<td style="text-align:center">demented</td>
<td style="text-align:center">adj. (由于痛苦经历)精神错乱的</td>
<td style="text-align:center">mental<br />精神不好的</td>
<td style="text-align:center">de·ment·ed</td>
</tr>
<tr>
<td style="text-align:center">delirious</td>
<td style="text-align:center">adj. (由于生病)精神错乱的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">fiend</td>
<td style="text-align:center">n. 恶魔；穷凶极恶的人</td>
<td style="text-align:center">不是friend就是fiend</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">fiendish</td>
<td style="text-align:center">adj. 恶毒的</td>
<td style="text-align:center"></td>
<td style="text-align:center">fiend·ish</td>
</tr>
<tr>
<td style="text-align:center">vice</td>
<td style="text-align:center">n. 恶行</td>
<td style="text-align:center">vice- adj. 副的<br />vice-president 副总统</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">villanious</td>
<td style="text-align:center">adj. 凶恶的</td>
<td style="text-align:center">来自villain</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">vile</td>
<td style="text-align:center">adj. 卑鄙的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">pine</td>
<td style="text-align:center">v. 渴望；苦思；消瘦憔悴</td>
<td style="text-align:center"><code>pin - pun/pen - punish</code><br />也是松树的意思，松树挺拔望向远处，看着自己苦思的人</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">repent</td>
<td style="text-align:center">v. 后悔</td>
<td style="text-align:center">反过来惩罚自己</td>
<td style="text-align:center">re·pent</td>
</tr>
<tr>
<td style="text-align:center">impunity</td>
<td style="text-align:center">n. 免罪，免罚</td>
<td style="text-align:center">不惩罚</td>
<td style="text-align:center">im·pun·ity</td>
</tr>
<tr>
<td style="text-align:center">penalize</td>
<td style="text-align:center">v. 惩罚</td>
<td style="text-align:center"></td>
<td style="text-align:center">pen·alize</td>
</tr>
<tr>
<td style="text-align:center">penitence</td>
<td style="text-align:center">n. 后悔，悔悟</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">choke</td>
<td style="text-align:center">v. 使窒息</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">throttle</td>
<td style="text-align:center">v. 使透不过气</td>
<td style="text-align:center">throat</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">suffocate</td>
<td style="text-align:center">v. 闷死</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">stifle</td>
<td style="text-align:center">v. 使窒息</td>
<td style="text-align:center">窒息后就变stiff了</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">throb</td>
<td style="text-align:center">v. 悸动，跳动<br />n. 脉搏</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">palpitate</td>
<td style="text-align:center">v. (心脏急速)跳动</td>
<td style="text-align:center"><code>palp - palm手掌</code><br />用手掌按住胸口</td>
<td style="text-align:center">palp·itate</td>
</tr>
<tr>
<td style="text-align:center">palpate</td>
<td style="text-align:center">v. 触诊</td>
<td style="text-align:center">用手掌碰</td>
<td style="text-align:center">palp·ate</td>
</tr>
<tr>
<td style="text-align:center">flutter</td>
<td style="text-align:center">v. (因激动或紧张)心脏砰砰跳动</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">broth</td>
<td style="text-align:center">n. 煮肉的清汤</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">demean</td>
<td style="text-align:center">v. 贬低，降低</td>
<td style="text-align:center">降低方式</td>
<td style="text-align:center">de·mean</td>
</tr>
<tr>
<td style="text-align:center">degrade</td>
<td style="text-align:center">v. 降级；退化</td>
<td style="text-align:center"></td>
<td style="text-align:center">de·grade</td>
</tr>
<tr>
<td style="text-align:center">debase</td>
<td style="text-align:center">v. 贬低，降低</td>
<td style="text-align:center"></td>
<td style="text-align:center">de·base</td>
</tr>
<tr>
<td style="text-align:center">abase</td>
<td style="text-align:center">v. 贬低</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">foster</td>
<td style="text-align:center">v. 养育；促进</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">rear</td>
<td style="text-align:center">v. 培养；抚养</td>
<td style="text-align:center">也有后面的意思，后天培养</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">nurture</td>
<td style="text-align:center">v. 培养</td>
<td style="text-align:center">nurse一个人</td>
<td style="text-align:center">nurt·ure</td>
</tr>
<tr>
<td style="text-align:center">incentive</td>
<td style="text-align:center">n. 刺激；激励</td>
<td style="text-align:center">用唱歌的方式刺激</td>
<td style="text-align:center">in·cent·ive</td>
</tr>
<tr>
<td style="text-align:center">stimulus</td>
<td style="text-align:center">n. 刺激</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">goad</td>
<td style="text-align:center">n./v. 激励，驱使</td>
<td style="text-align:center">有goal就有激励</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">impetus</td>
<td style="text-align:center">n. 刺激，推动力</td>
<td style="text-align:center">在compete中很有动力</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">labyrinth</td>
<td style="text-align:center">n. 迷宫</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">pore</td>
<td style="text-align:center">n. 毛孔<br />v. 仔细阅读，仔细思考</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ponder</td>
<td style="text-align:center">v. 仔细考虑</td>
<td style="text-align:center"><code>pond - pound</code><br /><code>er - 动作重复</code><br />反复掂量</td>
<td style="text-align:center">pond·er</td>
</tr>
<tr>
<td style="text-align:center">persue</td>
<td style="text-align:center">v. 精读</td>
<td style="text-align:center">阅读pursue精</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">contemplate</td>
<td style="text-align:center">v. 深思</td>
<td style="text-align:center">temple<br />一群人一起在寺庙里思考</td>
<td style="text-align:center">com·templ·ate</td>
</tr>
<tr>
<td style="text-align:center">speculate</td>
<td style="text-align:center">v. 沉思；思考；推测；投机</td>
<td style="text-align:center">用眼看，用脑想</td>
<td style="text-align:center">spec·ulate</td>
</tr>
<tr>
<td style="text-align:center">transfix</td>
<td style="text-align:center">v. 刺穿；使惊呆</td>
<td style="text-align:center"><code>trans - from … to</code><br />穿过去fix在那里</td>
<td style="text-align:center">trans·fix</td>
</tr>
<tr>
<td style="text-align:center">transcend</td>
<td style="text-align:center">v. 超越</td>
<td style="text-align:center"><code>scend - climb</code><br />从后面爬到前面</td>
<td style="text-align:center">tran(s)·scend</td>
</tr>
<tr>
<td style="text-align:center">ascend</td>
<td style="text-align:center">v. 上升</td>
<td style="text-align:center">向上爬</td>
<td style="text-align:center">a·scend</td>
</tr>
<tr>
<td style="text-align:center">descend</td>
<td style="text-align:center">v. 下降</td>
<td style="text-align:center">向下爬</td>
<td style="text-align:center">de·scend</td>
</tr>
<tr>
<td style="text-align:center">transfigure</td>
<td style="text-align:center">v. (人的外貌的)改观</td>
<td style="text-align:center">figure - 身材<br />身材的变化</td>
<td style="text-align:center">trans·figure</td>
</tr>
<tr>
<td style="text-align:center">transparent</td>
<td style="text-align:center">adj. 透明的</td>
<td style="text-align:center">appear → par<br />从显现变成不显现</td>
<td style="text-align:center">trans·par·ent</td>
</tr>
<tr>
<td style="text-align:center">transgress</td>
<td style="text-align:center">v. 违反，违背</td>
<td style="text-align:center"><code>gress - to go(prograss)</code><br />走过界</td>
<td style="text-align:center">trans·gress</td>
</tr>
<tr>
<td style="text-align:center">petrify</td>
<td style="text-align:center">v. 使惊呆</td>
<td style="text-align:center"><code>petr - rock</code></td>
<td style="text-align:center">petr·ify</td>
</tr>
<tr>
<td style="text-align:center">petroleum</td>
<td style="text-align:center">n. 石油</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">appall</td>
<td style="text-align:center">v. 使害怕，惊骇</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">confound</td>
<td style="text-align:center">v. 使困惑，惊讶</td>
<td style="text-align:center">confuse</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">anomaly</td>
<td style="text-align:center">n. 反常的事物</td>
<td style="text-align:center"><code>a - not</code><br />不正常</td>
<td style="text-align:center">a· nomal·y</td>
</tr>
<tr>
<td style="text-align:center">aberrant</td>
<td style="text-align:center">adj. 异常的，背离常轨的</td>
<td style="text-align:center"><code>err - error</code><br /><code>ab - away</code><br />远离错误，没有人可以不犯错，这是异常的</td>
<td style="text-align:center">ab·err·ant</td>
</tr>
<tr>
<td style="text-align:center">converge</td>
<td style="text-align:center">v. 集中于一点</td>
<td style="text-align:center"><code>verge - incline</code><br />一起倾向于同一点</td>
<td style="text-align:center">con·verge</td>
</tr>
<tr>
<td style="text-align:center">diverge</td>
<td style="text-align:center">v. 分歧；偏离</td>
<td style="text-align:center">dis去掉s<br />不倾向于同一</td>
<td style="text-align:center">di·verge</td>
</tr>
<tr>
<td style="text-align:center">divergent</td>
<td style="text-align:center">adj. 分歧的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">duplicate</td>
<td style="text-align:center">v. 复制<br />adj. 完全相同的<br />n. 复制品</td>
<td style="text-align:center"><code>du - double</code><br /><code>plic/plex/ply - fold</code><br />复制时盖一层纸在上面</td>
<td style="text-align:center">du·plic·ate</td>
</tr>
<tr>
<td style="text-align:center">implicate</td>
<td style="text-align:center">v. 暗示；牵连</td>
<td style="text-align:center">把秘密向里折起来不是那么明显</td>
<td style="text-align:center">im·plic·ate</td>
</tr>
<tr>
<td style="text-align:center">explicate</td>
<td style="text-align:center">v. 阐明，解释</td>
<td style="text-align:center">把折起来的秘密打开</td>
<td style="text-align:center">ex·plic·ate</td>
</tr>
<tr>
<td style="text-align:center">replica</td>
<td style="text-align:center">n. 复制品</td>
<td style="text-align:center">再盖一层纸复制</td>
<td style="text-align:center">re·plic·a</td>
</tr>
<tr>
<td style="text-align:center">implicit</td>
<td style="text-align:center">adj. 含蓄的</td>
<td style="text-align:center">同implicate</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">explicit</td>
<td style="text-align:center">adj. 明确的，直接的</td>
<td style="text-align:center">同explicate</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">supplicate</td>
<td style="text-align:center">v. 恳求</td>
<td style="text-align:center">身体向下弯</td>
<td style="text-align:center">sup·plic·ate</td>
</tr>
<tr>
<td style="text-align:center">epoch</td>
<td style="text-align:center">n. 纪元</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">era</td>
<td style="text-align:center">n. 时代</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gaunt</td>
<td style="text-align:center">adj. 憔悴的，骨瘦如柴的</td>
<td style="text-align:center">与下面对比，G - GRE</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">daunt</td>
<td style="text-align:center">v. 恐吓；使气馁</td>
<td style="text-align:center">D - 打</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">haunt</td>
<td style="text-align:center">v. 闹鬼</td>
<td style="text-align:center">H - 嚎叫</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">flaunt</td>
<td style="text-align:center">v. 炫耀</td>
<td style="text-align:center">FL - 飞起来</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">vaunt</td>
<td style="text-align:center">v. 吹牛</td>
<td style="text-align:center">V - 5，5个人一起吹牛</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">taunt</td>
<td style="text-align:center">v. 嘲笑</td>
<td style="text-align:center">T - tease</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">jaunt</td>
<td style="text-align:center">n. 旅行</td>
<td style="text-align:center">J - journey</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">jaunty</td>
<td style="text-align:center">adj. 愉快的，洋洋得意的</td>
<td style="text-align:center">旅行使人愉快</td>
<td style="text-align:center">jaunt·y</td>
</tr>
<tr>
<td style="text-align:center">saunter</td>
<td style="text-align:center">n./v. 漫步</td>
<td style="text-align:center">S - search</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">incessant</td>
<td style="text-align:center">adj. 不断的，没完没了的</td>
<td style="text-align:center">cease → cess<br />不会停止</td>
<td style="text-align:center">in·cess·ant</td>
</tr>
<tr>
<td style="text-align:center">nonstop</td>
<td style="text-align:center">adj. 不停的；直达的</td>
<td style="text-align:center">none - stop<br />不停/没有停靠点</td>
<td style="text-align:center">non·stop</td>
</tr>
<tr>
<td style="text-align:center">mute</td>
<td style="text-align:center">adj. 沉默的<br />v. 减弱声音；使柔和<br />n. 哑巴</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">dampen</td>
<td style="text-align:center">v. 制止(琴弦)声音；抑制，减少</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">deaden</td>
<td style="text-align:center">v. 使减弱</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">muffle</td>
<td style="text-align:center">n. 消音器<br />v. 抑制；蒙住</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">partisan</td>
<td style="text-align:center">n. 同党者，帮伙</td>
<td style="text-align:center"><code>san - 人</code><br />在同一个party(党)里的人</td>
<td style="text-align:center">parti·san</td>
</tr>
<tr>
<td style="text-align:center">artisan</td>
<td style="text-align:center">n. 手艺人</td>
<td style="text-align:center"></td>
<td style="text-align:center">art·i·san</td>
</tr>
<tr>
<td style="text-align:center">skim</td>
<td style="text-align:center">v. 浏览，略读</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">staple</td>
<td style="text-align:center">v. 钉住</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">pierce</td>
<td style="text-align:center">v. 刺穿</td>
<td style="text-align:center">pin</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">impale</td>
<td style="text-align:center">v. 刺穿，插进</td>
<td style="text-align:center"><code>im - into</code><br /><code>pale - pole</code><br />把棍子插进去</td>
<td style="text-align:center">im·pale</td>
</tr>
<tr>
<td style="text-align:center">spike</td>
<td style="text-align:center">v. 刺进，刺穿</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">onerous</td>
<td style="text-align:center">adj .繁重的</td>
<td style="text-align:center"><code>oner - burden</code></td>
<td style="text-align:center">oner·ous</td>
</tr>
<tr>
<td style="text-align:center">onus</td>
<td style="text-align:center">n. 负担</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">burdensome</td>
<td style="text-align:center">adj. 负担的</td>
<td style="text-align:center"><code>some - 充满的，有倾向的</code></td>
<td style="text-align:center">burden·some</td>
</tr>
<tr>
<td style="text-align:center">propensity</td>
<td style="text-align:center">n. 倾向嗜好</td>
<td style="text-align:center"><code>pro - 向前</code><br /><code>pens/pend - weight(pound)</code><br />向前偏重，倾向</td>
<td style="text-align:center">pro·pens·ity</td>
</tr>
<tr>
<td style="text-align:center">pensive</td>
<td style="text-align:center">adj. 沉思的；悲伤的</td>
<td style="text-align:center">心情沉重</td>
<td style="text-align:center">pens·ive</td>
</tr>
<tr>
<td style="text-align:center">ponderous</td>
<td style="text-align:center">adj. 笨重的</td>
<td style="text-align:center"></td>
<td style="text-align:center">pond·erous</td>
</tr>
<tr>
<td style="text-align:center">preponderant</td>
<td style="text-align:center">adj. 占优势的，主要的</td>
<td style="text-align:center">在重量上领先</td>
<td style="text-align:center">pre·pond·er·ant</td>
</tr>
<tr>
<td style="text-align:center">suspend</td>
<td style="text-align:center">v. 暂停，中止</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">impend</td>
<td style="text-align:center">v. 即将发生</td>
<td style="text-align:center">还没有happen，但马上就要</td>
<td style="text-align:center">im·pend</td>
</tr>
<tr>
<td style="text-align:center">recompense</td>
<td style="text-align:center">v. 弥补，补偿</td>
<td style="text-align:center">重新补偿重量</td>
<td style="text-align:center">re·com·pense</td>
</tr>
<tr>
<td style="text-align:center">inclination</td>
<td style="text-align:center">n. 倾向</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">penchant</td>
<td style="text-align:center">n. 嗜好</td>
<td style="text-align:center">唱到激情处加重音，喜欢这部分</td>
<td style="text-align:center">pen·chant</td>
</tr>
<tr>
<td style="text-align:center">predilection</td>
<td style="text-align:center">n. 爱好</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">predisposition</td>
<td style="text-align:center">n. 倾向</td>
<td style="text-align:center"><code>pre - to</code><br />强调偏离位置，有所倾向</td>
<td style="text-align:center">pre·dis·position</td>
</tr>
<tr>
<td style="text-align:center">dissipate</td>
<td style="text-align:center">v. 驱散；浪费</td>
<td style="text-align:center"><code>dis - apart</code><br /><code>sip - to throw</code><br />dissipate … on …</td>
<td style="text-align:center">dis·sip·ate</td>
</tr>
<tr>
<td style="text-align:center">disperse</td>
<td style="text-align:center">v. 驱散(人群)</td>
<td style="text-align:center"><code>sperse - 散开</code></td>
<td style="text-align:center">dis·(s)perse</td>
</tr>
<tr>
<td style="text-align:center">dispel</td>
<td style="text-align:center">v. 驱散</td>
<td style="text-align:center"><code>pel - drive/pull</code></td>
<td style="text-align:center">dis·pel</td>
</tr>
<tr>
<td style="text-align:center">disseminate</td>
<td style="text-align:center">v. 传播，散布</td>
<td style="text-align:center"><code>semin - seed</code><br />像种子一样传播开</td>
<td style="text-align:center">dis·semin·ate</td>
</tr>
<tr>
<td style="text-align:center">scatter</td>
<td style="text-align:center">v. 散播，散开</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">squander</td>
<td style="text-align:center">v. 浪费</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">fritter</td>
<td style="text-align:center">v. 挥霍</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">botch</td>
<td style="text-align:center">v. 笨手笨脚，弄坏</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">bungle</td>
<td style="text-align:center">v. 搞砸，做坏</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">bumble</td>
<td style="text-align:center">v. 弄糟</td>
<td style="text-align:center">bomb</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>英语</category>
        <category>曲根万词班</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>单词</tag>
      </tags>
  </entry>
  <entry>
    <title>day 08</title>
    <url>/2019/11/23/day-08/</url>
    <content><![CDATA[<style>
table th:first-of-type {
    width: 150px;
}
</style>


<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">单词</th>
<th style="text-align:center">释义</th>
<th style="text-align:center">备注</th>
<th style="text-align:center">分解</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">chafe</td>
<td style="text-align:center">v. 擦热</td>
<td style="text-align:center"><code>cha - calorie</code><br /><code>fe - fact - make</code><br />擦出卡路里</td>
<td style="text-align:center">cha·fe</td>
</tr>
<tr>
<td style="text-align:center">abrade</td>
<td style="text-align:center">v. 摩擦</td>
<td style="text-align:center"><code>ras/rad - rub(erase)</code></td>
<td style="text-align:center">ab·rade</td>
</tr>
<tr>
<td style="text-align:center">abrasion</td>
<td style="text-align:center">adj. 摩擦的</td>
<td style="text-align:center">同上</td>
<td style="text-align:center">ab·ras·ion</td>
</tr>
<tr>
<td style="text-align:center">obliterate</td>
<td style="text-align:center">v. 抹掉</td>
<td style="text-align:center"><code>ob - against</code><br /><code>liter - letter</code><br />把字擦掉</td>
<td style="text-align:center">ob·liter·ate</td>
</tr>
<tr>
<td style="text-align:center">expunge</td>
<td style="text-align:center">v. 抹掉；删掉</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">glint</td>
<td style="text-align:center">n./v. 闪烁，闪光</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">unravel</td>
<td style="text-align:center">v. 解开；阐明</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ravel</td>
<td style="text-align:center">v. (用绳子或线)缠绕</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">illuminate</td>
<td style="text-align:center">v. 阐明</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">illustrate</td>
<td style="text-align:center">v. 阐明</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">bellow</td>
<td style="text-align:center">v. 大吼，怒吼</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">bullish</td>
<td style="text-align:center">adj. 牛市的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">bucolic</td>
<td style="text-align:center">adj. 乡村的</td>
<td style="text-align:center">bull + call<br />乡村才听得到牛叫</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">rant</td>
<td style="text-align:center">v. 咆哮；痛骂</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">cloak</td>
<td style="text-align:center">v. 掩饰；隐匿<br />n. 宽大的外衣</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">preclude</td>
<td style="text-align:center">v. 阻止</td>
<td style="text-align:center"><code>clus/clud - close</code><br />前方关闭，阻止通行</td>
<td style="text-align:center">pre·clud·e</td>
</tr>
<tr>
<td style="text-align:center">occlude</td>
<td style="text-align:center">v. 阻塞，闭塞</td>
<td style="text-align:center"><code>o + 辅音双写 - ob - not/to</code><br />加强关闭</td>
<td style="text-align:center">oc·clud·e</td>
</tr>
<tr>
<td style="text-align:center">seclude</td>
<td style="text-align:center">v. 使隔绝</td>
<td style="text-align:center"><code>se - apart</code><br />关闭分开</td>
<td style="text-align:center">se·clud·e</td>
</tr>
<tr>
<td style="text-align:center">devout</td>
<td style="text-align:center">adj. 虔诚的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">pious</td>
<td style="text-align:center">adj. 虔诚的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">piety</td>
<td style="text-align:center">n. 虔诚</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">guise</td>
<td style="text-align:center">n. 装束；伪装</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">latent</td>
<td style="text-align:center">adj. 潜在的，隐藏的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">latency</td>
<td style="text-align:center">n. 潜在</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">conceal</td>
<td style="text-align:center">v. 隐藏</td>
<td style="text-align:center"><code>con - to</code><br />seal (s → c)</td>
<td style="text-align:center">con·seal</td>
</tr>
<tr>
<td style="text-align:center">covert</td>
<td style="text-align:center">adj. 隐蔽的；秘密的</td>
<td style="text-align:center">要cover起来隐蔽<br />或是来自overt，<code>c - 包起来</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">overt</td>
<td style="text-align:center">adj. 明显的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">pawn</td>
<td style="text-align:center">v. 典当，抵押</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">redemption</td>
<td style="text-align:center">n. 赎回</td>
<td style="text-align:center"><code>red - re - back</code><br /><code>em/empt - to take</code><br />买回来</td>
<td style="text-align:center">red·empt·ion</td>
</tr>
<tr>
<td style="text-align:center">redeem</td>
<td style="text-align:center">v. 赎回</td>
<td style="text-align:center">同上</td>
<td style="text-align:center">red·eem</td>
</tr>
<tr>
<td style="text-align:center">preemption</td>
<td style="text-align:center">n. 优先购买；抢先占有</td>
<td style="text-align:center">提前拿走</td>
<td style="text-align:center">pre·empt·ion</td>
</tr>
<tr>
<td style="text-align:center">exempt</td>
<td style="text-align:center">adj. 免除的，豁免的</td>
<td style="text-align:center">拿出来<br />exempt from</td>
<td style="text-align:center">ex·empt</td>
</tr>
<tr>
<td style="text-align:center">quake</td>
<td style="text-align:center">v. 震动；战栗</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">shudder</td>
<td style="text-align:center">v. 战栗</td>
<td style="text-align:center">肩膀在抖<br />shudder at</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">quaver</td>
<td style="text-align:center">v. 颤抖</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">shiver</td>
<td style="text-align:center">n./v. 颤抖，哆嗦</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">salvage</td>
<td style="text-align:center">n. (海上的)营救</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">recourse</td>
<td style="text-align:center">n. 求救</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sequel</td>
<td style="text-align:center">n. 继续；结果</td>
<td style="text-align:center"><code>sequ/secu - follow(consequence)</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">obsequious</td>
<td style="text-align:center">adj. 谄媚的</td>
<td style="text-align:center"><code>ob - to</code><br />一直跟随的跟屁虫</td>
<td style="text-align:center">ob·sequ·ious</td>
</tr>
<tr>
<td style="text-align:center">consecutive</td>
<td style="text-align:center">adj. 连续的</td>
<td style="text-align:center">一个接一个，跟在一起</td>
<td style="text-align:center">con·secu·tive</td>
</tr>
<tr>
<td style="text-align:center">persecute</td>
<td style="text-align:center">v. 迫害</td>
<td style="text-align:center">一直跟着</td>
<td style="text-align:center">per·secu·te</td>
</tr>
<tr>
<td style="text-align:center">ensue</td>
<td style="text-align:center">v. 随之发生</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">virtual</td>
<td style="text-align:center">adj. 实际上的；虚拟的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">wizard</td>
<td style="text-align:center">n. 男巫；奇才</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">admonish</td>
<td style="text-align:center">v. 警告</td>
<td style="text-align:center"><code>moni/monit - warn</code></td>
<td style="text-align:center">ad·moni·(i)sh</td>
</tr>
<tr>
<td style="text-align:center">premonition</td>
<td style="text-align:center">v. 预感</td>
<td style="text-align:center">提前警告</td>
<td style="text-align:center">pre·monit·ion</td>
</tr>
<tr>
<td style="text-align:center">premonish</td>
<td style="text-align:center">v. 预先警告</td>
<td style="text-align:center">同上</td>
<td style="text-align:center">pre·moni·(i)sh</td>
</tr>
<tr>
<td style="text-align:center">bide</td>
<td style="text-align:center">v. 等待</td>
<td style="text-align:center">bide your time<br />等待良机</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">designate</td>
<td style="text-align:center">v. 指示；任命</td>
<td style="text-align:center"><code>sign - mark</code><br />向下标记任务</td>
<td style="text-align:center">de·dign·ate</td>
</tr>
<tr>
<td style="text-align:center">consign</td>
<td style="text-align:center">v. 委托，寄存</td>
<td style="text-align:center">把东西放在一边并标记起来</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">signify</td>
<td style="text-align:center">v. 表示</td>
<td style="text-align:center">标记任务</td>
<td style="text-align:center">sign·ify</td>
</tr>
<tr>
<td style="text-align:center">appoint</td>
<td style="text-align:center">v. 任命</td>
<td style="text-align:center">指派去某地当官</td>
<td style="text-align:center">ap·point</td>
</tr>
<tr>
<td style="text-align:center">fend</td>
<td style="text-align:center">v. 抵挡</td>
<td style="text-align:center">fend for oneself</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">hardy</td>
<td style="text-align:center">adj. 强壮的；耐寒的</td>
<td style="text-align:center">命很hard</td>
<td style="text-align:center">hard·y</td>
</tr>
<tr>
<td style="text-align:center">robust</td>
<td style="text-align:center">adj. 健壮的</td>
<td style="text-align:center">和robot一样健壮</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sturdy</td>
<td style="text-align:center">adj. 健壮的</td>
<td style="text-align:center">身体很steady</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">hale</td>
<td style="text-align:center">adj. 矍铄的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">limber</td>
<td style="text-align:center">v. 灵活，柔软<br />adj. 灵活的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">limb</td>
<td style="text-align:center">n. 四肢</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">supple</td>
<td style="text-align:center">adj. 柔软的</td>
<td style="text-align:center">在supple的椅子上have supper</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">lithe</td>
<td style="text-align:center">adj. 灵巧的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">pliant</td>
<td style="text-align:center">adj. 柔软的</td>
<td style="text-align:center"><code>ple - fold</code><br />很容易就弯曲身体</td>
<td style="text-align:center">pli·ant</td>
</tr>
<tr>
<td style="text-align:center">agile</td>
<td style="text-align:center">adj. 敏捷的，灵巧的</td>
<td style="text-align:center"><code>ag - act</code><br />易于做，做得快，敏捷</td>
<td style="text-align:center">ag·ile</td>
</tr>
<tr>
<td style="text-align:center">philanthropy</td>
<td style="text-align:center">n. 慈善，博爱</td>
<td style="text-align:center"><code>phile - love</code><br /><code>antrop - people</code><br />爱人，做慈善</td>
<td style="text-align:center">phil·anthrop·y</td>
</tr>
<tr>
<td style="text-align:center">bibliophile</td>
<td style="text-align:center">n. 爱书的人</td>
<td style="text-align:center"><code>bible - book</code></td>
<td style="text-align:center">bibli·o·phile</td>
</tr>
<tr>
<td style="text-align:center">zoophilous</td>
<td style="text-align:center">adj. 爱动物的</td>
<td style="text-align:center"></td>
<td style="text-align:center">zoo·phil·ous</td>
</tr>
<tr>
<td style="text-align:center">anthropology</td>
<td style="text-align:center">n. 人类学</td>
<td style="text-align:center"></td>
<td style="text-align:center">anthrop·ology</td>
</tr>
<tr>
<td style="text-align:center">misanthrope</td>
<td style="text-align:center">n. 厌世者，愤世嫉俗者</td>
<td style="text-align:center">不喜欢人</td>
<td style="text-align:center">mis·anthrope</td>
</tr>
<tr>
<td style="text-align:center">fraternity</td>
<td style="text-align:center">n. 兄弟情；博爱</td>
<td style="text-align:center"><code>fratern - brother</code></td>
<td style="text-align:center">fratern·ity</td>
</tr>
<tr>
<td style="text-align:center">recollect</td>
<td style="text-align:center">v. 回忆</td>
<td style="text-align:center">重新拾起记忆</td>
<td style="text-align:center">re·collect</td>
</tr>
<tr>
<td style="text-align:center">reminisce</td>
<td style="text-align:center">v. 回忆</td>
<td style="text-align:center"><code>mini - mind</code><br />向后思考</td>
<td style="text-align:center">re·mini·sce</td>
</tr>
<tr>
<td style="text-align:center">reminiscence</td>
<td style="text-align:center">n. 回忆</td>
<td style="text-align:center">来自reminisce</td>
<td style="text-align:center">reminisc·ence</td>
</tr>
<tr>
<td style="text-align:center">smite</td>
<td style="text-align:center">v. 打击；影响</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">testimony</td>
<td style="text-align:center">n. 证词；口供；证实</td>
<td style="text-align:center"><code>test - 证据</code></td>
<td style="text-align:center">test·imony</td>
</tr>
<tr>
<td style="text-align:center">testmonial</td>
<td style="text-align:center">n. 证明书；推荐信</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">detest</td>
<td style="text-align:center">v. 憎恶</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">attest</td>
<td style="text-align:center">v. 证明</td>
<td style="text-align:center"></td>
<td style="text-align:center">at·test</td>
</tr>
<tr>
<td style="text-align:center">testify</td>
<td style="text-align:center">v. 证明</td>
<td style="text-align:center"></td>
<td style="text-align:center">test·ify</td>
</tr>
<tr>
<td style="text-align:center">blend</td>
<td style="text-align:center">v. 混杂；混合</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">mingle</td>
<td style="text-align:center">v. 混合</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">coalesce</td>
<td style="text-align:center">v. 合并，联合</td>
<td style="text-align:center"><code>co - together</code><br /><code>al - all</code><br />都合并到一起</td>
<td style="text-align:center">co·al·esce</td>
</tr>
<tr>
<td style="text-align:center">amalgamate</td>
<td style="text-align:center">v. 合并</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">carnivorous</td>
<td style="text-align:center">adj. 食肉的</td>
<td style="text-align:center"><code>carn - flesh</code><br /><code>vor - to eat</code></td>
<td style="text-align:center">carn·i·vor·ous</td>
</tr>
<tr>
<td style="text-align:center">carnivore</td>
<td style="text-align:center">n. 食肉动物</td>
<td style="text-align:center"></td>
<td style="text-align:center">carn·i·vor·e</td>
</tr>
<tr>
<td style="text-align:center">herbivore</td>
<td style="text-align:center">n. 食草动物</td>
<td style="text-align:center"><code>herb - 草</code></td>
<td style="text-align:center">herb·i·vor·e</td>
</tr>
<tr>
<td style="text-align:center">omnivore</td>
<td style="text-align:center">n. 杂食动物</td>
<td style="text-align:center"><code>omni - all</code></td>
<td style="text-align:center">omni·vor·e</td>
</tr>
<tr>
<td style="text-align:center">carnival</td>
<td style="text-align:center">n. 狂欢节</td>
<td style="text-align:center">carn + festival<br />吃肉的节日</td>
<td style="text-align:center">carn·ival</td>
</tr>
<tr>
<td style="text-align:center">carcass</td>
<td style="text-align:center">n. 尸体</td>
<td style="text-align:center">ass - 驴<br />驴肉，尸体</td>
<td style="text-align:center">carc·ass</td>
</tr>
<tr>
<td style="text-align:center">carnage</td>
<td style="text-align:center">n. 大屠杀</td>
<td style="text-align:center"><code>age - 集合名词后缀</code><br />大量的肉(尸体)，大屠杀</td>
<td style="text-align:center">carn·age</td>
</tr>
<tr>
<td style="text-align:center">carnal</td>
<td style="text-align:center">adj. 肉体的，肉欲的</td>
<td style="text-align:center"></td>
<td style="text-align:center">carn·al</td>
</tr>
<tr>
<td style="text-align:center">reincarnate</td>
<td style="text-align:center">v. 使转世化身</td>
<td style="text-align:center">再次进入肉身</td>
<td style="text-align:center">re·in·carn·ate</td>
</tr>
<tr>
<td style="text-align:center">devour</td>
<td style="text-align:center">v. 吞噬，狼吞虎咽</td>
<td style="text-align:center"><code>de - to</code><br />o → ou</td>
<td style="text-align:center">de·vour</td>
</tr>
<tr>
<td style="text-align:center">voracious</td>
<td style="text-align:center">adj. 贪婪的，贪吃的</td>
<td style="text-align:center">吃得多的</td>
<td style="text-align:center">vor·acious</td>
</tr>
<tr>
<td style="text-align:center">denizen</td>
<td style="text-align:center">n. 居民</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">inhabitant</td>
<td style="text-align:center">n. 居住者</td>
<td style="text-align:center"></td>
<td style="text-align:center">inhabit·ant</td>
</tr>
<tr>
<td style="text-align:center">resident</td>
<td style="text-align:center">n. 居住者</td>
<td style="text-align:center"></td>
<td style="text-align:center">reside·(e)nt</td>
</tr>
<tr>
<td style="text-align:center">dweller</td>
<td style="text-align:center">n. 居住者</td>
<td style="text-align:center"></td>
<td style="text-align:center">dwell·er</td>
</tr>
<tr>
<td style="text-align:center">occupant</td>
<td style="text-align:center">n. 居住者</td>
<td style="text-align:center">占领的人</td>
<td style="text-align:center">occup·ant</td>
</tr>
<tr>
<td style="text-align:center">frenzy</td>
<td style="text-align:center">n. 暴怒；狂乱</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">frantic</td>
<td style="text-align:center">adj. (因恐惧或悲伤)疯狂的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">frenetic</td>
<td style="text-align:center">adj. 发狂的；狂热的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ferment</td>
<td style="text-align:center">n./v. 兴奋；发酵</td>
<td style="text-align:center"><code>fer - ferv - boil</code><br />心情腾腾</td>
<td style="text-align:center">fer·ment</td>
</tr>
<tr>
<td style="text-align:center">delirium</td>
<td style="text-align:center">n. 精神错乱；狂喜</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">hysteria</td>
<td style="text-align:center">n. 歇斯底里</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">incapacitate</td>
<td style="text-align:center">v. 使不能；使残疾</td>
<td style="text-align:center"><code>cap - to catch</code><br />抓不住</td>
<td style="text-align:center">in·cap·acitate</td>
</tr>
<tr>
<td style="text-align:center">captious</td>
<td style="text-align:center">adj. 吹毛求疵的</td>
<td style="text-align:center">抓毛病</td>
<td style="text-align:center">cap·tious</td>
</tr>
<tr>
<td style="text-align:center">captivate</td>
<td style="text-align:center">v. 使着迷</td>
<td style="text-align:center">抓住了心</td>
<td style="text-align:center">cap·tiv·ate</td>
</tr>
<tr>
<td style="text-align:center">cavil</td>
<td style="text-align:center">v. 吹毛求疵</td>
<td style="text-align:center">抓住了ill</td>
<td style="text-align:center">cav·il</td>
</tr>
<tr>
<td style="text-align:center">massacre</td>
<td style="text-align:center">n. 大屠杀</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">holocaust</td>
<td style="text-align:center">n. 大屠杀</td>
<td style="text-align:center">whole → holo<br /><code>caust - burn</code></td>
<td style="text-align:center">holo·caust</td>
</tr>
<tr>
<td style="text-align:center">decimate</td>
<td style="text-align:center">v. 大批杀害</td>
<td style="text-align:center"><code>dec - 10</code></td>
<td style="text-align:center">dec·imate</td>
</tr>
<tr>
<td style="text-align:center">meditate</td>
<td style="text-align:center">v. 沉思</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">muse</td>
<td style="text-align:center">v. 沉思</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">brood</td>
<td style="text-align:center">v. 冥想；孵化</td>
<td style="text-align:center">breed</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ruminate</td>
<td style="text-align:center">v. 仔细考虑</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">conundrum</td>
<td style="text-align:center">n. 迷，复杂的难题</td>
<td style="text-align:center">一起被蒙在鼓里</td>
<td style="text-align:center">con·un·drum</td>
</tr>
<tr>
<td style="text-align:center">enigma</td>
<td style="text-align:center">n. 迷，令人费解的事物</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">enigmatic</td>
<td style="text-align:center">adj. 迷的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">spank</td>
<td style="text-align:center">v. 打屁股</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">smack</td>
<td style="text-align:center">v. (用手掌)打</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">totter</td>
<td style="text-align:center">v. 蹒跚</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">toddler</td>
<td style="text-align:center">n. 学步的婴儿</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">falter</td>
<td style="text-align:center">v. 蹒跚</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>英语</category>
        <category>曲根万词班</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>单词</tag>
      </tags>
  </entry>
  <entry>
    <title>day 09</title>
    <url>/2019/11/23/day-09/</url>
    <content><![CDATA[<style>
table th:first-of-type {
    width: 150px;
}
</style>


<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">单词</th>
<th style="text-align:center">释义</th>
<th style="text-align:center">备注</th>
<th style="text-align:center">分解</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">appease</td>
<td style="text-align:center">v. 使平静，安静</td>
<td style="text-align:center">peace(c → s)</td>
<td style="text-align:center">ap·pease</td>
</tr>
<tr>
<td style="text-align:center">tranquilize</td>
<td style="text-align:center">v. 使镇定</td>
<td style="text-align:center">trans + quiet</td>
<td style="text-align:center">tran·qui·lize</td>
</tr>
<tr>
<td style="text-align:center">placate</td>
<td style="text-align:center">v. 使平静</td>
<td style="text-align:center"><code>plac - please</code><br />使满意，平静</td>
<td style="text-align:center">plac·ate</td>
</tr>
<tr>
<td style="text-align:center">pacify</td>
<td style="text-align:center">v. 使平静</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">assuage</td>
<td style="text-align:center">v. 缓解</td>
<td style="text-align:center">sweet → suage<br />用愉快的东西缓解</td>
<td style="text-align:center">as·suage</td>
</tr>
<tr>
<td style="text-align:center">soothe</td>
<td style="text-align:center">v. 安慰；缓解</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">seethe</td>
<td style="text-align:center">v. 沸腾；激起</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">conciliate</td>
<td style="text-align:center">v. 安慰，安抚</td>
<td style="text-align:center"><code>cil - call</code><br />一起说点话安慰</td>
<td style="text-align:center">con·cil·iate</td>
</tr>
<tr>
<td style="text-align:center">mollify</td>
<td style="text-align:center">v. 使平静；安抚</td>
<td style="text-align:center"><code>moll - soft</code></td>
<td style="text-align:center">moll·ify</td>
</tr>
<tr>
<td style="text-align:center">propitiate</td>
<td style="text-align:center">v. 安慰，劝解</td>
<td style="text-align:center">让可怜(pity → piti)人向前看</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gape</td>
<td style="text-align:center">v. 张嘴注视</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gaze</td>
<td style="text-align:center">v. 凝视</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">peep</td>
<td style="text-align:center">v. 偷窥</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">peek</td>
<td style="text-align:center">v. 偷窥</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">peer</td>
<td style="text-align:center">n. 凝视；同龄人</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">peerless</td>
<td style="text-align:center">adj. 无可匹敌的</td>
<td style="text-align:center">没有同龄人</td>
<td style="text-align:center">peer·less</td>
</tr>
<tr>
<td style="text-align:center">duration</td>
<td style="text-align:center">n. 持续时间</td>
<td style="text-align:center"><code>dur - to last(during)</code></td>
<td style="text-align:center">dur·ation</td>
</tr>
<tr>
<td style="text-align:center">durability</td>
<td style="text-align:center">n. 持久性，耐用性</td>
<td style="text-align:center">持续的能力</td>
<td style="text-align:center">dur·ability</td>
</tr>
<tr>
<td style="text-align:center">obdurate</td>
<td style="text-align:center">adj. 固执的</td>
<td style="text-align:center">思想持续久，不易变</td>
<td style="text-align:center">ob·dur·ate</td>
</tr>
<tr>
<td style="text-align:center">stubborn</td>
<td style="text-align:center">adj. 固执的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">obstinate</td>
<td style="text-align:center">adj. 固执的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">indurate</td>
<td style="text-align:center">v. 使坚硬，坚固</td>
<td style="text-align:center">东西可以持续很久不坏不变形</td>
<td style="text-align:center">in·dur·ate</td>
</tr>
<tr>
<td style="text-align:center">spell</td>
<td style="text-align:center">n. 一段时间</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">entreat</td>
<td style="text-align:center">v. 恳求</td>
<td style="text-align:center">有不情之请先请顿饭吃(treat)</td>
<td style="text-align:center">en·treat</td>
</tr>
<tr>
<td style="text-align:center">beseech</td>
<td style="text-align:center">v. 恳求</td>
<td style="text-align:center">seek (k → ch)<br />寻求</td>
<td style="text-align:center">be·seech</td>
</tr>
<tr>
<td style="text-align:center">petition</td>
<td style="text-align:center">n./v. 请求；请愿</td>
<td style="text-align:center">像宠物一样求</td>
<td style="text-align:center">pet·ition</td>
</tr>
<tr>
<td style="text-align:center">plead</td>
<td style="text-align:center">v. 恳求</td>
<td style="text-align:center">来自please (s → d)<br />过去分词、过去式：pleaded/pled</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">muffle</td>
<td style="text-align:center">v. 围住；使声音低沉</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">wrap</td>
<td style="text-align:center">v. 裹住，围住</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">prank</td>
<td style="text-align:center">n. 恶作剧</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">mischief</td>
<td style="text-align:center">n. 恶作剧</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">stroll</td>
<td style="text-align:center">n./v. 细流；流淌</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ooze</td>
<td style="text-align:center">v. 渗出，流出<br />n. 泥浆</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">exude</td>
<td style="text-align:center">v. 流出</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">stigma</td>
<td style="text-align:center">n. 耻辱</td>
<td style="text-align:center"><code>stig/stig - sting</code><br />钉在耻辱柱上</td>
<td style="text-align:center">stig·ma</td>
</tr>
<tr>
<td style="text-align:center">instigate</td>
<td style="text-align:center">v. 煽动</td>
<td style="text-align:center">去刺激，煽动</td>
<td style="text-align:center">in·stig·ate</td>
</tr>
<tr>
<td style="text-align:center">dumbfound</td>
<td style="text-align:center">v. 使惊呆</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">distort</td>
<td style="text-align:center">v. 扭曲</td>
<td style="text-align:center"><code>tort - twist</code></td>
<td style="text-align:center">dis·tort</td>
</tr>
<tr>
<td style="text-align:center">contort</td>
<td style="text-align:center">v. 扭曲，曲解</td>
<td style="text-align:center">一起扭曲</td>
<td style="text-align:center">con·tort</td>
</tr>
<tr>
<td style="text-align:center">extort</td>
<td style="text-align:center">v. 敲诈，勒索</td>
<td style="text-align:center">把钱扭走</td>
<td style="text-align:center">ex·tort</td>
</tr>
<tr>
<td style="text-align:center">retort</td>
<td style="text-align:center">v. 反驳，回嘴</td>
<td style="text-align:center">反扭一把</td>
<td style="text-align:center">re·tort</td>
</tr>
<tr>
<td style="text-align:center">torment</td>
<td style="text-align:center">n./v. 折磨，苦恼</td>
<td style="text-align:center"></td>
<td style="text-align:center">tor·ment</td>
</tr>
<tr>
<td style="text-align:center">torturous</td>
<td style="text-align:center">adj. 折磨的</td>
<td style="text-align:center"></td>
<td style="text-align:center">tort·tur·ous</td>
</tr>
<tr>
<td style="text-align:center">tortuous</td>
<td style="text-align:center">adj. 曲折的，迂回的</td>
<td style="text-align:center">被扭弯</td>
<td style="text-align:center">tort·uous</td>
</tr>
<tr>
<td style="text-align:center">falsify</td>
<td style="text-align:center">v. 篡改</td>
<td style="text-align:center">改成错的</td>
<td style="text-align:center">fals·ify</td>
</tr>
<tr>
<td style="text-align:center">misrepresent</td>
<td style="text-align:center">v. 歪曲</td>
<td style="text-align:center">代表了错误的东西</td>
<td style="text-align:center">mis·represent</td>
</tr>
<tr>
<td style="text-align:center">clan</td>
<td style="text-align:center">n. 宗族，部落</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">clandestine</td>
<td style="text-align:center">adj. 秘密的</td>
<td style="text-align:center">部落的命运没人可以知道</td>
<td style="text-align:center">clan·destine</td>
</tr>
<tr>
<td style="text-align:center">tribe</td>
<td style="text-align:center">adj. 部落的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">commit</td>
<td style="text-align:center">v. 委托</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">committee</td>
<td style="text-align:center">n. 委员会</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">glutton</td>
<td style="text-align:center">n. 贪吃的人</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gluttony</td>
<td style="text-align:center">n. 贪吃</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sloth</td>
<td style="text-align:center">n. 懒惰</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">wrath</td>
<td style="text-align:center">n. 暴怒</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">lust</td>
<td style="text-align:center">n. 色欲</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gormandizer</td>
<td style="text-align:center">n. 狼吞虎咽的人</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">valiant</td>
<td style="text-align:center">adj. 英勇的</td>
<td style="text-align:center"><code>val - strong</code></td>
<td style="text-align:center">val·iant</td>
</tr>
<tr>
<td style="text-align:center">valor</td>
<td style="text-align:center">n. 英勇</td>
<td style="text-align:center"></td>
<td style="text-align:center">val·or</td>
</tr>
<tr>
<td style="text-align:center">convalesce</td>
<td style="text-align:center">v. 康复，恢复</td>
<td style="text-align:center">变强壮</td>
<td style="text-align:center">con·val·esce</td>
</tr>
<tr>
<td style="text-align:center">overtone</td>
<td style="text-align:center">n. 寓意，弦外之音</td>
<td style="text-align:center"><code>over - more than/above/turn</code><br />tune (u → o)<br />音调之外的东西</td>
<td style="text-align:center">over·tone</td>
</tr>
<tr>
<td style="text-align:center">overbearing</td>
<td style="text-align:center">adj. 傲慢的</td>
<td style="text-align:center">比熊还牛逼，傲慢</td>
<td style="text-align:center">over·bear·ing</td>
</tr>
<tr>
<td style="text-align:center">overhaul</td>
<td style="text-align:center">v. 大修，彻底检查</td>
<td style="text-align:center">拉翻过来修</td>
<td style="text-align:center">over·haul</td>
</tr>
<tr>
<td style="text-align:center">overthrow</td>
<td style="text-align:center">v. 推翻</td>
<td style="text-align:center">翻过来扔掉</td>
<td style="text-align:center">over·throw</td>
</tr>
<tr>
<td style="text-align:center">overhear</td>
<td style="text-align:center">v. 偷听；偶然听到</td>
<td style="text-align:center">比应该听到的多听到一点</td>
<td style="text-align:center">over·hear</td>
</tr>
<tr>
<td style="text-align:center">overture</td>
<td style="text-align:center">n. 序曲</td>
<td style="text-align:center">tune (r → n)<br />正曲之前的曲目</td>
<td style="text-align:center">over·ture</td>
</tr>
<tr>
<td style="text-align:center">oversee</td>
<td style="text-align:center">v. 监督</td>
<td style="text-align:center">站在上帝视角看</td>
<td style="text-align:center">over·see</td>
</tr>
<tr>
<td style="text-align:center">overwrought</td>
<td style="text-align:center">adj. 过度紧张的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">probe</td>
<td style="text-align:center">v. 探查；查明</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">probation</td>
<td style="text-align:center">n. 试用期</td>
<td style="text-align:center">probe duration</td>
<td style="text-align:center">prob·ation</td>
</tr>
<tr>
<td style="text-align:center">probity</td>
<td style="text-align:center">n. 正直</td>
<td style="text-align:center">有人probe的时候通常会表现地正直一点</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">integrity</td>
<td style="text-align:center">n. 正直</td>
<td style="text-align:center">integer</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">deviousness</td>
<td style="text-align:center">n. 迂回</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">reprobate</td>
<td style="text-align:center">n. 道德败坏者<br />v. 谴责</td>
<td style="text-align:center">不正直的人</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">statute</td>
<td style="text-align:center">n. 法规</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">status</td>
<td style="text-align:center">n. 地位</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">bill</td>
<td style="text-align:center">n. 法案</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">writhe</td>
<td style="text-align:center">v. 扭动</td>
<td style="text-align:center"><code>wr - 扭曲</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">wry</td>
<td style="text-align:center">adj. 扭曲的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">wretched</td>
<td style="text-align:center">adj. 极差的；沮丧的；令人难受的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">wriggle</td>
<td style="text-align:center">v. 蠕动，扭动</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">behold</td>
<td style="text-align:center">v. 看见</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">uphold</td>
<td style="text-align:center">v. 支持</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">withhold</td>
<td style="text-align:center">v. 扣留，抑制</td>
<td style="text-align:center"><code>with - back</code><br />hold back</td>
<td style="text-align:center">with·hold</td>
</tr>
<tr>
<td style="text-align:center">condescend</td>
<td style="text-align:center">v. 屈尊；降格相从</td>
<td style="text-align:center">一起下降</td>
<td style="text-align:center">con·descend</td>
</tr>
<tr>
<td style="text-align:center">deign</td>
<td style="text-align:center">v. 屈尊</td>
<td style="text-align:center"><code>ig - ag - act</code><br />向下做</td>
<td style="text-align:center">de·ig·n</td>
</tr>
<tr>
<td style="text-align:center">dike</td>
<td style="text-align:center">n. 堤；沟</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ditch</td>
<td style="text-align:center">n. 沟渠</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">flippancy</td>
<td style="text-align:center">n. 轻率，无力</td>
<td style="text-align:center"><code>fl - fly(flip)</code><br />飘了</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">flit</td>
<td style="text-align:center">v. 掠过</td>
<td style="text-align:center">鸟飞过去</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">flock</td>
<td style="text-align:center">n. 鸟群</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">flout</td>
<td style="text-align:center">v. 蔑视</td>
<td style="text-align:center">视线直接飞过去不注意</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">flinch</td>
<td style="text-align:center">v. 畏缩，害怕</td>
<td style="text-align:center"><code>fl - fold/bend</code><br />下得蜷缩起来</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">flag</td>
<td style="text-align:center">v. 衰弱，减弱</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">flaccid</td>
<td style="text-align:center">adj. 不结实的，松弛的</td>
<td style="text-align:center">松弛的绳子盘成圈</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">grisly</td>
<td style="text-align:center">adj. 可怕的，狰狞的</td>
<td style="text-align:center">gray (ay → i)<br />脸色吓得灰白</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gruesome</td>
<td style="text-align:center">adj. 可怕的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">grim</td>
<td style="text-align:center">adj. 阴森的，可怕的</td>
<td style="text-align:center">狗灵</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">knave</td>
<td style="text-align:center">n. 骗子；流氓</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">rogue</td>
<td style="text-align:center">n. 流氓；小淘气</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">scoundrel</td>
<td style="text-align:center">n. 流氓</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">rascal</td>
<td style="text-align:center">n. 无赖</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">parley</td>
<td style="text-align:center">v./n. 商议；谈判</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">parliament</td>
<td style="text-align:center">n. 议会</td>
<td style="text-align:center">parley的地方</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">shred</td>
<td style="text-align:center">n. 碎片；细条</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">shredder</td>
<td style="text-align:center">n. 碎纸机</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">scrap</td>
<td style="text-align:center">n. 碎片</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">surmise</td>
<td style="text-align:center">v. 猜测；推测</td>
<td style="text-align:center"><code>mis/mit - send(tranmit)</code><br />在受到传送的消息前只能猜测</td>
<td style="text-align:center">sur·mis·e</td>
</tr>
<tr>
<td style="text-align:center">intermittent</td>
<td style="text-align:center">adj. 断断续续的</td>
<td style="text-align:center">在传输消息过程中打断让收到的消息断断续续</td>
<td style="text-align:center">inter·mit·tent</td>
</tr>
<tr>
<td style="text-align:center">premise</td>
<td style="text-align:center">n. 前提</td>
<td style="text-align:center">送到前面去</td>
<td style="text-align:center">pre·mis·e</td>
</tr>
<tr>
<td style="text-align:center">remit</td>
<td style="text-align:center">v. 汇款</td>
<td style="text-align:center">把钱送回去</td>
<td style="text-align:center">re·mit</td>
</tr>
<tr>
<td style="text-align:center">remittance</td>
<td style="text-align:center">v. 汇款</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">remission</td>
<td style="text-align:center">n. 赦免</td>
<td style="text-align:center">把量刑送回去</td>
<td style="text-align:center">re·mis·sion</td>
</tr>
<tr>
<td style="text-align:center">vicissitude</td>
<td style="text-align:center">n. 变迁，变化</td>
<td style="text-align:center"><code>itude - 抽象名词复数</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">aptitude</td>
<td style="text-align:center">n. 天赋，才能</td>
<td style="text-align:center"><code>apt - ability</code></td>
<td style="text-align:center">apt·itude</td>
</tr>
<tr>
<td style="text-align:center">ineptitude</td>
<td style="text-align:center">n. 无能</td>
<td style="text-align:center">apt (a → e)</td>
<td style="text-align:center">in·ept·itude</td>
</tr>
<tr>
<td style="text-align:center">multitude</td>
<td style="text-align:center">n. 众多，群众</td>
<td style="text-align:center"><code>multi - many</code></td>
<td style="text-align:center">multi·(i)tude</td>
</tr>
<tr>
<td style="text-align:center">solicitude</td>
<td style="text-align:center">n. 牵挂，关怀</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">solitude</td>
<td style="text-align:center">n. 孤独</td>
<td style="text-align:center">sole</td>
<td style="text-align:center">sol·itude</td>
</tr>
<tr>
<td style="text-align:center">platitude</td>
<td style="text-align:center">n. 陈词滥调</td>
<td style="text-align:center">flat (f → p)<br />一成不变的讲话</td>
<td style="text-align:center">plat·itude</td>
</tr>
<tr>
<td style="text-align:center">cliche</td>
<td style="text-align:center">n. 陈词滥调</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">warden</td>
<td style="text-align:center">n. 监护人；典狱长</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ward</td>
<td style="text-align:center">n./v. 保卫</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>英语</category>
        <category>曲根万词班</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>单词</tag>
      </tags>
  </entry>
  <entry>
    <title>day 10</title>
    <url>/2019/11/23/day-10/</url>
    <content><![CDATA[<style>
table th:first-of-type {
    width: 150px;
}
</style>


<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">单词</th>
<th style="text-align:center">释义</th>
<th style="text-align:center">备注</th>
<th style="text-align:center">分解</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">abhor</td>
<td style="text-align:center">v. 憎恶</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">abhorrent</td>
<td style="text-align:center">adj. 令人憎恶的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">loathe</td>
<td style="text-align:center">v. 憎恶</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">abominate</td>
<td style="text-align:center">v. 憎恶</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">execrate</td>
<td style="text-align:center">v. 憎恶</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">boost</td>
<td style="text-align:center">v./n. 推动；提高</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">detention</td>
<td style="text-align:center">n. 监禁；延迟</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">detention center</td>
<td style="text-align:center">(青少年犯罪的)感化院</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">delinquency</td>
<td style="text-align:center">n. 行为不良</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">juvenile delinquency</td>
<td style="text-align:center">青少年犯罪</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">impartial</td>
<td style="text-align:center">adj. 公平的</td>
<td style="text-align:center">不站任何partial的立场</td>
<td style="text-align:center">im·partial</td>
</tr>
<tr>
<td style="text-align:center">disinterested</td>
<td style="text-align:center">adj. 公平的</td>
<td style="text-align:center">不感兴趣的局外人最公平</td>
<td style="text-align:center">dis·interest·ed</td>
</tr>
<tr>
<td style="text-align:center">unbiased</td>
<td style="text-align:center">adj. 公平的</td>
<td style="text-align:center">不偏爱</td>
<td style="text-align:center">un·bias·ed</td>
</tr>
<tr>
<td style="text-align:center">slander</td>
<td style="text-align:center">v. 诽谤</td>
<td style="text-align:center">scandal<br />c → l, al → er</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">slur</td>
<td style="text-align:center">v. 诽谤</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">libel</td>
<td style="text-align:center">v./n. (书面文字的)诽谤</td>
<td style="text-align:center">label<br />a→ i</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">denigrate</td>
<td style="text-align:center">v. 诽谤</td>
<td style="text-align:center"><code>nigr - black(nigro)</code><br />向下让某人名声变黑</td>
<td style="text-align:center">de·nigr·ate</td>
</tr>
<tr>
<td style="text-align:center">vilify</td>
<td style="text-align:center">v. 诽谤</td>
<td style="text-align:center">vile</td>
<td style="text-align:center">vil·ify</td>
</tr>
<tr>
<td style="text-align:center">potable</td>
<td style="text-align:center">adj. 适于饮用的</td>
<td style="text-align:center">可以用pot喝</td>
<td style="text-align:center">pot·able</td>
</tr>
<tr>
<td style="text-align:center">subsist</td>
<td style="text-align:center">v. 存在，维持生存</td>
<td style="text-align:center"><code>sist - to stand</code><br />站在世界上，存在<br />subsist on</td>
<td style="text-align:center">sub·sist</td>
</tr>
<tr>
<td style="text-align:center">desist</td>
<td style="text-align:center">v. 停止</td>
<td style="text-align:center">不站了，停止<br />desist from</td>
<td style="text-align:center">de·sist</td>
</tr>
<tr>
<td style="text-align:center">resist</td>
<td style="text-align:center">v. 反抗</td>
<td style="text-align:center">站在对立面</td>
<td style="text-align:center">re·sist</td>
</tr>
<tr>
<td style="text-align:center">destitute</td>
<td style="text-align:center">adj. 贫穷的</td>
<td style="text-align:center"><code>stitute - to stand</code><br />站在社会底层</td>
<td style="text-align:center">de·stitute</td>
</tr>
<tr>
<td style="text-align:center">restitute</td>
<td style="text-align:center">v. 归还；恢复</td>
<td style="text-align:center">站回来</td>
<td style="text-align:center">re·stitute</td>
</tr>
<tr>
<td style="text-align:center">unruly</td>
<td style="text-align:center">adj. 难管束的，难以驾驭的，不守法的</td>
<td style="text-align:center">无法统治</td>
<td style="text-align:center">un·rul·y</td>
</tr>
<tr>
<td style="text-align:center">disobedient</td>
<td style="text-align:center">adj. 不服从的</td>
<td style="text-align:center">dis + obey</td>
<td style="text-align:center">dis·obed·ient</td>
</tr>
<tr>
<td style="text-align:center">intractable</td>
<td style="text-align:center">adj. 难控制的，难管束的</td>
<td style="text-align:center"><code>tract - to draw/attract</code><br />拉不住的</td>
<td style="text-align:center">in·tract·able</td>
</tr>
<tr>
<td style="text-align:center">rebellious</td>
<td style="text-align:center">adj. 叛逆的；难控制的</td>
<td style="text-align:center">来自rebel</td>
<td style="text-align:center">rebel·lious</td>
</tr>
<tr>
<td style="text-align:center">defiant</td>
<td style="text-align:center">adj. 违抗的</td>
<td style="text-align:center">来自defy</td>
<td style="text-align:center">defi·ant</td>
</tr>
<tr>
<td style="text-align:center">recalcitrant</td>
<td style="text-align:center">adj. 不服从的，反抗的</td>
<td style="text-align:center">against call city</td>
<td style="text-align:center">re·cal·citr·ant</td>
</tr>
<tr>
<td style="text-align:center">agitate</td>
<td style="text-align:center">v. 煽动</td>
<td style="text-align:center"><code>ag - to act</code><br /><code>it - to go</code><br />走去行动</td>
<td style="text-align:center">ag·it·ate</td>
</tr>
<tr>
<td style="text-align:center">cogitate</td>
<td style="text-align:center">v. 仔细考虑</td>
<td style="text-align:center">ag把a脱落了<br />一起行动前仔细考虑</td>
<td style="text-align:center">co·g·it·ate</td>
</tr>
<tr>
<td style="text-align:center">cogent</td>
<td style="text-align:center">adj. 有说服力的</td>
<td style="text-align:center">ag把a脱落<br />说服一起行动</td>
<td style="text-align:center">co·g·ent</td>
</tr>
<tr>
<td style="text-align:center">exigent</td>
<td style="text-align:center">adj. 紧急的，急迫的</td>
<td style="text-align:center">ag (a → i)<br />紧急出动到外面</td>
<td style="text-align:center">ex·ig·ent</td>
</tr>
<tr>
<td style="text-align:center">nimble</td>
<td style="text-align:center">adj. 敏捷的，灵活的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">adroit</td>
<td style="text-align:center">v. 灵巧的，机敏的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">deft</td>
<td style="text-align:center">adj. (动作)敏捷的，灵巧的</td>
<td style="text-align:center">expert → ept → eft<br />熟练得灵巧</td>
<td style="text-align:center">de·(e)ft</td>
</tr>
<tr>
<td style="text-align:center">caprice</td>
<td style="text-align:center">n. 反复无常；善变；心血来潮</td>
<td style="text-align:center"><code>capr - goat</code><br />山羊在吃草时会突然跳起来</td>
<td style="text-align:center">capr·ice</td>
</tr>
<tr>
<td style="text-align:center">capricious</td>
<td style="text-align:center">adj. 任性的，善变的</td>
<td style="text-align:center">来自caprice</td>
<td style="text-align:center">capric·ious</td>
</tr>
<tr>
<td style="text-align:center">caper</td>
<td style="text-align:center">v. 跳跃</td>
<td style="text-align:center">多了一个e</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">whim</td>
<td style="text-align:center">n. 一时兴起</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">whimsy</td>
<td style="text-align:center">n. 怪想法</td>
<td style="text-align:center">来自whim</td>
<td style="text-align:center">whim·sy</td>
</tr>
<tr>
<td style="text-align:center">whimsical</td>
<td style="text-align:center">adj. 奇怪的</td>
<td style="text-align:center">来自whimsy</td>
<td style="text-align:center">whims·ical</td>
</tr>
<tr>
<td style="text-align:center">disconsolate</td>
<td style="text-align:center">adj. 孤独的</td>
<td style="text-align:center">没人安慰</td>
<td style="text-align:center">dis·consol·ate</td>
</tr>
<tr>
<td style="text-align:center">jubilant</td>
<td style="text-align:center">adj. 高兴的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">jocund</td>
<td style="text-align:center">adj. 愉快的</td>
<td style="text-align:center">joke + und</td>
<td style="text-align:center">joc·und</td>
</tr>
<tr>
<td style="text-align:center">fallacy</td>
<td style="text-align:center">n. 谬论</td>
<td style="text-align:center"><code>fall - false - mistake</code><br />错误的理论</td>
<td style="text-align:center">fall·acy</td>
</tr>
<tr>
<td style="text-align:center">fallible</td>
<td style="text-align:center">adj. 易犯错的</td>
<td style="text-align:center">able (a → i)</td>
<td style="text-align:center">fall·ible</td>
</tr>
<tr>
<td style="text-align:center">infallibility</td>
<td style="text-align:center">n. 一贯正确</td>
<td style="text-align:center">不会犯错</td>
<td style="text-align:center">in·fall·ibility</td>
</tr>
<tr>
<td style="text-align:center">falsehood</td>
<td style="text-align:center">n. 虚伪；错误</td>
<td style="text-align:center"><code>hood - 表时期、性质的名词后缀</code></td>
<td style="text-align:center">false·hood</td>
</tr>
<tr>
<td style="text-align:center">default</td>
<td style="text-align:center">n./v. 未履行(责任)；拖欠债务</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ingenuous</td>
<td style="text-align:center">adj. 老实的，坦白的，天真的</td>
<td style="text-align:center"><code>gen - produce/race</code><br />本义为出身高贵的。贵族不懂人间疾苦，对生活天真</td>
<td style="text-align:center">in·genu·ous</td>
</tr>
<tr>
<td style="text-align:center">ingenious</td>
<td style="text-align:center">adj. 天才的</td>
<td style="text-align:center">出生就具有这样的天赋<br />ingenuous差在genu和geni<br /><code>我i天才，你u天真</code></td>
<td style="text-align:center">in·geni·ous</td>
</tr>
<tr>
<td style="text-align:center">congenial</td>
<td style="text-align:center">adj. 意气相投的</td>
<td style="text-align:center">一起产生相同的情感</td>
<td style="text-align:center">con·geni·al</td>
</tr>
<tr>
<td style="text-align:center">congenital</td>
<td style="text-align:center">adj. 天生的</td>
<td style="text-align:center"><code>con - to</code><br />生下来就有的</td>
<td style="text-align:center">con·geni·tal</td>
</tr>
<tr>
<td style="text-align:center">homogeneous</td>
<td style="text-align:center">adj. 同种类的</td>
<td style="text-align:center"><code>homo - same</code></td>
<td style="text-align:center">homo·gene·ous</td>
</tr>
<tr>
<td style="text-align:center">heterogeneous</td>
<td style="text-align:center">adj. 不同种类的</td>
<td style="text-align:center"><code>hetero - different</code></td>
<td style="text-align:center">hetero·gene·ous</td>
</tr>
<tr>
<td style="text-align:center">engender</td>
<td style="text-align:center">v. 产生</td>
<td style="text-align:center"></td>
<td style="text-align:center">en·gen·der</td>
</tr>
<tr>
<td style="text-align:center">degenerate</td>
<td style="text-align:center">v. 退化；堕落</td>
<td style="text-align:center">向下生成</td>
<td style="text-align:center">de·gen·er·ate</td>
</tr>
<tr>
<td style="text-align:center">mirage</td>
<td style="text-align:center">n. 海市蜃楼，幻想</td>
<td style="text-align:center"><code>mir - wonder(miracle)</code></td>
<td style="text-align:center">mir·age</td>
</tr>
<tr>
<td style="text-align:center">illusion</td>
<td style="text-align:center">n. 幻觉</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">delusion</td>
<td style="text-align:center">n. 幻觉</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">hallucination</td>
<td style="text-align:center">n. 幻觉</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sheer</td>
<td style="text-align:center">adj. 透明的；垂直的；纯粹的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">opaque</td>
<td style="text-align:center">adj. 不透明的</td>
<td style="text-align:center"><code>op - ob - against</code><br /><code>aque - water</code><br />水是透明的</td>
<td style="text-align:center">op·aque</td>
</tr>
<tr>
<td style="text-align:center">aqueduct</td>
<td style="text-align:center">n. 水渠</td>
<td style="text-align:center">引导水的</td>
<td style="text-align:center">aque·duct</td>
</tr>
<tr>
<td style="text-align:center">aquatic</td>
<td style="text-align:center">adj. 水生的，水栖</td>
<td style="text-align:center"><code>tic - 与……相关的</code></td>
<td style="text-align:center">aqua·tic</td>
</tr>
<tr>
<td style="text-align:center">aquifer</td>
<td style="text-align:center">n. 含水层</td>
<td style="text-align:center"><code>fer - to carry</code></td>
<td style="text-align:center">aqui·fer</td>
</tr>
<tr>
<td style="text-align:center">succinct</td>
<td style="text-align:center">adj. 简洁的，简明的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">concise</td>
<td style="text-align:center">adj. 简洁的</td>
<td style="text-align:center"><code>sic - cut(scissors)</code><br />把不必要的剪掉</td>
<td style="text-align:center">con·cise</td>
</tr>
<tr>
<td style="text-align:center">terse</td>
<td style="text-align:center">adj. (文字)简洁的</td>
<td style="text-align:center">来自text<br />x → s</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">pithy</td>
<td style="text-align:center">adj. 简洁的</td>
<td style="text-align:center">来自pith</td>
<td style="text-align:center">pith·y</td>
</tr>
<tr>
<td style="text-align:center">laconic</td>
<td style="text-align:center">adj. 简洁的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">curt</td>
<td style="text-align:center">adj. 简洁的</td>
<td style="text-align:center">cut</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">verbose</td>
<td style="text-align:center">adj. 累赘的，冗长的</td>
<td style="text-align:center"><code>ose - 多</code><br />话很多的</td>
<td style="text-align:center">verb·ose</td>
</tr>
<tr>
<td style="text-align:center">prolix</td>
<td style="text-align:center">adj. 啰嗦的</td>
<td style="text-align:center"><code>lix - liquid</code><br />口若悬河源源不断向前流</td>
<td style="text-align:center">pro·lix</td>
</tr>
<tr>
<td style="text-align:center">garrulous</td>
<td style="text-align:center">adj. 冗长的，啰嗦的</td>
<td style="text-align:center">carry + rule → garrul<br />如规则般冗长</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">garrulity</td>
<td style="text-align:center">n. 饶舌，多嘴</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">loquacious</td>
<td style="text-align:center">adj. 话多的</td>
<td style="text-align:center"><code>loqu - log - to speak</code></td>
<td style="text-align:center">loqu·acious</td>
</tr>
<tr>
<td style="text-align:center">diffuse</td>
<td style="text-align:center">adj. 冗长的，累赘的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">tedious</td>
<td style="text-align:center">adj. 冗长乏味的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">arable</td>
<td style="text-align:center">adj. 适于耕种的</td>
<td style="text-align:center"><code>ara - agri - 农业</code></td>
<td style="text-align:center">ara·ble</td>
</tr>
<tr>
<td style="text-align:center">sterile</td>
<td style="text-align:center">adj. 贫瘠的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">barren</td>
<td style="text-align:center">adj. 贫瘠的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">complacent</td>
<td style="text-align:center">adj. 自满的</td>
<td style="text-align:center"><code>plac - please满意</code></td>
<td style="text-align:center">com·plac·ent</td>
</tr>
<tr>
<td style="text-align:center">complaisant</td>
<td style="text-align:center">adj. 顺从的，讨好的</td>
<td style="text-align:center">让别人满意</td>
<td style="text-align:center">com·plais·ant</td>
</tr>
<tr>
<td style="text-align:center">placate</td>
<td style="text-align:center">v. 安慰；使平静</td>
<td style="text-align:center"><code>plac - to calm/soothe</code></td>
<td style="text-align:center">plac·ate</td>
</tr>
<tr>
<td style="text-align:center">placebo</td>
<td style="text-align:center">n. 安慰剂</td>
<td style="text-align:center"></td>
<td style="text-align:center">plac·ebo</td>
</tr>
<tr>
<td style="text-align:center">placid</td>
<td style="text-align:center">adj. 平静的</td>
<td style="text-align:center"><code>id - 如……的</code></td>
<td style="text-align:center">plac·id</td>
</tr>
<tr>
<td style="text-align:center">dismember</td>
<td style="text-align:center">v. 肢解；分裂</td>
<td style="text-align:center"><code>dis - apart</code></td>
<td style="text-align:center">dis·member</td>
</tr>
<tr>
<td style="text-align:center">disintegrate</td>
<td style="text-align:center">v. 解体</td>
<td style="text-align:center">来自integrate</td>
<td style="text-align:center">dis·integrate</td>
</tr>
<tr>
<td style="text-align:center">amputate</td>
<td style="text-align:center">v. 截肢</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">glee</td>
<td style="text-align:center">n. 高兴</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gaiety</td>
<td style="text-align:center">n. 高兴</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">mirth</td>
<td style="text-align:center">n. 高兴</td>
<td style="text-align:center">birth</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">bliss</td>
<td style="text-align:center">n. 极乐</td>
<td style="text-align:center">bless bliss<br />保佑有极乐</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">elation</td>
<td style="text-align:center">n. 得意洋洋</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">euphoria</td>
<td style="text-align:center">n. 高兴</td>
<td style="text-align:center"><code>eu - well</code><br /><code>phor - fer - bring(infer)</code><br />带来了好消息</td>
<td style="text-align:center">eu·phor·ia</td>
</tr>
<tr>
<td style="text-align:center">ecstasy</td>
<td style="text-align:center">n. 狂喜</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">agony</td>
<td style="text-align:center">n. 痛苦</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">mischievous</td>
<td style="text-align:center">adj. 恶作剧的；有害的</td>
<td style="text-align:center">来自mischief</td>
<td style="text-align:center">mischiev·ous</td>
</tr>
<tr>
<td style="text-align:center">glut</td>
<td style="text-align:center">n. 大量；过剩</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">indifference</td>
<td style="text-align:center">n. 冷漠</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">surplus</td>
<td style="text-align:center">n. 过剩，盈余</td>
<td style="text-align:center"><code>sur - mroe</code></td>
<td style="text-align:center">sur·plus</td>
</tr>
<tr>
<td style="text-align:center">deficit</td>
<td style="text-align:center">n. 赤字不足</td>
<td style="text-align:center"><code>fic - fac - make</code><br />做不下去了</td>
<td style="text-align:center">de·fic·it</td>
</tr>
<tr>
<td style="text-align:center">deficient</td>
<td style="text-align:center">adj. 不足的</td>
<td style="text-align:center">来自deficit</td>
<td style="text-align:center">defic·ient</td>
</tr>
<tr>
<td style="text-align:center">sufficient</td>
<td style="text-align:center">adj. 充分的，足够的</td>
<td style="text-align:center">向下继续做</td>
<td style="text-align:center">suf·fic·ient</td>
</tr>
<tr>
<td style="text-align:center">abate</td>
<td style="text-align:center">v. 减轻，减少</td>
<td style="text-align:center"><code>bat - beat</code><br />不再打击</td>
<td style="text-align:center">a·bate</td>
</tr>
<tr>
<td style="text-align:center">rebate</td>
<td style="text-align:center">n. 退款</td>
<td style="text-align:center">往回打钱</td>
<td style="text-align:center">re·bate</td>
</tr>
<tr>
<td style="text-align:center">baton</td>
<td style="text-align:center">n. 警棍</td>
<td style="text-align:center"></td>
<td style="text-align:center">bat·on</td>
</tr>
<tr>
<td style="text-align:center">mitigate</td>
<td style="text-align:center">v. 减轻；缓和</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">wane</td>
<td style="text-align:center">v. 减弱</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">allay</td>
<td style="text-align:center">v. 减轻</td>
<td style="text-align:center">躺下来减轻痛苦</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">alleviate</td>
<td style="text-align:center">v. 减轻</td>
<td style="text-align:center">下降了一个level</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">consummate</td>
<td style="text-align:center">v. 完成，实现<br />adj. 完美的</td>
<td style="text-align:center">都(con)汇总(sum)都了一起</td>
<td style="text-align:center">con·sum·mate</td>
</tr>
<tr>
<td style="text-align:center">summit</td>
<td style="text-align:center">n. 顶峰</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">commensurate</td>
<td style="text-align:center">adj. 相称的</td>
<td style="text-align:center">com + measure<br />共同的尺寸<br />commensurate with</td>
<td style="text-align:center">com·mensur·ate</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>英语</category>
        <category>曲根万词班</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>单词</tag>
      </tags>
  </entry>
  <entry>
    <title>day 12</title>
    <url>/2019/11/24/day-12/</url>
    <content><![CDATA[<style>
table th:first-of-type {
    width: 150px;
}
</style>


<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">单词</th>
<th style="text-align:center">释义</th>
<th style="text-align:center">备注</th>
<th style="text-align:center">分解</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">sparse</td>
<td style="text-align:center">adj. 稀疏的，稀少的</td>
<td style="text-align:center"><code>sperse - scatter</code><br />散得很开</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">disperse</td>
<td style="text-align:center">v. 驱散</td>
<td style="text-align:center">散离开</td>
<td style="text-align:center">di·sperse</td>
</tr>
<tr>
<td style="text-align:center">asperse</td>
<td style="text-align:center">v. 诽谤</td>
<td style="text-align:center">好事不出门，坏事传千里</td>
<td style="text-align:center">a·sperse</td>
</tr>
<tr>
<td style="text-align:center">intersperse</td>
<td style="text-align:center">v. 点缀；散播</td>
<td style="text-align:center">分散到中间，点缀</td>
<td style="text-align:center">inter·sperse</td>
</tr>
<tr>
<td style="text-align:center">scanty</td>
<td style="text-align:center">adj. 缺乏的</td>
<td style="text-align:center">太少了，scan不到</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">scant</td>
<td style="text-align:center">adj. 缺乏的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">scarce</td>
<td style="text-align:center">adj. 缺乏的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">meagre</td>
<td style="text-align:center">adj. 贫乏的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">undue</td>
<td style="text-align:center">adj. 过度的</td>
<td style="text-align:center">不合适的</td>
<td style="text-align:center">un·due</td>
</tr>
<tr>
<td style="text-align:center">unduly</td>
<td style="text-align:center">adv. 过度地</td>
<td style="text-align:center"></td>
<td style="text-align:center">undue·ly</td>
</tr>
<tr>
<td style="text-align:center">excessive</td>
<td style="text-align:center">adj. 过度的</td>
<td style="text-align:center">超过界限</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">immoderate</td>
<td style="text-align:center">adj. 过度的</td>
<td style="text-align:center">不适度的</td>
<td style="text-align:center">im·moderate</td>
</tr>
<tr>
<td style="text-align:center">allay</td>
<td style="text-align:center">v. 减轻，缓和</td>
<td style="text-align:center"><code>lev - light</code></td>
<td style="text-align:center">al·lay</td>
</tr>
<tr>
<td style="text-align:center">elevator</td>
<td style="text-align:center">n. 电梯</td>
<td style="text-align:center"><code>lev - lift</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">levy</td>
<td style="text-align:center">v. 征收(税)</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">waylay</td>
<td style="text-align:center">v. 埋伏</td>
<td style="text-align:center">在路边躺着</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">defunct</td>
<td style="text-align:center">adj. 死的</td>
<td style="text-align:center"><code>funct - to perform function</code><br />没有功能的</td>
<td style="text-align:center">de·funct</td>
</tr>
<tr>
<td style="text-align:center">perfunctory</td>
<td style="text-align:center">adj. 草率的</td>
<td style="text-align:center"><code>per - away</code><br />远离职责，敷衍</td>
<td style="text-align:center">per·funct·ory</td>
</tr>
<tr>
<td style="text-align:center">dysfunction</td>
<td style="text-align:center">n. 功能失调，功能紊乱</td>
<td style="text-align:center">功能die了</td>
<td style="text-align:center">dys·function</td>
</tr>
<tr>
<td style="text-align:center">demise</td>
<td style="text-align:center">n. 死亡</td>
<td style="text-align:center"><code>mis - send</code><br />送到地下</td>
<td style="text-align:center">de·mis·e</td>
</tr>
<tr>
<td style="text-align:center">decease</td>
<td style="text-align:center">v./n. 死亡</td>
<td style="text-align:center">一切生理功能停止了</td>
<td style="text-align:center">de·cease</td>
</tr>
<tr>
<td style="text-align:center">feasible</td>
<td style="text-align:center">adj. 可行的</td>
<td style="text-align:center"><code>feas - fact - to make</code></td>
<td style="text-align:center">feas·ible</td>
</tr>
<tr>
<td style="text-align:center">viable</td>
<td style="text-align:center">adj. 可行的</td>
<td style="text-align:center">可以通行的</td>
<td style="text-align:center">via·ble</td>
</tr>
<tr>
<td style="text-align:center">practicable</td>
<td style="text-align:center">adj. 可行的</td>
<td style="text-align:center">可以实践的</td>
<td style="text-align:center">practic·able</td>
</tr>
<tr>
<td style="text-align:center">ingenuity</td>
<td style="text-align:center">n. 创造力；心灵手巧</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ordain</td>
<td style="text-align:center">v. 命令</td>
<td style="text-align:center">order</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">preordain</td>
<td style="text-align:center">n. 预先注定</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ordinance</td>
<td style="text-align:center">n. 法令</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ordnance</td>
<td style="text-align:center">n. 大炮，军械，武器</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">predetermine</td>
<td style="text-align:center">v. 预先决定，预先确定</td>
<td style="text-align:center"></td>
<td style="text-align:center">pre·determine</td>
</tr>
<tr>
<td style="text-align:center">predestine</td>
<td style="text-align:center">v. 注定</td>
<td style="text-align:center"></td>
<td style="text-align:center">pre·destine</td>
</tr>
<tr>
<td style="text-align:center">extemporize</td>
<td style="text-align:center">v. 即兴创作</td>
<td style="text-align:center">临时temporary表达出来的东西</td>
<td style="text-align:center">ex·tempor·ize</td>
</tr>
<tr>
<td style="text-align:center">prompt</td>
<td style="text-align:center">adj. 立即的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">impromptu</td>
<td style="text-align:center">adj. 即兴的</td>
<td style="text-align:center"></td>
<td style="text-align:center">im·prompt·u</td>
</tr>
<tr>
<td style="text-align:center">offhand</td>
<td style="text-align:center">adj. 即兴的</td>
<td style="text-align:center"></td>
<td style="text-align:center">off·hand</td>
</tr>
<tr>
<td style="text-align:center">taciturn</td>
<td style="text-align:center">adj. 沉默寡言的</td>
<td style="text-align:center"><code>tac - silent</code></td>
<td style="text-align:center">tac·it·urn</td>
</tr>
<tr>
<td style="text-align:center">tacit</td>
<td style="text-align:center">adj. 沉默的</td>
<td style="text-align:center"></td>
<td style="text-align:center">tac·it</td>
</tr>
<tr>
<td style="text-align:center">reticent</td>
<td style="text-align:center">adj.沉默寡言的</td>
<td style="text-align:center"></td>
<td style="text-align:center">re·tic·ent</td>
</tr>
<tr>
<td style="text-align:center">venomous</td>
<td style="text-align:center">adj. 有毒的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">venom</td>
<td style="text-align:center">n. 毒液</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">toxic</td>
<td style="text-align:center">adj. 有毒的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">lethal</td>
<td style="text-align:center">adj. 致命的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">vindictive</td>
<td style="text-align:center">adj. 报复性的，恶毒的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">amiss</td>
<td style="text-align:center">adj. 错误的；有缺陷的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">comprise</td>
<td style="text-align:center">v. 构成；包含</td>
<td style="text-align:center"><code>prise/prehend - to seize(prison)</code><br />抓在一起</td>
<td style="text-align:center">com·prise</td>
</tr>
<tr>
<td style="text-align:center">apprise</td>
<td style="text-align:center">v. 通知</td>
<td style="text-align:center">飞鸽传书之前先把鸽子抓来</td>
<td style="text-align:center">ap·prise</td>
</tr>
<tr>
<td style="text-align:center">reprehend</td>
<td style="text-align:center">v. 谴责</td>
<td style="text-align:center">抓过来骂</td>
<td style="text-align:center">re·prehend</td>
</tr>
<tr>
<td style="text-align:center">apprehend</td>
<td style="text-align:center">v. 逮捕；忧虑</td>
<td style="text-align:center"></td>
<td style="text-align:center">ap·prehend</td>
</tr>
<tr>
<td style="text-align:center">apprehensive</td>
<td style="text-align:center">adj. 逮捕的</td>
<td style="text-align:center"></td>
<td style="text-align:center">ap·prehens·ive</td>
</tr>
<tr>
<td style="text-align:center">constitute</td>
<td style="text-align:center">v. 组成</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">omit</td>
<td style="text-align:center">v. 遗漏</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">dissemble</td>
<td style="text-align:center">v. 伪装，掩饰</td>
<td style="text-align:center"><code>dis - to</code><br /><code>semble/simul - same</code><br />变得像</td>
<td style="text-align:center">dis·semble</td>
</tr>
<tr>
<td style="text-align:center">dissimulate</td>
<td style="text-align:center">v. 伪装</td>
<td style="text-align:center">同上</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">resemble</td>
<td style="text-align:center">v. 相似，像…</td>
<td style="text-align:center">同上</td>
<td style="text-align:center">re·semble</td>
</tr>
<tr>
<td style="text-align:center">disclose</td>
<td style="text-align:center">v. 解开</td>
<td style="text-align:center">不关闭了</td>
<td style="text-align:center">dis·close</td>
</tr>
<tr>
<td style="text-align:center">glib</td>
<td style="text-align:center">adj. 油腔滑调的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">voluble</td>
<td style="text-align:center">adj. 滔滔不绝的</td>
<td style="text-align:center"><code>valv - turn</code><br />嘴巴不停转动</td>
<td style="text-align:center">valu·able</td>
</tr>
<tr>
<td style="text-align:center">slick</td>
<td style="text-align:center">adj. 光滑的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">invincible</td>
<td style="text-align:center">adj. 难以克服的</td>
<td style="text-align:center"><code>vinc/vict - to conquer</code></td>
<td style="text-align:center">in·vinc·ible</td>
</tr>
<tr>
<td style="text-align:center">convict</td>
<td style="text-align:center">v. 证明……有罪</td>
<td style="text-align:center">convict sb. of …</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">evict</td>
<td style="text-align:center">v. 驱逐</td>
<td style="text-align:center">战胜后赶出去</td>
<td style="text-align:center">e·vict</td>
</tr>
<tr>
<td style="text-align:center">evince</td>
<td style="text-align:center">v. 表明</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">vanquish</td>
<td style="text-align:center">v. 征服</td>
<td style="text-align:center">i → a<br />c → qu</td>
<td style="text-align:center">vanqu·ish</td>
</tr>
<tr>
<td style="text-align:center">insurmountable</td>
<td style="text-align:center">adj. 难以征服的，不能克服的</td>
<td style="text-align:center">不能骑mount在上面sur</td>
<td style="text-align:center">in·sur·mount·able</td>
</tr>
<tr>
<td style="text-align:center">insuperable</td>
<td style="text-align:center">adj. 难以超越的</td>
<td style="text-align:center">不能更super</td>
<td style="text-align:center">in·super·able</td>
</tr>
<tr>
<td style="text-align:center">indomitable</td>
<td style="text-align:center">adj. 不可征服的</td>
<td style="text-align:center"></td>
<td style="text-align:center">in·dom·it·able</td>
</tr>
<tr>
<td style="text-align:center">imprudent</td>
<td style="text-align:center">adj. 草率的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">cursory</td>
<td style="text-align:center">adj. 草率的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">reckless</td>
<td style="text-align:center">adj. 鲁莽的，草率的</td>
<td style="text-align:center">不多想reckon</td>
<td style="text-align:center">reck·less</td>
</tr>
<tr>
<td style="text-align:center">impetuous</td>
<td style="text-align:center">adj. 冲动的；鲁莽的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">meticulous</td>
<td style="text-align:center">adj. 一丝不苟的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">punctilious</td>
<td style="text-align:center">adj. 一丝不苟的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">scrupulous</td>
<td style="text-align:center">adj. 谨慎的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">discreet</td>
<td style="text-align:center">adj. 小心翼翼的</td>
<td style="text-align:center">discrete</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">chary</td>
<td style="text-align:center">adj. 谨慎的</td>
<td style="text-align:center">care</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">replenish</td>
<td style="text-align:center">v. 装满</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">rife</td>
<td style="text-align:center">adj. 充斥的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">vacuous</td>
<td style="text-align:center">adj. 空的</td>
<td style="text-align:center"><code>van/vac - empty</code></td>
<td style="text-align:center">vac·uous</td>
</tr>
<tr>
<td style="text-align:center">evacuate</td>
<td style="text-align:center">v. 撤离，疏散</td>
<td style="text-align:center">向外走，让里面变空</td>
<td style="text-align:center">e·vac·uate</td>
</tr>
<tr>
<td style="text-align:center">evanescent</td>
<td style="text-align:center">adj. 转瞬即逝的</td>
<td style="text-align:center">一会就变空了</td>
<td style="text-align:center">e·van·esc·ent</td>
</tr>
<tr>
<td style="text-align:center">vanity</td>
<td style="text-align:center">n. 虚荣心</td>
<td style="text-align:center">内部实际十分空虚</td>
<td style="text-align:center">van·ity</td>
</tr>
<tr>
<td style="text-align:center">vainglorious</td>
<td style="text-align:center">adj. 虚荣的</td>
<td style="text-align:center"></td>
<td style="text-align:center">vain·glor·ious</td>
</tr>
<tr>
<td style="text-align:center">devoid</td>
<td style="text-align:center">adj. 缺乏的</td>
<td style="text-align:center"></td>
<td style="text-align:center">de·void</td>
</tr>
<tr>
<td style="text-align:center">wilt</td>
<td style="text-align:center">v. 枯萎；凋谢</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">wither</td>
<td style="text-align:center">v. 枯萎</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">blight</td>
<td style="text-align:center">n./v. 枯萎病</td>
<td style="text-align:center">不见光</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">abominable</td>
<td style="text-align:center">adj. 可恶的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">brainy</td>
<td style="text-align:center">adj. 聪明的</td>
<td style="text-align:center">有脑子的</td>
<td style="text-align:center">brain·y</td>
</tr>
<tr>
<td style="text-align:center">shrewd</td>
<td style="text-align:center">adj. 精明的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">astute</td>
<td style="text-align:center">adj. 精明的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">deteriorate</td>
<td style="text-align:center">v. 恶化</td>
<td style="text-align:center"><code>teriror - terror</code><br />变得越来越可怕</td>
<td style="text-align:center">de·terior·ate</td>
</tr>
<tr>
<td style="text-align:center">deter</td>
<td style="text-align:center">v. 抑制</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">deterrent</td>
<td style="text-align:center">n. 抑制</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ameliorate</td>
<td style="text-align:center">v. 改善</td>
<td style="text-align:center"><code>a - not</code><br />mal (a → e)<br />没有变坏</td>
<td style="text-align:center">a·mel·ior·ate</td>
</tr>
<tr>
<td style="text-align:center">aggravate</td>
<td style="text-align:center">v. 加重</td>
<td style="text-align:center"><code>grav - heavy</code></td>
<td style="text-align:center">ag·grav·ate</td>
</tr>
<tr>
<td style="text-align:center">exacerbate</td>
<td style="text-align:center">v. 恶化</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">exquisite</td>
<td style="text-align:center">adj. 精致的</td>
<td style="text-align:center"><code>quis - seek(k → qu, ee → i, 反写)</code><br />被挑选出来的</td>
<td style="text-align:center">ex·quis·ite</td>
</tr>
<tr>
<td style="text-align:center">requisite</td>
<td style="text-align:center">adj. 必须的<br />n. 必需品</td>
<td style="text-align:center">一再被选</td>
<td style="text-align:center">re·quis·ite</td>
</tr>
<tr>
<td style="text-align:center">prerequisite</td>
<td style="text-align:center">n. 先决条件</td>
<td style="text-align:center">之前必须有</td>
<td style="text-align:center">pre·requisite</td>
</tr>
<tr>
<td style="text-align:center">disquisition</td>
<td style="text-align:center">n. 专题论文</td>
<td style="text-align:center">把一个大专业分开寻求答案</td>
<td style="text-align:center">dis·quis·i·tion</td>
</tr>
<tr>
<td style="text-align:center">acquisitive</td>
<td style="text-align:center">adj. 物欲重的，贪婪的</td>
<td style="text-align:center">一直在找</td>
<td style="text-align:center">ac·quis·i·tive</td>
</tr>
<tr>
<td style="text-align:center">sequester</td>
<td style="text-align:center">v. 隐居；扣押</td>
<td style="text-align:center">找到后分开</td>
<td style="text-align:center">se·ques·ter</td>
</tr>
<tr>
<td style="text-align:center">sequestrate</td>
<td style="text-align:center">v. 扣押；没收</td>
<td style="text-align:center">同上</td>
<td style="text-align:center">se·ques·trate</td>
</tr>
<tr>
<td style="text-align:center">fiscal</td>
<td style="text-align:center">n. 财政</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">confiscate</td>
<td style="text-align:center">v. 充公</td>
<td style="text-align:center">同一到财政局</td>
<td style="text-align:center">con·fisc·ate</td>
</tr>
<tr>
<td style="text-align:center">potential</td>
<td style="text-align:center">adj. 潜在的</td>
<td style="text-align:center"><code>potent - power</code></td>
<td style="text-align:center">potent·ial</td>
</tr>
<tr>
<td style="text-align:center">potent</td>
<td style="text-align:center">adj. 强有力的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">impotent</td>
<td style="text-align:center">adj. 无力的</td>
<td style="text-align:center"></td>
<td style="text-align:center">im·potent</td>
</tr>
<tr>
<td style="text-align:center">omnipotent</td>
<td style="text-align:center">adj. 万能的</td>
<td style="text-align:center"><code>omni - all</code><br />所有力量都有</td>
<td style="text-align:center">omni·potent</td>
</tr>
<tr>
<td style="text-align:center">potentate</td>
<td style="text-align:center">n. 统治者</td>
<td style="text-align:center"><code>ate - ren</code><br />最有权力的人</td>
<td style="text-align:center">potent·ate</td>
</tr>
<tr>
<td style="text-align:center">underlying</td>
<td style="text-align:center">adj. 潜在的</td>
<td style="text-align:center">躺在下面的</td>
<td style="text-align:center">under·lying</td>
</tr>
<tr>
<td style="text-align:center">incorrigible</td>
<td style="text-align:center">adj. 无药可救的</td>
<td style="text-align:center"><code>cor/corrig - correct</code><br />无法改正的</td>
<td style="text-align:center">in·corrig·ible</td>
</tr>
<tr>
<td style="text-align:center">manual</td>
<td style="text-align:center">n. 使用手册<br />adj. 手工的，体力的</td>
<td style="text-align:center"><code>manu - hand</code></td>
<td style="text-align:center">manu·al</td>
</tr>
<tr>
<td style="text-align:center">manacle</td>
<td style="text-align:center">n. 手铐；束缚</td>
<td style="text-align:center"></td>
<td style="text-align:center">mana·cle</td>
</tr>
<tr>
<td style="text-align:center">manifest</td>
<td style="text-align:center">v. 表明<br />adj. 明显的</td>
<td style="text-align:center"></td>
<td style="text-align:center">mani·fest</td>
</tr>
<tr>
<td style="text-align:center">emancipate</td>
<td style="text-align:center">v. 解放</td>
<td style="text-align:center">手举在头顶上欢呼</td>
<td style="text-align:center">e·man·cip·ate</td>
</tr>
<tr>
<td style="text-align:center">manumit</td>
<td style="text-align:center">v. 解放</td>
<td style="text-align:center"></td>
<td style="text-align:center">manu·mit</td>
</tr>
<tr>
<td style="text-align:center">maneuver</td>
<td style="text-align:center">v. 操纵(车辆)；策划；军事演习</td>
<td style="text-align:center">用手开车</td>
<td style="text-align:center">mane·uver</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>英语</category>
        <category>曲根万词班</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>单词</tag>
      </tags>
  </entry>
  <entry>
    <title>day 11</title>
    <url>/2019/11/24/day-11/</url>
    <content><![CDATA[<style>
table th:first-of-type {
    width: 150px;
}
</style>


<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">单词</th>
<th style="text-align:center">释义</th>
<th style="text-align:center">备注</th>
<th style="text-align:center">分解</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">dwindle</td>
<td style="text-align:center">v. 减少，逐渐减弱</td>
<td style="text-align:center"><code>dw - down</code></td>
<td style="text-align:center">dw·indle</td>
</tr>
<tr>
<td style="text-align:center">dwell</td>
<td style="text-align:center">v. 居住</td>
<td style="text-align:center">定居下来</td>
<td style="text-align:center">dw·ell</td>
</tr>
<tr>
<td style="text-align:center">subside</td>
<td style="text-align:center">v. (情绪或噪声)逐渐减弱</td>
<td style="text-align:center">sub下side边</td>
<td style="text-align:center">sub·side</td>
</tr>
<tr>
<td style="text-align:center">curtail</td>
<td style="text-align:center">v. 减少；削减</td>
<td style="text-align:center">cut tail</td>
<td style="text-align:center">cur·tail</td>
</tr>
<tr>
<td style="text-align:center">diminish</td>
<td style="text-align:center">v. 减少</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">haphazard</td>
<td style="text-align:center">adj. 偶然的，随便的</td>
<td style="text-align:center"><code>hap - luck</code><br /><code>hazard - 危险</code><br />幸运和危险都是偶然的</td>
<td style="text-align:center">hap·hazard</td>
</tr>
<tr>
<td style="text-align:center">mishap</td>
<td style="text-align:center">n. 不幸</td>
<td style="text-align:center">没有幸运</td>
<td style="text-align:center">mis·hap</td>
</tr>
<tr>
<td style="text-align:center">hapless</td>
<td style="text-align:center">adj. 不幸的</td>
<td style="text-align:center"></td>
<td style="text-align:center">hap·less</td>
</tr>
<tr>
<td style="text-align:center">systematic</td>
<td style="text-align:center">adj. 系统性的</td>
<td style="text-align:center">random的反义词</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">fortuitous</td>
<td style="text-align:center">adj. 偶然的，意外的</td>
<td style="text-align:center">fortune偶然的幸运</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">obvious</td>
<td style="text-align:center">adj. 显然的，明显的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">blatant</td>
<td style="text-align:center">adj. 公然的，明显的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">flagrant</td>
<td style="text-align:center">adj. 明目张胆的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">rebuff</td>
<td style="text-align:center">v. 拒绝</td>
<td style="text-align:center"><code>buff - puff喷</code><br />喷回去</td>
<td style="text-align:center">re·buff</td>
</tr>
<tr>
<td style="text-align:center">repudiate</td>
<td style="text-align:center">v. 拒绝</td>
<td style="text-align:center"><code>pud - to feel ashamed</code><br />反过来让对方不好意思</td>
<td style="text-align:center">re·pud·iate</td>
</tr>
<tr>
<td style="text-align:center">impudent</td>
<td style="text-align:center">adj. 无耻的；放肆无理的</td>
<td style="text-align:center">没有感到耻辱</td>
<td style="text-align:center">im·pud·ent</td>
</tr>
<tr>
<td style="text-align:center">somber</td>
<td style="text-align:center">adj. 闷闷不乐的；阴沉的</td>
<td style="text-align:center"><code>umbr - shadow</code><br />sub + umbr</td>
<td style="text-align:center">s·omber</td>
</tr>
<tr>
<td style="text-align:center">adumbrate</td>
<td style="text-align:center">v. 预示</td>
<td style="text-align:center">add umbr<br />出现一个阴影，预示</td>
<td style="text-align:center">ad·umbr·ate</td>
</tr>
<tr>
<td style="text-align:center">lugubrious</td>
<td style="text-align:center">adj. 忧郁的，悲伤的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sullen</td>
<td style="text-align:center">adj. 闷闷不乐的</td>
<td style="text-align:center">sole → sull</td>
<td style="text-align:center">sull·en</td>
</tr>
<tr>
<td style="text-align:center">saturnine</td>
<td style="text-align:center">adj. 忧郁的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">melancholy</td>
<td style="text-align:center">adj. 忧郁的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">vehement</td>
<td style="text-align:center">adj. 热烈的</td>
<td style="text-align:center">好多vehicle，热烈欢迎</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">benign</td>
<td style="text-align:center">adj. 亲切的；良性的；温和的</td>
<td style="text-align:center"><code>bene - good(benefit)</code></td>
<td style="text-align:center">beni·gn</td>
</tr>
<tr>
<td style="text-align:center">benefactor</td>
<td style="text-align:center">n. 捐助人；恩人</td>
<td style="text-align:center">做好事的人</td>
<td style="text-align:center">bene·fact·or</td>
</tr>
<tr>
<td style="text-align:center">beneficiary</td>
<td style="text-align:center">n. 受益人</td>
<td style="text-align:center">受到好事的人</td>
<td style="text-align:center">bene·fic·iary</td>
</tr>
<tr>
<td style="text-align:center">balmy</td>
<td style="text-align:center">adj. 温和的；芳香的</td>
<td style="text-align:center"><code>palm - 手掌</code></td>
<td style="text-align:center">balm·y</td>
</tr>
<tr>
<td style="text-align:center">ephemeral</td>
<td style="text-align:center">adj. 朝生暮死的；短命的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">transitory</td>
<td style="text-align:center">adj. 临时的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">transient</td>
<td style="text-align:center">adj. 临时的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">evanescent</td>
<td style="text-align:center">adj. 转瞬即逝的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">perennial</td>
<td style="text-align:center">adj. 永久的</td>
<td style="text-align:center"><code>ennial - annual</code><br />trough annual<br />经过了一年又一年</td>
<td style="text-align:center">per·ennial</td>
</tr>
<tr>
<td style="text-align:center">illiterate</td>
<td style="text-align:center">adj. 文盲的</td>
<td style="text-align:center"><code>liter - letter</code><br /><code>il - 无，没有</code><br />认识的字母一个都没有</td>
<td style="text-align:center">il·liter·ate</td>
</tr>
<tr>
<td style="text-align:center">literate</td>
<td style="text-align:center">adj. 有文化的</td>
<td style="text-align:center">字母的</td>
<td style="text-align:center">liter·ate</td>
</tr>
<tr>
<td style="text-align:center">lavish</td>
<td style="text-align:center">adj. 浪费的<br />v. 浪费</td>
<td style="text-align:center"><code>lav/lau - wash(laundry)</code><br />花钱如流水</td>
<td style="text-align:center">lav·ish</td>
</tr>
<tr>
<td style="text-align:center">dilute</td>
<td style="text-align:center">v. 稀释</td>
<td style="text-align:center"><code>di - apart</code><br />lau把a脱落<br />把东西用水洗开分开</td>
<td style="text-align:center">di·lu·te</td>
</tr>
<tr>
<td style="text-align:center">deluge</td>
<td style="text-align:center">n. 大洪水</td>
<td style="text-align:center">圣经里用洪水把罪孽洗掉</td>
<td style="text-align:center">de·lu·ge</td>
</tr>
<tr>
<td style="text-align:center">stingy</td>
<td style="text-align:center">adj. 吝啬的，小气的</td>
<td style="text-align:center">做人像sting一样</td>
<td style="text-align:center">sting·y</td>
</tr>
<tr>
<td style="text-align:center">niggardly</td>
<td style="text-align:center">adj. 小气的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">niggard</td>
<td style="text-align:center">n. 吝啬鬼</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">parsimonious</td>
<td style="text-align:center">adj. 吝啬的</td>
<td style="text-align:center">谐音：怕失money</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">parsimony</td>
<td style="text-align:center">n. 吝啬</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">peddle</td>
<td style="text-align:center">v. 兜售；沿街叫卖</td>
<td style="text-align:center"><code>ped - foot</code><br />边走变卖</td>
<td style="text-align:center">ped·dle</td>
</tr>
<tr>
<td style="text-align:center">expedite</td>
<td style="text-align:center">v. 加速</td>
<td style="text-align:center">用脚快速走出去</td>
<td style="text-align:center">ex·ped·ite</td>
</tr>
<tr>
<td style="text-align:center">pedestrian</td>
<td style="text-align:center">n. 行人<br />adj. 单调的</td>
<td style="text-align:center">用脚走路的人</td>
<td style="text-align:center">ped·estrian</td>
</tr>
<tr>
<td style="text-align:center">bipedal</td>
<td style="text-align:center">adj. 两足的</td>
<td style="text-align:center"></td>
<td style="text-align:center">bi·ped·al</td>
</tr>
<tr>
<td style="text-align:center">wholesale</td>
<td style="text-align:center">n./v./adj. 批发</td>
<td style="text-align:center">一起卖掉</td>
<td style="text-align:center">whole·sale</td>
</tr>
<tr>
<td style="text-align:center">reprimand</td>
<td style="text-align:center">v. 谴责</td>
<td style="text-align:center">不服从command的</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">reprehend</td>
<td style="text-align:center">v. 谴责</td>
<td style="text-align:center">不理解(comprehend)</td>
<td style="text-align:center">re·prehend</td>
</tr>
<tr>
<td style="text-align:center">rebuke</td>
<td style="text-align:center">v. 谴责</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">commend</td>
<td style="text-align:center">v. (公开)赞扬</td>
<td style="text-align:center">recommend</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">extol</td>
<td style="text-align:center">v. 赞美</td>
<td style="text-align:center"><code>ex - to</code><br /><code>tol - tall</code><br />抬高一个人</td>
<td style="text-align:center">ex·tol</td>
</tr>
<tr>
<td style="text-align:center">exalt</td>
<td style="text-align:center">v. 赞美</td>
<td style="text-align:center"><code>alt - high</code></td>
<td style="text-align:center">ex·alt</td>
</tr>
<tr>
<td style="text-align:center">hail</td>
<td style="text-align:center">v. 赞扬</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">rave</td>
<td style="text-align:center">v. 极力赞扬</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">eulogize</td>
<td style="text-align:center">v. 歌颂</td>
<td style="text-align:center"><code>eu - well</code><br /><code>log - to speak</code><br />说好话</td>
<td style="text-align:center">eu·log·ize</td>
</tr>
<tr>
<td style="text-align:center">laud</td>
<td style="text-align:center">v. 颂扬</td>
<td style="text-align:center">大声赞扬领主<br />loud laud lord</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">laudatory</td>
<td style="text-align:center">n. 颂扬</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">synthetic</td>
<td style="text-align:center">adj. 人造的，合成的</td>
<td style="text-align:center"><code>thet - put</code><br /><code>syn - same</code></td>
<td style="text-align:center">syn·thet·ic</td>
</tr>
<tr>
<td style="text-align:center">synthesize</td>
<td style="text-align:center">v. 合成</td>
<td style="text-align:center">放到同一个地方</td>
<td style="text-align:center">syn·thes·ize</td>
</tr>
<tr>
<td style="text-align:center">unbounded</td>
<td style="text-align:center">adj. 无限制的</td>
<td style="text-align:center">没有界限的</td>
<td style="text-align:center">un·bound·ed</td>
</tr>
<tr>
<td style="text-align:center">boundless</td>
<td style="text-align:center">adj. 无限制的</td>
<td style="text-align:center">同上</td>
<td style="text-align:center">bound·less</td>
</tr>
<tr>
<td style="text-align:center">wretched</td>
<td style="text-align:center">adj. 可怜的；令人痛苦的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">wretch</td>
<td style="text-align:center">n. 可怜的人</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">wrench</td>
<td style="text-align:center">n. 扳手</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">blithe</td>
<td style="text-align:center">adj. 欢乐的</td>
<td style="text-align:center">bliss</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">morose</td>
<td style="text-align:center">adj. 郁闷的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">despondent</td>
<td style="text-align:center">adj. 沮丧的</td>
<td style="text-align:center">没有回应</td>
<td style="text-align:center">de·spond·ent</td>
</tr>
<tr>
<td style="text-align:center">exuberant</td>
<td style="text-align:center">adj. 兴高采烈的；生机勃勃的</td>
<td style="text-align:center"><code>e - out</code><br />sob (s → x)</td>
<td style="text-align:center">e·xub·erant</td>
</tr>
<tr>
<td style="text-align:center">ebullient</td>
<td style="text-align:center">adj. 兴高采烈的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">erratic</td>
<td style="text-align:center">adj. 不稳定的，奇怪的</td>
<td style="text-align:center"><code>err - wander</code><br />状态走来走去不稳定在一个地方</td>
<td style="text-align:center">err·atic</td>
</tr>
<tr>
<td style="text-align:center">errand</td>
<td style="text-align:center">n. 差事，跑腿</td>
<td style="text-align:center">出去跑</td>
<td style="text-align:center">err·and</td>
</tr>
<tr>
<td style="text-align:center">errant</td>
<td style="text-align:center">adj. 错误的</td>
<td style="text-align:center"><code>err - mistake</code></td>
<td style="text-align:center">err·ant</td>
</tr>
<tr>
<td style="text-align:center">inerrancy</td>
<td style="text-align:center">n. 正确</td>
<td style="text-align:center">不错的</td>
<td style="text-align:center">in·err·ancy</td>
</tr>
<tr>
<td style="text-align:center">erroneous</td>
<td style="text-align:center">adj. 错误的</td>
<td style="text-align:center"></td>
<td style="text-align:center">err·oneous</td>
</tr>
<tr>
<td style="text-align:center">maculated</td>
<td style="text-align:center">adj. 有污点的</td>
<td style="text-align:center">有mark的</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">immaculate</td>
<td style="text-align:center">adj. 无暇的，洁净的</td>
<td style="text-align:center">来自maculated</td>
<td style="text-align:center">im·maculate</td>
</tr>
<tr>
<td style="text-align:center">peccable</td>
<td style="text-align:center">n. 小罪</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">impeccable</td>
<td style="text-align:center">adj. 无暇的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">retard</td>
<td style="text-align:center">v. 妨碍；阻碍</td>
<td style="text-align:center"><code>tard - slow</code><br />向后拖延</td>
<td style="text-align:center">re·tard</td>
</tr>
<tr>
<td style="text-align:center">tardy</td>
<td style="text-align:center">adj. 迟缓的，迟到的</td>
<td style="text-align:center"></td>
<td style="text-align:center">tard·y</td>
</tr>
<tr>
<td style="text-align:center">retardant</td>
<td style="text-align:center">adj./n. 延缓的；延缓</td>
<td style="text-align:center">被阻碍的结果</td>
<td style="text-align:center">retard·ant</td>
</tr>
<tr>
<td style="text-align:center">stalwart</td>
<td style="text-align:center">adj. 强壮的</td>
<td style="text-align:center">stone wall</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">brawny</td>
<td style="text-align:center">adj. 强壮的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">brawn</td>
<td style="text-align:center">n. 发达的肌肉</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">feeble</td>
<td style="text-align:center">adj. 虚弱的</td>
<td style="text-align:center">脚都站不住</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">frail</td>
<td style="text-align:center">adj. 脆弱的</td>
<td style="text-align:center">fragile</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">decrepit</td>
<td style="text-align:center">adj. 衰弱的；破旧的</td>
<td style="text-align:center">向下create</td>
<td style="text-align:center">de·cre·pit</td>
</tr>
<tr>
<td style="text-align:center">shun</td>
<td style="text-align:center">v. 回避，避开</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">dodge</td>
<td style="text-align:center">v. 避开</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">eschew</td>
<td style="text-align:center">v. 避开</td>
<td style="text-align:center"><code>e - to</code><br />to shy</td>
<td style="text-align:center">e·schew</td>
</tr>
<tr>
<td style="text-align:center">circumvent</td>
<td style="text-align:center">v. (利用小聪明)回避</td>
<td style="text-align:center">went (w → v)<br />绕圈走开</td>
<td style="text-align:center">circum·vent</td>
</tr>
<tr>
<td style="text-align:center">audible</td>
<td style="text-align:center">adj. 听得见的</td>
<td style="text-align:center"><code>audi - to listen</code></td>
<td style="text-align:center">audi·ble</td>
</tr>
<tr>
<td style="text-align:center">audition</td>
<td style="text-align:center">n./v. 试听，试音</td>
<td style="text-align:center"></td>
<td style="text-align:center">audi·tion</td>
</tr>
<tr>
<td style="text-align:center">audit</td>
<td style="text-align:center">v. 审计；旁听</td>
<td style="text-align:center"></td>
<td style="text-align:center">audi·t</td>
</tr>
<tr>
<td style="text-align:center">auditory</td>
<td style="text-align:center">adj. 听觉的</td>
<td style="text-align:center"></td>
<td style="text-align:center">audi·tory</td>
</tr>
<tr>
<td style="text-align:center">aviation</td>
<td style="text-align:center">n. 航空</td>
<td style="text-align:center"><code>au/avi - bird</code></td>
<td style="text-align:center">avi·ation</td>
</tr>
<tr>
<td style="text-align:center">aviary</td>
<td style="text-align:center">n. 大鸟舍</td>
<td style="text-align:center"></td>
<td style="text-align:center">avi·ary</td>
</tr>
<tr>
<td style="text-align:center">aviator</td>
<td style="text-align:center">n. 飞行员</td>
<td style="text-align:center"></td>
<td style="text-align:center">avi·ator</td>
</tr>
<tr>
<td style="text-align:center">augury</td>
<td style="text-align:center">n. 预兆，预言</td>
<td style="text-align:center">天上来的</td>
<td style="text-align:center">au·gury</td>
</tr>
<tr>
<td style="text-align:center">propitious</td>
<td style="text-align:center">adj. 吉兆的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ominous</td>
<td style="text-align:center">adj. 凶兆的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">unfavorable</td>
<td style="text-align:center">adj. 不利的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">elation</td>
<td style="text-align:center">n. 得意洋洋</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">exultancy</td>
<td style="text-align:center">n. 得意</td>
<td style="text-align:center">被exalt之后飘了<br />a → u</td>
<td style="text-align:center">exult·ancy</td>
</tr>
<tr>
<td style="text-align:center">haughty</td>
<td style="text-align:center">adj. 傲慢的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">jeopardy</td>
<td style="text-align:center">n. 危险</td>
<td style="text-align:center"><code>jeo - joy</code><br /><code>pard - part</code><br />远离欢乐</td>
<td style="text-align:center">jeo·pard·y</td>
</tr>
<tr>
<td style="text-align:center">jeopardize</td>
<td style="text-align:center">v. 危及</td>
<td style="text-align:center">来自jeopardy</td>
<td style="text-align:center">jeo·pard·ize</td>
</tr>
<tr>
<td style="text-align:center">precarious</td>
<td style="text-align:center">adj. 危险的</td>
<td style="text-align:center">在车前面危险</td>
<td style="text-align:center">pre·car·ious</td>
</tr>
<tr>
<td style="text-align:center">peril</td>
<td style="text-align:center">n. 危险</td>
<td style="text-align:center">through ill</td>
<td style="text-align:center">per·il</td>
</tr>
<tr>
<td style="text-align:center">mandatory</td>
<td style="text-align:center">adj. 命令的；必须的</td>
<td style="text-align:center"><code>mand - command</code></td>
<td style="text-align:center">mand·at·ory</td>
</tr>
<tr>
<td style="text-align:center">mandate</td>
<td style="text-align:center">v. 命令</td>
<td style="text-align:center"></td>
<td style="text-align:center">mand·ate</td>
</tr>
<tr>
<td style="text-align:center">countermand</td>
<td style="text-align:center">v. 撤销(命令)</td>
<td style="text-align:center">against command</td>
<td style="text-align:center">counter·mand</td>
</tr>
<tr>
<td style="text-align:center">remand</td>
<td style="text-align:center">v. 召回；还押候审</td>
<td style="text-align:center">命令回去</td>
<td style="text-align:center">re·mand</td>
</tr>
<tr>
<td style="text-align:center">compulsory</td>
<td style="text-align:center">adj. 义务的，有责任的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">compel</td>
<td style="text-align:center">v. 强迫</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">obligatory</td>
<td style="text-align:center">adj. 命令的</td>
<td style="text-align:center">执行命令是义务obligation</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">imperative</td>
<td style="text-align:center">adj. 命令的</td>
<td style="text-align:center">来自emperor的话</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>英语</category>
        <category>曲根万词班</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>单词</tag>
      </tags>
  </entry>
  <entry>
    <title>day 13</title>
    <url>/2019/11/24/day-13/</url>
    <content><![CDATA[<style>
table th:first-of-type {
    width: 150px;
}
</style>


<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">单词</th>
<th style="text-align:center">释义</th>
<th style="text-align:center">备注</th>
<th style="text-align:center">分解</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ruthless</td>
<td style="text-align:center">adj. 无情的，残忍的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">relentless</td>
<td style="text-align:center">adj. 无情的，残忍的</td>
<td style="text-align:center">不再借东西lent给他</td>
<td style="text-align:center">re·lent·less</td>
</tr>
<tr>
<td style="text-align:center">brutal</td>
<td style="text-align:center">adj. 残忍的，凶残的</td>
<td style="text-align:center"><code>br - break</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ferocious</td>
<td style="text-align:center">adj. 凶残的；激烈的</td>
<td style="text-align:center">fierce<br />去i插o</td>
<td style="text-align:center">feroc·ious</td>
</tr>
<tr>
<td style="text-align:center">bestial</td>
<td style="text-align:center">adj. 畜生般的</td>
<td style="text-align:center">来自beast</td>
<td style="text-align:center">best·ial</td>
</tr>
<tr>
<td style="text-align:center">lenient</td>
<td style="text-align:center">adj. 宽厚的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">clement</td>
<td style="text-align:center">adj. 宽厚的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">vociferous</td>
<td style="text-align:center">adj. 嘈杂的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">boisterous</td>
<td style="text-align:center">adj. 喧闹的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">cacophonous</td>
<td style="text-align:center">adj. 嘈杂的</td>
<td style="text-align:center"><code>caco - 丑，恶，不良</code><br /><code>phon - sound</code></td>
<td style="text-align:center">caco·phon·ous</td>
</tr>
<tr>
<td style="text-align:center">rowdy</td>
<td style="text-align:center">adj. 喧闹的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">tranquil</td>
<td style="text-align:center">adj. 宁静的</td>
<td style="text-align:center">trans + quiet</td>
<td style="text-align:center">tran·quil</td>
</tr>
<tr>
<td style="text-align:center">tranquilize</td>
<td style="text-align:center">v. 使平静</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">serene</td>
<td style="text-align:center">adj. 宁静的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">bleak</td>
<td style="text-align:center">adj. 荒凉的；令人沮丧的</td>
<td style="text-align:center">black</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">bleach</td>
<td style="text-align:center">v. 漂白</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">blanch</td>
<td style="text-align:center">v. 使变白</td>
<td style="text-align:center">blank</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">blur</td>
<td style="text-align:center">v. 使模糊</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">blear</td>
<td style="text-align:center">v. 使模糊</td>
<td style="text-align:center">clear的反义词</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">blunt</td>
<td style="text-align:center">v. 使变钝，迟钝</td>
<td style="text-align:center">blind</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">blunder</td>
<td style="text-align:center">n./v. 大错误；蹒跚</td>
<td style="text-align:center">blind</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">castigate</td>
<td style="text-align:center">v. 斥责，惩罚</td>
<td style="text-align:center"><code>cast - pure</code><br />通过惩罚净化行为</td>
<td style="text-align:center">cast·ig·ate</td>
</tr>
<tr>
<td style="text-align:center">chaste</td>
<td style="text-align:center">adj. 纯洁的</td>
<td style="text-align:center">c → ch<br />同上</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">chasten</td>
<td style="text-align:center">v. 惩罚</td>
<td style="text-align:center">同上</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">chastise</td>
<td style="text-align:center">v. 惩罚</td>
<td style="text-align:center"></td>
<td style="text-align:center">chast·ise</td>
</tr>
<tr>
<td style="text-align:center">caste</td>
<td style="text-align:center">n. 等级制度</td>
<td style="text-align:center">越阶级要受到惩罚</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">enmity</td>
<td style="text-align:center">n. 敌意</td>
<td style="text-align:center">enemy</td>
<td style="text-align:center">enmi·ty</td>
</tr>
<tr>
<td style="text-align:center">lucid</td>
<td style="text-align:center">adj. 清晰的；神志清楚的</td>
<td style="text-align:center"><code>luc/lucid - bright</code></td>
<td style="text-align:center">luc·id</td>
</tr>
<tr>
<td style="text-align:center">elucidate</td>
<td style="text-align:center">v. 阐明</td>
<td style="text-align:center">向外照亮秘密</td>
<td style="text-align:center">e·lucid·ate</td>
</tr>
<tr>
<td style="text-align:center">pellucid</td>
<td style="text-align:center">adj. 透明的；明晰的</td>
<td style="text-align:center"><code>pel - per - through</code><br />光可以直接透过去</td>
<td style="text-align:center">pel·lucid</td>
</tr>
<tr>
<td style="text-align:center">translucent</td>
<td style="text-align:center">adj. 半透明的</td>
<td style="text-align:center"><code>trans - 进入</code></td>
<td style="text-align:center">trans·luc·ent</td>
</tr>
<tr>
<td style="text-align:center">obscure</td>
<td style="text-align:center">adj. 模糊的</td>
<td style="text-align:center"><code>scu - sky</code></td>
<td style="text-align:center">ob·scu·re</td>
</tr>
<tr>
<td style="text-align:center">perpendicular</td>
<td style="text-align:center">adj. 垂直的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sagacity</td>
<td style="text-align:center">n. 睿智；聪敏</td>
<td style="text-align:center"><code>sag - to know</code></td>
<td style="text-align:center">saga·city</td>
</tr>
<tr>
<td style="text-align:center">sage</td>
<td style="text-align:center">n. 圣人<br />adj. 睿智的</td>
<td style="text-align:center">什么都知道的人</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">saga</td>
<td style="text-align:center">n. 传说</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sagacious</td>
<td style="text-align:center">adj. 睿智的</td>
<td style="text-align:center">知道得多的</td>
<td style="text-align:center">sag·acious</td>
</tr>
<tr>
<td style="text-align:center">presage</td>
<td style="text-align:center">n./v. 预感</td>
<td style="text-align:center">提前知道</td>
<td style="text-align:center">pre·sage</td>
</tr>
<tr>
<td style="text-align:center">sapience</td>
<td style="text-align:center">n. 智慧</td>
<td style="text-align:center"><code>sap - sag</code></td>
<td style="text-align:center">sap·i·ence</td>
</tr>
<tr>
<td style="text-align:center">judicious</td>
<td style="text-align:center">adj. 明智的</td>
<td style="text-align:center">judge的判断一般是明智的</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">canny</td>
<td style="text-align:center">adj. 精明的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">perspicacious</td>
<td style="text-align:center">adj. 有洞察力的</td>
<td style="text-align:center">看得多且透的</td>
<td style="text-align:center">per·spic·acious</td>
</tr>
<tr>
<td style="text-align:center">urbane</td>
<td style="text-align:center">adj. 文雅的</td>
<td style="text-align:center">城市urban里的</td>
<td style="text-align:center">urban·e</td>
</tr>
<tr>
<td style="text-align:center">courteous</td>
<td style="text-align:center">adj. 彬彬有礼的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">refined</td>
<td style="text-align:center">adj. 有教养的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">vulgar</td>
<td style="text-align:center">adj. 下流的；平庸的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ardent</td>
<td style="text-align:center">adj. 热心的；热情的</td>
<td style="text-align:center"><code>ard/ars - to burn</code></td>
<td style="text-align:center">ard·ent</td>
</tr>
<tr>
<td style="text-align:center">ardor</td>
<td style="text-align:center">n. 热情</td>
<td style="text-align:center"></td>
<td style="text-align:center">ard·or</td>
</tr>
<tr>
<td style="text-align:center">arson</td>
<td style="text-align:center">n. 纵火罪</td>
<td style="text-align:center"></td>
<td style="text-align:center">ars·on</td>
</tr>
<tr>
<td style="text-align:center">arsonist</td>
<td style="text-align:center">n. 纵火犯</td>
<td style="text-align:center"></td>
<td style="text-align:center">arson·ist</td>
</tr>
<tr>
<td style="text-align:center">zeal</td>
<td style="text-align:center">n. 热情</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">derogatory</td>
<td style="text-align:center">adj. 损毁的，诽谤的</td>
<td style="text-align:center"><code>rog - to ask</code></td>
<td style="text-align:center">de·rog·atory</td>
</tr>
<tr>
<td style="text-align:center">derogate</td>
<td style="text-align:center">v. 贬损</td>
<td style="text-align:center">无理要求</td>
<td style="text-align:center">de·rog·ate</td>
</tr>
<tr>
<td style="text-align:center">abrogate</td>
<td style="text-align:center">v. 取消</td>
<td style="text-align:center">没有要求</td>
<td style="text-align:center">ab·rog·ate</td>
</tr>
<tr>
<td style="text-align:center">interrogate</td>
<td style="text-align:center">v. 审问</td>
<td style="text-align:center">互相问</td>
<td style="text-align:center">inter·rog·ate</td>
</tr>
<tr>
<td style="text-align:center">surrogate</td>
<td style="text-align:center">n./v. 代理，代理品</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">prerogative</td>
<td style="text-align:center">n. 特权</td>
<td style="text-align:center">提前要求</td>
<td style="text-align:center">pre·rog·at·ive</td>
</tr>
<tr>
<td style="text-align:center">calumniate</td>
<td style="text-align:center">v. 诽谤</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">disparage</td>
<td style="text-align:center">v. 诽谤</td>
<td style="text-align:center"><code>par - 平等</code><br />不平等</td>
<td style="text-align:center">dis·par·age</td>
</tr>
<tr>
<td style="text-align:center">pejorative</td>
<td style="text-align:center">adj. 贬损的，诽谤的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">secrete</td>
<td style="text-align:center">v. 分泌；藏匿</td>
<td style="text-align:center">create(crete)并分出去(se)</td>
<td style="text-align:center">se·crete</td>
</tr>
<tr>
<td style="text-align:center">excrete</td>
<td style="text-align:center">v. 分泌</td>
<td style="text-align:center">create(crete)并分出去(ex)</td>
<td style="text-align:center">ex·crete</td>
</tr>
<tr>
<td style="text-align:center">hilarious</td>
<td style="text-align:center">adj. 高兴地；好笑有趣的</td>
<td style="text-align:center"><code>hilar - glad</code></td>
<td style="text-align:center">hilar·ious</td>
</tr>
<tr>
<td style="text-align:center">exhilarate</td>
<td style="text-align:center">v. 使高兴</td>
<td style="text-align:center"></td>
<td style="text-align:center">ex·hilar·ate</td>
</tr>
<tr>
<td style="text-align:center">hilarity</td>
<td style="text-align:center">n. 高兴</td>
<td style="text-align:center"></td>
<td style="text-align:center">hilar·ity</td>
</tr>
<tr>
<td style="text-align:center">paramount</td>
<td style="text-align:center">adj. 最重要的</td>
<td style="text-align:center"><code>para - above</code><br /><code>mount - 登上</code></td>
<td style="text-align:center">para·mound</td>
</tr>
<tr>
<td style="text-align:center">mount</td>
<td style="text-align:center">v. 增加</td>
<td style="text-align:center">登上更高的一层</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">dismount</td>
<td style="text-align:center">v. 下车，下马</td>
<td style="text-align:center"></td>
<td style="text-align:center">dis·mount</td>
</tr>
<tr>
<td style="text-align:center">surmount</td>
<td style="text-align:center">v. 征服，超越</td>
<td style="text-align:center">骑在下面</td>
<td style="text-align:center">sur·mount</td>
</tr>
<tr>
<td style="text-align:center">regress</td>
<td style="text-align:center">v. 倒退，后退</td>
<td style="text-align:center"><code>gress - to go</code><br />向后走</td>
<td style="text-align:center">re·gress</td>
</tr>
<tr>
<td style="text-align:center">compulsive</td>
<td style="text-align:center">adj. 强制的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">tenuous</td>
<td style="text-align:center">adj. 细的</td>
<td style="text-align:center"><code>tenu - thin</code></td>
<td style="text-align:center">tenu·ous</td>
</tr>
<tr>
<td style="text-align:center">tenuity</td>
<td style="text-align:center">n. 稀薄</td>
<td style="text-align:center"></td>
<td style="text-align:center">tenu·ity</td>
</tr>
<tr>
<td style="text-align:center">attenuate</td>
<td style="text-align:center">v. 使变薄；减轻</td>
<td style="text-align:center"></td>
<td style="text-align:center">at·tenu·ate</td>
</tr>
<tr>
<td style="text-align:center">extenuate</td>
<td style="text-align:center">v. 减轻(罪行)</td>
<td style="text-align:center"></td>
<td style="text-align:center">ex·tenu·ate</td>
</tr>
<tr>
<td style="text-align:center">acme</td>
<td style="text-align:center">n. 顶点</td>
<td style="text-align:center"><code>ac/acr/acerb - sharp/sour</code></td>
<td style="text-align:center">ac·me</td>
</tr>
<tr>
<td style="text-align:center">acne</td>
<td style="text-align:center">n. 粉刺</td>
<td style="text-align:center"></td>
<td style="text-align:center">ac·ne</td>
</tr>
<tr>
<td style="text-align:center">acrid</td>
<td style="text-align:center">adj. 尖刻的</td>
<td style="text-align:center"></td>
<td style="text-align:center">acr·id</td>
</tr>
<tr>
<td style="text-align:center">acrimony</td>
<td style="text-align:center">n. 尖刻</td>
<td style="text-align:center"></td>
<td style="text-align:center">acr·imony</td>
</tr>
<tr>
<td style="text-align:center">acerbic</td>
<td style="text-align:center">adj. 酸的，尖刻的</td>
<td style="text-align:center"></td>
<td style="text-align:center">acerb·ic</td>
</tr>
<tr>
<td style="text-align:center">exacerbate</td>
<td style="text-align:center">v. 恶化</td>
<td style="text-align:center">形势越来越尖锐</td>
<td style="text-align:center">ex·acerb·ate</td>
</tr>
<tr>
<td style="text-align:center">acumen</td>
<td style="text-align:center">n. 敏锐</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">culmination</td>
<td style="text-align:center">n. 顶峰</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">zenith</td>
<td style="text-align:center">n. 顶峰</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">crest</td>
<td style="text-align:center">n. 顶峰</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">nadir</td>
<td style="text-align:center">n. 最低点</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">candor</td>
<td style="text-align:center">n. 坦白</td>
<td style="text-align:center"><code>cand - white</code></td>
<td style="text-align:center">cand·or</td>
</tr>
<tr>
<td style="text-align:center">candid</td>
<td style="text-align:center">adj. 坦白的</td>
<td style="text-align:center"></td>
<td style="text-align:center">cand·id</td>
</tr>
<tr>
<td style="text-align:center">incandescent</td>
<td style="text-align:center">adj. 白热的，白炽的</td>
<td style="text-align:center"></td>
<td style="text-align:center">in·cand·escent</td>
</tr>
<tr>
<td style="text-align:center">feint</td>
<td style="text-align:center">n./v. 假装</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">feign</td>
<td style="text-align:center">v. 假装</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">dissuade</td>
<td style="text-align:center">v. 劝阻</td>
<td style="text-align:center">persuade<br />dissuade … from…<br />persuade … to …</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gratuitous</td>
<td style="text-align:center">adj. 无端的；免费的；无偿的</td>
<td style="text-align:center"><code>grat - to please</code><br /></td>
<td style="text-align:center">grat·uitous</td>
</tr>
<tr>
<td style="text-align:center">gratuity</td>
<td style="text-align:center">n. 赏钱，小费</td>
<td style="text-align:center">对服务员服务满意的报酬</td>
<td style="text-align:center">grat·uity</td>
</tr>
<tr>
<td style="text-align:center">gratify</td>
<td style="text-align:center">v. 使满足</td>
<td style="text-align:center"></td>
<td style="text-align:center">grat·ify</td>
</tr>
<tr>
<td style="text-align:center">ingratiate</td>
<td style="text-align:center">v. 讨好</td>
<td style="text-align:center">让他人对自己满意</td>
<td style="text-align:center">in·grat·iate</td>
</tr>
<tr>
<td style="text-align:center">ingrate</td>
<td style="text-align:center">n. 忘恩负义者</td>
<td style="text-align:center">不感恩</td>
<td style="text-align:center">in·grate</td>
</tr>
<tr>
<td style="text-align:center">impeach</td>
<td style="text-align:center">v. 弹劾；指责</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">paltry</td>
<td style="text-align:center">adj. 无价值的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">trivial</td>
<td style="text-align:center">adj. 无价值的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">trifle</td>
<td style="text-align:center">n. 琐事</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">nugatory</td>
<td style="text-align:center">adj. 琐碎的，无价值的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sordid</td>
<td style="text-align:center">adj. 污秽的；肮脏的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">squalid</td>
<td style="text-align:center">adj. 污秽的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">squalor</td>
<td style="text-align:center">n. 极其肮脏</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">natty</td>
<td style="text-align:center">adj. (衣着外表)整洁的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">dapper</td>
<td style="text-align:center">adj. 衣冠楚楚的</td>
<td style="text-align:center">de + appear</td>
<td style="text-align:center">d·apper</td>
</tr>
<tr>
<td style="text-align:center">trim</td>
<td style="text-align:center">adj. 整齐的<br />v. 修剪</td>
<td style="text-align:center">tree</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">aloof</td>
<td style="text-align:center">adv. 远离；冷漠</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">frigid</td>
<td style="text-align:center">adj. 冷淡的</td>
<td style="text-align:center">fridge 冰箱</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">offish</td>
<td style="text-align:center">adj. 冷淡</td>
<td style="text-align:center">远离</td>
<td style="text-align:center">off·ish</td>
</tr>
<tr>
<td style="text-align:center">detached</td>
<td style="text-align:center">adj. 冷淡的</td>
<td style="text-align:center">不touch</td>
<td style="text-align:center">de·tach·ed</td>
</tr>
<tr>
<td style="text-align:center">drab</td>
<td style="text-align:center">adj. 土褐色的；单调的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">monotonous</td>
<td style="text-align:center">adj. 单调的</td>
<td style="text-align:center"><code>mono - single</code><br />single tone</td>
<td style="text-align:center">mono·ton·ous</td>
</tr>
<tr>
<td style="text-align:center">dreary</td>
<td style="text-align:center">adj. 枯燥无味的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">humdrum</td>
<td style="text-align:center">adj./n. 单调的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>英语</category>
        <category>曲根万词班</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>单词</tag>
      </tags>
  </entry>
  <entry>
    <title>day 14</title>
    <url>/2019/11/25/day-14/</url>
    <content><![CDATA[<style>
table th:first-of-type {
    width: 150px;
}
</style>


<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">单词</th>
<th style="text-align:center">释义</th>
<th style="text-align:center">备注</th>
<th style="text-align:center">分解</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">feud</td>
<td style="text-align:center">n. 世仇</td>
<td style="text-align:center">关于土地field引起的世仇</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">feudal</td>
<td style="text-align:center">adj. 封建的</td>
<td style="text-align:center">封建土地</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">feudalism</td>
<td style="text-align:center">n. 封建制度</td>
<td style="text-align:center"></td>
<td style="text-align:center">feudal·ism</td>
</tr>
<tr>
<td style="text-align:center">indolent</td>
<td style="text-align:center">adj. 粗野的，无礼的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">presumptuous</td>
<td style="text-align:center">adj. 放肆无理的；专横的</td>
<td style="text-align:center"><code>sumpt/sume - to take</code><br />提前拿走</td>
<td style="text-align:center">pre·sumpt·uous</td>
</tr>
<tr>
<td style="text-align:center">predecessor</td>
<td style="text-align:center">n. 前任</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">successor</td>
<td style="text-align:center">n. 后辈</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">whet</td>
<td style="text-align:center">v. 刺激</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">quell</td>
<td style="text-align:center">v. 平息</td>
<td style="text-align:center">quiet</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">squelch</td>
<td style="text-align:center">v. 压制</td>
<td style="text-align:center">squash</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">acquit</td>
<td style="text-align:center">v. 宣告无罪</td>
<td style="text-align:center">退出指控</td>
<td style="text-align:center">ac·quit</td>
</tr>
<tr>
<td style="text-align:center">convict</td>
<td style="text-align:center">v. 证明某人有罪</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">culprit</td>
<td style="text-align:center">n. 犯罪</td>
<td style="text-align:center"><code>culp - guilt</code></td>
<td style="text-align:center">culp·rit</td>
</tr>
<tr>
<td style="text-align:center">culpable</td>
<td style="text-align:center">adj. 有罪的；应受谴责的</td>
<td style="text-align:center"></td>
<td style="text-align:center">culp·able</td>
</tr>
<tr>
<td style="text-align:center">detract</td>
<td style="text-align:center">v. 贬损</td>
<td style="text-align:center"><code>tract - to draw</code><br />向下拉</td>
<td style="text-align:center">de·tract</td>
</tr>
<tr>
<td style="text-align:center">protract</td>
<td style="text-align:center">v. 延长</td>
<td style="text-align:center">向前拉</td>
<td style="text-align:center">pro·tract</td>
</tr>
<tr>
<td style="text-align:center">intractable</td>
<td style="text-align:center">adj. 难以驾驭的</td>
<td style="text-align:center">拉不住的</td>
<td style="text-align:center">in·tract·able</td>
</tr>
<tr>
<td style="text-align:center">retract</td>
<td style="text-align:center">v. 收回</td>
<td style="text-align:center">拉回来</td>
<td style="text-align:center">re·tract</td>
</tr>
<tr>
<td style="text-align:center">indulgent</td>
<td style="text-align:center">adj. 放任的；溺爱的</td>
<td style="text-align:center">不再dull的生活</td>
<td style="text-align:center">in·dul·gent</td>
</tr>
<tr>
<td style="text-align:center">stern</td>
<td style="text-align:center">adj. 严格的，苛刻</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">rigid</td>
<td style="text-align:center">adj. 严格的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">rigorous</td>
<td style="text-align:center">adj. 严格的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">mendacious</td>
<td style="text-align:center">adj. 爱说谎的</td>
<td style="text-align:center">mind很多</td>
<td style="text-align:center">mend·acious</td>
</tr>
<tr>
<td style="text-align:center">perfidious</td>
<td style="text-align:center">adj. 背信弃义的，不忠的</td>
<td style="text-align:center"><code>fid - believe</code><br />离开了信仰</td>
<td style="text-align:center">per·fid·ious</td>
</tr>
<tr>
<td style="text-align:center">fraudulent</td>
<td style="text-align:center">adj. 欺骗性的，骗人的</td>
<td style="text-align:center">fraud</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">treacherous</td>
<td style="text-align:center">adj. 背信弃义的，不忠的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">brim</td>
<td style="text-align:center">n. 边缘</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">brink</td>
<td style="text-align:center">n. 峭壁的边缘</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">fringe</td>
<td style="text-align:center">n. 边缘；刘海</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">infringe</td>
<td style="text-align:center">v. 违背</td>
<td style="text-align:center">走进边缘</td>
<td style="text-align:center">in·fringe</td>
</tr>
<tr>
<td style="text-align:center">adjacent</td>
<td style="text-align:center">adj. 接近的；邻近的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">adjoin</td>
<td style="text-align:center">v. 邻近</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">abut</td>
<td style="text-align:center">v. 邻近</td>
<td style="text-align:center">abut on</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">devastate</td>
<td style="text-align:center">v. 毁灭</td>
<td style="text-align:center">waste (w → v)<br />都浪费掉</td>
<td style="text-align:center">de·vast·ate</td>
</tr>
<tr>
<td style="text-align:center">demolish</td>
<td style="text-align:center">v. 拆除；破坏</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">demolition</td>
<td style="text-align:center">n. 拆迁</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">inexhaustible</td>
<td style="text-align:center">adj. 无穷无尽的</td>
<td style="text-align:center">不会疲惫的</td>
<td style="text-align:center">in·exhaust·ible</td>
</tr>
<tr>
<td style="text-align:center">maudlin</td>
<td style="text-align:center">adj. 易落泪的，伤感</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">mushy</td>
<td style="text-align:center">adj. 感伤的，多愁善感的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">scrutinous</td>
<td style="text-align:center">adj. 仔细查看的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">scrutiny</td>
<td style="text-align:center">n. 细看</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">heedless</td>
<td style="text-align:center">adj. 不注意的，不留心的</td>
<td style="text-align:center">来自heed</td>
<td style="text-align:center">heed·less</td>
</tr>
<tr>
<td style="text-align:center">sundry</td>
<td style="text-align:center">adj. 种种的，各种各样的</td>
<td style="text-align:center">把一种东西分开sunder成各种各样的东西</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">assorted</td>
<td style="text-align:center">adj. 各种各样的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">zealous</td>
<td style="text-align:center">adj. 热心的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">zeal</td>
<td style="text-align:center">n. 热心</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">zest</td>
<td style="text-align:center">n. 热心</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">altruistic</td>
<td style="text-align:center">adj. 利他的</td>
<td style="text-align:center"><code>alter - other</code></td>
<td style="text-align:center">altr·uistic</td>
</tr>
<tr>
<td style="text-align:center">egoism</td>
<td style="text-align:center">n. 自我主义</td>
<td style="text-align:center"><code>ego - 自我</code></td>
<td style="text-align:center">ego·ism</td>
</tr>
<tr>
<td style="text-align:center">altercate</td>
<td style="text-align:center">v. 口角</td>
<td style="text-align:center">和别人吵架</td>
<td style="text-align:center">alter·cate</td>
</tr>
<tr>
<td style="text-align:center">alternate</td>
<td style="text-align:center">v. 交替</td>
<td style="text-align:center">和别人换</td>
<td style="text-align:center">alter·nate</td>
</tr>
<tr>
<td style="text-align:center">clamor</td>
<td style="text-align:center">v./n. 叫嚣</td>
<td style="text-align:center">claim</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">disclaim</td>
<td style="text-align:center">v. 否认</td>
<td style="text-align:center">宣布不是</td>
<td style="text-align:center">dis·claim</td>
</tr>
<tr>
<td style="text-align:center">declaim</td>
<td style="text-align:center">v. 演讲；慷慨陈词</td>
<td style="text-align:center">对下面的人讲</td>
<td style="text-align:center">de·claim</td>
</tr>
<tr>
<td style="text-align:center">reclaim</td>
<td style="text-align:center">v. 开垦；要求收回</td>
<td style="text-align:center">宣布要拿回来</td>
<td style="text-align:center">re·claim</td>
</tr>
<tr>
<td style="text-align:center">forebear</td>
<td style="text-align:center">n. 祖先</td>
<td style="text-align:center"></td>
<td style="text-align:center">fore·bear</td>
</tr>
<tr>
<td style="text-align:center">forefather</td>
<td style="text-align:center">n. 祖先</td>
<td style="text-align:center">之前的父亲</td>
<td style="text-align:center">fore·father</td>
</tr>
<tr>
<td style="text-align:center">descendant</td>
<td style="text-align:center">n. 子孙</td>
<td style="text-align:center">下面的人</td>
<td style="text-align:center">descent·ant</td>
</tr>
<tr>
<td style="text-align:center">intact</td>
<td style="text-align:center">adj. 原封不动的</td>
<td style="text-align:center"><code>tact - to touch</code><br />没有被碰过</td>
<td style="text-align:center">in·tact</td>
</tr>
<tr>
<td style="text-align:center">contagion</td>
<td style="text-align:center">n. 传染</td>
<td style="text-align:center">碰了一个人就得了一样的病</td>
<td style="text-align:center">con·tag·ion</td>
</tr>
<tr>
<td style="text-align:center">contiguity</td>
<td style="text-align:center">n. 邻近；接触</td>
<td style="text-align:center">抬头不见低头见，一直都要碰到</td>
<td style="text-align:center">con·tig·uity</td>
</tr>
<tr>
<td style="text-align:center">profuse</td>
<td style="text-align:center">adj. 丰富的；慷慨的；浪费的</td>
<td style="text-align:center"><code>fuse - pour</code><br />倒到垃圾桶里，浪费<br />倒到别人手里，慷慨<br />有那么多可以倒，丰富</td>
<td style="text-align:center">pro·fuse</td>
</tr>
<tr>
<td style="text-align:center">infuse</td>
<td style="text-align:center">v. 灌输</td>
<td style="text-align:center">倒进去</td>
<td style="text-align:center">in·fuse</td>
</tr>
<tr>
<td style="text-align:center">effuse</td>
<td style="text-align:center">v. 流出</td>
<td style="text-align:center">倒出来</td>
<td style="text-align:center">ef·fuse</td>
</tr>
<tr>
<td style="text-align:center">effusive</td>
<td style="text-align:center">adj. 热情洋溢的</td>
<td style="text-align:center">情感外露的</td>
<td style="text-align:center">ef·fus·ive</td>
</tr>
<tr>
<td style="text-align:center">suffuse</td>
<td style="text-align:center">v. 充满</td>
<td style="text-align:center">倒满</td>
<td style="text-align:center">suf·fuse</td>
</tr>
<tr>
<td style="text-align:center">fuddle</td>
<td style="text-align:center">v. 灌醉</td>
<td style="text-align:center">反复倒满酒</td>
<td style="text-align:center">fud·dle</td>
</tr>
<tr>
<td style="text-align:center">befuddle</td>
<td style="text-align:center">v. 使迷惑，困惑</td>
<td style="text-align:center">喝多酒的正常状态</td>
<td style="text-align:center">be·fuddle</td>
</tr>
<tr>
<td style="text-align:center">slack</td>
<td style="text-align:center">adj. 懈怠的；疏忽的；萧条的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sluggish</td>
<td style="text-align:center">adj. 懒惰的</td>
<td style="text-align:center">和鼻涕虫(slug)一样软塌塌地爬在那里</td>
<td style="text-align:center">slug·g·ish</td>
</tr>
<tr>
<td style="text-align:center">sluggard</td>
<td style="text-align:center">n. 懒鬼</td>
<td style="text-align:center">同上</td>
<td style="text-align:center">slug·g·ard</td>
</tr>
<tr>
<td style="text-align:center">tart</td>
<td style="text-align:center">adj. 酸的；尖刻的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">pungent</td>
<td style="text-align:center">adj. 尖刻的；刺激性的</td>
<td style="text-align:center"><code>pung/punc - 刺</code></td>
<td style="text-align:center">pung·ent</td>
</tr>
<tr>
<td style="text-align:center">expunge</td>
<td style="text-align:center">v. 删除，抹去</td>
<td style="text-align:center">刺出去</td>
<td style="text-align:center">ex·pung·e</td>
</tr>
<tr>
<td style="text-align:center">punctilious</td>
<td style="text-align:center">adj. 谨慎的</td>
<td style="text-align:center">小心不要刺到自己</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">compunction</td>
<td style="text-align:center">n. 后悔</td>
<td style="text-align:center">刺痛内心的行为</td>
<td style="text-align:center">com·punc·tion</td>
</tr>
<tr>
<td style="text-align:center">punch</td>
<td style="text-align:center">v .打孔；重击</td>
<td style="text-align:center">用拳头刺</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">poignant</td>
<td style="text-align:center">adj. 尖刻的；辛辣的</td>
<td style="text-align:center">point</td>
<td style="text-align:center">poign·ant</td>
</tr>
<tr>
<td style="text-align:center">nonviable</td>
<td style="text-align:center">adj. 无法生存的</td>
<td style="text-align:center">来自viable，不可行的</td>
<td style="text-align:center">non·viaible</td>
</tr>
<tr>
<td style="text-align:center">aslant</td>
<td style="text-align:center">adj. 斜的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">slant</td>
<td style="text-align:center">n. 斜面</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">concede</td>
<td style="text-align:center">v. 承认</td>
<td style="text-align:center">make concessions on<br /><code>cede - to go</code><br />与承认的人期行</td>
<td style="text-align:center">con·cede</td>
</tr>
<tr>
<td style="text-align:center">confide</td>
<td style="text-align:center">v. 相信，信任</td>
<td style="text-align:center"><code>fid - faith - to believe(confident)</code></td>
<td style="text-align:center">con·fide</td>
</tr>
<tr>
<td style="text-align:center">perfidy</td>
<td style="text-align:center">n. 背信弃义，不忠的</td>
<td style="text-align:center"><code>per - 假，坏</code><br />不值得相信的</td>
<td style="text-align:center">per·fid·y</td>
</tr>
<tr>
<td style="text-align:center">diffident</td>
<td style="text-align:center">adj. 缺乏自信的</td>
<td style="text-align:center">confident的反义词</td>
<td style="text-align:center">dif·fid·ent</td>
</tr>
<tr>
<td style="text-align:center">infidelity</td>
<td style="text-align:center">n. 不忠</td>
<td style="text-align:center">不值得信任</td>
<td style="text-align:center">in·fid·elity</td>
</tr>
<tr>
<td style="text-align:center">groggy</td>
<td style="text-align:center">adj. 虚弱的；不稳定的；酒醉的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">grog</td>
<td style="text-align:center">n. 烈性酒</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">rash</td>
<td style="text-align:center">adj. 鲁莽的，冒失的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sporadic</td>
<td style="text-align:center">adj, 零星的，偶发的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">chronic</td>
<td style="text-align:center">adj. 长期的</td>
<td style="text-align:center"><code>chron - time</code></td>
<td style="text-align:center">chron·ic</td>
</tr>
<tr>
<td style="text-align:center">chronological</td>
<td style="text-align:center">adj. 按时间顺序排列的</td>
<td style="text-align:center">时间逻辑</td>
<td style="text-align:center">chrono·logical</td>
</tr>
<tr>
<td style="text-align:center">chronicle</td>
<td style="text-align:center">n. 编年史<br />v. 记录</td>
<td style="text-align:center"></td>
<td style="text-align:center">chron·icle</td>
</tr>
<tr>
<td style="text-align:center">synchronize</td>
<td style="text-align:center">v. 使同步，同时发生</td>
<td style="text-align:center"><code>syn - same</code><br />更新时间相同</td>
<td style="text-align:center">syn·chron·ize</td>
</tr>
<tr>
<td style="text-align:center">toxic</td>
<td style="text-align:center">adj. 有毒的</td>
<td style="text-align:center"><code>tox - poison</code></td>
<td style="text-align:center">tox·ic</td>
</tr>
<tr>
<td style="text-align:center">intoxicate</td>
<td style="text-align:center">v. 使陶醉</td>
<td style="text-align:center">像中毒一样</td>
<td style="text-align:center">in·tox·ic·ate</td>
</tr>
<tr>
<td style="text-align:center">detoxify</td>
<td style="text-align:center">v. 解毒</td>
<td style="text-align:center">不中毒</td>
<td style="text-align:center">de·tox·ify</td>
</tr>
<tr>
<td style="text-align:center">antitoxin</td>
<td style="text-align:center">n. 抗毒素</td>
<td style="text-align:center">反毒药</td>
<td style="text-align:center">anti·tox·in</td>
</tr>
<tr>
<td style="text-align:center">antidote</td>
<td style="text-align:center">n. 解药</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">avert</td>
<td style="text-align:center">v. 避免；防止</td>
<td style="text-align:center"><code>vert/vers - turn</code><br />转开避免</td>
<td style="text-align:center">a·vert</td>
</tr>
<tr>
<td style="text-align:center">advert</td>
<td style="text-align:center">v. 注意</td>
<td style="text-align:center">广告是需要被注意到的</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">inadvertence</td>
<td style="text-align:center">n. 疏忽</td>
<td style="text-align:center">没注意到的</td>
<td style="text-align:center">in·advert·ence</td>
</tr>
<tr>
<td style="text-align:center">pervert</td>
<td style="text-align:center">n. 变态<br />v. 曲解</td>
<td style="text-align:center">越转离常人越远per，变态<br />越转离正解越远，曲解</td>
<td style="text-align:center">per·vert</td>
</tr>
<tr>
<td style="text-align:center">divert</td>
<td style="text-align:center">v. 转向；娱乐</td>
<td style="text-align:center">转向别的方向</td>
<td style="text-align:center">di·vert</td>
</tr>
<tr>
<td style="text-align:center">revert</td>
<td style="text-align:center">v. 恢复</td>
<td style="text-align:center">转回来</td>
<td style="text-align:center">re·vert</td>
</tr>
<tr>
<td style="text-align:center">invert</td>
<td style="text-align:center">v. 翻转，颠倒</td>
<td style="text-align:center"></td>
<td style="text-align:center">in·vert</td>
</tr>
<tr>
<td style="text-align:center">incontrovertible</td>
<td style="text-align:center">adj. 不容置疑的</td>
<td style="text-align:center">来自controvert</td>
<td style="text-align:center">in·controvert·ible</td>
</tr>
<tr>
<td style="text-align:center">subvert</td>
<td style="text-align:center">v. 颠覆，破坏</td>
<td style="text-align:center">从下面翻上来</td>
<td style="text-align:center">sub·vert</td>
</tr>
<tr>
<td style="text-align:center">extrovert</td>
<td style="text-align:center">n. 外向</td>
<td style="text-align:center">向外转</td>
<td style="text-align:center">extro·vert</td>
</tr>
<tr>
<td style="text-align:center">introvert</td>
<td style="text-align:center">n. 内向</td>
<td style="text-align:center">向内转</td>
<td style="text-align:center">intro·vert</td>
</tr>
<tr>
<td style="text-align:center">vertigo</td>
<td style="text-align:center">n. 眩晕</td>
<td style="text-align:center">转多了</td>
<td style="text-align:center">vert·igo</td>
</tr>
<tr>
<td style="text-align:center">vortex</td>
<td style="text-align:center">n. 旋涡</td>
<td style="text-align:center">一直在转的水</td>
<td style="text-align:center">vort·ex</td>
</tr>
<tr>
<td style="text-align:center">averse</td>
<td style="text-align:center">adj. 厌恶的</td>
<td style="text-align:center">和转多了一样反胃</td>
<td style="text-align:center">a·verse</td>
</tr>
<tr>
<td style="text-align:center">adverse</td>
<td style="text-align:center">adj. 敌对的，相反的</td>
<td style="text-align:center">厌恶的人</td>
<td style="text-align:center">ad·verse</td>
</tr>
<tr>
<td style="text-align:center">deduce</td>
<td style="text-align:center">v. 推论</td>
<td style="text-align:center"><code>duce - to lead</code></td>
<td style="text-align:center">de·duce</td>
</tr>
<tr>
<td style="text-align:center">embark</td>
<td style="text-align:center">v. (使)搭载；上船；着手做</td>
<td style="text-align:center">embark on</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">disembark</td>
<td style="text-align:center">v. 登陆，下船</td>
<td style="text-align:center"></td>
<td style="text-align:center">dis·embark</td>
</tr>
<tr>
<td style="text-align:center">inhume</td>
<td style="text-align:center">v. 埋葬</td>
<td style="text-align:center"><code>hum - ground(humble)</code><br />埋到土里</td>
<td style="text-align:center">in·hume</td>
</tr>
<tr>
<td style="text-align:center">exhume</td>
<td style="text-align:center">v. 挖掘</td>
<td style="text-align:center">从土里挖出来</td>
<td style="text-align:center">ex·hume</td>
</tr>
<tr>
<td style="text-align:center">posthumous</td>
<td style="text-align:center">adj. 死后的</td>
<td style="text-align:center"><code>post - behind</code><br />进土(死)后的事</td>
<td style="text-align:center">post·hum·ous</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>英语</category>
        <category>曲根万词班</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>单词</tag>
      </tags>
  </entry>
  <entry>
    <title>串</title>
    <url>/2019/08/02/%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="串"><a href="#串" class="headerlink" title="串"></a>串</h1><ol>
<li>相等：$S[0, n) = T[0, m)：n = m$，且对应字符均相同</li>
<li>子串：$S.substr(i, k) = S[i, i + k)$，即从$S[i]$开始的连续$k$个字符</li>
<li>前缀：$S.prefix(k) = S.substr(0, k) = S[0, k)$，即最靠前的$k$个字符</li>
<li>后缀：$S.suffix(k) = S.substr(n - k, k) = S[n - k, k)$，即最靠后的$k$个字符</li>
<li>$S.substr(i, k) = S.prefix(i + k).suffix(k)$</li>
<li>空串：$S[0, n = 0)$，是任何串的子串、前缀、后缀</li>
</ol>
<a id="more"></a>
<h1 id="串匹配问题"><a href="#串匹配问题" class="headerlink" title="串匹配问题"></a>串匹配问题</h1><ol>
<li>给定两个串，一个是文本串$T$，一个是模式串$P$，要求从文本串中找到模式串的匹配</li>
<li>直观地，很容易就想得到蛮力算法，即一个一个比较，直到找到或匹配结束</li>
<li>蛮力算法实现方式$1$：指针i指向模式串$P[ i ]$，指针j指向文本串$T[ j ]$，每成功配对一个字符$P[ i ] == T[ j ]$，就$i$和$j$一起加一，如果失败就令$i = 0$，$j = j - i + 1$，知道$i$或$j$指向$P$或$T$的末尾。最后返回$j - i$，如果$j - i$大于$|T| - |P|$则失败，否则$j - i$就是成功的位置</li>
<li>蛮力算法实现方法$2$：相比于实现方式$1$，每次比对比的都是$P[ i ]$与$T[ i + j ]$，成功就只是$i$加一，失败就是$j = j + 1$，$i = 0$。循环退出条件一样，最后返回的就是$j$，$j == |T|$，就是失败，否则$j$就是成功的位置</li>
</ol>
<h1 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h1><p>蛮力算法慢的原因：到一个点匹配失败，可以得出在这个点之前到都是匹配成功的，这样我们就可以通过模式串知道文本串在那一段中的信息，利用这些信息，我们就可以提前知道哪些值得匹配，哪些不值得匹配，就可以跳过一些内容，省下时间。而蛮力算法的问题就是没有好好利用我们已知的模式串的信息。<br>改进：对模式串进行预处理，知道当我们在模式串的第i个点匹配失败时应该跳到第$nex[ i ]$而不是都回到原点</p>
<h2 id="nex数组"><a href="#nex数组" class="headerlink" title="nex数组"></a>nex数组</h2><h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><ol>
<li>匹配失败了以后，文本串上的指针是不动的，我们所做的操作只是移动了模式串让$nex[ i ]$去和文本串之前失败的地方匹配</li>
<li>所以移过去了以后，模式串跳过的那些前缀就和文本串中失败点之前到一段等长后缀匹配</li>
<li>又文本串失败点之前的内容已经和模式串的失败点之前的子串匹配所以实际就是模式串在失败点之前的子串的一个前缀和后缀在匹配，而跳过的长度就是匹配前缀的长度，$nex[ i ]$存储的值就是这个长度。<br><img src="/img/KMP串匹配算法01.jpg" width="80%"><h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3></li>
<li>构造就是模式串自匹配的过程。子匹配时两个指针，一个$mainPos$指的是文本串，一个$modePos$指的是模式串，虽然两个都指在同一个串中。匹配时有两种情况：</li>
<li>如果文本串和模式串匹配，则$nex[mainPos] = modeString + 1$，因为$modePos$及其以前的子串已经和$mainPos$之前的后缀匹配了，所以在这里的最长前缀只能全部取，长度就是$modePos+1$</li>
<li>如果不匹配，$modePos = nex[modePos]$，道理同文本串和模式串不同时，直到匹配成功</li>
<li>为了防止第一个就不匹配，我们设定一个哨兵，在整个字符串的前面，假设这个哨兵可以和任意字符匹配，位置为$-1$，所以$nex[0] = -1$，第一个都失败的话就让哨兵去匹配现在的那个点才能成功</li>
<li>$modePos$初始就设为$nex[ 0 ] = -1$</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildNext</span><span class="params">(<span class="keyword">char</span>* P)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nex[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> mainString = <span class="number">0</span>, modeString = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(mainString &lt; str2.length() - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(modeString &lt; <span class="number">0</span> || P[mainString] == P[modeString])</span><br><span class="line">        &#123;</span><br><span class="line">          	mainString++;</span><br><span class="line">          	modeString++;</span><br><span class="line">            nex[mainString] = modeString;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            modeString = nex[modeString];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>！！！！！nex数组的下标i都是模式串的第i位，而不是文本串的第i位</strong></p>
<h2 id="KMP主算法"><a href="#KMP主算法" class="headerlink" title="KMP主算法"></a>KMP主算法</h2><p>和蛮力算法实现方法$1$的区别</p>
<ol>
<li>程序开始的时候要先做一次预处理，得到一张$nex$表</li>
<li>匹配成功的条件除了对应字符相等之外，还有可能是指向模式串的指针小于$0$</li>
<li>当发生失配时，不移动指向文本串的指针，把指向模式串的指针移至$nex$表中对应的数值，若$i$为该指针，则令$i = nex[ i ]$</li>
</ol>
<h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><ol>
<li>在匹配过程中， 我们能得到的不单单是哪几个是一样的，我们也可以知道不能是什么，我们不应该在失败了一次之后再拿同一种元素继续匹配，而之前的算法没有好好地利用这条信息</li>
<li>改进的方法很简单，就是在构建nex表的过程中赋值$nex$表时判断这两个元素是否一样，如果一样就令两个$nex$表值一样，不一样才加一<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(modeString &lt; <span class="number">0</span> || P[mainString] == P[modeString])</span><br><span class="line">&#123;</span><br><span class="line">		mainString++;</span><br><span class="line">		modeString++;</span><br><span class="line">		nex[mainString] = P[mainString] == P[modeString] ? nex[modeString] : modeString;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">		modeString = nex[modeString];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="nex数组的其余应用"><a href="#nex数组的其余应用" class="headerlink" title="nex数组的其余应用"></a>nex数组的其余应用</h2><h3 id="任意前缀的重复次数"><a href="#任意前缀的重复次数" class="headerlink" title="任意前缀的重复次数"></a>任意前缀的重复次数</h3><p>$nex[i]$可以理解为串的长为$nex[i]$的前缀在自身上以第$i$个元素开头，长为$nex[i]$的子串重合，即前缀重复了一次。所以利用$nex$数组，我们就可以知道任意前缀的重复次数</p>
<h3 id="串的周期性"><a href="#串的周期性" class="headerlink" title="串的周期性"></a>串的周期性</h3><p>建立$nex$数组时，$while$循环的条件改为$mainString &lt; str2.length()$，设串长为$len$，则：</p>
<ol>
<li>如果$nex[len] == 0$，则该串毫无循环；</li>
<li>如果有$len % (len - nex[len]) == 0$，则这是一个循环串，且循环节长度为$len - nex[len]$，循环次数为$len / (len - nex[len])$；</li>
<li>否则该串有部分循环，且最少再补$(len - nex[len]) - len % (len - nex[len])$个元素就可以成为循环</li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>数据结构 (清华大学邓俊辉)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>day 15</title>
    <url>/2019/11/25/day-15/</url>
    <content><![CDATA[<style>
table th:first-of-type {
    width: 150px;
}
</style>

<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">单词</th>
<th style="text-align:center">释义</th>
<th style="text-align:center">备注</th>
<th style="text-align:center">分解</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">jovial</td>
<td style="text-align:center">adj. 快乐的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">jolly</td>
<td style="text-align:center">adj. 快乐的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">convivial</td>
<td style="text-align:center">adj. 欢乐的；轻松活泼的；欢宴的</td>
<td style="text-align:center">convival friends 酒肉朋友</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">pastime</td>
<td style="text-align:center">n. 娱乐</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">diversion</td>
<td style="text-align:center">n. 消遣，娱乐</td>
<td style="text-align:center">来自divert</td>
<td style="text-align:center">divers·ion</td>
</tr>
<tr>
<td style="text-align:center">recreation</td>
<td style="text-align:center">n. 消遣，娱乐</td>
<td style="text-align:center">物质丰富，再创作出娱乐活动</td>
<td style="text-align:center">re·creat·ion</td>
</tr>
<tr>
<td style="text-align:center">abdicate</td>
<td style="text-align:center">v. 放弃</td>
<td style="text-align:center">说(dic)离开(ab)</td>
<td style="text-align:center">ab·dic·ate</td>
</tr>
<tr>
<td style="text-align:center">snug</td>
<td style="text-align:center">adj. 温暖而舒适的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">cosy</td>
<td style="text-align:center">adj. 舒适的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">purify</td>
<td style="text-align:center">v. 使纯净</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">expurgate</td>
<td style="text-align:center">v. 删除</td>
<td style="text-align:center"><code>purg - pure</code><br />向外净化</td>
<td style="text-align:center">ex·purg·ate</td>
</tr>
<tr>
<td style="text-align:center">purgative</td>
<td style="text-align:center">n. 泻药</td>
<td style="text-align:center">大肠清洁剂</td>
<td style="text-align:center">purg·ative</td>
</tr>
<tr>
<td style="text-align:center">purge</td>
<td style="text-align:center">v. 清洗，净化</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">demolish</td>
<td style="text-align:center">v. 破坏</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">mollify</td>
<td style="text-align:center">v. 减轻；安慰</td>
<td style="text-align:center"><code>moll - soft</code><br />软化受伤的心</td>
<td style="text-align:center">moll·ify</td>
</tr>
<tr>
<td style="text-align:center">emollient</td>
<td style="text-align:center">n. 润肤剂</td>
<td style="text-align:center">让皮肤柔软</td>
<td style="text-align:center">e·moll·ient</td>
</tr>
<tr>
<td style="text-align:center">thralldom</td>
<td style="text-align:center">n. 奴役</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">bondage</td>
<td style="text-align:center">n. 奴役</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">lull</td>
<td style="text-align:center">v. 使安静</td>
<td style="text-align:center">呼噜声大<br />lull sb. to sleep</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gull</td>
<td style="text-align:center">n. 海鸥</td>
<td style="text-align:center">海鸥咕咕叫</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gullible</td>
<td style="text-align:center">adj. 轻信的</td>
<td style="text-align:center">海鸥见到东西就去吃</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">mull</td>
<td style="text-align:center">v. 沉思</td>
<td style="text-align:center">muse</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">null</td>
<td style="text-align:center">adj. 无效的</td>
<td style="text-align:center">null and void</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">hull</td>
<td style="text-align:center">n. 船身</td>
<td style="text-align:center">水手的house</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">cull</td>
<td style="text-align:center">n. 屠宰<br />v. 精选</td>
<td style="text-align:center">cut肉</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">plaintiff</td>
<td style="text-align:center">n. 原告</td>
<td style="text-align:center">plain + tiff<br />发起在法院清晰的吵架的人</td>
<td style="text-align:center">plain·tiff</td>
</tr>
<tr>
<td style="text-align:center">defendant</td>
<td style="text-align:center">n. 被告</td>
<td style="text-align:center">为自己辩护</td>
<td style="text-align:center">defend·ant</td>
</tr>
<tr>
<td style="text-align:center">strenuous</td>
<td style="text-align:center">adj. 辛苦的</td>
<td style="text-align:center">strenuous exercise 剧烈运动<br />来自strength</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">vitiate</td>
<td style="text-align:center">v. 使污浊；使无效</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">nullify</td>
<td style="text-align:center">v. 使无效</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">annul</td>
<td style="text-align:center">v. 使无效</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">aggrieve</td>
<td style="text-align:center">v. 使苦恼；迫害</td>
<td style="text-align:center">来自grieve</td>
<td style="text-align:center">ag·grieve</td>
</tr>
<tr>
<td style="text-align:center">persecute</td>
<td style="text-align:center">v. 迫害</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">callous</td>
<td style="text-align:center">adj. 无情的；长茧的</td>
<td style="text-align:center"><code>call - hand</code><br />粗活干多了，手上长老茧<br />心里长茧，心变硬了，无情</td>
<td style="text-align:center">call·ous</td>
</tr>
<tr>
<td style="text-align:center">calloused</td>
<td style="text-align:center">adj. 长满老茧的</td>
<td style="text-align:center">calloused hands</td>
<td style="text-align:center">callous·ed</td>
</tr>
<tr>
<td style="text-align:center">callosity</td>
<td style="text-align:center">n. 无情；老茧</td>
<td style="text-align:center"></td>
<td style="text-align:center">call·osity</td>
</tr>
<tr>
<td style="text-align:center">dissent</td>
<td style="text-align:center">n./v. 反对</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">fabulous</td>
<td style="text-align:center">adj. 惊人的</td>
<td style="text-align:center"><code>fab - to speak</code><br />惊讶地大叫</td>
<td style="text-align:center">fab·ulous</td>
</tr>
<tr>
<td style="text-align:center">affable</td>
<td style="text-align:center">adj. 和蔼可亲的</td>
<td style="text-align:center">容易一起讲话的</td>
<td style="text-align:center">af·fab·le</td>
</tr>
<tr>
<td style="text-align:center">ineffable</td>
<td style="text-align:center">adj. 不可言喻的</td>
<td style="text-align:center">讲不出来的</td>
<td style="text-align:center">in·ef·fab·le</td>
</tr>
<tr>
<td style="text-align:center">gorgeous</td>
<td style="text-align:center">adj. 惊人的，极好的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">infuriate</td>
<td style="text-align:center">v. 激怒</td>
<td style="text-align:center">来自fury</td>
<td style="text-align:center">in·furi·ate</td>
</tr>
<tr>
<td style="text-align:center">furious</td>
<td style="text-align:center">adj. 生气的</td>
<td style="text-align:center"></td>
<td style="text-align:center">furi·ous</td>
</tr>
<tr>
<td style="text-align:center">incense</td>
<td style="text-align:center">v. 激怒</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">incentive</td>
<td style="text-align:center">adj. 激励的</td>
<td style="text-align:center">来自incense (s → t)<br />在怒气激励下</td>
<td style="text-align:center">incent·ive</td>
</tr>
<tr>
<td style="text-align:center">exasperate</td>
<td style="text-align:center">v. 激怒；恶化</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">vex</td>
<td style="text-align:center">v. 激怒</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">incite</td>
<td style="text-align:center">v. 激起，煽动</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">foment</td>
<td style="text-align:center">v. 激起，煽动</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">mordant</td>
<td style="text-align:center">adj. 尖酸的，讽刺的</td>
<td style="text-align:center"><code>mors - bite</code><br />像要咬人一样</td>
<td style="text-align:center">mord·ant</td>
</tr>
<tr>
<td style="text-align:center">remorse</td>
<td style="text-align:center">n. 后悔</td>
<td style="text-align:center">后悔得反咬自己一口</td>
<td style="text-align:center">re·morse</td>
</tr>
<tr>
<td style="text-align:center">prowess</td>
<td style="text-align:center">n. 勇敢；高超的技艺</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">dissipate</td>
<td style="text-align:center">v. 驱散，散开；浪费</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">colossal</td>
<td style="text-align:center">adj. 巨大的</td>
<td style="text-align:center">共同损失巨大的</td>
<td style="text-align:center">co·loss·al</td>
</tr>
<tr>
<td style="text-align:center">stupendous</td>
<td style="text-align:center">adj. 巨大的；惊人的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">prodigious</td>
<td style="text-align:center">adj. 惊人的</td>
<td style="text-align:center">prod - pro<br />一直向前行动</td>
<td style="text-align:center">prod·ig·ious</td>
</tr>
<tr>
<td style="text-align:center">prodigy</td>
<td style="text-align:center">n. 奇才</td>
<td style="text-align:center">在领域内一直往前不会受到阻碍</td>
<td style="text-align:center">prod·ig·y</td>
</tr>
<tr>
<td style="text-align:center">prodigal</td>
<td style="text-align:center">adj. 浪费的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gargantuan</td>
<td style="text-align:center">adj. 巨大的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">dismal</td>
<td style="text-align:center">adj. 沮丧的，忧郁的</td>
<td style="text-align:center"></td>
<td style="text-align:center">dis·mal</td>
</tr>
<tr>
<td style="text-align:center">downcast</td>
<td style="text-align:center">adj. 沮丧的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">melancholy</td>
<td style="text-align:center">adj. 沮丧的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">genial</td>
<td style="text-align:center">adj. 亲切的；愉快的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">inveterate</td>
<td style="text-align:center">adj. 根深蒂固的，习惯的</td>
<td style="text-align:center">inveterate smoker 老烟枪<br />veteran</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ineradicable</td>
<td style="text-align:center">adj. 根深蒂固的</td>
<td style="text-align:center"><code>rad - remove</code><br />擦不掉的习惯</td>
<td style="text-align:center">in·e·rad·ic·able</td>
</tr>
<tr>
<td style="text-align:center">ingrained</td>
<td style="text-align:center">adj. 根深蒂固的，难以改变的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">addictive</td>
<td style="text-align:center">adj. 根深蒂固的</td>
<td style="text-align:center">加上难以去掉</td>
<td style="text-align:center">add·ictive</td>
</tr>
<tr>
<td style="text-align:center">sojourn</td>
<td style="text-align:center">n./v. 暂住，寄居</td>
<td style="text-align:center"><code>journ - day</code><br /><code>so - sub</code><br />住下的日子</td>
<td style="text-align:center">so·journ</td>
</tr>
<tr>
<td style="text-align:center">diurnal</td>
<td style="text-align:center">adj. 白天的</td>
<td style="text-align:center"><code>di - day</code><br />journ - urn</td>
<td style="text-align:center">di·urn·al</td>
</tr>
<tr>
<td style="text-align:center">nocturnal</td>
<td style="text-align:center">adj. 夜间的</td>
<td style="text-align:center"><code>noct - night</code></td>
<td style="text-align:center">noct·urn·al</td>
</tr>
<tr>
<td style="text-align:center">adjourn</td>
<td style="text-align:center">v. 推迟，延期</td>
<td style="text-align:center">加几天</td>
<td style="text-align:center">ad·journ</td>
</tr>
<tr>
<td style="text-align:center">lodge</td>
<td style="text-align:center">v. 暂住</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">turmoil</td>
<td style="text-align:center">n. 混乱，骚乱</td>
<td style="text-align:center"><code>turb - to stir(disturn)</code></td>
<td style="text-align:center">tur·moil</td>
</tr>
<tr>
<td style="text-align:center">perturb</td>
<td style="text-align:center">v. 打扰</td>
<td style="text-align:center">一直stir</td>
<td style="text-align:center">per·turb</td>
</tr>
<tr>
<td style="text-align:center">turbulence</td>
<td style="text-align:center">n. 气流；骚乱</td>
<td style="text-align:center">气流扰乱</td>
<td style="text-align:center">turb·ul·ence</td>
</tr>
<tr>
<td style="text-align:center">turbid</td>
<td style="text-align:center">adj. 浑浊的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">limpid</td>
<td style="text-align:center">adj. 清澈的，透明的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">tumult</td>
<td style="text-align:center">n. 混乱</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">commotion</td>
<td style="text-align:center">n. 混乱，骚乱</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">haggard</td>
<td style="text-align:center">adj. 憔悴的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">irreparable</td>
<td style="text-align:center">adj. 无法挽救的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">paternal</td>
<td style="text-align:center">adj. 父系的</td>
<td style="text-align:center"><code>pater - father/country</code></td>
<td style="text-align:center">patern·al</td>
</tr>
<tr>
<td style="text-align:center">patron</td>
<td style="text-align:center">n. 老顾客</td>
<td style="text-align:center">对店就像父亲一样</td>
<td style="text-align:center">patr·on</td>
</tr>
<tr>
<td style="text-align:center">patronize</td>
<td style="text-align:center">v. 赞助；庇护</td>
<td style="text-align:center">父亲赞助生活</td>
<td style="text-align:center">patr·on·ize</td>
</tr>
<tr>
<td style="text-align:center">repatriate</td>
<td style="text-align:center">v. 遣返</td>
<td style="text-align:center">返回祖国</td>
<td style="text-align:center">re·patri·ate</td>
</tr>
<tr>
<td style="text-align:center">expatriate</td>
<td style="text-align:center">v. 驱逐</td>
<td style="text-align:center">赶出祖国</td>
<td style="text-align:center">ex·patri·ate</td>
</tr>
<tr>
<td style="text-align:center">compatriot</td>
<td style="text-align:center">n. 同胞</td>
<td style="text-align:center">同一个国家的人</td>
<td style="text-align:center">com·patri·ot</td>
</tr>
<tr>
<td style="text-align:center">patriotism</td>
<td style="text-align:center">n. 爱国主义</td>
<td style="text-align:center">爱祖国</td>
<td style="text-align:center">patri·ot·ism</td>
</tr>
<tr>
<td style="text-align:center">maternal</td>
<td style="text-align:center">adj. 母系的</td>
<td style="text-align:center"><code>mater - mother</code></td>
<td style="text-align:center">matern·al</td>
</tr>
<tr>
<td style="text-align:center">maternity</td>
<td style="text-align:center">n. 母性</td>
<td style="text-align:center"></td>
<td style="text-align:center">matern·ity</td>
</tr>
<tr>
<td style="text-align:center">metropolis</td>
<td style="text-align:center">n. 大都市</td>
<td style="text-align:center"></td>
<td style="text-align:center">metro·polis</td>
</tr>
<tr>
<td style="text-align:center">matriarchy</td>
<td style="text-align:center">n. 女族长制；母系氏族</td>
<td style="text-align:center"></td>
<td style="text-align:center">matri·archy</td>
</tr>
<tr>
<td style="text-align:center">fraternal</td>
<td style="text-align:center">adj. 兄弟的</td>
<td style="text-align:center"><code>frater - brother</code></td>
<td style="text-align:center">frater·nal</td>
</tr>
<tr>
<td style="text-align:center">quarantine</td>
<td style="text-align:center">n./v. 隔离，验证疫期</td>
<td style="text-align:center">qua(rter)ran(→ tin)tine<br />被关在罐子里一季度</td>
<td style="text-align:center">qua·ran·tine</td>
</tr>
<tr>
<td style="text-align:center">segregate</td>
<td style="text-align:center">v. 隔离(种族)</td>
<td style="text-align:center"></td>
<td style="text-align:center">se·gre·gate</td>
</tr>
<tr>
<td style="text-align:center">insulate</td>
<td style="text-align:center">v. 隔离</td>
<td style="text-align:center">sul - sole</td>
<td style="text-align:center">in·sul·ate</td>
</tr>
<tr>
<td style="text-align:center">bigoted</td>
<td style="text-align:center">adj. 固执的；偏见的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">tenacious</td>
<td style="text-align:center">adj. 固执的</td>
<td style="text-align:center"><code>ten - tain - to keep</code><br />保留很多，不变</td>
<td style="text-align:center">ten·acious</td>
</tr>
<tr>
<td style="text-align:center">adamant</td>
<td style="text-align:center">adj. 坚决的，坚定不移的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">mulish</td>
<td style="text-align:center">adj. 固执的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">willful</td>
<td style="text-align:center">adj. 任性的</td>
<td style="text-align:center">充满个人意愿</td>
<td style="text-align:center">will·ful</td>
</tr>
<tr>
<td style="text-align:center">deficient</td>
<td style="text-align:center">adj. 不足的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sufficient</td>
<td style="text-align:center">adj. 充足的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">paucity</td>
<td style="text-align:center">n. 缺乏，不足</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">dearth</td>
<td style="text-align:center">n. 缺乏</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">scarcity</td>
<td style="text-align:center">n. 不足</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">elude</td>
<td style="text-align:center">v. 躲避</td>
<td style="text-align:center"><code>lude - to play</code><br />逃出去玩</td>
<td style="text-align:center">e·lude</td>
</tr>
<tr>
<td style="text-align:center">elusive</td>
<td style="text-align:center">adj. 逃避的；晦涩难懂的</td>
<td style="text-align:center">来自elude</td>
<td style="text-align:center">e·lus·ive</td>
</tr>
<tr>
<td style="text-align:center">allude</td>
<td style="text-align:center">v. 暗示，暗指</td>
<td style="text-align:center">开玩笑，暗指</td>
<td style="text-align:center">al·lude</td>
</tr>
<tr>
<td style="text-align:center">collude</td>
<td style="text-align:center">v. 串通</td>
<td style="text-align:center">一起玩</td>
<td style="text-align:center">col·lude</td>
</tr>
<tr>
<td style="text-align:center">delude</td>
<td style="text-align:center">v. 欺骗</td>
<td style="text-align:center">玩下流把戏</td>
<td style="text-align:center">de·lude</td>
</tr>
<tr>
<td style="text-align:center">ludicrous</td>
<td style="text-align:center">adj. 滑稽可笑的</td>
<td style="text-align:center"></td>
<td style="text-align:center">ludi·cr·ous</td>
</tr>
<tr>
<td style="text-align:center">prelude</td>
<td style="text-align:center">n. 前奏</td>
<td style="text-align:center">之前play的乐曲</td>
<td style="text-align:center">pre·lude</td>
</tr>
<tr>
<td style="text-align:center">interlude</td>
<td style="text-align:center">n. 间奏</td>
<td style="text-align:center">中间play的乐曲</td>
<td style="text-align:center">inter·lude</td>
</tr>
<tr>
<td style="text-align:center">postlude</td>
<td style="text-align:center">n. 尾声</td>
<td style="text-align:center">后面play的乐曲</td>
<td style="text-align:center">post·lude</td>
</tr>
<tr>
<td style="text-align:center">ignoble</td>
<td style="text-align:center">adj. 卑微的</td>
<td style="text-align:center"><code>ig - not</code><br />不高贵noble的</td>
<td style="text-align:center">ig·noble</td>
</tr>
<tr>
<td style="text-align:center">disgraceful</td>
<td style="text-align:center">adj. 丢脸的，不光彩的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ignominious</td>
<td style="text-align:center">adj. 不光彩的，可耻的</td>
<td style="text-align:center"><code>nom - name</code><br />没有名誉的</td>
<td style="text-align:center">ig·nom·inious</td>
</tr>
<tr>
<td style="text-align:center">kindred</td>
<td style="text-align:center">adj. 同类的；同族的</td>
<td style="text-align:center">来自kin</td>
<td style="text-align:center">kindr·ed</td>
</tr>
<tr>
<td style="text-align:center">poltroon</td>
<td style="text-align:center">n. 懦夫</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">rout</td>
<td style="text-align:center">v. 溃败，打散</td>
<td style="text-align:center"><code>rupt - to break</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">susceptible</td>
<td style="text-align:center">adj. 易受影响的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">abide</td>
<td style="text-align:center">v. 居住</td>
<td style="text-align:center">abide by 遵守</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">boisterous</td>
<td style="text-align:center">adj. 喧闹的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">despicable</td>
<td style="text-align:center">adj. 可鄙视的的</td>
<td style="text-align:center">可以不看的</td>
<td style="text-align:center">de·spic·able</td>
</tr>
<tr>
<td style="text-align:center">despise</td>
<td style="text-align:center">v. 鄙视</td>
<td style="text-align:center"></td>
<td style="text-align:center">de·spise</td>
</tr>
<tr>
<td style="text-align:center">exotic</td>
<td style="text-align:center">adj. 外来的；异域的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">nonplus</td>
<td style="text-align:center">v. 使迷惑</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">addle</td>
<td style="text-align:center">v. 使头脑混乱的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sever</td>
<td style="text-align:center">v. 分开；断绝</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sultry</td>
<td style="text-align:center">adj. 闷热的</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">swelter</td>
<td style="text-align:center">n./v. 使闷热</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">wane</td>
<td style="text-align:center">v. 月亏；减弱</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">wax</td>
<td style="text-align:center">v. 月满；增强</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>英语</category>
        <category>曲根万词班</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>单词</tag>
      </tags>
  </entry>
  <entry>
    <title>二分图匹配(匈牙利算法的优化—— Hopcroft-Karp算法)</title>
    <url>/2019/11/09/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D-%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95%E7%9A%84%E4%BC%98%E5%8C%96%E2%80%94%E2%80%94-Hopcroft-Karp%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="匈牙利算法的不足"><a href="#匈牙利算法的不足" class="headerlink" title="匈牙利算法的不足"></a>匈牙利算法的不足</h1><p>匈牙利算法在进行DFS时，没次都最多只能找到一条增广路，导致了我们要遍历所有的点和边才可以找到最大匹配。而Hopcroft-Karp算法就从这里开始改进——每次先通过BFS标出层次，再通过DFS验证增广路，可以一次找到多条路</p>
<h1 id="Hopcroft-Karp算法"><a href="#Hopcroft-Karp算法" class="headerlink" title="Hopcroft-Karp算法"></a>Hopcroft-Karp算法</h1><p>1、BFS标记层次：虽然说再进行BFS时只标记层次，不标记匹配增广路，但利用一些增广路的性质可以优化<br>&emsp;增广路都是从一个未匹配点开始，我们就只需要在开始的时候把所有的未匹配点推入队列<br>&emsp;增广路都是在另一个未匹配点结束，我们就只需标记到另一个未匹配点所在的那层即可<br>&emsp;<strong>数据存储</strong>：$map$存边，$dN$和$dM$分别表示$N$点集和$M$点集中各个点的层次，$matchN$、$matchM$分别存储点集$N$和点集$M$的匹配情况，整型全局变量$dist$表示当前遍历的最大层次同时标记还有没有增广路</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> dist;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[maxN][maxM], dN[maxN], dM[maxM], matchN[maxN], matchM[maxM];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span>  <span class="comment">//n是点集N的个数，m是点集M的个数，这里假设从点集N去匹配点集M</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">	dist = INF;</span><br><span class="line">	<span class="built_in">memset</span>(dN, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dN));</span><br><span class="line">	<span class="built_in">memset</span>(dM, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dM));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//所以未匹配点都加入队列</span></span><br><span class="line">		<span class="keyword">if</span>(matchN[i] == <span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			que.push(i);</span><br><span class="line">			dN[i] = <span class="number">0</span>;  <span class="comment">//这些未匹配点都是起点，所以是第0层</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(!que.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> dotN = que.front();</span><br><span class="line">		que.pop();</span><br><span class="line"></span><br><span class="line">		<span class="comment">//根据BFS的性质，当出现第一个超出遍历层数的点出现，之后的点都会超出，不必再继续遍历</span></span><br><span class="line">		<span class="keyword">if</span>(dN[dotN] &gt; dist)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> dotM = <span class="number">0</span>; dotM &lt; m; dotM++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">map</span>[dotN][dotM] &amp;&amp; dM[dotM] == <span class="number">-1</span>) <span class="comment">//相连且没有遍历过</span></span><br><span class="line">			&#123;</span><br><span class="line">				dM[dotM] = dN[dotN] + <span class="number">1</span>; <span class="comment">//dotN再走一步就可以到dotM，所以dotM的层数就是dotN加一</span></span><br><span class="line">				<span class="keyword">if</span>(matchM[dotM] == <span class="number">-1</span>) <span class="comment">//如果是未匹配点，遍历到这层就结束</span></span><br><span class="line">				&#123;</span><br><span class="line">					dist = dM[dotM]; <span class="comment">//这次遍历到最大层数</span></span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="comment">//如果是匹配点</span></span><br><span class="line">				&#123;</span><br><span class="line">					dN[matchM[dotM]] = dM[dotM] + <span class="number">1</span>;</span><br><span class="line">					que.push(matchM[dotM]); <span class="comment">//队列里装的永远都是点集N里的点</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dist != INF; <span class="comment">//如果dist == INF就说明没有增广路路，可以结束循环</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、DFS验证增广路：和匈牙利算法的DFS差不多，但是要求长度在$dist$以内，且是连续层次的点</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> vis[maxM];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> dotN, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> dotM = <span class="number">0</span>; dotM &lt; m; dotM++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!vis[dotM] &amp;&amp; <span class="built_in">map</span>[dotN][dotM] &amp;&amp; dM[dotM] == dN[dotN] + <span class="number">1</span>) <span class="comment">//连边且层次连续</span></span><br><span class="line">		&#123;</span><br><span class="line">			vis[dotM] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(matchM[dotM] != <span class="number">-1</span> &amp;&amp; dM[dotM] &gt; dist) <span class="comment">//长度超过dist还没找到未匹配点即路未结束</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(matchM[dotM] == <span class="number">-1</span> || DFS(matchM[dotM], m))</span><br><span class="line">			&#123;</span><br><span class="line">				matchM[dotM] = dotN;</span><br><span class="line">				matchN[dotN] = dotM;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、主算法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxMatch</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">memset</span>(matchN, <span class="number">-1</span>, <span class="keyword">sizeof</span>(matchN));</span><br><span class="line">	<span class="built_in">memset</span>(matchM, <span class="number">-1</span>, <span class="keyword">sizeof</span>(matchM));</span><br><span class="line">	<span class="keyword">while</span>(BFS(n, m))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(matchN[i] == <span class="number">-1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				ans += DFS(i, m);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://vjudge.net/problem/HDU-2389" target="_blank" rel="noopener">HDOJ 2389</a></p>
]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
        <category>二分图</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>二分图匹配(匈牙利算法DFS实现)</title>
    <url>/2019/11/09/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D-%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95DFS%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>相关内容：<br>二分图：可以分成毫无相关的两个子图<br>二分图匹配就是在二分图中依某种关系将两个图中的元素匹配起来。和稳定婚姻匹配的差别就是二分图匹配的榜单$没有优先关系之分$，即不会私奔</p>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>1、路：<br>&emsp;交替路：从$未匹配点$出发，依次经过非匹配边，匹配边，非匹配边……的路<br>&emsp;增广路：经过另一个未匹配点的交替路<br>2、增广路的特性：非匹配边比匹配边多一条<br>3、增广路定理：把增广路里的匹配边和非匹配边交换，即匹配边变为非匹配边，非匹配边变为非匹配边；就可以在点集无内边的前提下多一条匹配边，得以改进匹配<br>4、极大匹配：无法在只添加未匹配边的情况下增加匹配<br>5、最大匹配：极大匹配中匹配边最大的情况<br>6、完美(完备)匹配：所有点都是匹配点的匹配<br>7、二分图最小顶点覆盖：使用最少的顶点就覆盖所有边。$二分图最小顶点覆盖数 = 最大匹配数$<br>8、最小路径覆盖：用最少的边组成路径，使得这个路径经过所有点。$最小路径覆盖数 = 顶点数 - 最大匹配数$<br>9、最大独立集：一个点集，使得点集内的所有点与点集外的所有点都没有连边。一般图的最大独立集是NP完全问题，但二分图中$最大独立集 = 最小路径覆盖数$</p>
<h1 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h1><p>思想：先定一个点集A，让A里的点去“追”另一个点集B里的点。对A里的每一个点利用增广路定理改进匹配，直到无法改进，就得到最大匹配<br><strong>数据存储</strong>：一个二维数组$graph$来存储点集之间的选择，一个一维数组$mark$来标记被追点集中的点在该次查询中是否被访问过，两个一维数组$BoyMatched$和$GirlMatched$来表示两个点集中的匹配情况</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> graph[maxn][maxn], mark[maxn], BoyMatched[maxn], GirlMatched[maxn];</span><br></pre></td></tr></table></figure>
<p><strong>初始化</strong>：$graph$初始化为$0$，若$i$和$j$愿意在一起，则$graph[i][j] = graph[j][I] = 1$；$mark$在每次开始搜索增广路的时候都要全部初始化为$0$。$BoyMatched$和$GirlMatched$都初始化为一个点集里没有的值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">memset</span>(graph, <span class="number">0</span>, <span class="keyword">sizeof</span>(graph));</span><br><span class="line"><span class="built_in">memset</span>(boyMatched, <span class="number">0</span>, <span class="keyword">sizeof</span>(boyMatched));</span><br><span class="line"><span class="built_in">memset</span>(girlMatched, <span class="number">0</span>, <span class="keyword">sizeof</span>(girlMatched));</span><br></pre></td></tr></table></figure>
<p><strong>处理</strong>：<br>搜索增广路：用DFS搜索(假设$Girl$追$Boy$，他们的标号都是从$1$开始)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)   <span class="comment">//n：Boy的个数</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!mark[i] &amp;&amp; graph[i][u])  <span class="comment">//判断是否这条路在之前有没有经过这个点以及这个点与u是否来电</span></span><br><span class="line">		&#123;</span><br><span class="line">			mark[i] = <span class="number">1</span>;     <span class="comment">//标记这条路已经走过这个点了</span></span><br><span class="line">			<span class="keyword">if</span>(!BoyMatched[i] || DFS(BoyMatched[i]))<span class="comment">//若这个点就是未匹配点或这个点往下走有未匹配点</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">//匹配边和未匹配边状态交换</span></span><br><span class="line">				BoyMatched[i] = u;</span><br><span class="line">				GirlMarched[u] = i;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主算法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maximumMatch</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;   <span class="comment">//最大匹配数</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="comment">//遍历所有女生，m：女生个数</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!GirlMatched[i])   <span class="comment">//增广路要求从未匹配点开始</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">memset</span>(mark, <span class="number">0</span>, <span class="keyword">sizeof</span>(mark));    <span class="comment">//开始遍历一条新的路，之前的标记要清除</span></span><br><span class="line">			ans += DFS(i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
        <category>二分图</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>二分</title>
    <url>/2020/08/07/%E4%BA%8C%E5%88%86/</url>
    <content><![CDATA[<h1 id="基本二分查找"><a href="#基本二分查找" class="headerlink" title="基本二分查找"></a>基本二分查找</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[MAXN];</span><br><span class="line"><span class="comment">// arr按非降排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary_search_int</span><span class="params">(<span class="keyword">int</span> lo, <span class="keyword">int</span> hi, <span class="keyword">int</span> target)</span> <span class="comment">// 查找区间为 [lo, hi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (lo &lt; hi)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> mid = lo + ((hi - lo) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (arr[mid] &lt; target)</span><br><span class="line">    &#123;</span><br><span class="line">      lo = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      hi = mid;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">binary_search_real</span><span class="params">(<span class="keyword">double</span> lo, <span class="keyword">double</span> hi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (lo + EPS &lt; hi) <span class="comment">// EPS通常比要求的精度小两个数量级</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">double</span> mid = (lo + hi) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (cmp(mid))</span><br><span class="line">    &#123;</span><br><span class="line">      hi = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      lo = mid;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="二分答案"><a href="#二分答案" class="headerlink" title="二分答案"></a>二分答案</h1><p>有些题直接求答案不好求，但是一个结果是不是答案很容易判断，这时就可以写一个检查函数，检查一个结果是不是答案<br>例如：<a href="https://ac.nowcoder.com/acm/contest/918/I" target="_blank" rel="noopener">USACO</a><br>在知道了一个界限之后我们就很容易写出检查函数——一辆一辆塞，塞满或者达到界限为止</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> arrive[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n, <span class="keyword">int</span> c, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>, sum = <span class="number">1</span>, fir = arrive[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arrive[i] - fir &lt;= x &amp;&amp; sum + <span class="number">1</span> &lt;= c)</span><br><span class="line">        &#123;</span><br><span class="line">            sum++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            sum = <span class="number">1</span>;</span><br><span class="line">            fir = arrive[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt &lt;= m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;c);</span><br><span class="line">    repLess(i, <span class="number">0</span>, n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arrive[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(arrive, arrive + n);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = arrive[n - <span class="number">1</span>] - arrive[<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + ((r - l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (check(mid, n, c, m))</span><br><span class="line">        &#123;</span><br><span class="line">            r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            l = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (check(l, n, c, m))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="三分查找求单峰函数极值"><a href="#三分查找求单峰函数极值" class="headerlink" title="三分查找求单峰函数极值"></a>三分查找求单峰函数极值</h1><ol>
<li><p>要求单峰函数在极值的两侧都是严格单调，极大值左侧严格递增，右侧严格递减；极小值左侧严格递减，右侧严格递增。且只有一个极值</p>
</li>
<li><p>先考虑极大值情况，把区间用两个点$lmid$、$rmid$ 划分成三段区间</p>
<p>&emsp;如果$f(lmid)&lt;f(rmid)$，则要么$lmid$在极大值左侧，$rmid$在极大值右侧，要么都在极大值的左侧，但极大值都在$lmid$的右侧，此时可以赋值$l=lmid$</p>
<p>&emsp;如果$f(rmid)&lt;f(lmid)$，则要么$lmid$在极大值左侧，$rmid$在极大值右侧，要么都在极大值的右侧，但极大值都在$rmid$的左侧，此时可以赋值$r=rmid$</p>
</li>
<li><p>再考虑极小值情况</p>
<p>&emsp;如果$f(lmid)&lt;f(rmid)$，则要么$lmid$在极大值左侧，$rmid$在极大值右侧，要么都在极大值的右侧，但极大值都在$rmid$的左侧，此时可以赋值$r=rmid$</p>
<p>&emsp;如果$f(rmid)&lt;f(lmid)$，则要么$lmid$在极大值左侧，$rmid$在极大值右侧，要么都在极大值的右侧，但极大值都在$lmid$的右侧，此时可以赋值$l=lmid$</p>
</li>
</ol>
<h1 id="最近点对问题"><a href="#最近点对问题" class="headerlink" title="最近点对问题"></a>最近点对问题</h1><p>问题：给平面内一系列的点，找出其中距离最近的两个点<br />二分：先把所有点按$x$轴排序，分成左右两段，所有组合只有三种情况——两个点都在左半段；两个点都在右半段；一个点在左半段，一个点在右半段<br />二分解决左半段和右半段的问题，再枚举跨越两段的情况，找到最小值<br />枚举跨越两段的情况时，只需要枚举距离中点不超过只在左段或只在右段的最小距离<br />复杂度为<script type="math/tex">O(nlog\ n\ log\ n)</script></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (lo == hi - <span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> INF;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> mid = lo + ((hi - lo) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">double</span> ans = <span class="built_in">min</span>(solve(lo, mid), solve(mid, hi));</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = mid - <span class="number">1</span>; i &gt;= lo; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (dist(i, mid) &gt;= ans)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = mid; j &lt; hi; j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (dist(mid, j) &gt;= ans)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      ans = <span class="built_in">min</span>(ans, dist(i, j));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>扩展：把点分为两类，要找出一类点到另一类点的最短距离 <a href="https://ac.nowcoder.com/acm/contest/1004/D" target="_blank" rel="noopener">POJ 3714</a></p>
<p>在枚举的时候特判一下两个点的类别不同即可</p>
<h1 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h1><ol>
<li><code>lower_bound(begin, end, num)​</code>：在数组区间$[begin, end)$中查找第一个<strong><em><code>大于或等于</code></em></strong>$num$的数，如果不存在，则返回$end$</li>
<li><code>upper_bound(begin, end, num)​</code>：在数组区间$[begin, end)$中查找第一个<strong><em><code>大于</code></em></strong>$num$的数，如果不存在，则返回$end$</li>
<li>这两个函数都是返回一个指针，减掉$begin$，就可以得到其与$begin$的相对位置，是一个整型</li>
<li>如果要找的是小于或等于查找值的最大位置的话<br />&emsp;使用<code>lower_bound</code><br />&emsp;&emsp;如果查找值存在，得到的位置就是等于查找值的位置<br />&emsp;&emsp;如果查找值不存在，得到的是大于查找值的位置，且其上一个位置就是小于查找值的位置 (查找值不存在)，所以要减$1$<br />&emsp;使用<code>upper_bound</code><br />&emsp;&emsp;任何情况下得到的位置都是大于查找值，且其上一个位置等于查找值 (查找值存在)，或小于查找值 (查找值不存在)，所以都要减$1$<br />综上，我们采用​<code>upper_bound(begin, end, num) - begin - 1</code>的策略</li>
<li>如果要找的是小于查找值的最大位置的话<br />&emsp;使用<code>upper_bound</code><br />&emsp;&emsp;如果查找值存在，得到的位置的上一个位置是查找值，再上一个位置才小于查找值，则需要减$2$<br />&emsp;&emsp;如果查找值不存在，得到的是大于查找值的位置，且其上一个位置就是小于查找值的位置 (查找值不存在)，所以要减$1$<br />&emsp;使用<code>lower_bound</code><br />&emsp;&emsp;如果查找值存在，得到的位置是查找值，上一个位置小于查找值，要减$1$<br />&emsp;&emsp;如果查找值不存在，得到的位置大于查找值，但由于查找值不存在，其上一个位置小于查找值，要减$1$<br />综上，我们采用<code>lower_bound(begin, end, num) - begin - 1</code>的策略</li>
</ol>
]]></content>
      <categories>
        <category>算法</category>
        <category>基本算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>二分图最大权匹配</title>
    <url>/2019/11/09/%E4%BA%8C%E5%88%86%E5%9B%BE%E6%9C%80%E5%A4%A7%E6%9D%83%E5%8C%B9%E9%85%8D/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>最大权匹配是在<code>完美匹配</code>的前提下，使得所选的匹配边权值之和最大，是稳定二分图的进阶版。和稳定婚姻匹配的区别在于二分图最大权匹配不存在私奔的问题，故只需考虑匹配和权最大。</p>
<h1 id="KM算法"><a href="#KM算法" class="headerlink" title="KM算法"></a>KM算法</h1><p><strong>数据存储</strong>：两个一维数组$expectBoy$、$expectGirl$来存储$Boy$和$Girl$对对方的期望值，一个一维数组$boyMatch$存储$Boy$的匹配对象，两个一维数组$visBoy$、$visGirl$存储在该轮匹配中是否访问，一个一维数组$differ$存储男生匹配到女生的期望值差距，一个二维数组$love$存储两人间的好感度</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> expectGirl[maxn], expectBoy[maxn], boyMatch[maxn];</span><br><span class="line"><span class="keyword">int</span> visBoy[maxn], visGirl[maxn], differ[maxn];</span><br><span class="line"><span class="keyword">int</span> love[maxn][maxn];</span><br></pre></td></tr></table></figure>
<p><strong>初始化</strong>：初始时，$expectBoy$全部初始化为$0$，$expectGirl$初始化为该女生喜欢的男生中好感度最高的那个好感值(谁在一开始都希望得到最好的)，$boyMatch$全部初始化为$-1$，$differ$初始化为$INF$，$visBoy$、$visGirl$在每一轮的匹配开始都要初始化为$0$<br><strong>处理</strong>：<br>&emsp;1、匹配的DFS和二分图匹配一样，但是匹配要多一个条件就是男生和女生的期待值之和要等于两人间的好感度，即$expectBoy[boy] + expectGirl[girl] ==  love[girl][boy]$<br>&emsp;2、由第一条规则可以得知要求的最终最大权和就是男女的期望值和<br>&emsp;3、如果有一个女生试图匹配男生失败了，那个参与这次匹配的女生们就应该降低她们的期待值来得到牺牲自己让更多的人匹配到男生，而参与这次匹配的男生就应该提升期待值，保持和其匹配女生的期待值之和不变。而因为要得到最大的权值和，而此时男生一定比女生少一个，所以应该降低尽可能小的值，以减少权值的损失。而期待值只需降低至可以再拉一个为参加匹配的男生进来即可<br>&emsp;4、一个女生可能会匹配失败多次，所以要不断循环第三步直到成功<br>&emsp;5、每个女生都要匹配到</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>DFS：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> girl, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    visGirl[girl] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!visBoy[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//男生和女生的期待值之和与两人间的好感度之差</span></span><br><span class="line">            <span class="keyword">int</span> gap = expectBoy[i] + expectGirl[girl] - love[girl][i];</span><br><span class="line">            <span class="keyword">if</span>(gap == <span class="number">0</span>) <span class="comment">//若差为0，即相等</span></span><br><span class="line">            &#123;</span><br><span class="line">                visBoy[i] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(boyMatch[i] == <span class="number">-1</span> || DFS(boyMatch[i], n))</span><br><span class="line">                &#123;</span><br><span class="line">                    boyMatch[i] = girl;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">//差不为0，则男生和女生之间有差距，取差距的最小值</span></span><br><span class="line">                differ[i] = <span class="built_in">min</span>(differ[i], gap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主算法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KM</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="built_in">memset</span>(boyMatch, <span class="number">-1</span>, <span class="keyword">sizeof</span>(boyMatch));</span><br><span class="line">    <span class="built_in">memset</span>(expectBoy, <span class="number">0</span>, <span class="keyword">sizeof</span>(expectBoy));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        expectGirl[i] = love[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">            expectGirl[i] = <span class="built_in">max</span>(expectGirl[i], love[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为每个女生找对象</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">fill</span>(differ, differ + n, INF);</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) <span class="comment">//不断找，直到找到对象</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memset</span>(visBoy, <span class="number">0</span>, <span class="keyword">sizeof</span>(visBoy));</span><br><span class="line">            <span class="built_in">memset</span>(visGirl, <span class="number">0</span>, <span class="keyword">sizeof</span>(visGirl));</span><br><span class="line">            <span class="keyword">if</span>(DFS(i, n)) <span class="comment">//成功了</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//失败了，查找降低的最小标准</span></span><br><span class="line">            <span class="keyword">int</span> gap = INF;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                <span class="keyword">if</span>(!visBoy[j])</span><br><span class="line">                    gap = <span class="built_in">min</span>(gap, differ[j]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(visGirl[j]) <span class="comment">//降低所有参与匹配的女生的期望</span></span><br><span class="line">                    expectGirl[j] -= gap;</span><br><span class="line">                <span class="keyword">if</span>(visBoy[j]) <span class="comment">//降低所有参与匹配的女生的期望</span></span><br><span class="line">                    expectBoy[j] += gap;</span><br><span class="line">                <span class="keyword">else</span> <span class="comment">//没参与的因为女生期望降低，差距也减少</span></span><br><span class="line">                    differ[j] -= gap;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        ans += love[boyMatch[i]][i];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="最小权"><a href="#最小权" class="headerlink" title="最小权"></a>最小权</h1><p>把权值取相反数，再用$KM$算法求</p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>最大权：<br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2255" target="_blank" rel="noopener">HDOJ 2255(奔小康赚大钱)</a><br><a href="http://codeforces.com/problemset/problem/1107/F" target="_blank" rel="noopener">CF 1107F(Vasya and Endless Credits)</a><br>最小权：<br><a href="https://vjudge.net/problem/POJ-3565" target="_blank" rel="noopener">POJ 3656(Ants)</a><br><a href="https://vjudge.net/problem/POJ-2195" target="_blank" rel="noopener">POJ 2195(Going Home)</a></p>
]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
        <category>二分图</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>二分图的应用</title>
    <url>/2019/11/09/%E4%BA%8C%E5%88%86%E5%9B%BE%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h1 id="行列交换"><a href="#行列交换" class="headerlink" title="行列交换"></a>行列交换</h1><p><a href="https://vjudge.net/problem/HDU-2819" target="_blank" rel="noopener">HDOJ 2819</a><br>题目要求使对角线上都是$1$，就意味着我们要先选择几个$1$来挪到对角线上。又易知每一行每一列选且只选一个，这时我们就可以选择用匈牙利算法，如果不是完全匹配就无法完成。用匈牙利算法匹配后的成果$match$数组记录的是行列匹配情况，要使$1$都在对角线上，易知最终的行列匹配必须使行号等于列号。所以之后只需遍历一遍把匹配结果换到结果对应的那个下标即可</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmd</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num1, num2;</span><br><span class="line">&#125; arr[<span class="number">1005</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[maxn][maxn], vis[maxn], match[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i] &amp;&amp; <span class="built_in">map</span>[x][i])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(match[i] == <span class="number">0</span> || dfs(n, match[i]))</span><br><span class="line">            &#123;</span><br><span class="line">                match[i] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isOK</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">if</span>(!dfs(n, i))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//有一个点失败就一定不是完全匹配</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(match, <span class="number">0</span>, <span class="keyword">sizeof</span>(match));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!isOK(n))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(j &lt;= n)</span><br><span class="line">            &#123;</span><br><span class="line">            	<span class="comment">//寻找应该放在这个下标的元素</span></span><br><span class="line">                <span class="keyword">if</span>(match[j] == i)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i == j) <span class="comment">//如果就是当前下标则不需操作</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            arr[ans].num1 = i;</span><br><span class="line">            arr[ans].num2 = j;</span><br><span class="line">            <span class="comment">//交换匹配结果相当于直接交换列</span></span><br><span class="line">            <span class="keyword">int</span> temp = match[i];</span><br><span class="line">            match[i] = match[j];</span><br><span class="line">            match[j] = temp;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"C %d %d\n"</span>, arr[i].num1, arr[i].num2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
        <category>二分图</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>二分图的建图</title>
    <url>/2019/11/09/%E4%BA%8C%E5%88%86%E5%9B%BE%E7%9A%84%E5%BB%BA%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="依行建图与依列建图"><a href="#依行建图与依列建图" class="headerlink" title="依行建图与依列建图"></a>依行建图与依列建图</h1><p><a href="https://vjudge.net/problem/HDU-1045" target="_blank" rel="noopener">HDOJ 1045(Fire Net)</a><br>思路：<br>&emsp;1、寻找二分图<br>&emsp;&emsp;二分图的要求是要有两个互相独立的集合，而在图中最容易想到的互相独立的就是行列，且一个行号只可以和一个列号匹配，符合二分图的要求<br>&emsp;2、匹配机制<br>&emsp;&emsp;若一个格点内要放一个碉堡，就把行号和列号匹配起来<br>&emsp;3、构建二分图<br>&emsp;&emsp;由于题中的限制，我们要合并/拆分行列号，一行(列)中连续的可放点合并为一个行(列)号，被间隔的话就拆分为两个行(列)号。然后如果一个点是可放点就把那个点的行号和列号连起来建边<br>&emsp;4、然后利用匈牙利算法算出最大匹配</p>
<p>建图代码：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> rowNum[maxn], columnNum[maxn], graph[maxn][maxn];</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column, <span class="keyword">int</span> &amp; rowTotal, <span class="keyword">int</span> &amp; columnTotal)</span></span></span><br><span class="line"><span class="function"><span class="comment">//利用引用返回比行和列的总数大一的值，所以之后用到是小于号</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//标行号</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; column; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="string">'.'</span>)</span><br><span class="line">				rowNum[i][j] = rowTotal++;</span><br><span class="line">			<span class="keyword">while</span>(<span class="built_in">map</span>[i][j] == <span class="string">'.'</span>) <span class="comment">//合并连续可放点</span></span><br><span class="line">				rowNum[i][j++] = rowTotal - <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//标列号</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; column; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; row; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">map</span>[j][i] == <span class="string">'.'</span>)</span><br><span class="line">				columnNum[j][i] = columnTotal++;</span><br><span class="line">			<span class="keyword">while</span>(<span class="built_in">map</span>[j][i] == <span class="string">'.'</span>) <span class="comment">//合并连续可放点</span></span><br><span class="line">				columnNum[j++][i] = columnTotal - <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//建图</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; column; j++)</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="string">'.'</span>)</span><br><span class="line">				graph[row[i][j]][column[i][j]] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="依边建图"><a href="#依边建图" class="headerlink" title="依边建图"></a>依边建图</h1><p><a href="https://vjudge.net/problem/HDU-2444" target="_blank" rel="noopener">HDOJ 2444</a><br><a href="https://vjudge.net/problem/HDU-4185" target="_blank" rel="noopener">HDOJ 4185</a><br><a href="https://vjudge.net/problem/POJ-3020" target="_blank" rel="noopener">HDOJ 3020</a><br><a href="https://vjudge.net/problem/HDU-1054" target="_blank" rel="noopener">HDOJ 1054(最小点覆盖)</a><br>如果一个图是二分图，就可以通过染色法把点分别染为两种不同的颜色，然后就可以把点依据颜色的不同分成两部分，进行二分匹配<br><strong>染色法</strong>：利用BFS，把一个点所有的邻接点染成另一种颜色，如果染色的过程中发现有两个邻接点的颜色一样，就说明这不是一个二分图</p>
<p>当然，这种题也可以不按颜色划分，直接开始匹配。但是由于是无向边，从点集$A$到点集$B$会匹配一遍，$B$到$A$还会重复一遍，所以结果要除$2$<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[maxn][maxn], col[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBipartite</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(col, <span class="number">-1</span>, <span class="keyword">sizeof</span>(col));</span><br><span class="line">	<span class="keyword">bool</span> ok = <span class="literal">false</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(!ok) <span class="comment">//防止有非连通图</span></span><br><span class="line">	&#123;</span><br><span class="line">		ok = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">while</span>(!que.empty())</span><br><span class="line">		&#123;</span><br><span class="line">			que.pop();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(col[i] == <span class="number">-1</span>) <span class="comment">//找到一个尚未染色的点，开始染色</span></span><br><span class="line">			&#123;</span><br><span class="line">				que.push(i);</span><br><span class="line">				col[i] = <span class="number">1</span>; <span class="comment">//先给一个颜色</span></span><br><span class="line">				ok = <span class="literal">false</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> cur;</span><br><span class="line">		<span class="keyword">while</span>(!que.empty())</span><br><span class="line">		&#123;</span><br><span class="line">			cur = que.front();</span><br><span class="line">			que.pop();</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">map</span>[cur][i]) <span class="comment">//与cur相连</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(col[i] == col[cur]) <span class="comment">//如果两个颜色一样，说明不是二分图</span></span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span>(col[i] == <span class="number">-1</span>) <span class="comment">//如果没有染过色</span></span><br><span class="line">					&#123;</span><br><span class="line">						col[i] = <span class="number">1</span> - col[cur]; <span class="comment">//染上和cur不同的颜色</span></span><br><span class="line">						que.push(i); <span class="comment">//入队</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>匈牙利算法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> matchZero[maxn], matchOne[maxn], vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> zero)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">map</span>[zero][i] &amp;&amp; !vis[i] &amp;&amp; col[i] == <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			vis[i] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(!matchOne[i] || DFS(n, matchOne[i]))</span><br><span class="line">			&#123;</span><br><span class="line">				matchOne[i] = zero;</span><br><span class="line">				matchZero[zero] = i;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">match</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(matchZero, <span class="number">0</span>, <span class="keyword">sizeof</span>(matchZero));</span><br><span class="line">	<span class="built_in">memset</span>(matchOne, <span class="number">0</span>, <span class="keyword">sizeof</span>(matchOne));</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!matchZero[i] &amp;&amp; col[i] == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">			ans += DFS(n, i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="有向无环图"><a href="#有向无环图" class="headerlink" title="有向无环图"></a>有向无环图</h1><p><a href="https://vjudge.net/problem/HDU-1151" target="_blank" rel="noopener">HDOJ 1151</a><br>有向无环图天生就有二分性，可以对有向无环图进行分层，奇数层是一组，偶数层是一组。但有向图由于每条边只存储一次，就不会像无向图那样反过来再匹配一遍，就不用除2。</p>
<h1 id="单点在多路径上"><a href="#单点在多路径上" class="headerlink" title="单点在多路径上"></a>单点在多路径上</h1><p><a href="https://vjudge.net/problem/POJ-2594" target="_blank" rel="noopener">POJ 2594</a><br>一般的最小路径中，一个点只能属于一条路，但在有的问题中，一个点可以属于多条路径<br>为了防止一个点匹配过了就没了，导致其他经过这个点到另一个点的路径不见了，所以在开始匹配前要先用Floyd算法把所有连通的点直接连起来<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">map</span>[i][k] &amp;&amp; <span class="built_in">map</span>[k][j])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">map</span>[i][j] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
        <category>二分图</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉搜索树</title>
    <url>/2019/07/26/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
    <content><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>二叉搜索树(BST)借鉴于列表和有序向量<br>BST的每个节点又关键码和数据组成，整个节点内的信息封装成一个词条类。这里要求关键码可以比较<br>在数据也可以比较的情况下，有时也直接把数据拿来做关键码<br>BST处处满足顺序性：一个节点的所有左后代的关键码都不大于该节点的关键码，一个节点的所有右后代的关键码都不小于该节点的关键码<br>BST的中序遍历序列就是由所有的节点组成的一个有序向量，中序遍历就是树的垂直投影的序列<br><a id="more"></a></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>BST的实现可以继承自二叉树，并自主实现新的查找、插入、删除算法<br>查找</p>
<ol>
<li>算法：从根节点开始，如果待查找的关键码大于根节点的关键码，就转向根节点的右子树；反之，转向根节点的左子树，直到找到目标节点成功或走到空节点失败</li>
<li>在不退化且较为平衡的情况下，BST的搜索在中序遍历的投影有序向量中类似于二分查找</li>
<li>为了便利插入和删除，常常还通过引用的方式返回最终查找返回节点的父节点(若失败，返回的是最后失败所在的那个空节点)</li>
</ol>
<p>插入</p>
<ol>
<li>有重复元素：和查找一样，一直转向，但是最后的终止条件只有走到空节点，然后就在那个空节点的地方建立一个新节点存储要插入的信息</li>
<li>无重复元素：直接利用查找算法，把节点作为返回的父节点的相应孩子节点插入</li>
<li>BST中插入的节点都是叶子节点</li>
</ol>
<p>删除</p>
<ol>
<li>首先用查找算法找到对应的节点位置</li>
<li>如果待删除节点是叶子节点，就直接删除</li>
<li>如果待删除节点只有一个孩子节点，就直接把那个孩子节点和对应节点替换，再删除</li>
<li>如果待删除节点既有左孩子又有右孩子，就找出它的中序序列中的直接后继(右子树中左侧链的最末端，转向右子树，一路向左走到不能走)，交换之，转化为前两种情况</li>
</ol>
<p>这三种算法的时间复杂度都是$O(h)$，$h$为树高</p>
<h1 id="平衡"><a href="#平衡" class="headerlink" title="平衡"></a>平衡</h1><p>当BST的每个节点的出度都至多为$1$时，BST退化为一条单链，树高就是节点树，较为低效<br>节点数目固定时，兄弟子树高度越接近，全树也将倾向于更低<br>理想平衡：$n$个节点组成的二叉树，高度恰为最小值$log_2n$，出现的可能性极低，且极难维护，成本极高<br>适度平衡：高度渐进地不超过$O(log n)$<br>平衡二叉搜索树(BBST)：保持适度平衡的二叉树<br>中序遍历序列具有歧义性，同一个中序遍历序列可能会由两个不同二叉树组成<br>等价BST：中序遍历序列相同的二叉树<br>等价BST转换规则：上下可变，左右不变。节点之间的上下关系可以发生变换，但是垂直投影的左右关系不能变<br>等价BST转换方式：zig(绕节点v顺时针旋转其左右子树)、zag(绕节点v逆时针旋转其左右子树)<br><img src="/img/二叉搜索树01.png" alt="zig、zag"><br>要控制每次等价转换的规模在某一个局部，而且要控制操作次数至多$O(log n)$</p>
<h1 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h1><p>$平衡因子balFac(v) = 左子树高度height(lc(v)) - 右子树高度height(rc(v))$<br>AVL树：对任意的节点v，$|balFac(v)| ≤ 1$</p>
<h2 id="AVL树高度证明"><a href="#AVL树高度证明" class="headerlink" title="AVL树高度证明"></a>AVL树高度证明</h2><ol>
<li>设AVL树高度为$h$时，最小节点数为$S(h)$</li>
<li>要使AVL树的节点最小，则AVL树的根节点的左右子树的节点数也要最小，即左右子树的高度差为$1$<br>所以有<br>$S(h) = S(h - 1) + S(h - 2) + 1$<br>$S(h) + 1 = [S(h - 1) + 1] + [S(h - 2) + 1]$<br>$T(h) = T(h - 1) + T(h - 2)$<br>当$h = 0$时，$T(h) = 2 = fib(3)$<br>当$h = 1$时，$T(h) = 3 = fib(4)$</li>
<li>最后得：$S(h) = fib(h + 3) - 1$</li>
<li>即：$n=\Omega(\phi^h)$，可得$h = O(log n)$</li>
</ol>
<h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><p>继承自BST，并重写动态操作插入和删除的算法</p>
<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><ol>
<li>插入一个节点可能会导致多个祖先失衡，但不会影响到其他任何非祖先节点失衡，只要修改了一个失衡，其余失衡会自动修正</li>
<li>如果插入操作导致了祖先的失衡，那么失衡的最深祖先不会深于它的祖父节点</li>
<li>单旋<br>1) p是g的右孩子，v是p的右孩子，插入节点是v的孩子：绕g做一次zag<br>2) p是g的左孩子，v是p的左孩子，插入节点是v的孩子：绕g做一次zig<br><img src="/img/二叉搜索树02.png" alt="单旋"></li>
<li>双旋<br>1) p是g的右孩子，v是p的左孩子，插入节点是v的孩子：先绕p做一次zig，再绕g做一次zag<br>2) p是g的左孩子，v是p的右孩子，插入节点是v的孩子：先绕p做一次zag，再绕g做一次zig<br><img src="/img/二叉搜索树03.png" alt="双旋"></li>
<li>在局部修改之后的局部子树的高度恢复到和原本一样，所以g节点的祖先节点的失衡也就自动修复</li>
</ol>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ol>
<li>删除一个节点之后至多只会导致$1$个祖先失衡，但是在局部修改之后可能会导致另一个更高级的祖先节点失衡</li>
<li>单旋<br><img src="/img/二叉搜索树04.png" alt="单旋"><br>删除的是$T_3$的底层节点，$T_2$的底层可能有节点，也可能没有节点，$T_0$、$T_1$中至少有一个节点<br>1) $p$是$g$的右孩子，$v$是$p$的右孩子，插入节点是$v$的孩子：绕$g$做一次zag<br>2) $p$是$g$的左孩子，$v$是$p$的左孩子，插入节点是$v$的孩子：绕$g$做一次zig<br>3) 如果$T_2$的底层有节点，那一次修改之后整棵树就回归平衡，否则失衡会向上传播</li>
<li>双旋<br><img src="/img/二叉搜索树05.png" alt="双旋"><br>删除的是$T_3$的底层节点，$T_1$、$T_2$中至少有一个节点<br>1) $p$是$g$的右孩子，$v$是$p$的左孩子，插入节点是$v$的孩子：先绕$p$做一次zig，再绕$g$做一次zag<br>2) $p$是$g$的左孩子，$v$是$p$的右孩子，插入节点是$v$的孩子：先绕$p$做一次zag，再绕$g$做一次zig<br>3) 修改之后失衡一定会向上传播</li>
</ol>
<h3 id="3-4重构"><a href="#3-4重构" class="headerlink" title="3+4重构"></a>3+4重构</h3><p>把三个节点$v$、$p$、$g$按中序遍历次序依次命名为$a$、$b$、$c$，三棵子树依次记为$T_0$、$T_1$、$T_2$、$T_3$，则最终需要的必然如下图所示<br><img src="/img/二叉搜索树06.png" alt="3+4重构"><br>则我们可以避免了繁琐的旋转操作，直接利用一系列的赋值就得到需要的树型</p>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>数据结构 (清华大学邓俊辉)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>二分多重匹配</title>
    <url>/2019/11/09/%E4%BA%8C%E5%88%86%E5%A4%9A%E9%87%8D%E5%8C%B9%E9%85%8D/</url>
    <content><![CDATA[<p><a href="https://vjudge.net/problem/POJ-2289" target="_blank" rel="noopener">POJ  2289</a><br>多重匹配一般是一个点集N里的点每个只能匹配一个点，另一个点集$M$里的点可以匹配多个。一般是从只能匹配一个点的点集出发去匹配另一个点集<br>二分图的多重匹配是在单重匹配的基础上进行修改的<br>&emsp;1、如果这个点的匹配数还没有超过上限，就直接匹配<br>&emsp;2、如果匹配数超了上限，就尝试把已经匹配了的点里踢掉一个点，让其去匹配另一条边</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> limit[maxn], <span class="built_in">map</span>[maxn][maxn], vis[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; match[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> dotN, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> dotM = <span class="number">0</span>; dotM &lt; m; dotM++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!vis[dotM] &amp;&amp; <span class="built_in">map</span>[dotN][dotM])</span><br><span class="line">		&#123;</span><br><span class="line">			vis[dotM] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(match[dotM].<span class="built_in">size</span>() &lt; limit[dotM])</span><br><span class="line">			&#123;</span><br><span class="line">				match[dotM].push_back[dotN];</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; match[dotM]; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(dfs(match[dotM][j], m))</span><br><span class="line">				&#123;</span><br><span class="line">					match[dotM][j] = dotN;</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
        <category>二分图</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树</title>
    <url>/2019/07/24/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><p>需求：无论是向量还是列表，都只能较为高效地进行静态或动态中的一种操作<br>树是按层次关系组织一系列数据项的方式</p>
<h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><ol>
<li>树是特殊的图T = (V, E)</li>
<li>指定一个节点r作为根后，T即称作有根树</li>
<li>若T<sub>1</sub>、T<sub>2</sub>、……、T<sub>d</sub>为有根数，则新引入一个节点r，并引入这个节点和各个有根树的根的连边，还是一颗有根树T<a id="more"></a></li>
<li>相对于T，T<sub>i</sub>称作以r<sub>i</sub>为根的子树，记为T<sub>i</sub> = subtree(r<sub>i</sub>)</li>
<li>r<sub>i</sub>是r的孩子，r<sub>i</sub>之间互称兄弟，r称为r<sub>i</sub>的父亲</li>
<li>孩子的个数d = degree(r)称为r的(出)度，树的度就是整棵树中度数最大的节点的度</li>
<li>在一颗树中：<code>边数e = 所有顶点度数和 = 顶点数n - 1</code></li>
</ol>
<h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><ol>
<li>V中的k+1个节点，通过E中的k条边一次相联，构成一条<code>路径</code></li>
<li>路径长度：<code>|π| = 边数k</code></li>
<li>如果V<sub>k</sub> = V<sub>0</sub>，则称为环路</li>
<li>连通图：节点之间均有路径</li>
<li>无环图：没有环路的图</li>
<li>树：无环连通图、极小连通图、极大无环图。任一节点v与根之间存在唯一路径path(v, r) = path(v)</li>
</ol>
<h2 id="深度和高度"><a href="#深度和高度" class="headerlink" title="深度和高度"></a>深度和高度</h2><ol>
<li>节点深度<code>depth(v) = |path(v)|</code></li>
<li>path(v)上的节点都是v的祖先，v是它们的后代，这些都是包含自身的；除自身外的叫真祖先/后代</li>
<li>在任一深度，v的祖先若存在，则必然，但后代未必唯一</li>
<li>根节点是所有节点的公共祖先，深度为0；没有后代的节点称为叶子</li>
<li>树的高度height(v) = max(depth(叶子))，空树的高度为-1</li>
<li>depth(v) + height(v) ≤ height(T)</li>
</ol>
<h1 id="树的表示"><a href="#树的表示" class="headerlink" title="树的表示"></a>树的表示</h1><h2 id="父节点表示法"><a href="#父节点表示法" class="headerlink" title="父节点表示法"></a>父节点表示法</h2><ol>
<li>就是并查集(不要路径压缩)</li>
<li>空间效率O(n)，访问父节点O(1)，访问根节点O(n)或O(1)</li>
<li>但是访问孩子节点或兄弟节点要O(n)</li>
</ol>
<h2 id="孩子节点表示法"><a href="#孩子节点表示法" class="headerlink" title="孩子节点表示法"></a>孩子节点表示法</h2><ol>
<li>把每个节点的都直接孩子都直接存储起来</li>
<li>访问孩子节点O(degree(v))，访问父节点或兄弟节点O(n)</li>
</ol>
<h2 id="父节点-孩子节点表示法"><a href="#父节点-孩子节点表示法" class="headerlink" title="父节点+孩子节点表示法"></a>父节点+孩子节点表示法</h2><ol>
<li>把父节点和孩子节点都存储起来</li>
<li>每个节点的出度不同，虽然出度和只有$n - 1$，但是每个节点都有可能，不便于开存储空间</li>
</ol>
<h2 id="长子兄弟表示法"><a href="#长子兄弟表示法" class="headerlink" title="长子兄弟表示法"></a>长子兄弟表示法</h2><ol>
<li>对每个节点，都只存储它的父节点、长子节点、向右的一个兄弟节点</li>
<li>所需的空间也只是常数</li>
<li>可以把一个多叉树转换为一个二叉树<br><img src="/img/二叉树01.png" width="30%"></li>
</ol>
<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><ol>
<li>定义：所有节点度数都不超过2的树</li>
<li>把同一节点的孩子和子树，均以左右区分</li>
<li>深度为k的节点，至多$2^k$个</li>
<li>深度为h的二叉树，节点个数n满足：$h &lt; n &lt; 2^{h+1}$</li>
<li>$n = h + 1$时，树退化成一条链</li>
<li>$n = 2^{h+1} - 1$时，树称为满树</li>
<li>真二叉树：所有节点的度数都是偶数，要么是0，要么是2</li>
<li>有$n$个节点的二叉树，有$2n$个指针域，其中$n-1$个指针域非空，$n+1$个指针域为空</li>
<li>度数为0的节点有$N_0$个，度数为1的节点有$N_1$个, 度数为2的节点有$N_2$个，则$N_0 = N_2 + 1$，共有$2N_0+N_1$个空指针域</li>
</ol>
<h1 id="二叉树的实现"><a href="#二叉树的实现" class="headerlink" title="二叉树的实现"></a>二叉树的实现</h1><h2 id="节点实现"><a href="#节点实现" class="headerlink" title="节点实现"></a>节点实现</h2><ol>
<li>存储数据：数据、父节点引用、长子(左孩子)节点引用、兄弟(右孩子)节点引用、一些其他的值，如：高度、深度、npl、颜色</li>
<li>接口实现：查找父节点、长子(左孩子)节点、兄弟(右孩子)节点、插入左/右孩子、多种遍历方法、获得后代总数</li>
<li>插入：要把新节点的父节点设置为当前节点，也要把当前节点的左/右孩子设置为新节点，还要把新孩子的节点的左右孩子设置为空</li>
<li>获得后代总数：<code>左孩子后代总数 + 右孩子后代总数 + 1</code>，递归实现</li>
</ol>
<h2 id="树的实现"><a href="#树的实现" class="headerlink" title="树的实现"></a>树的实现</h2><ol>
<li>不需要存储所有节点的引用，只要存一个根节点就可以</li>
<li>protected的内容有：_size、_root、updateHeight()更新节点x的高度、updateHeightAbove()更新节点x祖先的高度</li>
<li>更新节点x高度：<code>x的两棵子树的高度最大值 + 1</code>，仅供更新祖先高度的算法调用</li>
<li>更新x祖先的高度：一直把指针变换为父节点，并利用updateHeight()更新高度，直到高度不变。包含了x的更新，只需要调用这一个算法</li>
<li>插入节点：调用节点中的插入算法，把新孩子的高度设置为1，并更新高度</li>
</ol>
<h1 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h1><h2 id="遍历规则"><a href="#遍历规则" class="headerlink" title="遍历规则"></a>遍历规则</h2><ol>
<li>先序遍历：先遍历<code>根节点</code>，再遍历左子树，最后是右子树</li>
<li>中序遍历：先遍历左子树，再遍历<code>根节点</code>，最后是右子树</li>
<li>后序遍历：先遍历左子树，再遍历右子树，最后是<code>根节点</code></li>
<li>层次遍历：从深度为1的节点开始遍历到最深的节点<br><img src="/img/二叉树02.png" alt="遍历规则"></li>
</ol>
<h2 id="递归遍历"><a href="#递归遍历" class="headerlink" title="递归遍历"></a>递归遍历</h2><p>遍历算法为dfs，对节点操作为函数visit的话，除层次遍历外的三种遍历只有顺序的区别。visit在前的是先序，中的是中序，后的是后序</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先序遍历</span></span><br><span class="line">visit(x);</span><br><span class="line">dfs(lc);</span><br><span class="line">dfs(rc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历</span></span><br><span class="line">dfs(lc);</span><br><span class="line">visit(x);</span><br><span class="line">dfs(rc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后序遍历</span></span><br><span class="line">dfs(lc);</span><br><span class="line">dfs(rc);</span><br><span class="line">visit(x);</span><br></pre></td></tr></table></figure>
<h2 id="迭代遍历"><a href="#迭代遍历" class="headerlink" title="迭代遍历"></a>迭代遍历</h2><h3 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h3><ol>
<li>一种最直接的方法就是建立一个栈，每次从栈中取出栈顶元素，调用完visit之后，把孩子节点推入栈中，直到栈为空(注意先推右孩子再推左孩子)</li>
<li>观察：先序遍历在每一个局部都是先从上到下遍历所有的左孩子，再从下到上遍历所有的右子树</li>
<li>迭代遍历2：每从栈中取出一个节点，就沿着这个节点的左孩子一路向下访问，并沿途把他们的右孩子推入栈中。当没有左孩子的时候，就从栈里取出一个元素继续遍历</li>
</ol>
<p><img src="/img/二叉树03.jpeg" width="30%"></p>
<h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>先沿该节点一路向左孩子走，将左孩子依次入栈，并不访问。当走到尽头的时候，取出栈顶元素并访问，再转向其右孩子，重复上述过程，直到栈变空<br><img src="/img/二叉树04.jpeg" width="30%"></p>
<h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>先将根节点入栈，当前节点x也记为根节点。每次循环中，如果栈顶元素不是x的父节点，就对每一个栈顶元素进行遍历，一次推入栈顶元素的右孩子和左孩子，直到栈顶元素没有左孩子。再让x变为栈顶元素并访问，重复上述过程<br><img src="/img/二叉树05.jpeg" width="30%"></p>
<h2 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h2><p>先将根节点入队，之后在每次访问的时候都取出队头元素，并将该元素的左右孩子依次推入队列，并访问节点<br><img src="/img/二叉树06.jpeg" width="30%"></p>
<h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><ol>
<li>先序/后序序列 + 中序序列：先序的第一个/后序的最后一个都是根节点，在中序序列中找到根节点，其前面的序列必是左子树遍历序列，后面的序列必是右子树的遍历序列，再利用得到的左右子树序列长度就可以在先序/后序序列中找到对应的左右子树的序列，从而递归得到整棵树</li>
<li>不依靠中序序列就不能排除左右子树一棵为空的情况，所以得不到确定的树型</li>
<li>先序序列 + 后序序列 + 已知树为真二叉树：先得到根节点，先序序列的第二是根节点的左孩子，在后序序列中找到它，也可以得到左右子树的遍历序列，就如上面一样，递归得到整棵树的结构</li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>数据结构 (清华大学邓俊辉)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>优先级队列</title>
    <url>/2019/08/01/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h1 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h1><ol>
<li>优先级队列是一种队列，是一种受限的数据结构，优先级队列中的元素都有一个优先级，每次出队的都是优先级最高的元素，能访问的也只有优先级最高的元素</li>
<li>队列和栈其实都是特殊的优先级队列。对于队列，越早入队，优先级越高；对于栈，越晚入栈，优先级越高</li>
<li>优先级队列要求能够插入值、查找优先级最大元素、删除优先级最大元素</li>
<li>如果用向量/列表实现优先级队列，插入只要O(1)，查找和删除都要O(n)<br>如果用有序向量/有序列表，插入要O(n)，查找和删除要O(1)<br>如果用BBST，实现过于复杂，功能过于强大</li>
</ol>
<a id="more"></a>
<h1 id="完全二叉堆"><a href="#完全二叉堆" class="headerlink" title="完全二叉堆"></a>完全二叉堆</h1><h2 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h2><ol>
<li>完全二叉树：平衡因子处处非负的AVL树，且若节点v的平衡因子是0，则它的左子树是满树，若是1，则右子树是满树</li>
<li>完全二叉树如果不考最底层，则都是一棵满树，最底层如果没有满，也只是缺失了右边的一段连续节点<br><img src="/img/优先级队列01.png" alt="完全二叉树"></li>
<li>完全二叉树可以用向量简单实现，上图的标号是完全二叉树的层次遍历顺序，可以发现，通过简单的计算，就可以得到一个节点的父节点和孩子节点<br>对于节点i，其<br>父节点<code>parent(i) = (i - 1) &gt;&gt; 1</code><br>左孩子<code>lc(i) = (i &lt;&lt; 1) + 1</code><br>右孩子<code>rc(i) = (i + 1) &lt;&lt; 1</code></li>
</ol>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol>
<li>BBST过于强大是因为BBST维护的是所有元素的一个全序关系，但优先级队列只需要知道最大者，只需要维护元素之间的偏序关系</li>
<li>堆序性：对于所有节点，如果这个节点有父节点，则其父节点的优先级一定高于其本身的优先级</li>
<li>完全二叉堆就是满足堆序性的完全二叉树</li>
<li>根据堆序性，就可以得知根节点的优先级一定是最高的，因此获得最大元素就只需直接返回根节点</li>
</ol>
<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><ol>
<li>只需把新词条e作为末元素接入向量</li>
<li>然后维护堆序性即可</li>
<li>违反堆序性当且仅当新插入词条的优先级高于其父节点</li>
</ol>
<h4 id="上滤"><a href="#上滤" class="headerlink" title="上滤"></a>上滤</h4><ol>
<li>如果违反了堆序性，就直接把新节点和其父节点互换位置</li>
<li>但是新节点的优先级可能还会大于它的新父节点，就只需要继续交换新节点和其新父节点的位置</li>
<li>直到新节点的优先级小于其父节点或新节点达到了根节点的位置</li>
<li>常数的优化：不必一开始就插入节点再赋值，只需先备份一份新节点，并利用一个“指针”指向新节点应该插入的位置，再比较其与其父节点的优先级，如果需要交换，只需把父节点的值拷贝到“指针”指向的位置，并把“指针”指向父节点，最后把新节点拷贝到“指针”最后指向的位置</li>
</ol>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="过程-1"><a href="#过程-1" class="headerlink" title="过程"></a>过程</h4><ol>
<li>把末元素移至堆顶</li>
<li>然后还要维护堆序性</li>
<li>违反堆序性当且仅当末元素的优先级低于至少其一个孩子节点</li>
</ol>
<h4 id="下滤"><a href="#下滤" class="headerlink" title="下滤"></a>下滤</h4><ol>
<li>如果违反了堆序性，就把当前节点与其两个孩子中优先级较高的那个交换位置</li>
<li>当前节点的下降可能会继续导致其与其孩子节点不满足堆序性，只需要继续交换，直到满足或没有孩子节点</li>
<li>也可以和上滤一样做一个常数的优化</li>
</ol>
<h3 id="批量建堆"><a href="#批量建堆" class="headerlink" title="批量建堆"></a>批量建堆</h3><ol>
<li>含义：事先给定批量的数据，依据这么多数据建立一个堆</li>
<li>蛮力算法：对每一个元素都执行一次插入操作<br>只需要从前往后对每个元素做一次上滤即可</li>
<li>复杂度：每个节点的深度的累加，O(n logn)</li>
<li>连接两个子堆：先用一个节点把两个子堆连接起来，然后对新节点做一次下滤</li>
<li>Floyd建堆：初始的时候所有的叶节点(最后连续的一大部分)都看作一个堆不用处理，然后逐一把它们连接起来。如果有n个点，就只需要从第⎣n/2⎦ - 1个元素开始往前逐一做下滤</li>
<li>复杂度：每个节点高度的累加，O(n)</li>
<li>两种建堆的差异就在于顺序，叶子节点多，深度大高度小，Floyd建堆法就迎合了这一特点，让多的点值小，值大的点少，得到了优化</li>
</ol>
<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><ol>
<li>选择排序利用堆优化</li>
<li>就地：向量的前一半是堆，后一半有序，每次都把堆顶和有序部分的前一个元素交换再做下滤</li>
</ol>
<h1 id="左式堆"><a href="#左式堆" class="headerlink" title="左式堆"></a>左式堆</h1><h2 id="空节点路径长度-Null-Path-Length"><a href="#空节点路径长度-Null-Path-Length" class="headerlink" title="空节点路径长度(Null Path Length)"></a>空节点路径长度(Null Path Length)</h2><ol>
<li>给一棵树不是适当的外部节点，使得二叉树的所有节点都有两个子节点</li>
<li>所有的外部节点的空节点路径长度npl(NULL) = 0</li>
<li>其余节点都有npl(x) = 1 + min(npl(lc), npl(rc))</li>
<li>npl(x) = x到外部节点的最近距离 = 以x为根的最大满子树高度</li>
</ol>
<h2 id="左倾性"><a href="#左倾性" class="headerlink" title="左倾性"></a>左倾性</h2><ol>
<li>左倾：对任何节点x，都有npl(lc(x)) ≥ npl(rc(x))</li>
<li>推论：对任何节点x，都有npl(x) = 1 + npl(rc(x))</li>
<li>满足左倾性的堆就是左式堆</li>
<li>左式堆的子堆必是左式堆</li>
<li>左式堆的左子堆的规模和高度不一定大于右子堆</li>
</ol>
<h2 id="右侧链"><a href="#右侧链" class="headerlink" title="右侧链"></a>右侧链</h2><ol>
<li>x的右侧链rChain(x)：从节点x出发，一直沿着右分支前进</li>
<li>右侧链的终点，必为全堆中最浅的外部节点</li>
<li>npl(r) = |rChain(r)| = d，d为以r为根节点的最大满子树的高度</li>
<li>右侧链的长度为d的左式堆，至少包含2<sup>d</sup> - 1个内部节点、2<sup>d+1</sup> - 1个节点</li>
<li>在包含n个节点的左式堆中右侧链的长度d ≤ ⎣log<sub>2</sub>(n + 1)⎦ - 1 = O(log n)</li>
</ol>
<h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><ol>
<li>假设待合并的两个堆是a和b，且满足a的根节点的优先级高于b的根节点的优先级</li>
<li>递归函数每次都返回合并后的根节点</li>
<li>递归地把a的右子堆和b合并作为a的新右孩子</li>
<li>判断如果合并后的左倾性被破坏就交换a的左右孩子</li>
<li>如果a或b为空，就直接返回非空的那个节点</li>
<li>复杂度：每次都是沿着右侧链，复杂度为O(|rChain(r)|) = O(log n)</li>
</ol>
<h2 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除"></a>插入和删除</h2><ol>
<li>插入：把待插入的元素封装为一个只含有一个节点的左式堆，再合并</li>
<li>删除：把根节点的两个子节点合并</li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>数据结构 (清华大学邓俊辉)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>分块与莫队</title>
    <url>/2019/11/09/%E5%88%86%E5%9D%97%E4%B8%8E%E8%8E%AB%E9%98%9F/</url>
    <content><![CDATA[<h1 id="分块"><a href="#分块" class="headerlink" title="分块"></a>分块</h1><p>分块是解决区间问题的方法之一，虽然复杂度比线段树稍微大一点，但是写法比线段树容易<br>分块就是把一个连续的区级分为几个块，<strong>注意：分的是数轴区间而不是求解区间</strong>。这样在询问[l, r]时，如果有整个的块就可以直接用块里的数据，最左端和最右端不是整个的块就直接暴力统计。分块的大小一般是√n (n为区间长度)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> blo[MAXN]; <span class="comment">// 存储每个点是在哪个块里</span></span><br><span class="line"><span class="keyword">int</span> block; <span class="comment">// 块的大小</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> bl = blo[l], br = blo[r]; <span class="comment">// 左端点和右端点所在的块</span></span><br><span class="line">	<span class="comment">// 先处理左端的不完整块</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= min(r, bl * block); i++)</span><br><span class="line">	<span class="comment">// 从左端点遍历到 左端点所属的块的左端 或 右端点 (左右端点可能属于同一个块)</span></span><br><span class="line">	<span class="comment">// 注意：要取等号！！！不管是取到右端点还是块的右端，都是闭区间，都取得到</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">			开始暴力统计</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 再处理中间完整的块</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = bl + <span class="number">1</span>; r &lt; br; i++)</span><br><span class="line">	<span class="comment">// 从l的下一个块到r的前一块</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">			计算完整块内的结果</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 计算右边的不完整块</span></span><br><span class="line">	<span class="keyword">if</span> (bl != br) <span class="comment">// 假如l和r属于同一个块的话，在计算左端不完整块时就已经记过</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = (br - <span class="number">1</span>) * block + <span class="number">1</span>; i &lt;= r; i++)</span><br><span class="line">		<span class="comment">// 注意：(br - 1) * block算的是r所在块的前一个块结束的位置，加1就是r所在的块开始的位置</span></span><br><span class="line">		<span class="comment">// 只要计算到r就可以了</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">				暴力统计</span></span><br><span class="line"><span class="comment">			*/</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例题：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4417" target="_blank" rel="noopener">HDOJ 4417</a><br>求区间内比k小的数的个数是分块的经典应用，但这题的k是变化的，不能直接在块里储存个数，所以可以对每个块分别进行排序，再用upper_bound就可以处理每一个完整块的结果</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ori[MAXN], sorted[MAXN], blo[MAXN], block;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">query</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, h;</span><br><span class="line">&#125; q[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">que</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> bl = blo[l], br = blo[r];</span><br><span class="line">    repLE(i, l, min(r, bl * block))</span><br><span class="line">    &#123;</span><br><span class="line">        ans += ori[i] &lt;= h;</span><br><span class="line">    &#125;</span><br><span class="line">    repLess(i, bl + <span class="number">1</span>, br)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> l = (i - <span class="number">1</span>) * block + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> r = i * block;</span><br><span class="line">        ans += upper_bound(sorted + l, sorted + r + <span class="number">1</span>, h) - sorted - l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (bl != br)</span><br><span class="line">    &#123;</span><br><span class="line">        repLE(i, (br - <span class="number">1</span>) * block + <span class="number">1</span>, r)</span><br><span class="line">        &#123;</span><br><span class="line">            ans += ori[i] &lt;= h;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    scan(t);</span><br><span class="line">    repLE(kase, <span class="number">1</span>, t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n, m;</span><br><span class="line">        scan(n);</span><br><span class="line">        scan(m);</span><br><span class="line">        block = <span class="built_in">sqrt</span>(n);</span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">1</span>;</span><br><span class="line">        repLE(i, <span class="number">1</span>, n)</span><br><span class="line">        &#123;</span><br><span class="line">            scan(ori[i]);</span><br><span class="line">            sorted[i] = ori[i];</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 计算第i个元素所在的块</span></span><br><span class="line">            blo[i] = (i - <span class="number">1</span>) / block + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (blo[i] != blo[begin] || i == n) <span class="comment">// 假如上一个块结束了</span></span><br><span class="line">            &#123;</span><br><span class="line">                sort(sorted + begin, sorted + i);</span><br><span class="line">                begin = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        repLess(i, <span class="number">0</span>, m)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;q[i].l, &amp;q[i].r, &amp;q[i].h);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>, kase);</span><br><span class="line">        repLess(i, <span class="number">0</span>, m)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, que(q[i].l + <span class="number">1</span>, q[i].r + <span class="number">1</span>, q[i].h));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="莫队"><a href="#莫队" class="headerlink" title="莫队"></a>莫队</h1><p>莫队是用于离线的区间问题的一种算法，使用莫队的要求是<code>在知道了[l, r]的解的时候，只需要O(1)，至多O(logn)就可以得到[l + 1, r]、[l - 1, r]、[l, r + 1]、[l, r - 1]的解</code><br>莫队的思想：把所有询问的区间都先储存起来，并对区间进行分块，然后对询问区间以左端点所在的块为第一关键字，右端点为第二关键字进行排序，然后逐个求解，最后再恢复成原始顺序输出<br><strong>莫队算法的基本结构</strong><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">// x要直接给添加的元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		对ans一波操作</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">// x同上</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		又对ans一波操作</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> l, r, id;</span><br><span class="line">	<span class="keyword">int</span> ans;</span><br><span class="line">&#125; arr[MAXN];</span><br><span class="line"><span class="keyword">int</span> blo[MAXN]; <span class="comment">// 分块情况</span></span><br><span class="line"><span class="keyword">int</span> info[MAXN]; <span class="comment">// 区间内每个点的状态</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpBR</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (blo[a.l] == blo[b.l])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> a.r &lt; b.r;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> a.l &lt; b.l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpID</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.id &lt; b.id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> m)</span> <span class="comment">// m为待求解的区间的个数 (设是从0开始)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	sort(arr, arr + m, cmpBR);</span><br><span class="line">	<span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">0</span>; <span class="comment">// 假设大区间都是从1开始的</span></span><br><span class="line">	ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (arr[i].l == arr[i].r)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// 区间长度为0直接处理arr[i].ans，不要处理全局变量ans</span></span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (l &lt; arr[i].l)</span><br><span class="line">		&#123;</span><br><span class="line">			remove(info[l]);</span><br><span class="line">			l++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (l &gt; arr[i].l)</span><br><span class="line">		&#123;</span><br><span class="line">			l++;</span><br><span class="line">			add(info[l]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (r &lt; arr[i].r)</span><br><span class="line">		&#123;</span><br><span class="line">			r++;</span><br><span class="line">			add(info[r]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (r &gt; arr[i].r)</span><br><span class="line">		&#123;</span><br><span class="line">			remove(info[r]);</span><br><span class="line">			r--;</span><br><span class="line">		&#125;</span><br><span class="line">		arr[i].ans = ans;</span><br><span class="line">	&#125;</span><br><span class="line">	sort(arr, arr + m, cmpID);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>例题：<a href="https://www.luogu.org/problemnew/show/P1494" target="_blank" rel="noopener">洛谷 P1494</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e5</span> + <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> socks[MAXN], blo[MAXN], num[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, id;</span><br><span class="line">    ll p, q;</span><br><span class="line">&#125; arr[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpLR</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (blo[a.l] == blo[b.l])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.r &lt; b.r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> blo[a.l] &lt; blo[b.l];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpID</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.id &lt; b.id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ans += (num[x] &lt;&lt; <span class="number">1</span>) | <span class="number">1</span>;</span><br><span class="line">    num[x]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ans += <span class="number">1</span> - (num[x] &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    num[x]--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b == <span class="number">0</span> ? a : gcd(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, block;</span><br><span class="line">    scan(n);</span><br><span class="line">    scan(m);</span><br><span class="line">    block = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    repLE(i, <span class="number">1</span>, n)</span><br><span class="line">    &#123;</span><br><span class="line">        scan(socks[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    repLE(i, <span class="number">1</span>, m)</span><br><span class="line">    &#123;</span><br><span class="line">        scan(arr[i].l);</span><br><span class="line">        scan(arr[i].r);</span><br><span class="line">        arr[i].id = i;</span><br><span class="line">        blo[i] = (i - <span class="number">1</span>) / block + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(arr + <span class="number">1</span>, arr + <span class="number">1</span> + m, cmpLR);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    repLE(i, <span class="number">1</span>, m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i].l == arr[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            arr[i].p = <span class="number">0</span>;</span><br><span class="line">            arr[i].q = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; arr[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            remove(socks[l]);</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (l &gt; arr[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            l--;</span><br><span class="line">            add(socks[l]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (r &lt; arr[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            r++;</span><br><span class="line">            add(socks[r]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (r &gt; arr[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            remove(socks[r]);</span><br><span class="line">            r--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[i].p = ans - (r - l + <span class="number">1</span>);</span><br><span class="line">        arr[i].q = <span class="number">1L</span>L * (r - l + <span class="number">1</span>) * (r - l);</span><br><span class="line">        ll d = gcd(arr[i].p, arr[i].q);</span><br><span class="line">        arr[i].p /= d;</span><br><span class="line">        arr[i].q /= d;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(arr + <span class="number">1</span>, arr + <span class="number">1</span> + m, cmpID);</span><br><span class="line">    repLE(i, <span class="number">1</span>, m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld/%lld\n"</span>, arr[i].p, arr[i].q);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="带修莫队"><a href="#带修莫队" class="headerlink" title="带修莫队"></a>带修莫队</h1><p>上面的普通莫队并不支持修改操作，带修莫队是支持单点修改，但仍然是离线的区间问题。带修莫队在普通莫队的基础上增加了一个时间轴，修改和询问分开储存，修改按顺序记录，询问多一个状态——这个询问是在第几个修改之后询问的。和普通莫队一样，带修莫队也是使用分块、排序、状态跳跃的方法。分块常取的是n^2/3^；排序则是以左端点所在的块为第一关键字，右端点所在的块为第二关键字，询问的时间为第三关键字；状态跳跃就涉及到三个状态l、r、t的跳跃<br>结构与普通莫队类似，但是在时间t跳跃的时候可能有些修改要复原，有些修改要执行。在输入时要复制一个数组，并实时对复制出来的数组进行修改，在修改的结构体里要储存修改的位置、修改后的值、修改前的值，注意，修改前的值不是最初的值，而是上一次修改后的值，所以才要复制一个数组。之后进行状态跳跃修改的时候都是对原数组进行修改</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="keyword">int</span> ori[MAXN]; <span class="comment">//原始数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		对ans一波操作</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">// x同上</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		又对ans一波操作</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doIt</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> newStatus)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	add(newStatus);</span><br><span class="line">	remove(ori[pos]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> l, r, id, t;</span><br><span class="line">	<span class="keyword">int</span> ans;</span><br><span class="line">&#125; arr[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">modify</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> pos, oldStatus, newStatus;</span><br><span class="line">&#125; revise[MAXN];</span><br><span class="line"><span class="keyword">int</span> blo[MAXN]; <span class="comment">// 分块情况</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpLR</span><span class="params">(query a, query b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (blo[a.l] == blo[b.l])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (blo[a.r] == blo[b.r])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> a.t &lt; b.t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a.r &lt; b.r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a.l &lt; b.l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpID</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.id &lt; b.id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	sort(arr, arr + m, cmpLR);</span><br><span class="line">	<span class="keyword">int</span> t = <span class="number">0</span>, l = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">	ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (arr[i].l == arr[i].r)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 一定要先处理时间</span></span><br><span class="line">		<span class="keyword">while</span> (t &lt; arr[i].t)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (l &lt;= revise[t].pos &amp;&amp; revise[t].pos &lt;= r)</span><br><span class="line">			&#123;</span><br><span class="line">				remove(revise[t].oldStatus);</span><br><span class="line">				add(revise[t].newStatus)</span><br><span class="line">			&#125;</span><br><span class="line">			ori[revise[t].pos] = revise[t].newStatus;</span><br><span class="line">			t++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (t &gt; arr[i].t)</span><br><span class="line">		&#123;</span><br><span class="line">			t--;</span><br><span class="line">			<span class="keyword">if</span> (l &lt;= revise[t].pos &amp;&amp; revise[t].pos &lt;= r)</span><br><span class="line">			&#123;</span><br><span class="line">				add(revise[t].oldStatus);</span><br><span class="line">				remove(revise[t].newStatus)</span><br><span class="line">			&#125;</span><br><span class="line">			ori[revise[t].pos] = revise[t].oldStatus;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (l &lt; arr[i].l)</span><br><span class="line">		&#123;</span><br><span class="line">			remove(ori[l]);</span><br><span class="line">			l++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (l &gt; arr[i].l)</span><br><span class="line">		&#123;</span><br><span class="line">			l++;</span><br><span class="line">			add(ori[l]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (r &lt; arr[i].r)</span><br><span class="line">		&#123;</span><br><span class="line">			r++;</span><br><span class="line">			add(ori[r]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (r &gt; arr[i].r)</span><br><span class="line">		&#123;</span><br><span class="line">			remove(ori[r]);</span><br><span class="line">			r--;</span><br><span class="line">		&#125;</span><br><span class="line">		arr[i].ans = ans;</span><br><span class="line">	&#125;</span><br><span class="line">	sort(arr, arr + m, cmpID);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例题：<a href="https://www.luogu.org/problemnew/show/P1903" target="_blank" rel="noopener">洛谷 P1903</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e4</span> + <span class="number">50</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXCOL = <span class="number">1e6</span> + <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">query</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, t, id, ans;</span><br><span class="line">&#125; q[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">modify</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> pos, old, ne, t;</span><br><span class="line">&#125; modi[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ori[MAXN], now[MAXN], blo[MAXN], col[MAXCOL];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpLR</span><span class="params">(query a, query b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (blo[a.l] == blo[b.l])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (blo[a.r] == blo[b.r])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> a.t &lt; b.t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a.r &lt; b.r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a.l &lt; b.l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpID</span><span class="params">(query a, query b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.id &lt; b.id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> color)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    col[color]++;</span><br><span class="line">    ans += col[color] == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> color)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    col[color]--;</span><br><span class="line">    ans -= col[color] == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    scan(n);</span><br><span class="line">    scan(m);</span><br><span class="line">    <span class="keyword">int</span> block = <span class="built_in">pow</span>(n, <span class="number">0.66666666</span>);</span><br><span class="line">    repLE(i, <span class="number">1</span>, n)</span><br><span class="line">    &#123;</span><br><span class="line">        scan(ori[i]);</span><br><span class="line">        blo[i] = (i - <span class="number">1</span>) / block + <span class="number">1</span>;</span><br><span class="line">        now[i] = ori[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> cmd;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">int</span> times = <span class="number">0</span>, qLen = <span class="number">0</span>;;</span><br><span class="line">    repLE(i, <span class="number">1</span>, m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%c%d"</span>, &amp;cmd, &amp;a);</span><br><span class="line">        scan(b);</span><br><span class="line">        <span class="keyword">if</span> (cmd == <span class="string">'Q'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            q[++qLen].t = times;</span><br><span class="line">            q[qLen].id = qLen;</span><br><span class="line">            q[qLen].l = a;</span><br><span class="line">            q[qLen].r = b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            modi[++times].pos = a;</span><br><span class="line">            modi[times].ne = b;</span><br><span class="line">            modi[times].old = now[a];</span><br><span class="line">            now[a] = b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(q + <span class="number">1</span>, q + <span class="number">1</span> + qLen, cmpLR);</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>, l = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    repLE(i, <span class="number">1</span>, qLen)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (t &lt; q[i].t)</span><br><span class="line">        &#123;</span><br><span class="line">            t++;</span><br><span class="line">            <span class="keyword">if</span> (l &lt;= modi[t].pos &amp;&amp; modi[t].pos &lt;= r)</span><br><span class="line">            &#123;</span><br><span class="line">                remove(modi[t].old);</span><br><span class="line">                add(modi[t].ne);</span><br><span class="line">            &#125;</span><br><span class="line">            ori[modi[t].pos] = modi[t].ne;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (t &gt; q[i].t)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (l &lt;= modi[t].pos &amp;&amp; modi[t].pos &lt;= r)</span><br><span class="line">            &#123;</span><br><span class="line">                remove(modi[t].ne);</span><br><span class="line">                add(modi[t].old);</span><br><span class="line">            &#125;</span><br><span class="line">            ori[modi[t].pos] = modi[t].old;</span><br><span class="line">            t--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; q[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            remove(ori[l]);</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (l &gt; q[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            l--;</span><br><span class="line">            add(ori[l]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (r &lt; q[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            r++;</span><br><span class="line">            add(ori[r]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (r &gt; q[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            remove(ori[r]);</span><br><span class="line">            r--;</span><br><span class="line">        &#125;</span><br><span class="line">        q[i].ans = ans;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(q + <span class="number">1</span>, q + <span class="number">1</span> + qLen, cmpID);</span><br><span class="line">    repLE(i, <span class="number">1</span>, qLen)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, q[i].ans);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
        <category>区间问题</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>倍增</title>
    <url>/2020/08/09/%E5%80%8D%E5%A2%9E/</url>
    <content><![CDATA[<h1 id="倍增"><a href="#倍增" class="headerlink" title="倍增"></a>倍增</h1><ol>
<li>二分查找把查找的复杂度从$O(n)$降低到了<script type="math/tex">O(log\ n)</script>，但是二分也有局限性，如果每次查找的结果都在数组的前几个位置的话，二分的效率还不如顺序查找的效率</li>
<li>倍增利用了二进制划分的性质。二进制划分就是“任意整数都可以表示成若干个$2$的次幂项的和”，我们只递推在$2$的整数次幂位置上的值。</li>
<li>二进制划分在<a href="http://www.laughingtree.cn/2019/11/08/快速幂/" target="_blank" rel="noopener">快速幂</a>中有巨大的作用</li>
</ol>
<h1 id="寻找区间"><a href="#寻找区间" class="headerlink" title="寻找区间"></a>寻找区间</h1><ol>
<li><p>倍增的一个用处就是寻找左端点固定，满足一定条件的区间</p>
</li>
<li><p>设已确定在要求区间的子区间的右端点为$hi$，即我们已经确定$[lo,hi]$一定包含在答案区间内，要找到当前区间还要向右延伸的长度$len$</p>
</li>
<li><p>初始的时候$lo$就是固定的左端点，此时还未确定任何区间，所以$hi=lo$，从$2^0$开始尝试，$len = 2^0=1$</p>
</li>
<li><p>每次测试区间$[lo,hi+len]$是否合法，若合法，则可以确定这段区间是答案的子区间，$hi =hi+len$，$len=2*len$枚举下一个长度；若非法，则当前区间太长要缩减，$[lo,hi]$确定是合法的，不用动，把$len=len/2$即可</p>
</li>
<li><p>当$len=0$时，表示已找到答案区间，区间上界就是$hi$，退出循环</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> lo, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ll len = <span class="number">1</span>;</span><br><span class="line">  ll hi = lo;</span><br><span class="line">  <span class="keyword">while</span> (len)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (hi + len &lt;= n &amp;&amp; check(lo, hi + len))</span><br><span class="line">    &#123;</span><br><span class="line">      hi += len;</span><br><span class="line">      len *= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      len /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> hi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="ST算法"><a href="#ST算法" class="headerlink" title="ST算法"></a>ST算法</h1><ol>
<li><p>处理问题：给定一个数组，在线回答区间$[l,r]$内的最大值</p>
</li>
<li><p>预处理：数组$F[i][j]$表示区间$[i,i+2^j-1]$内的最大值。递推的边界是$F[i][0]=arr[i]$。把每个区间拆成两个，可以得到$[i,i+2^{j-1}-1]$与$[i+2^{j-1},i+2^j-1]$，这两个是之前求过的区间，所以$F[i][j]=max(F[i][j-1],F[i+2^{j-1}][j-1])$</p>
</li>
<li><p>询问：求出满足$2^k&lt;r-l+1≤2^{k+1}$的$k$。总长度是大于$2^k$的，所以$[l,l+2^k]$与$[r-2^k+1,r]$都不会超出区间。且总长度不大于$2\cdot2^k$，所以那两个长度为$2^k$的区间必然包括了整个区间。所以整个区间的最大值就是两个子区间的最大值中的最大值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[MAXN], f[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    f[i][<span class="number">0</span>] = arr[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> t = <span class="built_in">log</span>(n) / <span class="built_in">log</span>(<span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; t; j++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - (<span class="number">1</span> &lt;&lt; j); i++)</span><br><span class="line">    &#123;</span><br><span class="line">      f[i][j] = <span class="built_in">max</span>(f[i][j - <span class="number">1</span>], f[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> k = <span class="built_in">log</span>(r - l + <span class="number">1</span>) / <span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">max</span>(f[l][k], f[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>算法</category>
        <category>基本算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>列表</title>
    <url>/2019/07/22/%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="动态和静态"><a href="#动态和静态" class="headerlink" title="动态和静态"></a>动态和静态</h1><p>操作</p>
<ol>
<li>动态操作：需写入，改变元素个数，如：insert、remove</li>
<li>静态操作：仅读取，不改变元素个数</li>
</ol>
<a id="more"></a>
<p>存储方式</p>
<ol>
<li>静态存储：物理存储次序与其逻辑次序严格一致，比如向量、数组</li>
<li>动态存储：为各元素动态分配和回收物理空间，逻辑上相邻的元素记录彼此的物理地址，逻辑上形成整体，比如列表</li>
<li>动态存储可支持高效的动态操作，但静态操作极其低效；静态存储可支持高效的静态操作，但动态操作极其低效</li>
</ol>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>元素称为节点，各节点利用指针或引用彼此连接，在逻辑上构成一个线性序列<br>相邻节点彼此互称前驱、后继，前驱或后继若存在，必唯一。没有前驱或后继的唯一节点称作首/末节点<br>列表各个元素物理位置不在与逻辑位置相关，所以用循位置访问，利用节点间的互相引用访问元素<br>ADT接口<br><img src="/img/列表01.png" alt="列表接口"><br>为了方便实现，在首节点之前插入一个头节点，在末节点之后插入一个尾节点作为哨兵节点<br>构造方式：新建一个头节点和一个尾节点，把他们相互连接起来</p>
<h1 id="静态操作"><a href="#静态操作" class="headerlink" title="静态操作"></a>静态操作</h1><p>访问元素：重载<code>[r]</code>，从首节点(注意，不是头节点)开始，顺数第r个元素(取r次后继)<br>查找：某一个元素p的n个真前驱中查找某个可能存在的元素e。从p开始，不断取前驱，与e比较。相等返回，没找到返回NULL</p>
<h1 id="动态操作"><a href="#动态操作" class="headerlink" title="动态操作"></a>动态操作</h1><p>插入</p>
<ol>
<li>以插入在一个元素的前面为例，插在后面类似</li>
<li>步骤：新建节点   -&gt;  设置新节点的前驱后继  -&gt;  更新两个旧节点的前驱后继</li>
<li>得益于哨兵节点的存在，插入操作永远合法，首节点也一定有前驱，末节点也一定有后继</li>
<li>基于插入的复制构造：依据另一个列表，不断插入<br><img src="/img/列表02.png" alt="插入元素"></li>
</ol>
<p>删除</p>
<ol>
<li>步骤：备份节点   -&gt;  将p的前驱作为p的后继的前驱   -&gt;  将p的后继作为p的前驱的后继   -&gt;  delete p<br><img src="/img/列表03.png" alt="删除元素"></li>
<li>析构：不断删除可见节点，再释放头尾节点</li>
<li>唯一化：和向量类似，向前找是否存在和当前元素一样的节点，但是要注意，删除的是前面的节点而不是当前正在访问的节点，因为删除时要释放节点，如果删除当前节点会使当前指针变为野指针</li>
</ol>
<p>动态操作的复杂度几乎是O(1)，但是其中涉及到的new和delete所需要的时间大概是一般操作(如加法)的100倍</p>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>数据结构 (清华大学邓俊辉)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>凸包问题</title>
    <url>/2019/11/09/%E5%87%B8%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>凸相关<br>反射组合</p>
<h1 id="极点算法"><a href="#极点算法" class="headerlink" title="极点算法"></a>极点算法</h1><p>极性点：存在一条过那一点的直线，使得所有的点都在该直线的同一侧<br>判断方法：判断一个点是否可能被另外三个点构成的三角形包含，如果可以就是非极点，否则就是极点<br>初始算法：先把所有点都设为极点，枚举所有的三个点组成的三角形，再枚举除了顶点的所有点，判断是否是在三角形之内，是则标记为非极点</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> x, y;</span><br><span class="line">&#125; s[MAXN]; <span class="comment">// s为所有点的数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> extreme[MAXN]; <span class="comment">// 标记点的极性</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">extremePoint</span><span class="params">(<span class="keyword">int</span> n)</span> <span class="comment">// n为点的个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(extreme, <span class="literal">true</span>, <span class="keyword">sizeof</span>(extreme));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; n; p++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> q = p + <span class="number">1</span>; q &lt; n; q++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> r = q + <span class="number">1</span>; r &lt; n; r++) <span class="comment">// 至此枚举每三个点组成的三角形</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="comment">// 枚举所有点</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="comment">//不用判断顶点和非极性点</span></span><br><span class="line">					<span class="keyword">if</span>(i == p || i == q || i == r || !extreme[i])</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">continue</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span>(isInTriangle(s[p], s[q], s[r], s[i])) <span class="comment">// isInTriangle判断在三角形内</span></span><br><span class="line">					&#123;</span><br><span class="line">						extreme[i] = <span class="literal">false</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>isInTriangle</strong><br>判断方法：对于三角形的每一条边都看成一条有向边，如果s相对于每一条边都是位于同一侧就是在三角形内</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isInTriangle</span><span class="params">(Point p, Point q, Point r, Point i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> pqLeft = toLeft(p, q, i);</span><br><span class="line">	<span class="keyword">bool</span> qrLeft = toLeft(q, r, i);</span><br><span class="line">	<span class="keyword">bool</span> rpLeft = toLeft(r, p, i);</span><br><span class="line">	<span class="keyword">return</span> (pqLeft == qrLeft) &amp;&amp; (qrLeft == rpLeft);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>toLeft是用于判断点是否在线的同一侧。判断时的线段要么都是顺时针方向组成向量，要么都是逆时针方向，这要才能保证结果的正确性，即判断的三个向量必须是首尾相接的<br><strong>toLeft测试</strong><br>利用向量的叉乘计算的有向面积的结果的正负来判断在直线的哪一个位置<br />$2\vec{S}=\left|\begin{matrix}x_1&amp;y_1&amp;1\\x_2&amp;y_2&amp;1\\x_3&amp;y_3&amp;1 \end{matrix}\right|$<br /><br>最后一列的1是凑出来便于使用对角线法则</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">area</span><span class="params">(Point p, Point q, Point r)</span> <span class="comment">// p、q是一个向量的起点和终点，r是待判断的点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 按同一方向</span></span><br><span class="line">	<span class="keyword">return</span> p.x * q.y - p.y * q.x</span><br><span class="line">		 + q.x * r.y - q.y * r.x</span><br><span class="line">		 + r.x * p.y - r.y * p.x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>toLeft只需要返回area值的正负</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">toLeft</span><span class="params">(Point p, Point q, Point r)</span> <span class="comment">//p、q、r含义同上</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> area(p, q, r) &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="优化-极边算法"><a href="#优化-极边算法" class="headerlink" title="优化(极边算法)"></a>优化(极边算法)</h1><p>上一个算法的复杂度是$O(n^4)$，有点高，可以做如下优化<br>先再引入一个概念：<br>极边：对最后形成的凸包有贡献的边<br>判断方法：除了极边上的点，其余的所有点都在极边的同一侧，即极边有一侧为空<br>性质：极边是两个相邻极点的连边<br>新算法：枚举每一条可能边，判断是不是极边，如果是就把两个端点标记为极点</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">extremeEdge</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(extreme, <span class="literal">false</span>, <span class="keyword">sizeof</span>(extreme));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; n; p++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> q = <span class="number">0</span>; q &lt; n; q++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">bool</span> leftEmpty = <span class="literal">true</span>, rightEmpty = <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n &amp;&amp; (leftEmpty || rightEmpty); k++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(k != p &amp;&amp; k != q)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(toLeft(s[p], s[q], s[k]))</span><br><span class="line">					&#123;</span><br><span class="line">						leftEmpty = <span class="literal">false</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">					&#123;</span><br><span class="line">						leftEmpty = <span class="literal">false</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(leftEmpty || rightEmpty)</span><br><span class="line">			&#123;</span><br><span class="line">				extreme[p] = extreme[q] = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个算法的复杂度是O(n^3^)</p>
<h1 id="减而治之-动态维护一个凸包"><a href="#减而治之-动态维护一个凸包" class="headerlink" title="减而治之(动态维护一个凸包)"></a>减而治之(动态维护一个凸包)</h1><p>一开始并不考虑所有点，一开始假设只有前3个点，它们可以构成一个凸包，之后在把第4个点加入当前这个凸包中，并判断这个点是在凸包内还是在凸包外，如果是在凸包内，这个点就是非极性点；如果是在凸包外，这个点就一定是极性点，而且还要判断是否有的极点因为这个点的加入变为非极点</p>
<p><strong>判断点是在凸包内还是在凸包外</strong><br><img src="/img/凸包问题01.jpg" alt="2019051120275619.jpeg" style="zoom: 25%;" /><img src="/img/凸包问题02.jpg" alt="20190511202850816.jpeg" style="zoom: 37%;" /><br>将待判断的u点和凸包上的某一点的连线作为基准直线，相对于其他的点做To-Left测试，由图可知：<br>&emsp;如果在凸包外，则有一点的连线测试结果都是左，有一点的测试结果都是右，如果从当前选择的那点开始以逆时针的方向测试的话，先右后左的是从极点变为非极点的点，先左后右的是保留的极点<br>&emsp;如果在凸包内，则不存在都为左或都为右的点<br>在实际操作的时候可以吧点按逆时针排序，排序方式就是先与基准点的连线比较与x轴之间的夹角，夹角大就在后面，当然夹角的比较要设置一个精度值，一般是1e-8，小于这个精度值就认为是相等。如果角相等，就再比到基准点的距离，远的再后面。基准点一般是选择前面三个点的重心，但重心的计算又涉及到除法，为了避免精度的损失，我们选择给点的坐标乘3。比较要涉及到Basic，所以我们要读完三个点，得到最后的Basic之后再把点插入集合。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Point Basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (Point a,Point b)&#123;</span><br><span class="line">    a = a - Basic;</span><br><span class="line">    b = b - Basic;</span><br><span class="line">    <span class="keyword">double</span> ang1 = <span class="built_in">atan2</span>(a.y, a.x);</span><br><span class="line">    <span class="keyword">double</span> ang2 = <span class="built_in">atan2</span>(b.y, b.x);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(ang1 - ang2) &lt; EPS)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ang1 &lt; ang2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们希望可以快速得到点的逆时针序，在上面定义完针对Point的小于号之后就可以利用set来存储当前考虑过的凸包的极点，判断时就只需要找出逆时针序中位于待判断的点左边的点sur，以及再左边的一个点pre，若从sur在向量pre指向待测点u的右边，u就在凸包外，否则就在凸包内</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IT set<span class="meta-string">&lt;Point&gt;::iterator</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&lt;Point&gt; st;</span><br><span class="line"></span><br><span class="line"><span class="function">IT <span class="title">findPre</span><span class="params">(IT it)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> it == st.begin() ? --st.end() : --it;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isInConvexHull</span><span class="params">(Point u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IT suf, pre;</span><br><span class="line">    suf = st.lower_bound(u);</span><br><span class="line">    <span class="keyword">if</span>(suf == st.end())</span><br><span class="line">    &#123;</span><br><span class="line">        suf = st.begin();</span><br><span class="line">    &#125;</span><br><span class="line">    pre = findPre(suf);</span><br><span class="line">    <span class="keyword">return</span> toLeft(u, *pre, *suf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来如果是在凸包外的话就还要把点加入凸包，并删去那些变为非极点的点。删除的办法就是把点加入集合之后，从左边开始删除所有与u点连线的左边还有点的点，从右边开始删除与u点连线的右边还有点的点</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">IT <span class="title">findSuf</span><span class="params">(IT it)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ++it == st.end() ? st.begin() : it;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Point u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isInConvexHull(u))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    st.insert(u);</span><br><span class="line">    IT it, a, b;</span><br><span class="line">    it = st.find(u);</span><br><span class="line">    a = findPre(it);</span><br><span class="line">    b = findPre(a);</span><br><span class="line">    <span class="keyword">while</span>(st.size() &gt; <span class="number">3</span> &amp;&amp; toLeft(*it, *a, *b))</span><br><span class="line">    &#123;</span><br><span class="line">        st.erase(a);</span><br><span class="line">        a = b;</span><br><span class="line">        b = findPre(a);</span><br><span class="line">    &#125;</span><br><span class="line">    a = findSuf(it);</span><br><span class="line">    b = findSuf(a);</span><br><span class="line">    <span class="keyword">while</span>(st.size() &gt; <span class="number">3</span> &amp;&amp; toLeft(*a, *it, *b))</span><br><span class="line">    &#123;</span><br><span class="line">        st.erase(a);</span><br><span class="line">        a = b;</span><br><span class="line">        b = findSuf(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="http://codeforces.com/contest/70/problem/D" target="_blank" rel="noopener">CF 70D</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-8</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">&#125; arr[<span class="number">3</span>];</span><br><span class="line"> </span><br><span class="line">Point Basic;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">(Point p, Point q, Point r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 按同一方向</span></span><br><span class="line">    <span class="keyword">return</span> p.x * q.y - p.y * q.x</span><br><span class="line">    + q.x * r.y - q.y * r.x</span><br><span class="line">    + r.x * p.y - r.y * p.x;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Point <span class="keyword">operator</span> - (Point a, Point b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (Point)&#123;a.x - b.x, a.y - b.y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (Point a,Point b)&#123;</span><br><span class="line">    a = a - Basic;</span><br><span class="line">    b = b - Basic;</span><br><span class="line">    <span class="keyword">double</span> ang1 = <span class="built_in">atan2</span>(a.y, a.x);</span><br><span class="line">    <span class="keyword">double</span> ang2 = <span class="built_in">atan2</span>(b.y, b.x);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(ang1 - ang2) &lt; EPS)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ang1 &lt; ang2;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IT set<span class="meta-string">&lt;Point&gt;::iterator</span></span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">set</span>&lt;Point&gt; st;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">toLeft</span><span class="params">(Point p, Point q, Point r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> area(p, q, r) &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">IT <span class="title">findPre</span><span class="params">(IT it)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> it == st.begin() ? --st.end() : --it;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isInConvexHull</span><span class="params">(Point u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IT suf, pre;</span><br><span class="line">    suf = st.lower_bound(u);</span><br><span class="line">    <span class="keyword">if</span>(suf == st.end())</span><br><span class="line">    &#123;</span><br><span class="line">        suf = st.begin();</span><br><span class="line">    &#125;</span><br><span class="line">    pre = findPre(suf);</span><br><span class="line">    <span class="keyword">return</span> toLeft(u, *pre, *suf);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">IT <span class="title">findSuf</span><span class="params">(IT it)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ++it == st.end() ? st.begin() : it;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Point u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isInConvexHull(u))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    st.insert(u);</span><br><span class="line">    IT it, a, b;</span><br><span class="line">    it = st.find(u);</span><br><span class="line">    a = findPre(it);</span><br><span class="line">    b = findPre(a);</span><br><span class="line">    <span class="keyword">while</span>(st.size() &gt; <span class="number">3</span> &amp;&amp; toLeft(*it, *a, *b))</span><br><span class="line">    &#123;</span><br><span class="line">        st.erase(a);</span><br><span class="line">        a = b;</span><br><span class="line">        b = findPre(a);</span><br><span class="line">    &#125;</span><br><span class="line">    a = findSuf(it);</span><br><span class="line">    b = findSuf(a);</span><br><span class="line">    <span class="keyword">while</span>(st.size() &gt; <span class="number">3</span> &amp;&amp; toLeft(*a, *it, *b))</span><br><span class="line">    &#123;</span><br><span class="line">        st.erase(a);</span><br><span class="line">        a = b;</span><br><span class="line">        b = findSuf(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q, op;</span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">    rep(i, <span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        q--;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%lf%lf"</span>, &amp;op, &amp;x, &amp;y);</span><br><span class="line">        Basic.x += x;</span><br><span class="line">        Basic.y += y;</span><br><span class="line">        arr[i] = (Point)&#123;x * <span class="number">3</span>, y * <span class="number">3</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i, <span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        st.insert(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%lf%lf"</span>, &amp;op, &amp;x, &amp;y);</span><br><span class="line">        Point cur = (Point)&#123;x * <span class="number">3</span>, y * <span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            insert(cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            isInConvexHull(cur) ? <span class="built_in">puts</span>(<span class="string">"YES"</span>) : <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Jarvis-March"><a href="#Jarvis-March" class="headerlink" title="Jarvis March"></a>Jarvis March</h1><p>在上一个减治的写法中最差情况是O(n^2^)，最好情况也还是O(n^2^)，而Javis March的复杂度是O(nh)，h为最终凸包的边数<br>对于凸包有一个显而易见的事实——凸包的边可以看作是多个首尾相连的向量，我们就可以利用这个事实来优化极边算法。我们只要找到一条极边，以那条极边的终点为起点再找一条极边，直到找到的终点为起点为止。那我们应该从哪里开始找呢？因为凸包要包含所有的点，所以易得凸包一定包含最底下，也就是y值最小的那个点，如果y值一样，就选x值最小的那个点<br>如何寻找下一个极点？回忆极边的定义，我们就会发现极边就是一边为空的边，如果我们按逆时针方向定义每一条边的方向的话，发现极边的左侧永远是没有点的，所有我们就只需要找到最“左”的那个点就可以了。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jarvisMarch</span><span class="params">(<span class="keyword">int</span> n)</span> <span class="comment">// n为点的个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> curPoint, nexPoint;</span><br><span class="line">	curPoint = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">// 找起始点</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(s[i].y &lt; s[curPoint].y) <span class="comment">// 最下</span></span><br><span class="line">		&#123;</span><br><span class="line">			curPoint = i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(s[i].y == s[curPoint].y &amp;&amp; s[i].x &lt; s[curPoint].x) <span class="comment">// 最左</span></span><br><span class="line">		&#123;</span><br><span class="line">			curPoint = i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">begin</span> = curPoint;</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		extreme[curPoint] = <span class="number">1</span>;</span><br><span class="line">		nexPoint = <span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (i != k &amp;&amp; (nexPoint == <span class="number">-1</span> || toLeft(s[nexPoint], s[curPoint], s[i])))</span><br><span class="line">			&#123;</span><br><span class="line">				nexPoint = i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		curPoint = nexPoint;</span><br><span class="line">	&#125; <span class="keyword">while</span> (curPoint != <span class="built_in">begin</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Graham-Scan"><a href="#Graham-Scan" class="headerlink" title="Graham Scan"></a>Graham Scan</h1><p>思考一下极点算法为什么慢？因为它枚举了大量的无用的点。我们可以对初始点进行一个预处理，对点以一个基准点按逆时针进行排序(基准点一般选y值最小的点，有多个就再选其中x值最小的点)。预处理之后就可以开始主算法了。每次我们只需要关心三个点，待判断的点和最后确定的两个极点。向量方向定义为倒数第二个确定的点指向最后确定的点，如果待判断点在向量的右边，就要回溯判断这个极点的加入会不会造成之前被认定为极点的点变为非极点，只要判断出一个没有变为非极点就可以终止判断，为了便于回溯，我们建立一个栈来保持加入极点的次序；如果在左边，就说明这个点是极点，直接加入栈中</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Point结构体要加一个元素index存储的是这个点在原始数组中的标号</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; extremePoint;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">grahamScan</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	sort(s, s + n); <span class="comment">//之前已经重载了小于号</span></span><br><span class="line">	extreme[s[<span class="number">0</span>].index] = extreme[s[<span class="number">1</span>].index] = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">int</span> lLast = <span class="number">0</span>, last = <span class="number">1</span>;</span><br><span class="line">	extremePoint.push(<span class="number">0</span>);</span><br><span class="line">	extremePoint.push(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		last = extremePoint.top();</span><br><span class="line">		extremePoint.pop();</span><br><span class="line">		lLast = extremePoint.top();</span><br><span class="line">		extremePoint.pop();</span><br><span class="line">		<span class="keyword">if</span>(toLeft(s[lLast], s[last], s[i]))</span><br><span class="line">		&#123;</span><br><span class="line">			extreme[s[i].index] = <span class="literal">true</span>;</span><br><span class="line">			extremePoint.push(lLast);</span><br><span class="line">			extremePoint.push(last);</span><br><span class="line">			extremePoint.push(i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			extreme[s[i].index] = <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">while</span>(toLeft(s[lLast], s[i], s[last]))</span><br><span class="line">			&#123;</span><br><span class="line">				extremePoint[last] = <span class="literal">false</span>;</span><br><span class="line">				last = lLast;</span><br><span class="line">				lLast = extremePoint.top();</span><br><span class="line">				extremePoint.pop();</span><br><span class="line">			&#125;</span><br><span class="line">			extremePoint.push(lLast);</span><br><span class="line">			extremePoint.push(last);</span><br><span class="line">			extremePoint.push(i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>计算几何 (清华大学邓俊辉)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>计算几何</tag>
      </tags>
  </entry>
  <entry>
    <title>前缀和与差分</title>
    <url>/2020/08/07/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/</url>
    <content><![CDATA[<h1 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h1><ol>
<li><p>一维数组的前缀和：$sum[i]=a[i]+sum[i-1]$。一般下标从$1$开始，$0$作为哨兵，方便代码书写</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[MAXN], sum[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preSum</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  sum[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    sum[i] = sum[i - <span class="number">1</span>] + a[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>二维矩阵中的二维前缀和：定义$sum[i][j]=\displaystyle\sum^i_{x=1}\sum^j_{y=1}a[x][y]$</p>
</li>
<li><p>易知$sum[i-1][j]+sum[i][j-1]$中$sum[i-1][j-1]$中的数据被计算了两次，所以要扣除一次，同时还少了一个点$a[i][j]$，所以有公式：$sum[i][j] = sum[i - 1][j] + sum[i][j-1]-sum[i-1][j-1]+a[i][j]$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[MAXN][MAXN], sum[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preSum</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span>(sum));</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      sum[i][j] = sum[i - <span class="number">1</span>][j] + sum[i][j - <span class="number">1</span>] - sum[i - <span class="number">1</span>][j - <span class="number">1</span>] + a[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>推广上述公式可得，任意长$l$，宽$w$的矩形中的和为$sum[i][j]$扣除整个矩形上边冗余$sum[i-l][j]$和左边冗余$sum[i][j-w]$，同时补上被多减了一次的$sum[i-l][j-w]$，故$\displaystyle\sum^i_{x=i-l+1}\sum^j_{y=j-w+1}a[i][j]=sum[i][j]-sum[i-l][j]-sum[i][j-w]+sum[i-l][j-w]$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sumOfMatrix</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> w, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sum[i][j] - sum[i - l][j] - sum[i][j - w] + sum[i - l][j - w];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="均分纸牌问题"><a href="#均分纸牌问题" class="headerlink" title="均分纸牌问题"></a>均分纸牌问题</h1><ol>
<li>有$M$个人排成一排，手中分别有$C[1]\sim C[M]$张纸牌，在每一步操作中，可以让某个人把自己手中的一张牌交给他旁边的一个人，问至少需要多少步操作才能让每个人手中的纸牌数相等</li>
<li>若一共有$T$张牌，则这个问题的终止状态就是每个人手中都有$\displaystyle\frac{T}{M}$张纸牌</li>
<li>第$1$个人要达到最终的状态只能把$C[1]-\displaystyle\frac{T}M$张牌给第$2$个人</li>
<li>第$2$个人此时有$C[2]+C[1]-\displaystyle\frac{T}M$张牌，此时第$1$个人已经饱和，不能再和第$1$个人交易，则只能把$C[2]+C[1]-2\times\displaystyle\frac{T}M$张牌给第$3$个人</li>
<li>依此类推，得到第$i$个人要把$\displaystyle\sum^i_{x=1}C[x]-i\times\displaystyle\frac{T}M$张牌给第$i+1$个人。特殊情况$i=M$时$\displaystyle\sum^M_{x=1}C[x]=M\times\frac{T}M=T$，无需特判</li>
<li>故需要的操作数为$\displaystyle\sum^M_{i=1}\Bigg|sum[i]-i\times\frac{T}M\Bigg|$</li>
<li>如果一开始我们就让所有人手里的牌都减掉$\displaystyle\frac{T}M$，即$A[i]=C[i]-\displaystyle\frac{T}M$。则最后要使得所有人手中的牌为$0$，则答案变为$\displaystyle\sum^M_{i=1}|sum[i]|$</li>
</ol>
<h1 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h1><ol>
<li>原数列$A$，差分数列$B$，则有$B[0] = A[0]$，$B[i] = A[i]-A[i - 1] (i&gt;0)$</li>
<li>若对$A$数列中的$[l,r]$的所有元素都加$d$，则对$B$中有，$B[l]$加$d$，$B[r+1]$减$d$</li>
<li>差分操作是前缀和的逆运算，差分数列的前缀和是原数列，前缀和数列的差分是原数列</li>
</ol>
]]></content>
      <categories>
        <category>算法</category>
        <category>基本算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>图论杂谈</title>
    <url>/2020/08/07/%E5%9B%BE%E8%AE%BA%E6%9D%82%E8%B0%88/</url>
    <content><![CDATA[<h1 id="缩点"><a href="#缩点" class="headerlink" title="缩点"></a>缩点</h1><p>一种就是比如2-sat问题中的缩点，用tarjan，用于关系模糊未知的图中<br>还可以是用并查集，把同一祖先节点的缩成一个点，用于关系明确，直接说明两个点可以缩为一个点的情况，如：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1811" target="_blank" rel="noopener">HDOJ 1811</a></p>
<h1 id="判断环"><a href="#判断环" class="headerlink" title="判断环"></a>判断环</h1><p>有一种办法就是利用<strong>拓扑排序</strong>，但这种办法只能静态判断，不能动态，下面还有一种办法：<br>在图中，新建一条边，判断这条边会不会导致形成一个环？<br>只需要开一个二维数组，记录两个点之间有没有连边(直接 / 间接)，新建了一条a -&gt; b的边，就判断一下是不是已经有一条b -&gt; a的边，有就会构成环。<br>边的更新：首先把graph[a][b] = 1，然后开始分点更新。先更新到a的边，遍历一遍，graph[i][a]不为0就说明有路径i -&gt; a -&gt; b，就可以更新graph[i][b] = 1。再更新b出发的边，遍历一遍如果有graph[b][i]不为0，就说明有a -&gt; b -&gt; i，就更新graph[a][i] = 1，但是还不能结束，还要遍历一遍到a的点，如果还有graph[j][a]不为0，就说明有j -&gt; a -&gt; b -&gt; i，就更新graph[j][i] = 1</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	graph[a][b] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (graph[i][a])</span><br><span class="line">		&#123;</span><br><span class="line">			graph[i][b] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (graph[b][i])</span><br><span class="line">		&#123;</span><br><span class="line">			graph[a][i] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (graph[j][b])</span><br><span class="line">				&#123;</span><br><span class="line">					graph[j][i] = <span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>区间DP</title>
    <url>/2019/11/09/%E5%8C%BA%E9%97%B4DP/</url>
    <content><![CDATA[<p>区间DP的作用就是解决区间内的最优值。通常是化为几个小区间的和。<br><strong>处理方式</strong>：区间[i, j]内的最优值<code>dp[i][j] = max/min(dp[i][k] + dp[k][j] + sth, dp[i][j])</code>枚举所有的区间划分方式k，求得最优值。<br><strong>但是枚举的顺序应该是怎样的呢？</strong><br>首先容易想到的就是枚举区间的两个端点，i、j再枚举其中的k，但是这样不可取，每次枚举的时候已经枚举的都是区间开始端点小于i的区间，显然区间[k, j]还没有枚举过。我们可以发现求区间[i, j]时要用到的两个子区间的长度都是小于待求区间的，所以我们可以想到按区间长度枚举。下面上板子</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	这里是合并两个区间的处理</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">intervalDP</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt; n; len++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = i + len; j &lt; n &amp;&amp; i &lt; n; i++, j = i + len)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt; j; k++)</span><br><span class="line">			&#123;</span><br><span class="line">				dp[i][j] = max(dp[i][j], dp[i][k] + dp[k + <span class="number">1</span>][j] + merge());</span><br><span class="line">			]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p><a href="https://vjudge.net/problem/POJ-3186" target="_blank" rel="noopener">POJ 3186</a><br>定义状态区间[i, j]表示在只有[i, j]时能够取到的最大值，此时要么取头要么取尾，所以取完要么剩下[i + 1, j]，要么剩下[i, j - 1]。原本有n个，还剩j - i + 1个，则当前是取<code>第n - (j - i + 1) + 1 = n - j + i个</code>。所以如果取头，获得的价值就是<code>val[i] * (n - j + i)</code>，如果取尾，就是<code>val[j] * (n - j + i)</code>。所以得到状态转移方程<br><code>dp[i][j] = max(dp[i + 1][j] + val[i] * (n - j + i), dp[i][j - 1] * val[j] * (n - j + i))</code><br>求解顺序：首先对于所有的dp[i][i]，显然只有i元素时能取到的最大值就是val[i]。之后注意到我们需要用的的有下一行和左一个，所以我们的更新顺序因该是从下往上，从左往右更新<br>最后的答案就是dp[1][n] (假设下标是从1开始)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(ele, init, lim) for(int ele = init; ele &lt; lim; ele++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(arr, init) memset(arr, init, sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2010</span>;</span><br><span class="line"><span class="keyword">int</span> dp[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> val[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span> (dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;val[i]);</span><br><span class="line">            dp[i][i] = val[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i + <span class="number">1</span>][j] + val[i] * (n - (j - i + <span class="number">1</span>) + <span class="number">1</span>), dp[i][j - <span class="number">1</span>] + val[j] *(n - (j - i + <span class="number">1</span>) + <span class="number">1</span>) );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[<span class="number">1</span>][n]);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模版题：<a href="https://www.luogu.org/problemnew/show/P1880" target="_blank" rel="noopener">洛谷 P1880</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">205</span>;</span><br><span class="line"><span class="keyword">int</span> num[MAXN], sum[MAXN];</span><br><span class="line"><span class="keyword">int</span> dp1[MAXN][MAXN], dp2[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    scInt(n);</span><br><span class="line">    repLE(i, <span class="number">1</span>, n)</span><br><span class="line">    &#123;</span><br><span class="line">        scInt(num[i]);</span><br><span class="line">        num[n + i] = num[i];</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    repLE(i, n + <span class="number">1</span>, n * <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">1</span>;p&lt;n;p++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j=i+p;(j&lt;n+n) &amp;&amp; (i&lt;n+n);i++,j=i+p)</span><br><span class="line">        &#123;</span><br><span class="line">            dp2[i][j] = INF;</span><br><span class="line">            repLess(k, i, j)</span><br><span class="line">            &#123;</span><br><span class="line">                dp1[i][j] = max(dp1[i][j], dp1[i][k] + dp1[k + <span class="number">1</span>][j] + sum[j] - sum[i - <span class="number">1</span>]);</span><br><span class="line">                dp2[i][j] = min(dp2[i][j], dp2[i][k] + dp2[k + <span class="number">1</span>][j] + sum[j] - sum[i - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> maxAns = <span class="number">0</span>, minAns = INF;</span><br><span class="line">    repLE(i, <span class="number">1</span>, n)</span><br><span class="line">    &#123;</span><br><span class="line">        maxAns = max(maxAns, dp1[i][i + n - <span class="number">1</span>]);</span><br><span class="line">        minAns = min(minAns, dp2[i][i + n - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n%d\n"</span>, minAns, maxAns);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>动态规划</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>图</title>
    <url>/2019/07/25/%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h1><p>图用<code>G = (V; E)</code>表示，V表示顶点集，E表示边集</p>
<h2 id="边"><a href="#边" class="headerlink" title="边"></a>边</h2><ol>
<li>邻接关系：节点之间的关系</li>
<li>关联关系：节点与边之间的关系</li>
<li>若边的两个顶点没有先后关系，就把那条边称为<code>无向边</code>，所有边都是无向边的图称为<code>无向图</code></li>
<li>若边的两个顶点有先后关系，就把那条边称为<code>有向边</code>，所有边都是无向边的图称为<code>有向图</code></li>
<li>即有有向边，又有无向边的图称为混合图</li>
<li>无向边可以拆为两条方向不同的有向边</li>
<li>n个顶点的无向完全图，有$\frac{n(n-1)}{2}$条边，n个顶点的有向完全图中有$n(n-1)$条边，n个顶点的强连通图至少$n$个顶点(形成一个大环)<a id="more"></a>
</li>
</ol>
<h2 id="路"><a href="#路" class="headerlink" title="路"></a>路</h2><ol>
<li>简单路：每个顶点只出现一次(不一定要包含所有顶点)</li>
<li>环路也分为简单环路和环路</li>
<li>欧拉环路：每条边恰好出现一次(要包含所有边)</li>
<li>汉密尔顿环路：每个顶点恰好出现一次(要包含所有的点)</li>
</ol>
<h1 id="图的实现"><a href="#图的实现" class="headerlink" title="图的实现"></a>图的实现</h1><ol>
<li>邻接矩阵：若有n个节点，就建立一个n行n列的矩阵，如果节点i和节点j之间是邻接关系，就把第i行第j列的值设为1(无权图)或设为权值(带权图)</li>
<li>关联矩阵：若有n个节点，e条边，就建立一个n行e列的矩阵，如果节点i和边j之间是关联关系，就把第i行第j列的值设为1(无权图)或设为权值(带权图)</li>
<li>无向边的邻接矩阵要把每条边存储两遍，有向边只要存一遍</li>
</ol>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol>
<li>一个一维向量存储所有的顶点，一个二维向量存储所有的顶点之间的连边情况</li>
<li>连边情况的存储用的是指针，指向一个存储了边的信息的结构体/对象，默认为NULL，表示没有连边</li>
<li>加边：新建一个边的信息，并用一个指针指向它，并将指针存储在边的二维矩阵中，注意点出入度的增加</li>
<li>删边：释放边的指针指向的内容，将边的指针设为NULL，减少点的出入度</li>
<li>加点：给一位顶点向量加一个元素，二维向量的每一位最后都加一个空元素为原先的点到新点的边的情况(一开始为空)，二维向量还要再加一行，表示新点到其余点的边的情况(一开始也为空，且数量和现点数一样多，比原点数多一个)</li>
<li>删点：删除顶点向量中对应的元素，二维向量中将其他点与它的连边删除，并移出二维向量，再把对应的那一维整个删除移出，修改所有点的出入度</li>
</ol>
<h1 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h1><p>简单，略</p>
<h1 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h1><h2 id="标记边"><a href="#标记边" class="headerlink" title="标记边"></a>标记边</h2><ol>
<li>树边：从当前点指向一个尚未访问的点的边<br>[当结束点尚未访问]</li>
<li>后向边：从一个点指向其祖先的边(要回溯才能经过树边达到另一个点的边)<br>[当结束点被访问过，但还在访问其后代]</li>
<li>前向边：从一个点指向其后代的边(要正向进行深搜才可以经过树边达到另一个点的边)<br>[当结束点被访问过，且访问时间晚于当前点]</li>
<li>跨边：跨接两个无法经过树边达到的点的边<br>[当结束点被访问过，且访问时间早于当前点]</li>
<li>后向边的出现就表示了图中有环路</li>
</ol>
<h2 id="DFS序"><a href="#DFS序" class="headerlink" title="DFS序"></a>DFS序</h2><ol>
<li>标记时间：第一次访问一个节点的时间为dTime，访问完当前节点的所有邻居时的时间fTime(就算没有邻居要访问时间也要加一)</li>
<li>DFS序：按访问顺序排列，每个节点出现且只出现两次，一次对应dTime，一次对应fTime</li>
<li>括号引理：在DFS序中，被一个节点的两次出现夹在中间的所有节点都是这个节点的后代，否则就没有关系<br>若u是v的祖先    ⟺    dTime(u) &lt; dTime(v) &amp;&amp; fTime(v) &lt; fTime(u)<br>若u是v的后代    ⟺    dTime(u) &gt; dTime(v) &amp;&amp; fTime(v) &gt; fTime(u)<br>否则u和v没有关系</li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>数据结构 (清华大学邓俊辉)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>向量</title>
    <url>/2019/07/17/%E5%90%91%E9%87%8F/</url>
    <content><![CDATA[<h1 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h1><ol>
<li>向量是数组的拓展，向量和数组都是一系列在物理上紧邻的值，都是<code>循秩访问</code>， 但是向量并不像数组，向量在<code>体验上</code>并没有空间限制</li>
<li>向量约定的接口<br><img src="/img/向量01.png" alt="向量接口"><a id="more"></a></li>
<li>向量经过封装，元素的种类不限于基本类型</li>
<li>向量除了上面定义的接口之外，还要定义几个<code>private</code>变量<br>_size：存储的元素个数<br>_capacity：能存储的元素个数<br>_elem：数组</li>
</ol>
<h1 id="构造与析构"><a href="#构造与析构" class="headerlink" title="构造与析构"></a>构造与析构</h1><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><ol>
<li>传入一个长度参数(默认赋值，可以不传)，申请一个该长度的数组，_capacity赋为该长度，_size赋为0</li>
<li>基于复制的构造：申请待复制内容<code>两倍</code>的容量。传入一个数组或向量和区间[ lo, hi ] (没传区间就完整复制)，申请数组空间后把区间内的值复制过去，_size赋值为区间长度</li>
</ol>
<h2 id="析构方法"><a href="#析构方法" class="headerlink" title="析构方法"></a>析构方法</h2><p>delete [] _elem</p>
<h1 id="可扩充向量"><a href="#可扩充向量" class="headerlink" title="可扩充向量"></a>可扩充向量</h1><h2 id="动态空间管理"><a href="#动态空间管理" class="headerlink" title="动态空间管理"></a>动态空间管理</h2><ol>
<li>向量<code>内部</code>还是使用和数组一样的静态空间管理策略，和数组一样有空间限制，可能会发生上溢和下溢，所以要实现一种动态空间管理策略，改进静态空间管理策略的劣势</li>
<li>动态空间管理：当即将发生上溢或下溢时，申请一个合适大小的<code>新数组</code>，将原数组内的元素一一复制到新数组中，同时<code>销毁原数组</code></li>
<li>得益于向量的封装，尽管扩容后数据区的物理地址有所改变，却不至出现野指针</li>
</ol>
<h2 id="合适大小"><a href="#合适大小" class="headerlink" title="合适大小"></a>合适大小</h2><p>评判标准：当连续插入n (<code>n &gt;&gt; 2</code>)个元素时的分摊时间复杂度</p>
<h3 id="加量策略"><a href="#加量策略" class="headerlink" title="加量策略"></a>加量策略</h3><ol>
<li>如果每次扩容都把容量增加一个<code>常数I</code>大小，即每次<code>_capacity += I</code></li>
<li>设<code>n = m * I</code>，则每次扩容的耗时为<code>1, I, 2I, …, (m - 1)I</code>，总耗时就为<code>I * (m - 1) * m / 2 = O(n²)</code>，分摊复杂度就是<code>O(n)</code></li>
<li>装填因子<code>λ ≈ 100%</code></li>
</ol>
<h3 id="加倍策略"><a href="#加倍策略" class="headerlink" title="加倍策略"></a>加倍策略</h3><ol>
<li>如果每次扩容后的容量都变为原来的两倍， 即每次<code>_capacity &lt;&lt;= 1</code></li>
<li>设<code>n = 2ᵐ</code>，则每次扩容的耗时为<code>1, 2, 4, …, 2ᵐ</code>，总耗时就为<code>2ᵐ⁺¹ - 1 = O(n)</code>，分摊复杂度就为<code>O(1)</code></li>
<li>装填因子<code>λ &gt; 50%</code></li>
</ol>
<p>综上，用倍增策略时间复杂度远远优于递增策略，但空间利用率只是略低，所以倍增策略较好</p>
<h1 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h1><p>在约定的接口中已经可以利用get和put来获得和修改值，但比较麻烦，通过重载<code>[]</code>可以向数组一样访问元素<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">T &amp; Vector&lt;T&gt;::<span class="keyword">operator</span>[](<span class="keyword">int</span> r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> _elem[r];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>上面重载时返回的是一个引用，这样利用方括号获得的值不只可以用做右值参与计算(get操作)，还可以用做左值被赋值(put操作)</p>
<h1 id="元素增加-删除"><a href="#元素增加-删除" class="headerlink" title="元素增加/删除"></a>元素增加/删除</h1><ol>
<li>元素增加前需要先判断<code>是否需要扩容</code>，如果增加的元素不是在最后，要先从右往左把元素后移一位(复制到下一位)</li>
<li>区间删除要把元素从左往右复制，结束后判断<code>是否需要缩容</code></li>
<li>单元素的删除可以转化为区间删除，但是区间内只含一个元素</li>
<li>如果是把区间删除转化成多个单元素删除，复杂度就会是O(mn)，m为区间内元素个数，n为区间后继元素个数，而不是原本的O(n)</li>
</ol>
<h1 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h1><p>遍历接口可以对向量内的所有元素都执行某一系列操作，可以通过传函数指针或函数对象的方法实现<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> Vector&lt;T&gt;::traverse(<span class="keyword">void</span> (*visit)(T&amp;))   <span class="comment">// 函数指针</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        visit(_elem[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Vector&lt;T&gt;::traverse(VST&amp; visit) <span class="comment">// 函数对象</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        visit(_elem[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>传函数对象方法的使用：实现一个对单个T类型元素执行操作的类，用重载<code>()</code>的方式实现<br>例如将向量内所有元素分别加一<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Increase</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(T &amp; e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        e++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vec.traverse(Increase&lt;T&gt;());</span><br></pre></td></tr></table></figure></p>
<h1 id="唯一化"><a href="#唯一化" class="headerlink" title="唯一化"></a>唯一化</h1><ol>
<li>无序向量的唯一化：从前往后遍历，对每一个元素，都尝试在它的前驱中找到和它一样的元素，如果找到就删去，否则留下</li>
<li>有序向量的唯一化：另外加一个变量newSize记录遍历到当前去重后的数组大小，初始大小为1，从第二个元素开始，从前往后遍历，如果某一个元素和它的前一个元素不同，就把该元素复制到newSize位置上，newSize++。最后把_size更新为newSize</li>
</ol>
<h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><p>无序向量的查找只能一一遍历，如果找到就返回位置，如果失败就返回一个特定的符号</p>
<h2 id="语义约定"><a href="#语义约定" class="headerlink" title="语义约定"></a>语义约定</h2><ol>
<li>要求：便于自身维护：<code>vec.insert(1 + vec.search(e), e)</code>。如果失败，也应给出适当的插入位置；若允许重复，按插入顺序排列</li>
<li>约定：在区间[ lo, hi )中，返回不大于e的最后一个元素的秩。若<code>e &lt; vec[lo]</code>，返回<code>lo-1</code>；若<code>vec[hi - 1] &lt; e</code>，返回<code>hi-1</code></li>
</ol>
<h2 id="二分查找a"><a href="#二分查找a" class="headerlink" title="二分查找a"></a>二分查找a</h2><ol>
<li>取mid为lo和hi的中点，若<code>e &lt; vec[mid]</code>，舍弃[ mid, hi )；若<code>vec[mid] &lt; e</code>， 舍弃[lo, mid]；若<code>e == vec[mid]</code>，返回相同值最大秩</li>
<li>复杂度：O(log n)</li>
<li>问题：待查找点在mid的左右两侧不同情况所需的比较次数不一样(由if语句的顺序决定)，平均查找长度为<code>O(1.5log n)</code></li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> Vector&lt;T&gt;::search(<span class="keyword">int</span> e, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (lo &lt; hi)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (lo + ((hi - lo) &gt;&gt; <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (vec[mid] &gt; e)</span><br><span class="line">        &#123;</span><br><span class="line">            hi = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (vec[mid] &lt; e)</span><br><span class="line">        &#123;</span><br><span class="line">            lo = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (vec[mid + <span class="number">1</span>] == e)</span><br><span class="line">            &#123;</span><br><span class="line">                mid++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Fibonacci查找"><a href="#Fibonacci查找" class="headerlink" title="Fibonacci查找"></a>Fibonacci查找</h2><ol>
<li>Fibonacci查找本质还是二分查找，但是通过选不同的切分点，让递归树偏向查找长度更低的那一侧。若区间长度为<code>n = fib(k) - 1</code>，就选<code>mid = fib(k - 1) - 1</code>，这样前、后子向量的长度为<code>fib(k - 1) - 1</code>、<code>fib(k - 2) - 1</code></li>
<li>先前的二分查找是递归深度相同，比较次数大不同；Fibonacci查找是递归深度不同，比较次数差异减小，平均比较次数减小</li>
<li>平均比较次数减小的证明：<br>设长度为n的区间，取<code>λn(0&lt;λ&lt;1)</code>为切分点，平均查找长度为<code>α(λ)log₂n</code><br>要平均查找长度最优，就要α(λ)最小<br>有递推式：$α(λ) \times log₂n = λ \times [1 + α(λ) \times log₂(λn)] + (1 - λ) \times [2 + α(λ) \times log₂((1 - λ)n)]]$<br>整理得：<strong>$α(λ) = \frac{ln2 \times (λ - 2)}{λ \times lnλ + (1 - λ) \times ln(1 - λ)}$</strong>，在<code>λ = φ</code>时有最小值<code>α(λ) = 1.440420…</code></li>
</ol>
<h2 id="二分查找b"><a href="#二分查找b" class="headerlink" title="二分查找b"></a>二分查找b</h2><ol>
<li>改进思路：之前的二分查找查找效率低的原因就是有一侧分支必须经过两次判断才可以得到，所以直接不判等，将区间划为[ lo, mid )与[ mid, hi )，而不是[ lo, mid )、mid、(mid, hi)</li>
<li>这种改进就是让最好的情况更坏，但是最坏的情况更好，不论是最好还是最坏，查找长度都是<code>log n</code>，所以平均查找长度<code>O(log n)</code></li>
<li>注意到上面这种写法的话实际上是把区间分为了[ lo, mid ) 和 ( mid, hi )两个区间，但这两个区间都没有包含mid这个元素，以下证明正确性<br>不变性：在任意时刻，都有<code>[0, lo) ≤ e &lt; [hi, n)</code><br>如果<code>vec[mid] ≤ e</code>，则在<code>[lo, mid]</code>上都是<code>vec[i] ≤ e</code>，所以lo更新为mid + 1也可以维持不变性<br>如果<code>vec[mid] &gt; e</code>，则在<code>[mid, hi)</code>上都是<code>vec[i] &gt; e</code>，所以hi更新为mid也可以维持不变性</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> Vector&lt;T&gt;::search(<span class="keyword">int</span> e, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (lo &lt; hi)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (lo + ((hi - lo) &gt;&gt; <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (vec[mid] &gt; e)</span><br><span class="line">        &#123;</span><br><span class="line">            hi = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            lo = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> --lo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="插值查找"><a href="#插值查找" class="headerlink" title="插值查找"></a>插值查找</h2><ol>
<li>适用范围：已知数组内的元素的分布有一定的规律，满足均匀独立分布，于是[ lo, hi )内的元素大致按线性的趋势增长</li>
<li>原理式：如果满足上面的情况，则大致猜测e所在的位置mid有：$\frac{mid - lo}{hi - lo} = \frac{e - vec[lo]}{vec[hi] - vec[lo]}$，化简得$mid = lo + \frac{(hi - lo) \times (e - vec[lo])}{vec[hi] - vec[lo]}$</li>
<li>时间复杂度：<code>O(log log n)</code><br>证明：在平均情况下，每次插值查找之后都会将区间长度<code>由n变为√n</code><br>解释1：不断下去，最后区间长度l = n<sup>(1/2)<sup>k</sup>&lt;/sup&gt;，要使l &lt; 2，就要(1/2)<sup>k</sup> &lt; log n，k &lt; log log n<br>解释2：看二进制位宽，二分查找把n变为n/2，位宽由log n变为log(n/2) = log n - log2 = log n - 1，查找查找把n变为√n，位宽由log n变为log √n = (1/2)log n，插值查找是对二进制位宽的二分查找，所以是O(log log n)</li>
</ol>
<h2 id="查找综合"><a href="#查找综合" class="headerlink" title="查找综合"></a>查找综合</h2><ol>
<li>插值查找在最坏的情况下有O(n)，而且在数据规模不太大的情况下，相对于二分查找的改进也不够大</li>
<li>查找原则：<br>大范围：插值查找<br>中范围：二分查找<br>小范围：顺序查找</li>
</ol>
<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="起泡排序"><a href="#起泡排序" class="headerlink" title="起泡排序"></a>起泡排序</h2><ol>
<li>原理：在一趟扫描中，交换所有的逆序对，且“指针”永远跟着较大的元素</li>
<li>改进1：有时在经过若干次(少于n)的扫描后就已经有序，此时就可以退出算法</li>
<li>改进2：在一次扫描后，一段较长的后缀已经有序，这段后缀就可以直接跳过，之后不必再扫描</li>
<li>改进只能改平均复杂度的常数和最好情况的复杂度，最坏复杂度还是O(n<sup>2</sup>)</li>
<li>起泡排序可以维持重复元素之间的相对次序(相等不交换)</li>
</ol>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><ol>
<li>空间改进：区间[mid, hi)可以不用复制，当区间[lo, mid)耗尽后自动退出</li>
<li>归并排序的mid可以不选取lo和hi的中点，且总时间复杂度不会变</li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>数据结构 (清华大学邓俊辉)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>差分约束与拓扑排序</title>
    <url>/2019/11/09/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%E4%B8%8E%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>给一系列由两个不同变量的差小于等于某个数的不等式组组成，要求求出某两个变量差的最大值</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>最短路算法最终松弛后必有<code>dist[u] ≤ dist[x] + map[x][u]</code>，移项得<code>dist[u] - dist[x] ≤ map[x][u]</code>，这与差分约束的问题相似。解决差分约束我们就可以借用最短路问题。<br><strong>建图</strong>：对于每一个不等式：<code>变量a - 变量b ≤ 差d</code>我们可以建立一条从b到a的有向边，边长为d<br><strong>算法</strong>：由于此类问题常常出现负权，所以我们一般不选择Dijkstra算法，而是使用SPFA、Bellman-Ford或Floyd</p>
<h1 id="变型"><a href="#变型" class="headerlink" title="变型"></a>变型</h1><p>1、<code>a - b ≥ d</code>：等式左右两边乘-1，不等号变向<code>b - a ≤ -d</code><br>2、<code>a - b = d</code>：分为两个等式，大于等于差和<code>a - b ≥ d、a - b ≤ d</code><br>3、<code>a - b &lt; d</code>：d减1，改为小于等于<code>a - b ≤ d - 1</code><br>4、<code>a - b &gt; d</code>：d加1，改为大于等于<code>a - b ≥ d + 1</code><br>5、求差的最小值：建图时取负权，求出最长路</p>
<h1 id="区间约束"><a href="#区间约束" class="headerlink" title="区间约束"></a>区间约束</h1><p>区间的问题我们一般转化为两个的差，常见的就是前缀和，如果给的是区间[a, b]内的和与k的关系，一般转化为sum[b] - sum[a - 1]与k的关系，但是要注意，区间之间也有约束，sum[i]与sum[i - 1]之间有一个a[i]的区别，所以如果a[i]可以不选，则有：<br><code>0 ≤ sum[i] - sum[i - 1] ≤ a[i]</code> </p>
<h1 id="求解约束"><a href="#求解约束" class="headerlink" title="求解约束"></a>求解约束</h1><p>就是不等式右边不是常数，而是待求解的答案，我们可以从可能的答案域中二分或直接枚举出答案<br>如：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1529" target="_blank" rel="noopener">HDOJ 1529</a></p>
<h1 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h1><p>拓扑排序的结果就是每一个点都不与它的前驱直接相连，可以用于有约束的排序中</p>
<p>排序方法：<br>&emsp;1) 若图中所有点的入度都大于0，则不存在拓扑排序<br>&emsp;2) 取一个入度为0的点，把它加入已排序结果的末尾，并删除这个点与其所有边，即从这个点可以到达的点入度减一<br>&emsp;3) 如果还有入度为0的点，继续；否则算法终止</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vactor&lt;<span class="keyword">int</span>&gt; vec[MAXN]; <span class="comment">// 图</span></span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>&gt;  que; <span class="comment">//存储入度为0的节点</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans; <span class="comment">//存储排序结果</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">topsort</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(indegree[i]==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            que.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> node = que.top();</span><br><span class="line">        que.pop();</span><br><span class="line">        ans.push_back(node);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vec[node].size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            indegree[vec[node][i]]--;</span><br><span class="line">            <span class="keyword">if</span>(!indegree[vec[node][i]])</span><br><span class="line">            &#123;</span><br><span class="line">                que.push(vec[node][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据题意的不同：先输出编号小的点(小根堆) / 先输出编号大的点(大根堆) / 编号最小的优先，有多种答案再考虑第二小的(反向拓扑排序 + 反向输出)，反向拓扑排序要反向建边，用大根堆<br>反向拓扑排序：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4857" target="_blank" rel="noopener">HDOJ 4857</a><br>拓扑排序：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1285" target="_blank" rel="noopener">HDOJ 1285</a></p>
<h1 id="拓扑排序应用——判断环"><a href="#拓扑排序应用——判断环" class="headerlink" title="拓扑排序应用——判断环"></a>拓扑排序应用——判断环</h1><p>无向图没有拓扑排序的说法，有向图也不一定有拓扑排序，只有有向无环图有拓扑排序，我们就可以利用这种性质判断是否有环。对一个图进行拓扑排序，如果有环，参与构成环的节点的入度一定不会是0(环内节点相互指就会至少有一个入度)，所以最后形成的拓扑排序结果的节点个数一定和总节点个数不一样</p>
<h1 id="拓扑排序与SPFA"><a href="#拓扑排序与SPFA" class="headerlink" title="拓扑排序与SPFA"></a>拓扑排序与SPFA</h1><p>SPFA用于解决：验证约束是否成立、求值。但SPFA不能用于把点排序<br>拓扑排序：只能用于点排序</p>
]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
        <category>最短路径</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>字典树</title>
    <url>/2019/11/09/%E5%AD%97%E5%85%B8%E6%A0%91/</url>
    <content><![CDATA[<p>字典树节点结构体：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">char</span> ch;   <span class="comment">//可以不用这个变量来标注节点代表字符，因为可以根据index推测  </span></span><br><span class="line">	node * next[<span class="number">26</span>];   <span class="comment">//指向子节点的指针数组</span></span><br><span class="line">	<span class="comment">//...还可以根据需要定义其他变量，如常见的：标记是否是字符串结尾的end记号</span></span><br><span class="line">	node()    <span class="comment">//构造函数，使得在使用new定义node时自动初始化</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">			next[i] = <span class="literal">NULL</span>;   <span class="comment">//将指针数组初始化为NULL</span></span><br><span class="line">		<span class="comment">//...还可以对其他变量初始化</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义node</span></span><br><span class="line">node * root = <span class="keyword">new</span> node();   <span class="comment">//new返回的是一个指针</span></span><br></pre></td></tr></table></figure>
<p>字典树的建树</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">char</span> * str, node * root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(str[i] != <span class="string">'\0'</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> index = str[i] - <span class="string">'a'</span>;</span><br><span class="line">		<span class="keyword">if</span>(root -&gt; next[index] == <span class="literal">NULL</span>)    <span class="comment">//若为空节点则先建立一个新节点</span></span><br><span class="line">			root -&gt; next[index] = <span class="keyword">new</span> node();</span><br><span class="line">		<span class="comment">//全字典树的根节点不赋任何值</span></span><br><span class="line">		root = root -&gt; next[index];</span><br><span class="line">		root -&gt; ch = str[i];</span><br><span class="line">		<span class="comment">//...对变量赋值</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>字典树的还原(DFS)：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(node * root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">		<span class="keyword">if</span>(root -&gt; next[i] != <span class="literal">NULL</span>)</span><br><span class="line">			dfs(root -&gt; next[i]);     <span class="comment">//递归直到树的最深处</span></span><br><span class="line">	<span class="keyword">delete</span> root;</span><br><span class="line">	<span class="comment">//从最深的地方开始才删就不会遗漏</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>串</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>并查集题集</title>
    <url>/2019/11/09/%E5%B9%B6%E6%9F%A5%E9%9B%86%E9%A2%98%E9%9B%86/</url>
    <content><![CDATA[<p><a href="http://codeforces.com/problemset/problem/1156/D" target="_blank" rel="noopener">CF 1156D</a><br>思路：建立两个并查集，权值为1的一个，权值为2的一个，记录每个点不同权值边所在的树的节点数。每一颗树中的节点都是相互可配对的，从一棵0树的节点经过另一个节点到一棵1树也是合法的，我们计算时就枚举所有的节点，计算出经过该节点的可匹配点，即<code>该节点所在的0树的节点数乘以1数的节点数再减去1(该节点到该节点)</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sz[<span class="number">2</span>][MAXN], dsu[<span class="number">2</span>][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x != dsu[v][x])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> dsu[v][x] = find(dsu[v][x], v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fx = find(x, v);</span><br><span class="line">    <span class="keyword">int</span> fy = find(y, v);</span><br><span class="line">    <span class="keyword">if</span>(fx != fy)</span><br><span class="line">    &#123;</span><br><span class="line">        dsu[v][fx] = fy;</span><br><span class="line">        sz[v][fy] += sz[v][fx];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, x, y, v;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    rep(i, <span class="number">1</span>, n + <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        dsu[<span class="number">0</span>][i] = dsu[<span class="number">1</span>][i] = i;</span><br><span class="line">        sz[<span class="number">0</span>][i] = sz[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i, <span class="number">1</span>, n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; v;</span><br><span class="line">        merge(x, y, v);</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    rep(i, <span class="number">1</span>, n + <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ans += <span class="number">1L</span>L * sz[<span class="number">0</span>][find(i, <span class="number">0</span>)] * sz[<span class="number">1</span>][find(i, <span class="number">1</span>)] - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
        <category>并查集</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>如何高效学习</title>
    <url>/2020/05/06/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p><img src="/img/如何高效学习.png"></p>
]]></content>
      <categories>
        <category>看过的书</category>
      </categories>
      <tags>
        <tag>书</tag>
        <tag>学习效率</tag>
      </tags>
  </entry>
  <entry>
    <title>并查集应用</title>
    <url>/2019/11/09/%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h1 id="题目1-带权并查集"><a href="#题目1-带权并查集" class="headerlink" title="题目1 (带权并查集)"></a>题目1 (带权并查集)</h1><p><a href="https://vjudge.net/problem/HDU-3038" target="_blank" rel="noopener">HDOJ 3038</a><br>这题是带权并查集的模版题。我们定义，如果询问到了区间[x, y]，我们就把y所在的树变为x所在的树的根节点的子树连起来。权值sum[maxn]，判断是否有矛盾的方法：1、询问的区间两个端点必须是在同一棵树上的，即之前有被询问过，否则不能判断；2、<code>sum[x] + val != sum[y]</code>。注意定义的并查集向量的方向是父节点指向孩子节点的，所以判断时是sum[x] + val而不是sum[y] + val，合并的顺序也要注意<br>代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200000</span> + <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> unionFind[maxn], sum[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(unionFind[x] == x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> oldFather = unionFind[x];</span><br><span class="line">    unionFind[x] = <span class="built_in">find</span>(unionFind[x]);</span><br><span class="line">    sum[x] = sum[x] + sum[oldFather];</span><br><span class="line">    <span class="keyword">return</span> unionFind[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isTrue</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fx = <span class="built_in">find</span>(x);</span><br><span class="line">    <span class="keyword">int</span> fy = <span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(fx == fy)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(sum[x] + val != sum[y])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        unionFind[fx] = fy;</span><br><span class="line">        sum[fx] = sum[y] + val - sum[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span>(sum));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            unionFind[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> x, y, val;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;val);</span><br><span class="line">            x--; <span class="comment">//为了把形如[1, 5]和[6, 10]这样的区间连接起来</span></span><br><span class="line">            <span class="keyword">if</span>(!isTrue(x, y, val))</span><br><span class="line">            &#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="题目2-种类并查集"><a href="#题目2-种类并查集" class="headerlink" title="题目2 (种类并查集)"></a>题目2 (种类并查集)</h1><p><a href="https://vjudge.net/problem/POJ-1182" target="_blank" rel="noopener">POJ 1182</a><br>这题的状态比较难定义，我们定义：0表示和父节点同类，1表示吃父节点，2表示被父节点吃，而0、1也和题中的1、2对应起来</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span> + <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> unionFind[maxn], val[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x != unionFind[x])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> oldFather = unionFind[x];</span><br><span class="line">        unionFind[x] = <span class="built_in">find</span>(unionFind[x]);</span><br><span class="line">        val[x] = (val[x] + val[oldFather]) % <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> unionFind[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(val, <span class="number">0</span>, <span class="keyword">sizeof</span>(val));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            unionFind[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> x, y, relation;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(k--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;relation, &amp;x, &amp;y);</span><br><span class="line">            <span class="keyword">if</span>(x &gt; n || (x == y &amp;&amp; relation == <span class="number">2</span>) || y &gt; n)</span><br><span class="line">            &#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> fx = <span class="built_in">find</span>(x);</span><br><span class="line">                <span class="keyword">int</span> fy = <span class="built_in">find</span>(y);</span><br><span class="line">                <span class="keyword">if</span>(fx == fy &amp;&amp; (val[x] - val[y] + <span class="number">3</span>) % <span class="number">3</span> != relation - <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(fx != fy)</span><br><span class="line">                &#123;</span><br><span class="line">                    unionFind[fx] = fy;</span><br><span class="line">                    val[fx] = (val[y] + relation - val[x] + <span class="number">2</span>) % <span class="number">3</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
        <category>并查集</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>并查集</title>
    <url>/2019/11/09/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>并查集是一种高级的数据结构，本质是一个树，用数组实现，可以进行并集和查集的操作。并查集的特点在于快速判断两个点是不是在同一棵树中</p>
<h1 id="构成"><a href="#构成" class="headerlink" title="构成"></a>构成</h1><p>一个一维数组$arr$，$arr[i] = j$的含义是第$i$个元素属于$j$这棵树中。初始的时候每一棵树都是一棵单独的树，故在初始的时候每一个单元内存储的值和该单元的下标一样(我们一般都以根节点为基准，把别的点合并到根节点)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> unionFind[maxn]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn; i++)</span><br><span class="line">  unionFind[i] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="查"><a href="#查" class="headerlink" title="查"></a>查</h1><p>查是并查集的核心操作，由并查集的构成可知，有且只有一棵树的根节点保存的值和其下标一样。查就是判断数组中下标和值是否一样，若一样则返回该值，否则找该值所在的树。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(x != unionFind[x])</span><br><span class="line">  &#123;</span><br><span class="line">    x = unionFind[x];     <span class="comment">//下标和值不想等，沿值继续查找</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x;    <span class="comment">//相等了返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果数据量大，查找会花费大量的时间，这时候如果路径不影响结果就可以利用路径压缩优化之后查找的时间</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x != unionFind[x])</span><br><span class="line">  &#123;</span><br><span class="line">    unionFind[x] = <span class="built_in">find</span>(unionFind[x]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//不相等，利用递归，把所有的子节点的值都直接</span></span><br><span class="line">  <span class="keyword">return</span> unionFind[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="并"><a href="#并" class="headerlink" title="并"></a>并</h1><p>并就没有什么技术含量了，用查找出两个小弟的老大，把、让一个老大心中装有另一个老大就完成了</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  x = <span class="built_in">find</span>(x);</span><br><span class="line">  y = <span class="built_in">find</span>(y);</span><br><span class="line">  unionFind[x] = y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="带权并查集"><a href="#带权并查集" class="headerlink" title="带权并查集"></a>带权并查集</h1><p>一般并查集都是无权树，带权并查集是对并查集的一个扩展。通过对点赋值，来确定特殊的属于关系，相当于把一般并查集的属于关系进行了拓展，在属于的基础上还可以利用权值来确定点与点之间的其他特殊关系<br>在带权并查集中，我们多加一个数组val，来存储i号节点到它父节点的边的权值。我们在图中也可以把边看成是孩子节点指向父节点的一个向量，之后的值的相加都要利用到向量的思想<br><strong>查(路径压缩)</strong>：压缩后，节点x的父节点变为根节点<br><img src="/img/并查集01.jpg" width="60%"><br>由图可知，更新后的$val[x] = val[x] + val[oldFather]$</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(unionFind[x] == x)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> oldFather = unionFind[x];</span><br><span class="line">  unionFind[x] = <span class="built_in">find</span>(unionFind[x]);</span><br><span class="line">  val[x] = val[x] + val[oldFather];</span><br><span class="line">  <span class="keyword">return</span> unionFind[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>并：</strong><br>合并之前总是要先找到他们的最远祖先，就意味着之前一定要运行一遍find函数，就意味着在合并正式开始的时候两颗树的形状一定是如上右图一样，路径压缩过后的样子<br><img src="/img/并查集02.jpg" width="60%"><br>由图可知，$val[fx] = val[y] + v - val[x]$</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> fx = <span class="built_in">find</span>(x);</span><br><span class="line">  <span class="keyword">int</span> fy = <span class="built_in">find</span>(y);</span><br><span class="line">  <span class="keyword">if</span>(fx != fy)</span><br><span class="line">  &#123;</span><br><span class="line">    unionFind[fx] = fy;</span><br><span class="line">    vaL[fx] = val[y] + x - val[x];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还有一个遗留问题：在合并的时候为什么只修改根节点的值？val的含义是和父节点的权值，在合并时不改变树型，就不会改变根节点的孩子节点的父节点，就没有必要更新它们</p>
<h1 id="种类并查集"><a href="#种类并查集" class="headerlink" title="种类并查集"></a>种类并查集</h1><p>本质就是利用带权并查集和状态压缩。利用状态压缩，把物间的关系压缩成一系列数，一般是从0开始的连续实数，a和b有关系，就把a和b连起来，关系a、b间关系的大小<br>但是在合并时，在更新值的时候要取余，有减的项，为了防止在取余时出现负数，就要加上取余的数</p>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
        <category>并查集</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>所谓情商高，就是会说话</title>
    <url>/2020/05/31/%E6%89%80%E8%B0%93%E6%83%85%E5%95%86%E9%AB%98%EF%BC%8C%E5%B0%B1%E6%98%AF%E4%BC%9A%E8%AF%B4%E8%AF%9D/</url>
    <content><![CDATA[<p><img src="\img\所谓情商高，就是会说话.png" alt=""></p>
]]></content>
      <categories>
        <category>看过的书</category>
      </categories>
      <tags>
        <tag>书</tag>
        <tag>人际交往</tag>
      </tags>
  </entry>
  <entry>
    <title>快速幂</title>
    <url>/2019/11/08/%E5%BF%AB%E9%80%9F%E5%B9%82/</url>
    <content><![CDATA[<h1 id="引入：数幂"><a href="#引入：数幂" class="headerlink" title="引入：数幂"></a>引入：数幂</h1><p>a<sup>n</sup>一般的朴素算法的复杂度是O(n)，但有办法让其变为O(log n)，方法就是不断平方底数<br>原理：每一个整数指数都写为2进制的形式，从右往左算出每一位代表的数的幂， 再相乘。如11 = (1011)~2~，故3<sup>11</sup> = 3<sup>1011</sup> = 3<sup>(1000)+(10)+(1)</sup> = 3<sup>(1000)</sup> <em> 3<sup>(10)</sup> </em> 3<sup>(1)</sup> = 3<sup>8</sup> <em> 3<sup>2</sup> </em> 3<br>我们每平方一次，幂都右移一位，故当前值的最后一位就是我们正在求的那一位代表的幂值，若那位为1，则表明这个值包含在最后的答案中，否则就跳过。利用二进制的特性，我们只需要判断奇偶性就可以得知<br>分解3<sup>11</sup>求解过程：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">base</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3<sup>2</sup></td>
<td style="text-align:center">3<sup>4</sup></td>
<td style="text-align:center">3<sup>8</sup></td>
<td style="text-align:center">3<sup>16</sup></td>
</tr>
<tr>
<td style="text-align:center">pow</td>
<td style="text-align:center">11</td>
<td style="text-align:center">5</td>
<td style="text-align:center">2</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">ans</td>
<td style="text-align:center">1</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3<sup>1+2</sup></td>
<td style="text-align:center">3<sup>1+2</sup></td>
<td style="text-align:center">3<sup>1+2+8</sup></td>
</tr>
<tr>
<td style="text-align:center">使ans更新的pow</td>
<td style="text-align:center">-</td>
<td style="text-align:center">11</td>
<td style="text-align:center">5</td>
<td style="text-align:center">-</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
</div>
<p>代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">quickPow</span><span class="params">(<span class="keyword">int</span> base, <span class="keyword">int</span> <span class="built_in">pow</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">pow</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">pow</span> &amp; <span class="number">1</span>)   <span class="comment">//判断奇偶性</span></span><br><span class="line">			ans *= base;    <span class="comment">//若为奇数就乘给ans</span></span><br><span class="line">		base = base * base;    <span class="comment">//平方底数</span></span><br><span class="line">		<span class="built_in">pow</span> &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="类似的：64位整数乘法"><a href="#类似的：64位整数乘法" class="headerlink" title="类似的：64位整数乘法"></a>类似的：64位整数乘法</h1><p>求$a$乘$b$对$p$取模的值，其中$1≤a,b,p≤10^{18}$</p>
<p>类似之前的处理，把$b$拆解成二进制，则有$b=c_{k-1}2^{k-1}+c_{k-2}2^{k-2}+…+c_02^0$，故有$a*b=c_{k-1}\cdot a\cdot 2^{k-1}+c_{k-2}\cdot a\cdot 2^{k-2}+…+c_0\cdot a\cdot2^0$</p>
<p>利用$a$存储$a\cdot 2^{k-1}$，若$c_{i}$为$1$，则累加入结果</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">mul</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (b)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      ans += a;</span><br><span class="line">      ans %= p;</span><br><span class="line">    &#125;</span><br><span class="line">    a &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    a %= p;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="应用：等比数列求和"><a href="#应用：等比数列求和" class="headerlink" title="应用：等比数列求和"></a>应用：等比数列求和</h1><p>求和$1+q+q^2+…+q^c$</p>
<p>若$c$为奇数，整个数列就有偶数项，把整个数列对半分，则有</p>
<p>$\begin{equation}\begin{aligned}sum(q,c) &amp;= (1+q+…+q^{\frac{c-1}{2}}) + (q^{\frac{c+1}{2}}+…+q^c)\\&amp;=(1+q+…+q^{\frac{c-1}{2}})+q^{\frac{c+1}{2}}(1+…+q^{\frac{c-1}{2}})\\&amp;=(1+q^{\frac{c+1}{2}})(1+q+…+q^{\frac{c-1}{2}})\\&amp;=(1+q^{\frac{c+1}{2}})\cdot sum (q,\frac{c-1}{2})\end{aligned}\end{equation}$</p>
<p>若$c$为偶数，则把最后一个$q^c$单独拿出来算，剩下的$c-1$项就是奇数项，即</p>
<p>$\begin{equation}\begin{aligned}sum &amp;=(1+q^{\frac{c}{2}})(1+q+…+q^{\frac{c}{2}-1})+q^c\\&amp;=(1+q^{\frac{c}{2}})\cdot sum(q,\frac{c}{2}-1)+q^c \end{aligned}\end{equation}$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">sum</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> p, <span class="keyword">long</span> <span class="keyword">long</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (c == <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (p == <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (c % <span class="number">2</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> ((<span class="number">1L</span>L + <span class="built_in">pow</span>(p, (c + <span class="number">1</span>) / <span class="number">2</span>) % MOD) * (sum(p, (c - <span class="number">1</span>) / <span class="number">2</span>) % MOD)) % MOD;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ((((<span class="number">1L</span>L + <span class="built_in">pow</span>(p, c / <span class="number">2</span>) % MOD) * sum(p, c / <span class="number">2</span> - <span class="number">1</span>) % MOD) % MOD) + <span class="built_in">pow</span>(p, c)) % MOD;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="进一步：矩阵幂"><a href="#进一步：矩阵幂" class="headerlink" title="进一步：矩阵幂"></a>进一步：矩阵幂</h1><p>返回值：定义一个结构体存放二维数组，直接返回结构体。注意，结构体可以定义一个初始化函数，初始化为单位矩阵</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> matrix[maxn][maxn];</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span>    <span class="comment">//初始化为单位矩阵</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn; i++)</span><br><span class="line">			matrix[i][i] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>矩阵乘法：第i行的元素和第j行的元素对应相加，得到结果的第i行第j列元素</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">Matrix <span class="title">mul</span><span class="params">(Matrix a, Matrix b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Matrix ans;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)    <span class="comment">//n为矩阵行列数</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			ans.matrix[i][j] = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">			&#123;</span><br><span class="line">				ans.matrix[i][j] += a.matrix[i][k] * b.matrix[k][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>矩阵幂：原理同数幂，单要先构造的是单位矩阵</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">Matrix <span class="title">quickPow</span><span class="params">(Matrix base, <span class="keyword">int</span> <span class="built_in">pow</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Matrix ans;</span><br><span class="line">	ans.init();</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">pow</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">pow</span> &amp; <span class="number">1</span>)</span><br><span class="line">			ans = mul(ans, base);</span><br><span class="line">		base = mul(base, base);</span><br><span class="line">		<span class="built_in">pow</span> &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>矩阵的构造：<br>首先一点，只有方阵才可以使用快速矩阵幂，故我们的目标就是构造出方阵<br>我们先得有一个递推式，然后就可以根据这个递推式来构造出矩阵<br>&emsp;矩阵乘法的另一视角：操作矩阵和基础矩阵<br>&emsp;&emsp;操作矩阵在右边就是对列进行操作，在左边就是对行进行操作。以在左边对行操作为例，操作矩阵的第i行操作后的结果就是结果矩阵的第i行，操作矩阵第i行的第j个元素就是基础矩阵的第j行乘以该元素的数值，再把基础矩阵所有行如此操作后相加得到结果矩阵的第i行<br>&emsp;如：<br />$\left[\begin{matrix}1&amp;2\\3&amp;4 \end{matrix}\right]\times\left[\begin{matrix}4&amp;3\\2&amp;1 \end{matrix}\right]=\left[\begin{matrix}1\times\left[\begin{matrix}4&amp;3 \end{matrix}\right]+2\times\left[\begin{matrix}2&amp;1 \end{matrix}\right]\\3\times\left[\begin{matrix}4&amp;3 \end{matrix}\right]+2\times\left[\begin{matrix}2&amp;1 \end{matrix}\right] \end{matrix}\right]=\left[\begin{matrix}1\times4+2\times2&amp;1\times3+2\times1\\3\times4+4\times2&amp;3\times3+4\times1 \end{matrix}\right]=\left[\begin{matrix}8&amp;5\\20&amp;13 \end{matrix}\right]$<br /></p>
<p>我们可以利用递推式，把要求的放在结果矩阵中，需要用到的放在基础矩阵中，在凑出其余项。如我们要求斐波那契数列，已知f(n) = f(n-1) + f(n-2)，则f(n)一定在结果矩阵中，f(n-1)、f(n-2)一定在基础矩阵中。得到 $\left[\begin{matrix}f(n) \end{matrix}\right]=\left[\begin{matrix}? \end{matrix}\right]\times\left[\begin{matrix}f(n-1)\\f(n-2) \end{matrix}\right]$<br>又由递推式得 $\left[\begin{matrix}f(n) \end{matrix}\right]=\left[\begin{matrix}1&amp;1 \end{matrix}\right]\times\left[\begin{matrix}f(n-1)\\f(n-2) \end{matrix}\right]$<br>此时还不能用快速矩阵幂，故我们要凑出方阵得 $\left[\begin{matrix}f(n)\\f(n-1) \end{matrix}\right]=\left[\begin{matrix}1&amp;1\\1&amp;0 \end{matrix}\right]\times\left[\begin{matrix}f(n-1)\\f(n-2) \end{matrix}\right]$<br>再递推下去得到 $\left[\begin{matrix}f(n)\\f(n-1) \end{matrix}\right]=\left[\begin{matrix}1&amp;1\\1&amp;0 \end{matrix}\right]^{n-1}\times\left[\begin{matrix}f(1)\\f(2) \end{matrix}\right]$<br>然后就可以用矩阵幂在<script type="math/tex">O(log\ n)</script>内解得斐波那契数列的第n项</p>
<h1 id="快速求一个分数的第k位"><a href="#快速求一个分数的第k位" class="headerlink" title="快速求一个分数的第k位"></a>快速求一个分数的第k位</h1><p>利用快速幂，把分子放大$10^{k-1}$，对分母取模后再乘$10$除分母就可以得到第$k$位<br><a href="https://ac.nowcoder.com/acm/contest/548/B" target="_blank" rel="noopener">牛客网练习赛43 - B</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">qpow</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> <span class="built_in">pow</span>, <span class="keyword">long</span> <span class="keyword">long</span> mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">pow</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">pow</span> &amp; <span class="number">1</span>)</span><br><span class="line">            ans = ans * a % mod;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        <span class="built_in">pow</span> &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> m, n, k1, k2;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld"</span>, &amp;m, &amp;n, &amp;k1 ,&amp;k2);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = m * qpow(<span class="number">10</span>, k1 - <span class="number">1</span>, n) % n; <span class="comment">//把分子放大10^(K-1)，对分母取模</span></span><br><span class="line">        <span class="keyword">while</span>(k1 &lt;= k2)</span><br><span class="line">        &#123;</span><br><span class="line">        	<span class="comment">//乘10除分母</span></span><br><span class="line">            ans = ans * <span class="number">10</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans / n);</span><br><span class="line">            ans = ans % n;</span><br><span class="line">            k1++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="求k步可重复走，从一个点到另一个点的路径总数"><a href="#求k步可重复走，从一个点到另一个点的路径总数" class="headerlink" title="求k步可重复走，从一个点到另一个点的路径总数"></a>求k步可重复走，从一个点到另一个点的路径总数</h1><p><a href="https://ac.nowcoder.com/acm/contest/549/E" target="_blank" rel="noopener">牛客网 小白月赛13-E</a><br>先常规建图，再对邻接矩阵求$k$次幂，这时的$graph[i][j]$表示从$i$到$j$的路径总数</p>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>强连通图(Tarjan算法)</title>
    <url>/2019/11/09/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%9B%BE-Tarjan%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>强连通：如果a点和b点可互达，则称a和b强连通<br>强连通图：如果一个图中的任意两个点之间都是强连通，则称该图为强连通图<br>强连通分量：一个图的子图是一个强连通图，则称该子图就是原图的一个强连通分量</p>
<h1 id="Tarjan算法"><a href="#Tarjan算法" class="headerlink" title="Tarjan算法"></a>Tarjan算法</h1><p><strong>需要存储的信息</strong>：首先肯定要有一个邻接表/邻接矩阵来存储边的信息，一个DFN数组存储该点的访问时间戳(即第几个被访问)，还要有一个low数组储存在一个强连通分量中根节点的的时间戳，还要有一个栈存储当前可访问到的点，以及一个vis数组存储一个元素是否在栈中<br><strong>思路</strong>：利用DFS，从一个点出发，延着有向边不断遍历，如果一个点已经在栈中，则说明这两个点强连通，就把这个强连通图的根结点设为时间戳小的那个<br>代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; mp[MAXN];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; sta;</span><br><span class="line"><span class="keyword">int</span> low[MAXN], DFN[MAXN], vis[MAXN], </span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	low[v] = DFN[v] = ++index;</span><br><span class="line">	sta.push(v);</span><br><span class="line">	vis[v] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mp[v].<span class="built_in">size</span>(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!DFN[mp[v][i]])</span><br><span class="line">		&#123;</span><br><span class="line">			tarjan(mp[v][i]);</span><br><span class="line">			low[v] = <span class="built_in">min</span>(low[v], low[mp[v][i]]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(vis[mp[v][i]])</span><br><span class="line">		&#123;</span><br><span class="line">			low[v] = <span class="built_in">min</span>(low[v], low[mp[v][i]]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (low[v] == DFN[v])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> x = sta.top();</span><br><span class="line">			sta.pop();</span><br><span class="line">			vis[x] = <span class="number">0</span>;</span><br><span class="line">			index--;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, x);</span><br><span class="line">			<span class="keyword">if</span>(x == v)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(DFN, <span class="number">0</span>, <span class="keyword">sizeof</span>(DFN));</span><br><span class="line">	<span class="built_in">memset</span>(low, <span class="number">0</span>, <span class="keyword">sizeof</span>(low));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!DFN[i])</span><br><span class="line">		&#123;</span><br><span class="line">			tarjan(i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>排序</title>
    <url>/2020/08/07/%E6%8E%92%E5%BA%8F-1/</url>
    <content><![CDATA[<h1 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h1><ol>
<li>把所有数据排序去重之后，从第一个开始逐一往后标记，把每一个数据和一个整数一一对应</li>
<li>排序之后再离散化可以保留原始数据的大小关系，不必查询原数据，就可以直接从Hash后的值得到其大小关系</li>
</ol>
<p>例如<a href="https://ac.nowcoder.com/acm/contest/1004/F?&amp;headNav=acm" target="_blank" rel="noopener">POJ 3179</a></p>
<ol>
<li><p>首先很明显，这题要用<a href="http://www.laughingtree.cn/2020/08/07/前缀和与差分/" target="_blank" rel="noopener">二维前缀和</a>来求解一个区域内的和</p>
</li>
<li><p>答案直接求不容易，但是判定一个值是不是答案很容易，所以可以<a href="http://www.laughingtree.cn/2020/08/07/二分/" target="_blank" rel="noopener">二分答案</a>求解</p>
</li>
<li><p>这题对空间限制比较严格，而且只有少部分的地方有非$0$值，所以可以把所有非$0$值的横纵坐标离散化，$500$个点离散后最大只有$1000$，来压缩空间</p>
</li>
<li><p>离散化后，在确认答案时，要在哈希表中找到原来的坐标对应的哈希后的坐标以及遍历的上界<br />找哈希后的坐标要求的是不大于目标坐标的点，只要找出所有在当前区域内的和即可<br />遍历上界的要求是不超过哈希表中最大元素</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1E3</span> + <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum[MAXN][MAXN], ori[MAXN], disc[MAXN];</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pos[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> len, <span class="keyword">int</span> mid, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> bound = upper_bound(disc + <span class="number">1</span>, disc + len, disc[len - <span class="number">1</span>] - mid + <span class="number">1</span>) - disc - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= bound; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= bound; j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> ti = upper_bound(disc + <span class="number">1</span>, disc + len, disc[i] + mid - <span class="number">1</span>) - disc - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">int</span> tj = upper_bound(disc + <span class="number">1</span>, disc + len, disc[j] + mid - <span class="number">1</span>) - disc - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (sum[i - <span class="number">1</span>][j - <span class="number">1</span>] - sum[ti][j - <span class="number">1</span>] - sum[i - <span class="number">1</span>][tj] + sum[ti][tj] &gt;= c)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">discrete</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  sort(ori, ori + n);</span><br><span class="line">  <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">  disc[<span class="number">0</span>] = -INF;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span> || ori[i] != ori[i - <span class="number">1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">      disc[cnt++] = ori[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  disc[cnt++] = INF;</span><br><span class="line">  <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> c, n;</span><br><span class="line">  <span class="keyword">int</span> x, y;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;c, &amp;n);</span><br><span class="line">  <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">    pos[i] = make_pair(x, y);</span><br><span class="line">    ori[<span class="number">2</span> * i] = x;</span><br><span class="line">    ori[<span class="number">2</span> * i + <span class="number">1</span>] = y;</span><br><span class="line">  &#125;</span><br><span class="line">  len = discrete(<span class="number">2</span> * n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> nx = lower_bound(disc + <span class="number">1</span>, disc + len, pos[i].first) - disc;</span><br><span class="line">    <span class="keyword">int</span> ny = lower_bound(disc + <span class="number">1</span>, disc + len, pos[i].second) - disc;</span><br><span class="line">    sum[nx][ny]++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; len; j++)</span><br><span class="line">    &#123;</span><br><span class="line">      sum[i][j] += sum[i - <span class="number">1</span>][j] + sum[i][j - <span class="number">1</span>] - sum[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> lo = <span class="number">0</span>, hi = disc[len - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (lo &lt; hi)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> mid = lo + ((hi - lo) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (check(len, mid, c))</span><br><span class="line">    &#123;</span><br><span class="line">      hi = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      lo = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, lo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="中位数"><a href="#中位数" class="headerlink" title="中位数"></a>中位数</h1><ol>
<li>在有序序列中，若下标是从$1$开始的，则当总共有奇数个数时，中位数的下标为$\displaystyle\frac{n+1}{2}$，总共有偶数个数时，中位数是下标为$\displaystyle\frac{n}{2}+1$与$\displaystyle\frac{n}{2}$的数之间的数；若下标是从$0$开始的，则当总共有奇数个数时，中位数的下标为$\displaystyle\frac{n-1}{2}$，当总共有偶数个数时，中位数是下标为$\displaystyle\frac{n}2-1$与$\displaystyle\frac{n}{2}$</li>
<li>在一个数组中考虑$\displaystyle\sum |a[i]-x|$的最小值。假设在数轴中$a$数组有$P$个数比$x$小，有$Q$个数比$x$大<br />若$P<Q$，则每把$x+1$，要求的值都会减小$Q-P$<br />若$P&gt;Q$，则每把$x-1$，要求的值都会减小$P-Q$<br />所以使得$\displaystyle\sum|a[i]-x|$最小的$x$就是$a$数组的中位数，若$a$数组有偶数个元素，则$x$为两个中位数之间的任意数，若有奇数个元素，则$x$为中位数本身</li>
</ol>
<h2 id="环形均分纸牌问题"><a href="#环形均分纸牌问题" class="headerlink" title="环形均分纸牌问题"></a>环形均分纸牌问题</h2><ol>
<li>环形均分纸牌问题只是在<a href="http://www.laughingtree.cn/2020/08/07/前缀和与差分/" target="_blank" rel="noopener">均分纸牌问题</a>上取消一个限制，最后一个人可以把纸牌给第$1$个人</li>
<li>从均分纸牌问题的推导中，我们可以知道必然有一个人不用给任何人纸牌，这个人就可以被看作是均分纸牌问题中的最后一个人，即环形链从这个人断开。在环形均分纸牌问题中，我们只需要枚举每一个人作为最后一个人的情况，取其结果的最小值就是答案</li>
<li>先给每个人从$1$号标到$M$号，记$A[1\sim M]=C[i\sim M]-\displaystyle\frac{T}M$，$A$数组的前缀和$sum[1\sim M]$，则当第$k$个人为最后一个人，链从这里断开时，前缀和<br />$sum_k[k+1]=sum[k+1]-sum[k]$<br />$sum_k[k+2]=sum[k+2]-sum[k]$<br />$…$<br />$sum_k[M]=sum[M]-sum[k]$<br />$sum_k[1]=sum[1]+sum_k[M]=sum[1]+sum[M]-sum[k]$<br />$sum_k[M]=sum[k]+sum[M]-sum[k]=sum[M]$</li>
<li>故答案为$\displaystyle\sum^M_{i=1}\bigg|sum[i]-sum[k]\bigg|$的最小值，即为$sum$数组的中位数</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> sum[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos = (n + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ave = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ave += sum[i];</span><br><span class="line">    &#125;</span><br><span class="line">    ave /= n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum[i] -= ave;</span><br><span class="line">        sum[i] += sum[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(sum + <span class="number">1</span>, sum + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans += <span class="built_in">abs</span>(sum[i] - sum[pos]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="动态维护中位数"><a href="#动态维护中位数" class="headerlink" title="动态维护中位数"></a>动态维护中位数</h2><ol>
<li><p>在线的做法是对顶堆算法</p>
</li>
<li><p>把序列中从小到大的$1\sim\displaystyle\frac{M}2+1$都存储在大根堆中，$\displaystyle\frac{M}2+2\sim M$存储在小根堆中<br />小根堆中共有$\displaystyle\frac{M}2+1$个数，大根堆中一共有$\displaystyle\frac{M}2-1$个元素</p>
</li>
<li><p>每读入一个数，如果比大根堆的堆顶元素小，则推入大根堆，否则推入小根堆。如果有一个堆的大小不符合要求的，就把太大的那个堆的堆顶元素弹出，推入另一个堆中</p>
</li>
<li><p>中位数就是小根堆的堆顶元素</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">priority_queue&lt;<span class="keyword">int</span>&gt; large;</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt;&gt; small;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">median</span><span class="params">(<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> inp;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;inp);</span><br><span class="line">    <span class="comment">// 推入堆中</span></span><br><span class="line">    <span class="keyword">if</span> (large.<span class="built_in">size</span>() == <span class="number">0</span> || inp &lt; large.top())</span><br><span class="line">    &#123;</span><br><span class="line">      large.push(inp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      small.push(inp);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 维护堆</span></span><br><span class="line">    <span class="keyword">if</span> (large.<span class="built_in">size</span>() &gt; i / <span class="number">2</span> + <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      small.push(large.top());</span><br><span class="line">      large.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (small.<span class="built_in">size</span>() &gt; i / <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      large.push(small.top());</span><br><span class="line">      small.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 当有奇数个输入时，输出中位数</span></span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, large.top());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="逆序对"><a href="#逆序对" class="headerlink" title="逆序对"></a>逆序对</h1><ol>
<li><p>在冒泡排序中，每一次交换就是修复一对逆序对，所以冒泡排序中的交换次数就是逆序对数</p>
</li>
<li><p>但是冒泡排序的复杂度是$O(n^2)$，相对较高，可以利用归并排序优化</p>
</li>
<li><p>在归并排序的归并过程中$loPtr$指向当前正在排序数组段的前半段中正在比较的数，$hiPtr$指向后半段正在比较的数。若$hiPtr$指向的数小于$loPtr$指向的数，则$hiPtr$指向的数与从$loPtr$到$mid$之间的所有数都构成逆序对</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[MAXN], tmp[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lo == hi - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = lo + ((hi - lo) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> ans = mergeSort(lo, mid) + mergeSort(mid, hi);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = lo; i &lt; mid; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tmpPtr = lo, hiPtr = mid, arrPtr = lo;</span><br><span class="line">    <span class="keyword">while</span> (arrPtr &lt; hi)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (tmpPtr == mid || (hiPtr != hi &amp;&amp; tmp[tmpPtr] &gt; arr[hiPtr]))</span><br><span class="line">        &#123;</span><br><span class="line">            arr[arrPtr++] = arr[hiPtr++];</span><br><span class="line">            ans += mid - tmpPtr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            arr[arrPtr++] = tmp[tmpPtr++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="数码问题"><a href="#数码问题" class="headerlink" title="数码问题"></a>数码问题</h2><ol>
<li>在$n\times m$的矩阵中，有$n\times m-1$个数和一个空格，空格可以和其上下左右相邻的格子交换，给出两个局面，问能否从其中一个局面变换到另一个局面</li>
<li>将矩阵内的非空格内容展开成一维数组，空格的左右交换相当于没有操作，不会改变一维数组，但空格向上交换相当于一维数组中被交换的那格向后移动了$m-1$位；向下交换相当于前移了$m-1$位</li>
<li>若$m$为奇数，则$m-1$为偶数，移动的过程消除了$x$个逆序对，但增加了$y$个逆序对 (为方便相等的也记为新的逆序对)，且$x+y=m-1$。逆序对的数量变化为$y-x$。$x+y$是偶数，则$y-x$也是偶数。$x$与$y$要么都是奇数，要么都是偶数<br />所以若两个局面可以相互转换，则他们的一维展开逆序对的奇偶性一样</li>
<li>若$m$为偶数，则$m-1$为奇数。则$y-x$也为奇数，则每变动一行奇偶性变动一次，即逆序对数量之差的奇偶性与行数之差的奇偶性相同</li>
</ol>
]]></content>
      <categories>
        <category>算法</category>
        <category>基本算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>排序</title>
    <url>/2019/08/02/%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ol>
<li>选取一个轴点，轴点一般就选为第一个元素</li>
<li>重新划分数组，使轴点左边的元素都不大于轴点；轴点右边的元素都不小于轴点</li>
<li>递归地继续排序轴点左边和右边的两部分</li>
</ol>
<h2 id="重新划分1"><a href="#重新划分1" class="headerlink" title="重新划分1"></a>重新划分1</h2><ol>
<li>第一个元素被选取为轴点后就被备份起来，方便之后比较</li>
<li>备份了第一个元素之后，第一个位置就相当于空闲起来了</li>
<li>$lo$指针指向待划分数组部分的开头，$hi$指向结尾，初始时$lo$不必为了轴点后退一格<a id="more"></a></li>
<li>最开始时$lo$被空闲，之后把$lo$和$hi$一次空闲</li>
<li>如果是$lo$被空闲，就从$hi$开始移动，如果hi所指的元素大于轴点，就$hi = hi - 1$，直到$hi$指向的元素复制到$lo$所指的位置，变为$hi$空闲。<br>如果是$hi$被空闲，就从$lo$开始移动，如果$lo$所指的元素大于轴点，就$lo = lo + 1$，直到$hi$指向的元素复制到hi所指的位置，变为$lo$空闲。</li>
<li>当$lo == hi$时，就把备份的轴点元素复制到那里，划分数组到此结束</li>
</ol>
<h2 id="重新划分2"><a href="#重新划分2" class="headerlink" title="重新划分2"></a>重新划分2</h2><ol>
<li>用四个指针，$lo$指向轴点元素，$k$指向当前正在匹配元素，$mid$表示两部分元素的分界点(不大于轴点元素的最大秩)</li>
<li>在这个划分方式中，$[lo + 1, mid]$是不大于轴点的元素，$(mid, k)$是不小于轴点的元素，$[k, hi]$是待划分的元素</li>
<li>如果$k$指向的元素大于轴点，就直接把$k$加一<br>如果$k$指向的元素小于轴点，就把$k$和$mid + 1$指向的元素交换，之后$mid$和$k$都加一</li>
</ol>
<h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><ol>
<li>快速排序不稳定：不能保证相同的元素在排序之后还能保持之前的顺序</li>
<li>就地算法：只需要$O(1)$的附加空间</li>
<li>最好情况：每次划分都近乎平均，$O(nlog n)$<br /><br>最坏情况：每次划分都极不平均，$O(n^2)$</li>
<li>通过随机选取、三者取中法都只能降低最坏情况的概率，无法杜绝</li>
<li>平均性能<br /><br>$T(n) = (n + 1) + \frac{1}{n}\displaystyle \sum^{k=0}_{n-1}{[T(k)+T(n-k-1)]}$<br /><br>后面那个求和，看似两个，但两个的求和范围都是从0到n-1，所以可以合并<br /><br>$T(n) = (n + 1) + \frac{2}{n}\displaystyle \sum^{k=0}_{n-1}{T(k)}$<br /><br>则可以得到两个等式<br /><br>$n \times T(n) = n\times(n + 1) + 2\displaystyle \sum^{k=0}_{n-1}{T(k)}$<br /><br>$(n - 1) \times T(n - 1) = (n - 1) \times n + 2\displaystyle \sum^{k=0}_{n-1}{T(k)}$<br /><br>两式做差得到<br /><br>$n \times T(n) - (n - 1) \times T(n - 1) = 2n + 2 \times T(n - 1)$<br /><br>$n \times T(n) - (n + 1) \times T(n - 1) = 2n$<br /><br>两边同除$n(n + 1)$<br /><br><script type="math/tex">\frac{T(n)}{n + 1} = \frac{2}{n + 1} + \frac{T(n - 1)}{n}</script><br /><br>循环迭代直到$T(0) = 1$<br /><br>$\frac{T(n)}{n + 1} = \frac{2}{n + 1} + \frac{2}{n} + \frac{2}{n - 1} + … + \frac{2}{2} + \frac{T(0)}{1} = (2ln2) log n = 1.39log n$</li>
</ol>
<h1 id="选取问题"><a href="#选取问题" class="headerlink" title="选取问题"></a>选取问题</h1><p>选取第k小/大元素</p>
<h2 id="蛮力算法"><a href="#蛮力算法" class="headerlink" title="蛮力算法"></a>蛮力算法</h2><ol>
<li>直接排序，输出第k个元素</li>
<li>复杂度：$O(nlogn)$</li>
</ol>
<h2 id="堆1"><a href="#堆1" class="headerlink" title="堆1"></a>堆1</h2><ol>
<li>批量建堆，取k次堆顶元素</li>
<li>复杂度：$O(klogn)$</li>
</ol>
<h2 id="堆2"><a href="#堆2" class="headerlink" title="堆2"></a>堆2</h2><ol>
<li>先建一个含k个元素的堆，对剩下的元素都做一次插入和删除操作，取最后的堆顶</li>
<li>复杂度：$O(nlogk)$</li>
</ol>
<h2 id="堆3"><a href="#堆3" class="headerlink" title="堆3"></a>堆3</h2><ol>
<li>利用两个堆，一个小/大顶堆含有k个元素，另一个大/小顶堆含有n-k个元素，只要含有n-k个元素的大/小顶堆的堆顶大/小于另一个只含有k个元素的小/大顶堆，就交换堆顶元素，取最后的</li>
<li>复杂度：$O(k \cdot (logk + log(n - k)))$</li>
</ol>
<h2 id="QuickSelect"><a href="#QuickSelect" class="headerlink" title="QuickSelect"></a>QuickSelect</h2><ol>
<li>取一个轴点，如快排一样把数组划分为两块，如果不小于轴点的元素有k - 1个，就返回轴点；如果多于k - 1个，就在这一块继续递归；如果少于k - 1个，则舍弃这一块</li>
<li>复杂度：$O(nlogn)$</li>
</ol>
<h2 id="LinearSelect"><a href="#LinearSelect" class="headerlink" title="LinearSelect"></a>LinearSelect</h2><ol>
<li>Q是一个较小的常数，如果数组少于Q，则随便用上面哪一种算法求出中位数</li>
<li>把最初的数组均等地分为$\frac{n}{Q}$份，对于每份选出该份的中位数</li>
<li>调用linearSelect求出这些中位数的中位数M</li>
<li>划分数组为小于M的部分L，等于M的部分E，大于M的部分G</li>
<li>如果$k ≤ |L|$，就在L那块递归下去；如果$k ≤ |L| + |E|$，就返回M；否则，就在在G那块递归下去</li>
<li>第5步规模的递减相比于quickSelect有何改进？<br><img src="/img/排序01.png" width="20%"><br>如上图所示，纵向的每两个方框都是之前均等分的$\frac{n}{Q}$份中的一份，其上半部分的长度等于下半部分。白色的部分一定不大于M，黑色的部分一定不小于M，几乎每次都可以至少舍弃白色和黑色中的一个，所以每次的规模都会变为之前的75%</li>
<li>复杂度：可以列出式子$T(n) = O(n) + T(n/Q) + T(\frac{3}{4}n)$<br>要得到线性的复杂度，只要$\frac{n}{Q} + \frac{3}{4}n &lt; n$，即$\frac{1}{Q} + \frac{3}{4} &lt; 1$，即$Q &gt; 4$</li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>数据结构 (清华大学邓俊辉)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>拓展KMP算法</title>
    <url>/2019/11/09/%E6%8B%93%E5%B1%95KMP%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>EX-KMP算法是在KMP算法的基础上改变的</p>
<h1 id="算法目的"><a href="#算法目的" class="headerlink" title="算法目的"></a>算法目的</h1><p>求出主串每一个后缀和模式串的最长公共前缀，也可以理解为主串从每一个位置开始到结尾的子串和模式串的最长公共前缀</p>
<h1 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h1><p>我们用一个数组extend来保存结果，受到KMP算法的启发，我们对模式串进行自匹配，得到nex数组。在拓展KMP算法中，预处理和主算法之间几乎没有区别，只是改了比较的两个数组，自匹配是模式串和模式串匹配，主算法是主串和模式串匹配</p>
<h1 id="extend匹配方法"><a href="#extend匹配方法" class="headerlink" title="extend匹配方法"></a>extend匹配方法</h1><p>exKMP和KMP的核心思想一样，都是利用之前的匹配结果来避免不必要的匹配过程。假设我们已经完成了主串第k位及其以前的匹配，我们要开始匹配主串的第k+1位和模式串的第0位开始的串。<br>1、因为我们要利用以前的匹配结果，所以以前的匹配结果越远越好，又我们是从主串的第k+1位开始往后匹配，我们只需要主串上的最后匹配位置P越靠后就好，而无需管该次匹配的开始位置p0在哪，不需使该次匹配的长度最长<br>2、易知k+1到p~0~点距离是k+1-p~0~，我们假设第k+1位开始匹配的最长公共前缀的长度是len，则我们为了利用之前的结果，得知主串<strong>S(p~0~..&lt;p~0~+extend[p~0~]) = 模式串T(0..&lt;extend[p~0~])</strong>。又有<strong>T(0..&lt;nex[k-p~0~+1]) = T(k-p~0~+1..&lt;k-p~0~+1+nex[k-p~0~+1]</strong>，我们在模式串和主串匹配时把模式串前移k-p~0~+1，使k+1与p~0~重合<br>3、我们可以得到<strong>S(p~0~..&lt;p~0~+nex[k-p~0~+1])=T(0…nex[k-p~0~+1])=T(k-p~0~+1…k-p~0~+nex[k-p~0~+1])=S(k+1…k+nex[k-p~0~+1])</strong>。这就够了吗？不是的，我们可以注意到，在推导过程中，在最后<strong>S(k+1…k+nex[k-p~0~+1])</strong>中，最远可以到<strong>k+nex[k-p~0~+1]</strong>，如果这个值已经超出了我们的已匹配范围(<strong>p~0~+extend[p~0~]-1</strong>)就不能利用结果<br>故我们得出若<strong>k+nex[k-p~0~+1]&lt;p~0~+extend[p~0~]</strong>，则<strong>T(0…nex[k-p~0~+1])=S(k+1…k+nex[k-p~0~+1])</strong>，即<strong>第k+1位的匹配长度为nex[k-p~0~+1]</strong><br>4、若<strong>nex[k-p~0~+1] &gt;= extend[p~0~]</strong>，我们只需要从P+1开始匹配，并更新P和p~0~</p>
<h1 id="nex匹配方法"><a href="#nex匹配方法" class="headerlink" title="nex匹配方法"></a>nex匹配方法</h1><p>匹配过程中的主串和模式串都是主算法中的模式串，extend和nex数组都是主算法中的nex</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> nex[maxn], ex[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildNex</span><span class="params">(<span class="keyword">int</span> modeLen, <span class="built_in">string</span> modeString)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mainPos = <span class="number">0</span>, p0;</span><br><span class="line">    nex[<span class="number">0</span>] = modeLen;</span><br><span class="line">    p0 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(mainPos + <span class="number">1</span> &lt; modeLen &amp;&amp; modeString[mainPos + <span class="number">1</span>] == modeString[mainPos])</span><br><span class="line">    &#123;</span><br><span class="line">        mainPos++;</span><br><span class="line">    &#125;</span><br><span class="line">    nex[<span class="number">1</span>] = mainPos;</span><br><span class="line">    p0 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(mainPos = <span class="number">2</span>; mainPos &lt; modeLen; mainPos++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mainPos + nex[mainPos - p0] &lt; p0 + nex[p0])</span><br><span class="line">        &#123;</span><br><span class="line">            nex[mainPos] = nex[mainPos - p0];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> j = nex[p0] + p0 - mainPos;</span><br><span class="line">            <span class="keyword">if</span>(j &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                j = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(mainPos + j &lt; modeLen &amp;&amp; modeString[j] == modeString[mainPos + j])</span><br><span class="line">            &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            nex[mainPos] = j;</span><br><span class="line">            p0 = mainPos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildExtend</span><span class="params">(<span class="built_in">string</span> mainString, <span class="built_in">string</span> modeString, <span class="keyword">int</span> mainLen, <span class="keyword">int</span> modeLen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    buildNex(mainLen, modeString);</span><br><span class="line">    <span class="keyword">int</span> mainPos = <span class="number">0</span>, p0;</span><br><span class="line">    p0 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(mainPos &lt; modeLen &amp;&amp; mainPos &lt; mainLen &amp;&amp; mainString[mainPos] == modeString[mainPos])</span><br><span class="line">    &#123;</span><br><span class="line">        mainPos++;</span><br><span class="line">    &#125;</span><br><span class="line">    ex[<span class="number">0</span>] = mainPos;</span><br><span class="line">    <span class="keyword">for</span>(mainPos = <span class="number">1</span>; mainPos &lt; mainLen; mainPos++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mainPos + ex[mainPos - p0] &lt; p0 + ex[p0])</span><br><span class="line">        &#123;</span><br><span class="line">            ex[mainPos] = nex[mainPos - p0];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> j = ex[p0] + p0 - mainPos;</span><br><span class="line">            <span class="keyword">if</span>(j &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                j = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(mainPos + j &lt; mainLen &amp;&amp; j &lt; modeLen &amp;&amp; modeString[j] == mainString[mainPos + j])</span><br><span class="line">            &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            ex[mainPos] = j;</span><br><span class="line">            p0 = mainPos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>串</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索</title>
    <url>/2019/11/09/%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<h1 id="双源BFS"><a href="#双源BFS" class="headerlink" title="双源BFS"></a>双源BFS</h1><p>有两个起点的BFS，注意，在搜索的时候是搜两颗树(虽然通常两颗数在原图中可能最后会相交)，每次搜索都是一棵树搜一层，另一棵树搜一层。搜索时在开始就把两个起点都加入到同一个队列中，根据BFS是树的层次遍历知——只需要依次取出队列的首元素就可以做到轮流搜一层的效果</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(Node a, Node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;Node&gt; q;</span><br><span class="line">    </span><br><span class="line">    q.push(a);</span><br><span class="line">    q.push(b); <span class="comment">//加入同一个队列</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        a = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(...) <span class="comment">//遍历a的子节点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            ...生成一个a的子节点b</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">if</span>(judge(b)) <span class="comment">//如果b合法</span></span><br><span class="line">            &#123;</span><br><span class="line">                q.push(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://vjudge.net/problem/FZU-2150" target="_blank" rel="noopener">FZU 2150</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y, cnt ;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;Node&gt; v;</span><br><span class="line"><span class="keyword">char</span> mp[N][N];</span><br><span class="line"><span class="keyword">int</span> vis[N][N];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(Node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> b.x&gt;<span class="number">0</span> &amp;&amp; b.y&gt;<span class="number">0</span> &amp;&amp; b.x&lt;=n &amp;&amp; b.y&lt;=m &amp;&amp; vis[b.x][b.y]==<span class="number">0</span> &amp;&amp; mp[b.x][b.y]==<span class="string">'#'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">(Node a,Node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="built_in">queue</span>&lt;Node&gt; q;</span><br><span class="line">    vis[a.x][a.y]  = vis[b.x][b.y] = <span class="number">1</span>;</span><br><span class="line">    a.cnt = <span class="number">0</span>,b.cnt = <span class="number">0</span>;</span><br><span class="line">    q.push(a);</span><br><span class="line">    q.push(b);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">int</span> cas = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        a = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        ans = a.cnt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            b.x = a.x + dx[i];</span><br><span class="line">            b.y = a.y + dy[i];</span><br><span class="line">            b.cnt = a.cnt + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(judge(b))</span><br><span class="line">            &#123;</span><br><span class="line">                vis[b.x][b.y] = <span class="number">1</span>;</span><br><span class="line">                q.push(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> kase = <span class="number">1</span>; kase &lt;= T; kase++)</span><br><span class="line">    &#123;</span><br><span class="line">        v.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            getchar();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;mp[i][j]);</span><br><span class="line">                <span class="keyword">if</span>(mp[i][j] == <span class="string">'#'</span>)</span><br><span class="line">                    v.push_back((Node)&#123;i, j, <span class="number">0</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; v.<span class="built_in">size</span>(); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = BFS(v[i], v[j]);</span><br><span class="line">                <span class="keyword">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> f = <span class="number">1</span>; f &lt;= m; f++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(vis[k][f] == <span class="number">0</span> &amp;&amp; mp[k][f] == <span class="string">'#'</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            ok = <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(ok == <span class="literal">false</span>)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(ok)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans = <span class="built_in">min</span>(ans, tmp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: "</span>, kase);</span><br><span class="line">        <span class="keyword">if</span>(ans == <span class="number">0x3f3f3f3f</span>)</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="DFS序"><a href="#DFS序" class="headerlink" title="DFS序"></a>DFS序</h1><ol>
<li>DFS序：利用DFS遍历一颗树的时候，各个节点是被遍历的顺序</li>
<li>性质：一个节点以及以这个节点为根节点的子树中的所有节点的DFS序是连续的，可以利用DFS序来标注节点之间的关系</li>
<li>一种方法是记录DFS序并记录子树的规模，则节点$i$的子树DFS序标号为$dfsNum[i]\sim dfsNum[i]+size[i]-1$<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> dfsNum[MAXN], <span class="built_in">size</span>[MAXN]; <span class="comment">// dfsNum记录每个节点的DFS序标号，size记录每个节点子树的规模</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sons[MAXN]; <span class="comment">// 记录每个节点的子节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> deep;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  dfsNum[node] = ++deep;</span><br><span class="line">  <span class="built_in">size</span>[node] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sons[node].<span class="built_in">size</span>(); i++)</span><br><span class="line">  &#123;</span><br><span class="line">    dfs(sons[node][i]);</span><br><span class="line">    <span class="built_in">size</span>[node] += <span class="built_in">size</span>[sons[node][i]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>每一个节点实际上会被访问两次，开始遍历子树之前、遍历完子树之后，把两次访问时间都记录下来，可知子树的节点的时间必然在根节点的两次时间之间，若$j$是$i$的子树中的一个节点，则必有$dfsNum[i][0]&lt;dfsNum[j][0]&lt;dfsNum[j][1]&lt;dfsNum[i][1]$<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> dfsNum[MAXN][<span class="number">2</span>]; <span class="comment">// dfsNum[MAXN][0]记录开始遍历前的时间，dfsNum[MAXN][1]记录遍历结束的时间</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sons[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> deep;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  dfsNum[node][<span class="number">0</span>] = ++deep;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sons[node].<span class="built_in">size</span>(); i++)</span><br><span class="line">  &#123;</span><br><span class="line">    dfs(sons[node][i]);</span><br><span class="line">  &#125;</span><br><span class="line">  dfsNum[node][<span class="number">1</span>] = ++deep;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>算法</category>
        <category>搜索</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索之枚举(熄灯问题)</title>
    <url>/2019/11/09/%E6%90%9C%E7%B4%A2%E4%B9%8B%E6%9E%9A%E4%B8%BE-%E7%86%84%E7%81%AF%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>一个矩阵排列的灯阵，有的是亮的，有的是灭的。每一个灯都有一个按钮，每个按钮都控制五个灯，分别是按钮直接连的灯和这个灯的上下左右各一个灯，例如位于(2, 3)的按钮可以用控制(2, 3)、(1, 3)、(2, 2)、(2, 4)、(3, 3)。按下按钮后其控制的每一盏灯如果是亮的就灭掉，如果是暗的就亮起来。现在给定一个n×m灯阵，求可以把他们都灭掉的方法</p>
<h1 id="状态压缩"><a href="#状态压缩" class="headerlink" title="状态压缩"></a>状态压缩</h1><p>一直以为状压是高深莫测的东西，原来这就是最经典的01状压。状压就是把物体的状态压缩成一个个整型，存储操作起来方便。状压常和其他算法结合，常见的有动态规划、线段树和搜索。这题就是状压加搜索，把亮灯状态压缩成1，暗灯状态压缩成0。</p>
<h1 id="直观思路"><a href="#直观思路" class="headerlink" title="直观思路"></a>直观思路</h1><p>遍历所有的开关操作，验证是否可以关掉所有的灯。但复杂度是O(mn2^mn^)，高得不可接受。虽然这是一个NP完全问题，但我们还是可以尝试降低一点复杂度，使算法更优</p>
<h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>易知有以下事实：<br>&emsp;1) 一个灯的状态变化偶数次，那个灯的最终状态就和初状态一样；<br>&emsp;2) 第i行中每盏点亮的灯都可以在第i+1行中按对应的按钮来熄灭它<br>由事实1我们可以以知道每个按钮最多按一次<br>由事实1和2我们可以推理如下：<br>&emsp;1) 如果一盏灯是亮的我们就要按奇数次控制它的开关来熄灭它，如果是暗的我们就要按偶数次来维持它暗的性质，所以如果一个点初始时是1，那其四周的点的和要为奇数；否则为偶数，即奇偶性一致<br>&emsp;2) 设记录灯原始状态的数组为lamp，按钮按的次数的数组为push，则有<code>(push[i][j] + push[i][j - 1] + push[i][j + 1] + push[i + 1][j] + push[i - 1][j]) % 2 == lamp[i][j]</code><br>&emsp;3) 由推论2)得<code>push[i][j] + push[i][j - 1] + push[i][j + 1] + push[i + 1][j] + push[i - 1][j] == (2k - 1)lamp[i][j]</code>，可以推出<code>push[i][j] + push[i][j - 1] + push[i][j + 1] + lamp[i][j] + push[i - 1][j] == 2k * lamp[i][j] - push[i + 1][j]</code>由于<code>2k * lamp[i][j]</code>为偶数，所以<code>2k * lamp[i][j] - push[i + 1][j]</code>的奇偶性与 <code>push[i + 1][j]</code>一致，所以有<code>(lamp[i][j] + push[i][j] + push[i][j - 1] + push[i][j + 1] + push[i - 1][j]) % 2 == push[i + 1][j]</code><br>&emsp;4) 我们可以通过第一行的按钮使用状态推出第二行要使第一行全熄灭的状态，直到最后一行<br>由推论4，我们想到了可以推出当运行到最后一行时，以上的所以灯都是熄灭的，因为我们每一行的目标都是使上一行的灯全部熄灭，当又不会影响到再上一行。而推论2又给了我们一个判断最后一行是否熄灭的办法<br><code>注：为什么要用推论2和3：可以在不改变原始数组的情况下得到所要的结果</code><br>由此，我们就想到了优化的办法：枚举第一行的所有操作，推出以下操作，判断是否可行。复杂度就降到了O(mn2^m^)</p>
<h1 id="推理第二行及以下操作并判断是否可行"><a href="#推理第二行及以下操作并判断是否可行" class="headerlink" title="推理第二行及以下操作并判断是否可行"></a>推理第二行及以下操作并判断是否可行</h1><p>有一个优化代码的细节：如果我们从0开始存储，就会遇到要判断是否越界的情况，但如果我们从1开始存储并在末尾留充足的空间，并全部初始化为0就可以都用同一种操作<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> lamp[maxn][maxm], push[maxn][maxm];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">guess</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//推理第二行及以下操作</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			push[i + <span class="number">1</span>][j] = (push[i][j] + push[i][j - <span class="number">1</span>] + push[i][j + <span class="number">1</span>] + push[i - <span class="number">1</span>][j] + lamp[i][j]) % <span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//判断是否可行</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//最后一行，不必加上下一行的操作</span></span><br><span class="line">		<span class="keyword">if</span>((push[n][i] + push[n][i - <span class="number">1</span>] + push[n][i] + push[n - <span class="number">1</span>][i]) % <span class="number">2</span> != lamp[n][i])</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>;   <span class="comment">//返回操作次数</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">			cnt += push[i][j];</span><br><span class="line">	<span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="枚举第一行的所有状态"><a href="#枚举第一行的所有状态" class="headerlink" title="枚举第一行的所有状态"></a>枚举第一行的所有状态</h1><p>枚举利用二进制的位运算，二进制第i位为1就表示按下按钮，0表示不操作</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//利用二进制初始化push数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">importPush</span><span class="params">(<span class="keyword">int</span> binary)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = m; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		push[<span class="number">1</span>][i] = binary &amp; <span class="number">1</span>; <span class="comment">//push[1][i]的值就是当前binary的最低位的值</span></span><br><span class="line">		binary &gt;&gt;= <span class="number">1</span>; <span class="comment">//没导入完一个以后就右移一位，把下一位暴露出来，给下一次导入使用</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>易知，灯的所有状态从全为0开始，到全为1结束</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">min</span> = <span class="number">-1</span>, ans = <span class="number">-1</span>; <span class="comment">//返回可行且操作数最小的第一行状态(二进制数)</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; m; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		importPush(i);  <span class="comment">//先导入</span></span><br><span class="line">		<span class="keyword">int</span> temp = guess();</span><br><span class="line">		<span class="keyword">if</span>(temp &gt;= <span class="number">0</span> &amp;&amp; (temp &lt; <span class="built_in">min</span> || <span class="built_in">min</span> &lt; <span class="number">0</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">min</span> = temp;</span><br><span class="line">			ans = i;</span><br><span class="line">		&#125; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//这里读入数据</span></span><br><span class="line">	<span class="keyword">int</span> ans = solve();</span><br><span class="line">	<span class="keyword">if</span>(ans &lt; <span class="number">0</span>)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"IMPOSSIBLE\n"</span>);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		guess(ans, n, m);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d"</span>, push[i][<span class="number">0</span>]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">" %d"</span>, push[i][j]);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://vjudge.net/problem/POJ-3279" target="_blank" rel="noopener">POJ 3279(Fliptile)</a></p>
]]></content>
      <categories>
        <category>算法</category>
        <category>搜索</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数位DP</title>
    <url>/2019/11/09/%E6%95%B0%E4%BD%8DDP/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>从数a到数b之间，满足一定要求的数的个数，这里的要求指数的组成的要求，例如包含4的数的个数等。这种问题最简单的思路就是从a到b一一枚举，对每个数的每一位一一判断，如果满足就加一。但问题是这种问题中的b-a一般会非常大，所以这样会超时。解决方法就是记忆化搜索</p>
<h1 id="记忆化搜索"><a href="#记忆化搜索" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h1><p>暴力枚举的方法其实是从低位往高位枚举的过程，这不利于定义状态和记忆化。数位DP的本质其实也是暴力枚举，但是因为枚举的方法不同，就很容易定义出状态。数位DP就是从高位往低位枚举，从最高的那位开始，例如要求不含69的数，如果XXX满足要求的有n个，则1XXX、2XXX…的满足要求的数的个数分别都是n个，但6XXX还要判断一下，这时就可以少了很多的判断。我们使用一个二维数组，存储数字(减去前导0)长度为len时此前符合要求和不符合要求时的结果</p>
<h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><p>搜索算法采用的是DFS，在函数的参数中要包含多种参数，当前枚举的是第几位和是否有上限是必须要的，其次还有判断是否合法的变量，例如判断不包含4的数就要加一个变量判断是否在更高位出现过4，如果要判断不包含69的数，就要加一个参数判断是否在上一位包含了6，如果是，那这一位就不能包含9。<br /><br><strong>搜索返回条件</strong>：<br /><br>&emsp;1、当前枚举的是第0位的时候就退出循环，因为这时确认且只确认一个有效数，所以返回1<br /><br>&emsp;2、如果此前符合要求且搜索过当前长度，就直接返回dp二维数组的值</p>
<h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> number[maxn], dp[maxn][<span class="number">2</span>]; <span class="comment">//number是最大数字</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">bool</span> preIlegal, <span class="keyword">bool</span> hasLimit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pos &lt; <span class="number">0</span>) <span class="comment">//数字确定只有一个，直接返回1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">//当前枚举位没有数字限制，则个数就是之前算过的那个个数。易知，之前没有非法数字的话之后的枚举和之前的数字是没有关系的，都相等；有非法数字的话一般只有一种情况。且这里为了普遍性，dp数组里存储的是没有最大数字限制的种数，如果当次枚举有数字限制就不符合dp数组的定义，就不能使用值</span></span><br><span class="line">    <span class="keyword">if</span> (!hasLimit &amp;&amp; dp[pos][preIlegal])</span><br><span class="line">        <span class="keyword">return</span> dp[pos][preIlegal];</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>, <span class="built_in">max</span> = (hasLimit ? number[pos] : <span class="number">9</span>); <span class="comment">//当前位的最大值，有限制就是被原最大数限制</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="built_in">max</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (preIlegal &amp;&amp; i == <span class="number">9</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        cnt += dfs(pos - <span class="number">1</span>, i == <span class="number">4</span>, hasLimit &amp;&amp; i == <span class="built_in">max</span>); <span class="comment">//只有在之前就有最大数字限制且当前枚举数为可枚举的最大值时才会在下一轮中有最大数字限制</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hasLimit ? cnt : dp[pos][preIlegal] = cnt; <span class="comment">//没有限制就记忆，否则不具备普遍性。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="主算法"><a href="#主算法" class="headerlink" title="主算法"></a>主算法</h1><p>计算方法就是把a的值和b的值做差</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">	<span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(x)</span><br><span class="line">	&#123;</span><br><span class="line">		number[k++] = x % <span class="number">10</span>;</span><br><span class="line">		x /= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dfs(k - <span class="number">1</span>, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">finalSolve</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> solve(b) - solve(a - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：数位dp不能解决包含某种结构的问题，只能解决不包含，所以包含的问题要转化成不包含做</p>
]]></content>
      <categories>
        <category>算法</category>
        <category>动态规划</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>最小支撑树(Kruskal算法、Prim算法)</title>
    <url>/2019/11/09/%E6%9C%80%E5%B0%8F%E6%94%AF%E6%92%91%E6%A0%91-Kruskal%E7%AE%97%E6%B3%95%E3%80%81Prim%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>一个无向带权图有n个节点，选择其中的若干条边，使得所有的点都连通，且使得所选择的边的权值和最小。<br>易知已经连起来的点和把他们连起来的边必然是一棵树(无环)</p>
<h1 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h1><p>基础：<a href="https://blog.csdn.net/ValarMorg/article/details/88857396" target="_blank" rel="noopener">并查集</a><br>基本思想：贪心<br>每次都选择不在已经选择的树内的最短边，一共要选n - 1条边<br><strong>数据存储</strong>：一个结构体数组存储边的信息——起点、终点、长度</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> start, <span class="built_in">end</span>, length;</span><br><span class="line">&#125; e[maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">//按长度排序</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge a, edge b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.length &lt; b.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> unioinFind[maxn];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">...此处省略并查集实现</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Kruskal</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> n)</span>   <span class="comment">//num为边的个数，n为点数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	sort(e, e + n, cmp);    <span class="comment">//把边的大小从小排到大</span></span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> edgeNum = <span class="number">0</span>;    <span class="comment">//标记找到了几条边</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num &amp;&amp; edgeNum &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//每次都找最短的</span></span><br><span class="line">		<span class="keyword">int</span> one = <span class="built_in">find</span>(e[i].start);</span><br><span class="line">		<span class="keyword">int</span> two = <span class="built_in">find</span>(e[i].<span class="built_in">end</span>);</span><br><span class="line">		<span class="keyword">if</span>(one != two)</span><br><span class="line">		&#123;</span><br><span class="line">			merge(one, two);</span><br><span class="line">			edgeNum++;</span><br><span class="line">			ans += e[i].length;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h1><p>割：图中两个无交集的点集<br>基本思想还是贪心，每次选择两个割的最小跨边<br><strong>数据存储</strong>：一个邻接表存储点之间的连接情况，一个一维数组vis表示是否在树中，一个向量存储在树中的点<br>为了方便，每次都选择最小编号(假设为1)的点开始</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, length;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; graph[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tree;</span><br><span class="line"><span class="keyword">int</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	tree.push_back(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) <span class="comment">//要找n - 1条边</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> <span class="built_in">min</span> = INF, indexTree, indexGraph;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tree.<span class="built_in">size</span>(); j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; graph[tree[j]].<span class="built_in">size</span>(); k++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">min</span> &gt; graph[tree[j]][k].length &amp;&amp; !vis[graph[tree[j]][k].to])<span class="comment">//小且在树外</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">min</span> = graph[tree[j]][k].length;</span><br><span class="line">					indexTree = j;</span><br><span class="line">					indexGraph = k;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		ans += <span class="built_in">min</span>;</span><br><span class="line">		vis[graph[tree[indexTree]][indexGraph].to] = <span class="number">1</span>;   <span class="comment">//标记新加入的点</span></span><br><span class="line">		tree.push_back(graph[tree[indexTree]][indexGraph].to);   <span class="comment">//把点加入树</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="最大生成树"><a href="#最大生成树" class="headerlink" title="最大生成树"></a>最大生成树</h1><p>最大生成树只是最小生成树的反式写法，最小生成树都取最小，最大生成树都取最大<br>例如：<a href="https://www.luogu.org/problemnew/show/P4826" target="_blank" rel="noopener">洛谷 P4826</a><br>每只牛之间的比赛连一条边，边的权值就是两只牛的异或，建立一张图，因为每只牛都要参加比赛，除了最后那一只牛，每只牛都会且只会输一场，又不会出现环，就可以构建出一棵树，求最大生成树</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repLess(ele, init, lim) for(int ele = init; ele &lt; lim; ele++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repLE(ele, init, lim) for(int ele = init; ele &lt;= lim; ele++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repMore(ele, init, lim) for(int ele = init; ele &gt; lim; ele--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repME(ele, init, lim) for(int ele = init; ele &gt;= lim; ele--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> scInt(to) scanf(<span class="meta-string">"%d"</span>, &amp;to)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> scTwoInt(one, two) scanf(<span class="meta-string">"%d%d"</span>, &amp;one, &amp;two)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> scThreeInt(one, two, three) scanf(<span class="meta-string">"%d%d%d"</span>, &amp;one, &amp;two, &amp;three)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(arr, init) memset(arr, init, sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc ((o &lt;&lt; 1) + 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc (o &lt;&lt; 1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">ll cow[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    ll weight;</span><br><span class="line">&#125; e[MAXN &lt;&lt; <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge a, edge b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.weight &gt; b.weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> disjoint[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (disjoint[x] == x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> disjoint[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> disjoint[x] = find(disjoint[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    repLE(i, <span class="number">1</span>, n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;cow[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    repLE(i, <span class="number">1</span>, n)</span><br><span class="line">    &#123;</span><br><span class="line">        repLess(j, <span class="number">1</span>, i)</span><br><span class="line">        &#123;</span><br><span class="line">            e[len].weight = (<span class="number">1L</span>L * cow[i]) ^ cow[j];</span><br><span class="line">            e[len].a = i;</span><br><span class="line">            e[len].b = j;</span><br><span class="line">            len++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(e, e + len, cmp);</span><br><span class="line">    repLE(i, <span class="number">0</span>, n)</span><br><span class="line">    &#123;</span><br><span class="line">        disjoint[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> getEdge = <span class="number">0</span>;</span><br><span class="line">    repLess(pos, <span class="number">0</span>, len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = find(e[pos].a), y = find(e[pos].b);</span><br><span class="line">        <span class="keyword">if</span> (x == y)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        disjoint[x] = y;</span><br><span class="line">        ans += e[pos].weight;</span><br><span class="line">        getEdge++;</span><br><span class="line">        <span class="keyword">if</span> (getEdge == n - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>最小路径覆盖</title>
    <url>/2019/11/09/%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E8%A6%86%E7%9B%96/</url>
    <content><![CDATA[<h1 id="半径为k的树上覆盖"><a href="#半径为k的树上覆盖" class="headerlink" title="半径为k的树上覆盖"></a>半径为k的树上覆盖</h1><p>在一棵树上，每条边的权值都为1，覆盖半径为k<br>用贪心，从最深的节点开始，如果没有被覆盖就把它的第k代祖先覆盖，并更新。<br>一个结构体存储两个值：编号和深度，利用深度排序之后再按编号顺序贪心；<br>dist数组：存储每个结点最近的覆盖点的距离<br>father数组：存储每个结点的父节点</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(arr + <span class="number">1</span>, arr + <span class="number">1</span> + n, cmp);</span><br><span class="line">    clr(dist, MINF);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    repLE(i, <span class="number">1</span>, n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> sel = arr[i].id;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//更新当前贪心节点的最近覆盖距离</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = father[sel], cnt = <span class="number">1</span>; cnt &lt;= k &amp;&amp; j != <span class="number">0</span>; j = father[j], cnt++)</span><br><span class="line">        &#123;</span><br><span class="line">        	<span class="comment">// 距离为上i代祖先的最近覆盖距离，再加上从该祖先到该点的距离</span></span><br><span class="line">            dist[sel] = min(dist[sel], dist[j] + cnt);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 如果最近的覆盖距离大于k，说明没有被覆盖</span></span><br><span class="line">        <span class="keyword">if</span> (dist[sel] &gt; k)</span><br><span class="line">        &#123;</span><br><span class="line">            ans++; <span class="comment">// 增加一个覆盖点</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = sel, cnt = k; cnt &gt;= -k &amp;&amp; j != <span class="number">0</span>; j = father[j], cnt--)</span><br><span class="line">            &#123;</span><br><span class="line">                dist[j] = min(dist[j], <span class="built_in">abs</span>(cnt));</span><br><span class="line">                <span class="comment">// 更新当前贪心点上k代祖先的下k代和上k代之内的所有直系覆盖范围</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在更新距离的时候，更新的是直系的距离，实际上k代祖先的后代可以不更新，因为后代只有：1、已经访问过的不会再访问；2、稍后访问，访问时会自动更新(旁系后代的更新方式)<br>例题：<br><a href="https://www.luogu.org/problemnew/show/P3942" target="_blank" rel="noopener">洛谷 P3942</a></p>
]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
        <category>最短路径</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>最短路算法(Dijkstra、Bellman-Ford、SPFA、Floyd邻接矩阵实现)</title>
    <url>/2019/11/08/%E6%9C%80%E7%9F%AD%E8%B7%AF%E7%AE%97%E6%B3%95-Dijkstra%E3%80%81Bellman-Ford%E3%80%81SPFA%E3%80%81Floyd%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="一、单源最短路——Dijkstra算法"><a href="#一、单源最短路——Dijkstra算法" class="headerlink" title="一、单源最短路——Dijkstra算法"></a>一、单源最短路——Dijkstra算法</h1><p>单点出发的最短路问题，问一个点到另一个或多个点到最短路问题<br>思想：<br>&emsp;1、<strong>数据存储</strong>：一个二维数组map存储两点之间的距离， 一个一维数组dist存储两点之间的最短距离，一个一维数组vis标记一点是否已访问</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> dist[maxn], vis[maxn], <span class="built_in">map</span>[maxn][maxn];</span><br></pre></td></tr></table></figure>
<p>&emsp;2、<strong>初始化</strong>：map和dist都先初始化为无穷大，如：0x7fffffff，vis初始化为0。若起始点为start，则先使dist[start] = 0。若点i和点j之间有连边，且距离为d，则map[i][j] = map[j][I] = max(map[i][j], d)。注意，不设vis[start] = 1</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">memset</span>(dist, <span class="number">0x7fffffff</span>, <span class="keyword">sizeof</span>(dist);</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">dist[start] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>&emsp;3、<strong>处理</strong>：从所有点中，选出未被标记且离出发点最近的点，更新所有与这个点相连的点距离出发点的距离，使之最短。不断更新，直到所有点都被标记</p>
<p>代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//寻找离出发点最近的点</span></span><br><span class="line">		<span class="keyword">int</span> mini = dist[<span class="number">0</span>], x = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(!vis[j] &amp;&amp; dist[j] &lt; mini)</span><br><span class="line">				mini = dist[x = j];</span><br><span class="line">		&#125;</span><br><span class="line">		vis[x] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//更新别的点通过这个点到出发点的距离</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">map</span>[x][j] &lt; INF)</span><br><span class="line">			&#123;</span><br><span class="line">				dist[j] = <span class="built_in">min</span>(dist[j], dist[x] + <span class="built_in">map</span>[x][j]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="二、含负权单源最短路——Bellman-Ford算法"><a href="#二、含负权单源最短路——Bellman-Ford算法" class="headerlink" title="二、含负权单源最短路——Bellman-Ford算法"></a>二、含负权单源最短路——Bellman-Ford算法</h1><p>这个算法的特点就是可以处理Dijkstra不能处理的负权<br>一个图如果有环，就只有三种环——零环、正环、负环。若一个图存在最短路则不含有任何环，因为若一个图里包含负环则不存在最短路；若最短路包含正环或零环则路径不会变长，甚至会变短<br>思想：<br>&emsp;<strong>数据存储</strong>：和Dijkstra一样，不用vis<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> dist[maxn], <span class="built_in">map</span>[maxn][maxn];</span><br></pre></td></tr></table></figure><br>&emsp;<strong>初始化</strong>：和Dijkstra一样，不用初始化vis<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	dist[i] = INF;</span><br><span class="line">dist[start] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><br>&emsp;<strong>处理</strong>：遍历所有边，计算出从一点，经过那条边到终点的最短路<br>代码：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BellmanFord</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//遍历图上的所有边n - 1次</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n - <span class="number">1</span>; k++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">				<span class="keyword">if</span>(dist[j] != INF &amp;&amp; <span class="built_in">map</span>[j][i] &lt; INF &amp;&amp; dist[j] + <span class="built_in">map</span>[j][i] &lt; dist[i])</span><br><span class="line">					dist[i] = dist[j] + <span class="built_in">map</span>[j][i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>如何判断负环？<br>最后再 遍历一边所有边，如果dist[i] + map[i][j] &lt; dist[i]则说明有负环<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judgeNeg</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//遍历所有边</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">			<span class="keyword">if</span>(dist[i] + <span class="built_in">map</span>[j][i] &lt; dist[i])   <span class="comment">//越加越小为负边</span></span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="三、Bellman-Ford算法的优化——SPFA算法"><a href="#三、Bellman-Ford算法的优化——SPFA算法" class="headerlink" title="三、Bellman-Ford算法的优化——SPFA算法"></a>三、Bellman-Ford算法的优化——SPFA算法</h1><p><strong>优化思路</strong>：在Bellman-Ford算法的基础上再增加一个队列来维护那些到出发点距离可能改变的点。<br><strong>数据存储</strong>：在Bellman-Ford的基础上再加一个一维数组vis来标记点是否在队列内，一个一维数组enqueue_num来标记一点的入队次数<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> vis[maxn], enqueue_num[maxn], dist[maxn], <span class="built_in">map</span>[maxn][maxn];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br></pre></td></tr></table></figure><br><strong>初始化</strong>：vis和enqueue_num初始化为0，其他同Bellman-Ford算法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">	dist[i] = INF;</span><br><span class="line">	vis[i] = <span class="number">0</span>;</span><br><span class="line">	enqueue_num[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!que.empty())</span><br><span class="line">	que.pop();</span><br></pre></td></tr></table></figure>
<p><strong>处理</strong>：<br>&emsp;1、初始时候把出发点推入队列<br>&emsp;2、出队队首元素，判断所有以该点结尾的边，若到出发点的最短距离改变了且另一端点不在队列内，则把该点推入队内<br>&emsp;3、若一个点的入队次数大于点数，则直接退出算法且这时说明有负环<br>代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    que.push(start);</span><br><span class="line">    dist[start] = <span class="number">0</span>;</span><br><span class="line">    vis[start] = enqueue_num[start] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = que.front();</span><br><span class="line">        que.pop();</span><br><span class="line">        vis[x] = <span class="number">0</span>;    <span class="comment">//cur已不在队列内</span></span><br><span class="line">        <span class="keyword">if</span>(enqueue_num[x] &gt; n)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(graph[x][i] &lt; INF &amp;&amp; dist[x] + graph[x][i] &lt; dist[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[i] = dist[x] + graph[x][i];</span><br><span class="line">                <span class="keyword">if</span>(!vis[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    que.push(i);</span><br><span class="line">                    vis[i] = <span class="number">1</span>;</span><br><span class="line">                    enqueue_num[i]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个算法还有一个小优化：利用Bubble sort里的方法，在循环时加一个变量，循环到不再有值改变为止：如果变量值为真，就停止循环，变量初始化为假，每次循环的开头就把变量设为真，一旦修改一个地方的值就把变量改为假<br><strong>假如只是单纯想判断是否有负环(如差分约束)，可以把所有点都先入队再跑</strong></p>
<h1 id="四、多源最短路——Floyd算法"><a href="#四、多源最短路——Floyd算法" class="headerlink" title="四、多源最短路——Floyd算法"></a>四、多源最短路——Floyd算法</h1><p>多点出发的最短路算法，最好写的一个，近乎万能，也可以处理负权<br>思想：<br>&emsp;数据存储：一个二维数组d存储距离</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> d[maxn][maxn];</span><br></pre></td></tr></table></figure>
<p>&emsp;初始化：d[i][i] = 0，其他值为无穷大INF</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">		d[i][j] = INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	d[i][i] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>&emsp;处理：a点到b点只有两种办法，直接从a到b，或a到某点c再到b，而a到b的距离就是这两种中的最小值。故我们利用三重循环，遍历所有可能的a，b，c，得到所有出发点到所有终点的最短路</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">				<span class="keyword">if</span>(d[i][k] &lt; INF &amp;&amp; d[k][j] &lt; INF)</span><br><span class="line">					d[i][j] = <span class="built_in">min</span>(d[i][j], d[i][k] + d[k][j]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若只关心i和j之间是否有通路？<br>把<code>d[i][j] = min(d[i][j], d[i][k] + d[k][j]);</code>改为<code>d[i][j] = d[i][j] || (d[i][k] &amp;&amp; d[k][j]);</code><br>注意，k是作为中转站，放在最外层循环，整个程序相当于查找是否存在以k为中转站，从i到j的最短路</p>
<h1 id="最长路"><a href="#最长路" class="headerlink" title="最长路"></a>最长路</h1><p>最长路不能用Dijkstra，只能取负权之后用Bellman-Ford、SPFA、Floyd求最短路</p>
]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
        <category>最短路径</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数论相关</title>
    <url>/2019/11/08/%E6%95%B0%E8%AE%BA%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h1 id="辗转相除法"><a href="#辗转相除法" class="headerlink" title="辗转相除法"></a>辗转相除法</h1><p>用于求两个数的最大公约数<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GCD</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (b == <span class="number">0</span>) ? a : GCD(b, a % b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h1><p>用于求<code>ax + by = GCD(a, b)</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exGCD</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> &amp; x, <span class="keyword">int</span> &amp; y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> d = a;</span><br><span class="line">	<span class="keyword">if</span>(b != <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		d = exGCD(b, a % b, y, x);</span><br><span class="line">		y -= (a / b) * x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		x = <span class="number">1</span>;</span><br><span class="line">		y = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="扩展中国剩余定理"><a href="#扩展中国剩余定理" class="headerlink" title="扩展中国剩余定理"></a>扩展中国剩余定理</h1><p>用于求<code>x % w[i] = b[i]</code>方程组的解x。中国剩余定理要求w[i]互质，扩展定理不需要<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x, y;</span><br><span class="line">    exGCD(a, b, x, y);</span><br><span class="line">    <span class="keyword">while</span>(x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x += b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">chinaRemain</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ll M1 = w[i - <span class="number">1</span>], M2 = w[i], C2 = b[i], C1 = b[i - <span class="number">1</span>], T = gcd(M1, M2);</span><br><span class="line">        <span class="keyword">if</span>((C2 - C1) % T != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        w[i] = (M1 * M2) / T;</span><br><span class="line">        b[i] = (inv(M1 / T, M2 / T) * (C2 - C1) / T) % (M2 / T) * M1 + C1;</span><br><span class="line">        b[i] = (b[i] % w[i] + w[i]) % w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="高斯消元求解行列式"><a href="#高斯消元求解行列式" class="headerlink" title="高斯消元求解行列式"></a>高斯消元求解行列式</h1><p>如果是double的行列式可以直接套用高斯消元的模版，这个模版是用在long long或int的行列式中</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">gauss</span><span class="params">(ll num, ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll dv = <span class="number">1</span>, ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//稳定化</span></span><br><span class="line">        <span class="keyword">int</span> r = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; num; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(a[j][i]) &gt; <span class="built_in">abs</span>(a[r][i]))</span><br><span class="line">            &#123;</span><br><span class="line">                r = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(a[r][i] == <span class="number">0</span>) <span class="comment">// 主对角线上有元素为0，行列式值为0</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(r != i) <span class="comment">// 交换行</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans *= <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; num; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                swap(a[i][j], a[r][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//消元</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt; num; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[k][i] != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ll tmp1 = GCD(<span class="built_in">abs</span>(a[i][i]), <span class="built_in">abs</span>(a[k][i]));</span><br><span class="line">                ll tmp2 = a[i][i] / tmp1 % mod;</span><br><span class="line">                tmp1 = a[k][i] / tmp1 % mod;</span><br><span class="line">                dv = dv * tmp2 % mod;</span><br><span class="line">                <span class="keyword">for</span> (ll p = i; p &lt; num; p++)</span><br><span class="line">                &#123;</span><br><span class="line">                    a[k][p] = (a[k][p] * tmp2 % mod - a[i][p] * tmp1 % mod) % mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = ans * a[i][i] % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans * POW(dv, mod - <span class="number">2</span>, mod) % mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="SG函数"><a href="#SG函数" class="headerlink" title="SG函数"></a>SG函数</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//step为可改变当前状态的方式，poss为方式的种类(从0开始)</span></span><br><span class="line"><span class="comment">//SG为0~n的SG函数值</span></span><br><span class="line"><span class="comment">//S为x后继状态的集合</span></span><br><span class="line"><span class="keyword">int</span> step[MAXN],SG[MAXN],S[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">getSG</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(SG,<span class="number">0</span>,<span class="keyword">sizeof</span>(SG));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(S,<span class="number">0</span>,<span class="keyword">sizeof</span>(S));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; step[j] &lt;= i &amp;&amp; j &lt; poss; j++)</span><br><span class="line">        &#123;</span><br><span class="line">        	S[SG[i-step[j]]] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;; j++)</span><br><span class="line">        &#123;</span><br><span class="line">        	<span class="keyword">if</span>(!S[j])</span><br><span class="line">        	&#123;</span><br><span class="line">            	SG[i] = j;</span><br><span class="line">	            <span class="keyword">break</span>;</span><br><span class="line">    	    &#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="汉诺塔"><a href="#汉诺塔" class="headerlink" title="汉诺塔"></a>汉诺塔</h1><p><strong>递推求步数和方案</strong><br>有一根1号柱子上有从上到下半径递增的圆盘，要把这些圆盘(可以再借助一根2号柱子)挪到另一根3号柱子上，且挪动过程(包括结果)中，小圆盘始终在大圆盘上面。<br>已知，挪动的方法就是先把最上面的n-1个圆盘放到2号柱子上，再把底下最大的那个圆盘放到3号柱子上，这时问题就变为把圆盘从2号柱子借助1号柱子，放到3号柱子上<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> step = <span class="number">0</span>; <span class="comment">//总步数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> from, <span class="keyword">int</span> pass, <span class="keyword">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	solve(n - <span class="number">1</span>, from, to, pass); <span class="comment">// 把n - 1个圆盘从原始柱放到借助柱上</span></span><br><span class="line">	step++; <span class="comment">// 把最大的圆盘放到目标上要一步</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"from %d to %d\n"</span>, from, to); <span class="comment">// 输出步骤方案</span></span><br><span class="line">	solve(n - <span class="number">1</span>, pass, from, to); <span class="comment">// 把n - 1个圆盘从借助柱放到目标柱上</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>递推求步数</strong><br>注意到把n - 1个圆盘从一个柱子挪到另一个柱子的步数和从哪个柱子挪到哪个柱子无关，是固定的所以可以用递推</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> step[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	step[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		step[i] = step[i - <span class="number">1</span>] + <span class="number">1</span> + step[i - <span class="number">1</span>];</span><br><span class="line">		<span class="comment">// 第一个step[i - 1]是把n - 1个圆盘挪到借助柱上，1是把最大的圆盘挪到目标柱上，第二个step[i - 1]是把n - 1个圆盘挪到目标柱上</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>数学求步数</strong><br>从递推公式可以得到：a~n~ = 2 * a~n-1~ + 1，a~0~ = 0，所以a~n~ = 2^n^ - 1</p>
<h1 id="计算组合数"><a href="#计算组合数" class="headerlink" title="计算组合数"></a>计算组合数</h1><p>组合数<code>C(m, n) = m! / (n! * (n - m)!)</code>，原始公式涉及到三个阶乘，不但计算复杂，还容易爆long long，利用公式<code>C(m, n) = C(m, n - 1) + C(m - 1, n - 1)</code>就可以利用记忆化+递归，或递推快速不爆上界地求出组合数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> c[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记忆化+递归</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n == m || n == <span class="number">1</span> || m == <span class="number">0</span>) <span class="comment">// 这些情况下组合数的值为1</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> c[m][n] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (c[m][n])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> c[m][n];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> c[m][n] = cal(m - <span class="number">1</span>, n - <span class="number">1</span>) + cal(m, n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递推</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 设置边界已知值</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		c[i][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		c[i][i] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(c[<span class="number">0</span>], <span class="number">1</span>, <span class="keyword">sizeof</span>(c[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			c[i][j] = c[i - <span class="number">1</span>][j - <span class="number">1</span>] + c[i][j - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="约瑟夫环"><a href="#约瑟夫环" class="headerlink" title="约瑟夫环"></a>约瑟夫环</h1><p>用数学代替模拟，时间复杂度由暴力模拟的O(n * m)变为了O(n)，但不能求出出列的顺序，只能得到最后出列的人</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> <span class="comment">// 有n个人，报到m的出列</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		ans = (ans + m) % i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="概率求解"><a href="#概率求解" class="headerlink" title="概率求解"></a>概率求解</h1><p>1、对于独立重复实验中，重复n次实验，某一概率为p的事件恰好出现m次的概率：<br>P = C(m, n) <em> p^m^ </em> p^n-m^<br>2、条件概率：在事件A发生的条件下事件B发生的概率<code>P(B | A) = P(AB) / P(A)</code></p>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>最短路算法(Dijkstra、Bellman-Ford、SPFA邻接表实现)</title>
    <url>/2019/11/08/%E6%9C%80%E7%9F%AD%E8%B7%AF%E7%AE%97%E6%B3%95-Dijkstra%E3%80%81Bellman-Ford%E3%80%81SPFA%E9%82%BB%E6%8E%A5%E8%A1%A8%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>邻接矩阵实现起来比较简单，但对空间的利用效率不高，常常会导致内存超限的MLE，此时就应当改用邻接表实现，省去不必要的边，减小内存消耗</p>
<h1 id="邻接表的构造"><a href="#邻接表的构造" class="headerlink" title="邻接表的构造"></a>邻接表的构造</h1><p>邻接表都是利用Vector替换原来的map数组实现的。由于邻接表的本质是存储边，所以我们还要定义一个结构体，包含两个值，一个是这条路的终点，一个是这条路的长度。开一个向量数组，一个点一个向量，每次都把与那个点相关的点加如向量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, dist;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;info&gt; <span class="built_in">map</span>[maxn];</span><br></pre></td></tr></table></figure>
<h1 id="Dijkstra的邻接表实现"><a href="#Dijkstra的邻接表实现" class="headerlink" title="Dijkstra的邻接表实现"></a>Dijkstra的邻接表实现</h1><p>Dij算法的邻接表和邻接矩阵相比，差异只在于更新各点到起点的距离。由于是邻接表，所以那个循环枚举的是边，而不是想邻接矩阵那样枚举点，就不必想邻接矩阵那样判断是否存在边。将x点的向量map[x]从头枚举到尾，每一个元素的to值就是可以到的终点，dist值就是距离<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> dist[maxn], vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">	<span class="built_in">fill</span>(dist, dist + n + <span class="number">1</span>, INF);</span><br><span class="line">	dist[start] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> mini = INF, x;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(dist[j] &lt; mini &amp;&amp; !vis[j])</span><br><span class="line">			&#123;</span><br><span class="line">				mini = dist[j];</span><br><span class="line">				x = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		vis[x] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//以下才开始变化</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">map</span>[x].<span class="built_in">size</span>(); j++) <span class="comment">//枚举map[x]里的所有元素</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(dist[<span class="built_in">map</span>[x][j].to] &lt; dist[x] + <span class="built_in">map</span>[x][j].dist)</span><br><span class="line">			&#123;</span><br><span class="line">				dist[<span class="built_in">map</span>[x][j].to] = dist[x] + <span class="built_in">map</span>[x][j].dist;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="Bellman-Ford算法的邻接表实现"><a href="#Bellman-Ford算法的邻接表实现" class="headerlink" title="Bellman-Ford算法的邻接表实现"></a>Bellman-Ford算法的邻接表实现</h1><p>和Dij一样</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bellmanFord</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n - <span class="number">1</span> &amp;&amp; !flag; k++)</span><br><span class="line">	&#123;</span><br><span class="line">		flag = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">map</span>[i].<span class="built_in">size</span>(); j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(dist[<span class="built_in">map</span>[i][j].to] &lt; dist[i] + <span class="built_in">map</span>[i][j].dist)</span><br><span class="line">				&#123;</span><br><span class="line">					flag = <span class="literal">true</span>;</span><br><span class="line">					dist[<span class="built_in">map</span>[i][j].to] = dist[i] + <span class="built_in">map</span>[i][j].dist;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">negLoop</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">map</span>[i].<span class="built_in">size</span>(); j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(dist[<span class="built_in">map</span>[i][j].to] &lt; dist[i] + <span class="built_in">map</span>[i][j].dist)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="SPFA"><a href="#SPFA" class="headerlink" title="SPFA"></a>SPFA</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    que.push(start);</span><br><span class="line">    dist[start] = <span class="number">0</span>;</span><br><span class="line">    vis[start] = enqueue_num[start] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        x = que.front();</span><br><span class="line">        que.pop();</span><br><span class="line">        vis[x] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(enqueue_num[x] &gt; n)</span><br><span class="line">        &#123;</span><br><span class="line">        	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; mp[x].<span class="built_in">size</span>(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> i = mp[x][j].to;</span><br><span class="line">            <span class="keyword">if</span>(dist[x] + mp[x][j].dist &lt; dist[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[i] = dist[x] + mp[x][j].dist;</span><br><span class="line">                <span class="keyword">if</span>(!vis[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    que.push(i);</span><br><span class="line">                    vis[i] = <span class="number">1</span>;</span><br><span class="line">                    enqueue_num[i]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
        <category>最短路径</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>最短路综合应用——路径相关</title>
    <url>/2019/11/09/%E6%9C%80%E7%9F%AD%E8%B7%AF%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h1 id="附加权值、输出路径、路径种数-题目保证唯一"><a href="#附加权值、输出路径、路径种数-题目保证唯一" class="headerlink" title="附加权值、输出路径、路径种数(题目保证唯一)"></a>附加权值、输出路径、路径种数(题目保证唯一)</h1><p><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805073643683840" target="_blank" rel="noopener">PTA  L2-001</a><br>题目要求：<br>&emsp;1、输出最短路径的种数<br>&emsp;2、输出最多救援队人数<br>&emsp;3、输出最优路径<br>解决：<br>&emsp;1、最短路算法选择：Dijkstra算法<br>&emsp;2、路径种数：建立一个一维way数组，表示从出发点到一点的路径种数。初始化为0，出发点为1。在Dijkstra算法中，进入更新各个点到出发点距离时，若<code>dist[i] &lt; dist[x] + map[x][i]</code>，则使<code>way[i] = way[x]</code>，若<code>dist[i] == dist[x] + map[x][i]</code>，则<code>way[i] += way[x]</code><br>&emsp;3、输出最多救援队人数：建立一个一维数组men，表示从出发点到一点的最短路径上能有的最多救援队人数，再建一个一维数组people，存放各个点的救援队人数。关注人数意味着最优路径多了一个指标，故在Dij算法最开始找当前最优点时不仅仅要距离最短，也要人数最多，故需要增加一个指标来标记最多人数。更新各点距离时，若<code>dist[i]==dist[x]+map[x][i]</code>&amp;&amp;<code>men[i] &lt; men[x]+people[i]</code>，则<code>men[i]=men[x]+people[i]</code>；若<code>dist[i] &lt; dist[x] + map[x][i]</code>，则<code>men[i]=men[x]+people[i]</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[maxn][maxn], dist[maxn], way[maxn], people[maxn], men[maxn], vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dist[i] = INF;</span><br><span class="line">        men[i] = vis[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dist[start] = <span class="number">0</span>;</span><br><span class="line">    men[start] = people[start];     <span class="comment">//直接在出发点就可以招到people[start]那么多人</span></span><br><span class="line">    way[start] = <span class="number">1</span>;    <span class="comment">//从出发点到出发点有1种走法，不是0种</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> minLength = INF, maxMen = <span class="number">0</span>, x;</span><br><span class="line">        <span class="comment">//   最小距离         最大人数</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(dist[j] == minLength &amp;&amp; maxMen &lt; men[j])   <span class="comment">//相等且更多人也更新</span></span><br><span class="line">                    maxMen = men[x = j];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(dist[j] &lt; minLength)     <span class="comment">//距离更短必定更新</span></span><br><span class="line">                &#123;</span><br><span class="line">                    minLength = dist[x = j];</span><br><span class="line">                    maxMen = men[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[x] = <span class="number">1</span>;     <span class="comment">//标记</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(dist[j] &gt; dist[x] + <span class="built_in">map</span>[x][j] &amp;&amp; <span class="built_in">map</span>[x][j] &lt; INF)   <span class="comment">//有路且更短</span></span><br><span class="line">                &#123;</span><br><span class="line">                    dist[j] = dist[x] + <span class="built_in">map</span>[x][j];</span><br><span class="line">                    way[j] = way[x];    <span class="comment">//到j的方法就是到x到方法：目前到j必经过x</span></span><br><span class="line">                    men[j] = men[x] + people[j];     <span class="comment">//x上招到人，j上还可以招到人</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(dist[j] == dist[x] + <span class="built_in">map</span>[x][j])    <span class="comment">//距离相等</span></span><br><span class="line">                &#123;</span><br><span class="line">                    way[j] += way[x];      <span class="comment">//到j还可以先到x，故到j的方法还有到x的方法种</span></span><br><span class="line">                    <span class="keyword">if</span>(men[j] &lt; men[x] + people[j])    <span class="comment">//如果经过j可以招到更多的人</span></span><br><span class="line">                        men[j] = men[x] + people[j];<span class="comment">//way是最短路种数，路径长度没变，不必更新way</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;4、输出最优路径：从终点开始DFS，若当前点的总人数减掉当前点的单点人数等于第i个点的人数，且出发点到当前点的距离减掉当前点到第i点的距离等于出发点到第i点的距离，则第i点就是最短路中当前点的父节点，并以这点继续DFS，直到第i点为出发点</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> sumMen, <span class="keyword">int</span> n, <span class="keyword">int</span> start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur == start)    <span class="comment">//递归到出发点，结束递归</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(sumMen - people[cur] == men[i] &amp;&amp; dist[cur] - <span class="built_in">map</span>[cur][i] == dist[i])<span class="comment">//确定父节点</span></span><br><span class="line">        &#123;</span><br><span class="line">            DFS(i, men[i], n, start);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, i);</span><br><span class="line">            <span class="comment">//先进行递归就可以先输出后搜到的节点也就是先走到的节点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>main函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, start, <span class="built_in">end</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;start, &amp;<span class="built_in">end</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            <span class="built_in">map</span>[i][j] = INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">map</span>[i][i] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;people[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> c1, c2, d;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;c1, &amp;c2, &amp;d);</span><br><span class="line">        <span class="built_in">map</span>[c1][c2] = <span class="built_in">map</span>[c2][c1] = <span class="built_in">std</span>::<span class="built_in">min</span>(<span class="built_in">map</span>[c1][c2], d);</span><br><span class="line">    &#125;</span><br><span class="line">    dijkstra(start, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, way[<span class="built_in">end</span>], men[<span class="built_in">end</span>]);</span><br><span class="line">    DFS(<span class="built_in">end</span>, men[<span class="built_in">end</span>], n, start);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="built_in">end</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="最短路径字典序打印"><a href="#最短路径字典序打印" class="headerlink" title="最短路径字典序打印"></a>最短路径字典序打印</h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1385" target="_blank" rel="noopener">HDOJ 1385</a><br>题目要求：要求若花费相同，则输出字典序最小路径<br>1、存储路径：建立一个一维数组pre来存储每个节点的父节点<br>2、比较字典序：转化为字符数组，利用strcmp的返回值比较转化为字符数组：<br>转化为字符数组：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">dfs(<span class="keyword">int</span> u, <span class="keyword">char</span> * str, <span class="keyword">int</span> &amp; pos)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(u == <span class="number">-1</span>)   <span class="comment">//表明结束</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	dfs(pre[u], str, pos);</span><br><span class="line">	str[pos++] = u + <span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>比较：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> ori, <span class="keyword">int</span> cur)</span>   <span class="comment">//ori代表原始路径与现路径终点，cur表示新路线先经过cur再到ori</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">char</span> origin[maxn], current[maxn];</span><br><span class="line">	dfs(ori, origin, pos);   <span class="comment">//直接找出到ori的最短路</span></span><br><span class="line">	str[pos] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">	pos = <span class="number">0</span>;</span><br><span class="line">	dfs(cur, current, pos);     <span class="comment">//先找出到cur的最短路</span></span><br><span class="line">	cur[pos++] = ori + <span class="string">'0'</span>;     <span class="comment">//加上ori后表示经过cur到ori的最短路</span></span><br><span class="line">	cur[pos] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">strcmp</span>(str1, str2) == <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在SPFA中若距离相等且字典序更短，就要更新父节点</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> dist[maxn], pre[maxn], inQue[maxn], charge[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(inQue, <span class="number">0</span>, <span class="keyword">sizeof</span>(inQue));</span><br><span class="line">	<span class="built_in">memset</span>(pre, <span class="number">-1</span>, <span class="keyword">sizeof</span>(pre));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		dist[i] = INF;</span><br><span class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">	que.push(start);</span><br><span class="line">	inQue[start] = <span class="number">1</span>;</span><br><span class="line">	dist[start] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(!que.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> u = que.front();</span><br><span class="line">		que.pop();</span><br><span class="line">		inQue[u] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> temp = dist[u] + <span class="built_in">map</span>[u][i] + charge[i];</span><br><span class="line">			<span class="keyword">if</span>(dist[i] &gt; temp)</span><br><span class="line">			&#123;</span><br><span class="line">				dist[i] = temp;</span><br><span class="line">				pre[i] = u;</span><br><span class="line">				<span class="keyword">if</span>(!inQue[i])</span><br><span class="line">				&#123;</span><br><span class="line">					inQue[i] = <span class="number">1</span>;</span><br><span class="line">					que.push(i);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(dist[i] == temp &amp;&amp; cmp(i, u))</span><br><span class="line">				pre[i] = u;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印路径</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(pre[u] == <span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d"</span>, u);</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">print</span>(pre[u]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"--&gt;%d"</span>, u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
        <category>最短路径</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>栈和队列</title>
    <url>/2019/07/23/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h1 id="栈的实现"><a href="#栈的实现" class="headerlink" title="栈的实现"></a>栈的实现</h1><ol>
<li>栈就是一种受限的序列，每种操作都只能对栈顶元素进行操作，要么弹出，要么推入</li>
<li>栈需要的接口就只有：<code>size()</code>获取栈的大小/<code>empty()</code>判空、<code>top()</code>获得栈顶元素的值、<code>pop()</code>删除栈顶元素、<code>push()</code>推入一个元素</li>
<li>栈是受限的序列，在实现的时候就可以直接由向量或列表派生</li>
<li>栈顶应该设置成向量的末端还是首端？如果设置在首端，每次改变元素都要移动所有元素，所以应该设置在末端<a id="more"></a>
</li>
</ol>
<h1 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h1><p>常用场合：逆序输出、递归嵌套、延迟缓冲、栈式计算</p>
<h2 id="逆序输出"><a href="#逆序输出" class="headerlink" title="逆序输出"></a>逆序输出</h2><p>应用：输出次序与处理过程颠倒，递归深度和输出长度不易预知</p>
<h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><p>实现：取余入栈，出栈输出</p>
<h2 id="递归嵌套"><a href="#递归嵌套" class="headerlink" title="递归嵌套"></a>递归嵌套</h2><p>应用：具有自相似性的问题可递归描述，但分支位置和嵌套深度不固定</p>
<h3 id="括号匹配"><a href="#括号匹配" class="headerlink" title="括号匹配"></a>括号匹配</h3><ol>
<li>问题：判断一系列括号是否正确匹配</li>
<li>思路：消除一对紧邻的左右括号对剩下的表达式的匹配性没有影响</li>
<li>实现：顺序扫描表达式，遇到左括号，就入栈；遇到右括号就取出栈顶元素，若是右括号和左括号不匹配或栈为空就返回false，否则继续。扫描完返回栈是否为空</li>
<li>简化：在只有一种括号的情况下，也可以用一个计数器，左括号加一，右括号减一，若任何一个位置变为负数就返回false，否则为true</li>
<li>扩展：多种括号，只能用栈，不能用计数器</li>
</ol>
<h3 id="栈混洗"><a href="#栈混洗" class="headerlink" title="栈混洗"></a>栈混洗</h3><ol>
<li>问题：一个起始栈，一个结果栈和一个中转栈，每次要么把起始栈的栈顶压入中转栈，要么把中转栈的栈顶压入结果栈</li>
<li>计数：记n个元素栈混洗的结果有$sp(n)$种，考虑首元素是第k个入栈的话结果就有$sp(k - 1) \cdot sp(n - k)$，第一个是在首素之前入栈的k - 1个元素的结果，第二个是在首元素之后入栈的n - k个元素的结果，首元素可以是第1个、第2个……第n个入栈，结果就是把上式k从1累加到n</li>
<li>化简结果是卡特兰数：$\displaystyle\frac{(2n)!}{(n+1)!\cdot n!}=\frac{C^{2n}_{n}}{n+1}$</li>
<li>甄别：判断一个序列是不是另一个序列栈混洗的结果。已知甄别的结果只和顺序有关，所以以下所讲的数实际是序号</li>
<li>定理：对于不同的三个数$i &lt; j &lt; k$，必不存在相对次序为$… k … j … i …$的序列</li>
<li>算法1：枚举所有三个元素对判断，复杂度$O(n^3)$</li>
<li>算法2：枚举两个元素$i &lt; j$，判断$i$、$j$、$j + 1$，复杂度$O(n^2)$</li>
<li>算法3：直接模拟，用三个栈模拟是否可以得到相应的栈，复杂度$O(n)$</li>
<li>将栈混洗中转栈的每一次push都对应于一个左括号，pop对应于一个右括号，括号匹配就是一个栈混洗。$n$对括号合法匹配种数就是$sp(n)$</li>
</ol>
<h2 id="延迟缓冲"><a href="#延迟缓冲" class="headerlink" title="延迟缓冲"></a>延迟缓冲</h2><p>应用：线性扫描算法模式中，在预读足够长之后方能确定可处理的前缀</p>
<h3 id="中缀表达式求值"><a href="#中缀表达式求值" class="headerlink" title="中缀表达式求值"></a>中缀表达式求值</h3><ol>
<li>表述：中缀表达式就是操作符在操作数之间的表达式<br>算法：利用两个辅助栈，依次扫描表达式，如果是数就推入数栈，如果是操作符，就判断和操作符栈顶元素的优先级，如果优先级低就执行栈顶操作符<br>执行操作符：从数栈中弹出需要的操作数的个数，操作完成之后操作结果推入数栈，操作符扔掉</li>
<li>算法：利用两个辅助栈，依次扫描表达式，如果是数就推入数栈，如果是操作符，就判断和操作符栈顶元素的优先级，如果优先级低就执行栈顶操作符</li>
<li>执行操作符：从数栈中弹出需要的操作数的个数，操作完成之后操作结果推入数栈，操作符扔掉</li>
<li>便于实现，可以在一开始就在操作符栈推入一个左括号，在表达式最后加一个右括号<br>要把表达式以字符串的形式读取，多位数的读取要注意</li>
</ol>
<h2 id="栈式计算"><a href="#栈式计算" class="headerlink" title="栈式计算"></a>栈式计算</h2><p>应用：基于栈结构的特定计算模式</p>
<h3 id="逆波兰表达式-RPN"><a href="#逆波兰表达式-RPN" class="headerlink" title="逆波兰表达式(RPN)"></a>逆波兰表达式<code>(RPN)</code></h3><ol>
<li>表述：从左到右哪个操作符先出现，哪个操作符就先计算，且所有的操作符都出现且立即出现在它涉及的操作数后面</li>
<li>计算算法：利用一个数栈，扫描表达式，遇到数就入栈，操作符就出栈对应个数的操作数，计算后再把结果入栈</li>
<li>获得算法：直接利用中缀表达式的计算方法，遇到数字就直接输出，但是每次可以进行计算的时候不是计算，而是输出操作符，但是不输出括号</li>
</ol>
<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><ol>
<li>队列只能在队尾插入，在队头删除、查询</li>
<li>相比于栈的后入先出<code>Last In First Out(LIFO)</code>，队列是<code>First In Last Out(FIFO)</code></li>
<li>队列需要实现的接口有：<code>size()</code>获取队列的大小 / <code>empty()</code>判空、<code>front()</code>获得队列顶元素的值、<code>dequeue()</code>删除队列首元素、<code>enqueue()</code>推入一个元素</li>
<li>队列也可以用向量或列表派生，但是一般是用列表，向量的话不管用哪端做队头哪端做队尾，改变元素个数的时候都要$O(n)$的时间</li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>数据结构 (清华大学邓俊辉)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>次短路、k短路</title>
    <url>/2019/11/09/%E6%AC%A1%E7%9F%AD%E8%B7%AF%E3%80%81k%E7%9F%AD%E8%B7%AF/</url>
    <content><![CDATA[<h1 id="次短路-纯dij"><a href="#次短路-纯dij" class="headerlink" title="次短路(纯dij)"></a>次短路(纯dij)</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, c;</span><br><span class="line">    </span><br><span class="line">    qnode(<span class="keyword">void</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        v = c = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    qnode (<span class="keyword">int</span> val, <span class="keyword">int</span> cost)</span><br><span class="line">    &#123;</span><br><span class="line">        v = val;</span><br><span class="line">        c = cost;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> qnode &amp; r) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> c &gt; r.c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, cost;</span><br><span class="line">    </span><br><span class="line">    edge (<span class="keyword">void</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        v = cost = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    edge (<span class="keyword">int</span> val, <span class="keyword">int</span> c)</span><br><span class="line">    &#123;</span><br><span class="line">        v = val;</span><br><span class="line">        cost = c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; e[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dist[MAXN][<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dij</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    clr(dist, INF);</span><br><span class="line">    priority_queue&lt;qnode&gt; que;</span><br><span class="line">    <span class="keyword">while</span> (!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        que.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    dist[start][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    que.push(qnode(start, <span class="number">0</span>));</span><br><span class="line">    qnode tmp;</span><br><span class="line">    <span class="keyword">while</span> (!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = que.top();</span><br><span class="line">        que.pop();</span><br><span class="line">        <span class="keyword">int</span> u = tmp.v;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; e[u].size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = e[u][i].v;</span><br><span class="line">            <span class="keyword">int</span> cost = e[u][i].cost + tmp.c;</span><br><span class="line">            <span class="keyword">if</span> (dist[v][<span class="number">0</span>] &gt; cost)</span><br><span class="line">            &#123;</span><br><span class="line">                swap(dist[v][<span class="number">0</span>], cost);</span><br><span class="line">                que.push(qnode(v, dist[v][<span class="number">0</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dist[v][<span class="number">0</span>] &lt; cost &amp;&amp; cost &lt; dist[v][<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[v][<span class="number">1</span>] = cost;</span><br><span class="line">                que.push(qnode(v, dist[v][<span class="number">1</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="k短路-dij-A"><a href="#k短路-dij-A" class="headerlink" title="k短路(dij + A*)"></a>k短路(dij + A*)</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> S,T,K;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,cost;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt;E[N],G[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dis[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Anode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,d,all;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Anode &amp;_)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> all==_.all?d&gt;_.d:all&gt;_.all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;Anode&gt;Star;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Astar</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dis[S]==<span class="number">0x3f3f3f3f</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(S==T)K++;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!Star.empty())Star.pop();</span><br><span class="line"></span><br><span class="line">    Star.push((Anode)&#123;S,<span class="number">0</span>,dis[S]&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!Star.empty())&#123;</span><br><span class="line">        Anode now=Star.top();Star.pop();</span><br><span class="line">        <span class="keyword">int</span> x=now.to;</span><br><span class="line">        <span class="keyword">if</span>(x==T)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">if</span>(cnt==K)<span class="keyword">return</span> now.d;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)E[x].size();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> y=E[x][i].to;</span><br><span class="line">            Star.push((Anode)&#123;y,now.d+E[x][i].cost,now.d+E[x][i].cost+dis[y]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span><span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
        <category>最短路径</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>概率DP和高斯消元</title>
    <url>/2019/11/09/%E6%A6%82%E7%8E%87DP%E5%92%8C%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83/</url>
    <content><![CDATA[<p>常见的问题就是一个点到终点的步数的期望，通常定义状态dp[i][j]表示的是从(i, j)这个点到终点的步数期望，然后有两种情况：</p>
<h1 id="满足无后效性"><a href="#满足无后效性" class="headerlink" title="满足无后效性"></a>满足无后效性</h1><p>就是每个dp值在被用之前就已经确定，就可以直接用递推，利用终点的dp值为0，反推回去，要的结果就是起点的dp值<br>例如<a href="http://acm.hdu.edu.cn/showproblem.php?pid=3853" target="_blank" rel="noopener">HDOJ-3853</a><br>由于只有右或下或原地三种情况，所以dp[i][j]只与dp[i + 1][j]和dp[i][j + 1]有关，满足无后效性。dp[i][j]就是dp[i + 1][j]和dp[i][j + 1]再走一步得到的，所以有<code>dp[i + 1][j] * p[i][j].down + dp[i][j + 1] * p[i][j].right + 2</code>。但是还没完，由于有回到原地的可能，所以以上都是在不回到原地的条件下的，所以这是一个条件概率问题，还要除以不回到原地的概率<code>1 - p[i][j].self</code><br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> ans[MAXN][MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">p</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> self, right, down;</span><br><span class="line">&#125; possi[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r, c;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;r, &amp;c))</span><br><span class="line">    &#123;</span><br><span class="line">        rep(i, <span class="number">0</span>, r)</span><br><span class="line">        &#123;</span><br><span class="line">            rep(j, <span class="number">0</span>, c)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf"</span>, &amp;possi[i][j].self, &amp;possi[i][j].right, &amp;possi[i][j].down);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        clr(ans, <span class="number">0</span>);</span><br><span class="line">        ans[r - <span class="number">1</span>][c - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = r - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = c - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i == r - <span class="number">1</span> &amp;&amp; j == c - <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(possi[i][j].self == <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ans[i][j] = (ans[i + <span class="number">1</span>][j] * possi[i][j].down + ans[i][j + <span class="number">1</span>] * possi[i][j].right + <span class="number">2</span>) / (<span class="number">1.0</span> - possi[i][j].self);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.3lf\n"</span>, ans[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="不满足无后效性"><a href="#不满足无后效性" class="headerlink" title="不满足无后效性"></a>不满足无后效性</h1><p>就是各个概率/期望之间形成一个循环，无法通过递归来求解。这时就要把每一个dp[i][j]都设置为一个未知数，对每一个dp[i][j]我们都可以得到一个线性方程，联立所有的线性方程，就可以得到一个n^2^元1次线性方程组，利用高斯消元法解线性方程组就可以得到答案<br>以下n为行数，m为列数，nun为总未知数的数量<br><strong>构造方程组</strong><br>构造方程组之前要先设元，我们设dp数组是从dp[0][0]开始的，就从上到下，从左到右，从x~0~开始设，所以dp[i][j]就被设为<code>i * m + j</code>。我们在下面的方程中移动各个元素的位置，使相同的未知数对齐，在系数矩阵中把他们的系数储存在不同行的同一列，系数矩阵的不同行储存的是不同方程的各个未知数的系数。还有一个常数数组b储存的是所有方程右边的常数<br><img src="/img/概率DP和高斯消元01.jpg" alt="20190518090332900.jpeg"><br><strong>高斯消元</strong><br>高斯消元就是要把系数矩阵化为一个上三角矩阵。高斯消元的过程中每一大步消一个元，总共要消num次元。每一大步的高斯消元又分为三小步：<br><code>稳定化</code>：这一步较为简单，要消第i个元的时候为了防止0系数被做为基础等一系列稳定性考虑，我们把所有i到num个方程中第i号元素系数最大的那个方程放到最上面，变成第i个方程。这里由于0到i - 1号方程已经消元完成，在后续消元时不需要考虑。<br><code>消元</code>：这一步中既要消a也要消b，要分为两次消。由于0到i - 1号已经消元完成，易知i到nun号所有方程的0到i - 1号元素的系数都是0，就没有必要对他们消元，也不能对他们消元。消元的目的是消除第i号元素，所以对于第j号方程的第k个元素的系数矩阵就是<code>a[j][k] -= a[k][j] / a[i][i] * a[i][k]</code>；对于第j号方程的常数矩阵<code>b[j] -= a[j][k] / a[i][i] * b[i]</code><br><code>回代</code>：消元结束后最后一个方程一定是已经解完了的，即只有一个未知数，我们就从最后一个方程往回代，消掉在它上面所有方程中对应的未知数，之后倒数第二个方程也只剩一个未知数，一直循环直到最后。有一个优化就是我们其实不需要修改系数矩阵的数值，和消元类似，我们每次只消一个元，所以就可以确定乘的倍数，而特殊的一点是每次操作都只会影响到我们要消的那个元素，所以每一步消元都不会影响到下一步消元的倍数，而可以预见的，在每一步都走完之后，系数矩阵变为一个对角阵，所以可以不修改系数矩阵。<br>注：系数矩阵和常数矩阵我们一般定义为double，为了防止误差，我们设定偏差值EPS = 1e-8</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gauss</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//稳定化</span></span><br><span class="line">		<span class="keyword">int</span> r = i;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; num; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">abs</span>(a[j][i]) &gt; <span class="built_in">abs</span>(a[r][i]))</span><br><span class="line">			&#123;</span><br><span class="line">				r = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">abs</span>(a[r][i]) &lt; EPS) <span class="comment">// 绝对值最大的a[r][i]都为0，不用再执行消元了</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(r != i) <span class="comment">// 交换行</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; num; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				swap(a[i][j], a[r][j]);</span><br><span class="line">			&#125;</span><br><span class="line">			swap(b[i], b[r]);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//消元</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; num; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">double</span> mul = a[j][i] / a[i][i];</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k = i; k &lt; num; k++)</span><br><span class="line">			&#123;</span><br><span class="line">				a[j][k] -= mul * a[i][k];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; num; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			b[j] -= a[j][i] / a[i][i] * b[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//回代</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = num - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">abs</span>(a[i][i]) &lt; EPS)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			b[j] -= a[j][i] / a[i][i] * b[i];</span><br><span class="line">		&#125;</span><br><span class="line">		b[i] /= a[i][i]; <span class="comment">// 化为单位矩阵</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2262" target="_blank" rel="noopener">HDOJ 2262</a></p>
<h1 id="特殊"><a href="#特殊" class="headerlink" title="特殊"></a>特殊</h1><p>还有一些比较特殊的，他们一开始看起来不满足无后效性，但是通过不断地迭代变成满足无后效性<br>如：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4089" target="_blank" rel="noopener">HDOJ 4088</a><br>我们定义dp[i][j]表示队伍还剩下i个人，排在第j个时发生事件的概率。<br>1) 当<code>j == 1</code>时，<code>dp[i][j] = p1 * dp[i][j] + p2 * dp[i][i] + p4</code>三项分别表示激活失败留队、失去连接出队、服务器瘫痪<br>2) 当<code>2 ≤ j ≤ k</code>时，<code>dp[i][j] = p1 * dp[i][j] + p2 * dp[i][j - 1] + p3 * dp[i - 1][j - 1] + p4</code>，分别表示第一个人激活失败留队(什么都不变)、失去连接出队(队伍人数不变，但排位前进一名)、激活成功(队伍少一人，排位前进一位)、服务器瘫痪<br>3) 当<code>j &gt; k</code>时，<code>dp[i][j] = p1 * dp[i][j] + p2 * dp[i][j - 1] + p3 * dp[i - 1][j - 1]</code></p>
<p>在计算dp[i][j]时，dp[i - 1][j - 1]都已知了，可以作为常数处理，为了简便，我们记常数为c[j]<br>令p21 = p2 / (1 - p1)<br>p31 = p3 / (1 - p1)<br>p41 = p4 / (1 - p1)<br>则原式可以化简为<br>1) 当<code>j == 1</code>时，<code>dp[i][1] = p21 * dp[i][i] + c[1]</code>········································①<br>2) 当<code>2 ≤ j ≤ k</code>时，<code>dp[i][j] = p21 * dp[i][j - 1] + c[j]</code>·······························②<br>3) 当<code>j &gt; k</code>时，<code>dp[i][j] = p21 * dp[i][j - 1] + c[j]</code>····································③</p>
<p>②和③可以合并为：当<code>j &gt; 1</code>时，<code>dp[i][j] = p21 * dp[i][j - 1] + c[j]</code>···········④<br>看起来好像dp[i][i]会影响到dp[i][j]，形成一个循环，不满足无后效性，但是我们不断用④代入①，最终会得到式子如下：<br><img src="/img/概率DP和高斯消元02.jpg" alt="20190518222358442.jpeg"><br>然后就可以每次先算出$dp[i][1]$再递推</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e3</span> + <span class="number">50</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> dp[MAXN][MAXN], c[MAXN], p[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, k;</span><br><span class="line">    <span class="keyword">double</span> p1, p2, p3, p4;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d%lf%lf%lf%lf"</span>, &amp;n, &amp;m, &amp;k, &amp;p1, &amp;p2, &amp;p3, &amp;p4))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(p4) &lt; EPS)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"0.00000\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p2 /= <span class="number">1</span> - p1;</span><br><span class="line">        p3 /= <span class="number">1</span> - p1;</span><br><span class="line">        p4 /= <span class="number">1</span> - p1;</span><br><span class="line">        p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        rep(i, <span class="number">1</span>, n + <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p[i] = p[i - <span class="number">1</span>] * p2;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">1</span>] = p4 / (<span class="number">1</span> - p2);</span><br><span class="line">        rep(i, <span class="number">2</span>, n + <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c[<span class="number">1</span>] = p4;</span><br><span class="line">            rep(j, <span class="number">1</span>, i + <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(j &lt;= k)</span><br><span class="line">                &#123;</span><br><span class="line">                    c[j] = p3 * dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + p4;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    c[j] = p3 * dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">double</span> sum = c[<span class="number">1</span>];</span><br><span class="line">            rep(j, <span class="number">2</span>, i + <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sum += c[j] * p[i + <span class="number">1</span> - j];</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i][<span class="number">1</span>] = sum / (<span class="number">1</span> - p[i]);</span><br><span class="line">            rep(j, <span class="number">2</span>, i + <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j] = dp[i][j - <span class="number">1</span>] * p2 + c[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.5lf\n"</span>, dp[n][m]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>动态规划</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>状态压缩DP</title>
    <url>/2020/07/21/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9DP/</url>
    <content><![CDATA[<h1 id="常识"><a href="#常识" class="headerlink" title="常识"></a>常识</h1><p>32位编译器下：</p>
<script type="math/tex; mode=display">\begin{matrix}1\ Byte&\cdots\cdots\cdots&8\ bit\\char / unsigned\ char&\cdots\cdots\cdots&1\ Byte\\char *&\cdots\cdots\cdots&4\ Byte\\short\ int&\cdots\cdots\cdots&2\ Byte\\bool / int / unsigned\ int&\cdots\cdots\cdots& 4\ Byte\\long\ int&\cdots\cdots\cdots&4\ Byte\\float&\cdots\cdots\cdots& 4\ Byte\\double&\cdots\cdots\cdots&8\ Byte\\long\ long&\cdots\cdots\cdots&8\ Byte\\long\ double&\cdots\cdots\cdots&12\ Byte\end{matrix}</script><h1 id="记录一个数字的两个状态"><a href="#记录一个数字的两个状态" class="headerlink" title="记录一个数字的两个状态"></a>记录一个数字的两个状态</h1><p>假如数字较多，且只关心两个状态，即可以用$0/1$表示，可以开一个$unsigned int$，$4$个字节，$32$个$bit$就可以表示$32$个数<br>修改：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[MAXN &gt;&gt; <span class="number">5</span>]; <span class="comment">// MAXN是所有的数，右移5位 = 除以32</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> status)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (status == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		arr[num &gt;&gt; <span class="number">5</span>] |= (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="number">1</span> &lt;&lt; (num &amp; <span class="number">0x1f</span>);</span><br><span class="line">		<span class="comment">// 把0调成1要用或运算，num &amp; 0x1f = num % 32，把1挪到num管的那位上</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		arr[num &gt;&gt; <span class="number">5</span>] ^= (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="number">1</span> &lt;&lt; (num &amp; <span class="number">0x1f</span>);</span><br><span class="line">		<span class="comment">// 把1调成0用异或</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>访问：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> arr[num &gt;&gt; <span class="number">5</span>] &amp; ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="number">1</span> &lt;&lt; (num &amp; <span class="number">0x1f</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="二进制状态压缩"><a href="#二进制状态压缩" class="headerlink" title="二进制状态压缩"></a>二进制状态压缩</h1><script type="math/tex; mode=display">\begin{matrix}取出整数n在二进制表示下的第k位&(n>>k)\ \&\ 1\\取出整数n在二进制表示下的第0\sim k-1位&n\ \&\ ((1 << k) - 1)\\把整数n在二进制表达下的第k位取反&n\ xor\ (1<<k)\\对整数n在二进制表达下的第k位赋值1&n\ |\ (1<<k)\\对整数n在二进制表示下的第k位赋值0&n\ \&\ (\sim(1<<k)) \end{matrix}</script><p>或使用$bitset$实现</p>
<h1 id="最短Hamilton路径"><a href="#最短Hamilton路径" class="headerlink" title="最短Hamilton路径"></a>最短Hamilton路径</h1><ol>
<li><p>$Hamilton$路径的定义是从$0$到$n-1$不重不漏地经过每一个点恰好一次</p>
</li>
<li><p>朴素的算法是枚举$n$个点遍历顺序的全排列，复杂度为$O(n\cdot n!)$</p>
</li>
<li><p>利用状态压缩可以降低复杂度到$O(n^2\cdot 2^n)$</p>
<p>定义整数$i$，在$i$的二进制表示中从右到左依次为第$0$位到第$n-1$位，若第$k$位为$1$，则表示第$k$个点已经遍历过；若第$k$位为$0$，则表示第$k$个点仍未遍历</p>
<p>定义状态$dp[i][j]$表示当前的状态整数为$i$且当前正在第$j$个点，则有要求$i$的第$j$位为$1$</p>
<p>如果记数字$i’$为另一个状态，其与$i$的差别仅仅是$i$的第$j$位为$1$，$i’$的第$j$位为$0$，那状态$dp[i][j]$就可以由$dp[i’][k]+map[k][j]$得到，其中$i’$的第$k$位为$1$</p>
<p>所以有状态转移方程</p>
<script type="math/tex; mode=display">dp[i][j] = min(dp[i\ xor\ (1<<j)][k] + map[k][j])\\\left\{\begin{matrix}0≤k≤n\\(i\ xor\ (1<<j)>>k\&1==1\\(i>>j)\&1==1\end{matrix}\right.</script><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> maxn = …;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1</span> &lt;&lt; maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hamilton</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">  dp[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt; <span class="number">1</span> &lt;&lt; n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &gt;&gt; j &amp; <span class="number">1</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ((i ^ <span class="number">1</span> &lt;&lt; j) &gt;&gt; k &amp; <span class="number">1</span>)</span><br><span class="line">          &#123;</span><br><span class="line">            ll nextState = i ^ <span class="number">1</span> &lt;&lt; j;</span><br><span class="line">            dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i ^ <span class="number">1</span> &lt;&lt; j][k] + <span class="built_in">map</span>[k][j]);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dp[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>算法</category>
        <category>动态规划</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>树状数组</title>
    <url>/2019/11/09/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h1 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h1><p><strong>主要用法</strong>：单点修改，区间求和，如果涉及到区间修改，要么转为单点修改，要么用线段树<br><strong>原理</strong>：利用二叉索引树，把区间依次分为多个子区间。</p>
<h1 id="lowbit"><a href="#lowbit" class="headerlink" title="lowbit"></a>lowbit</h1><p><strong>本质</strong>：求一个数二进制的最低位的$1$所代表的数字，如：$lowbit(6) = 2$<br><strong>求法</strong>：与其相反数做位与操作<br><strong>原理</strong>：负数在计算机内到存储方式是正数逐位取反再加一，取反之后原本末尾的$0$都变为$1$，最低位$1$变为$0$，加一之后反码末尾的$1$都变为$0$，恢复和原本的正数一样，进位进到最低位的$1$时停止进位，最低位的$1$恢复成和原本的正数一样，但更高位的数仍维持和反码一样，意味着在逐位取和的过程中更高位都会变为$0$，最低位$1$及以下的数不变，由此得到最低位$1$代表的数字<br>如：<br>原数$1001110 | 10$<br>取反$0110001 | 01$<br>加一$0110001 | 10$<br>逐位取和$10 \rightarrow 2$</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="二叉索引树"><a href="#二叉索引树" class="headerlink" title="二叉索引树"></a>二叉索引树</h1><p>二叉索引树长相如图：<img src="/img/树状数组01.png" style="zoom:67%;" /><br>1、<strong>含义</strong>：每一个黑点都代表的是一个原始数组单元内存储的信息的位置。白条加黑点代表的是该单元内存储的长条覆盖范围内的数据和。例如数组的$4$号元素，表示的是从$1$号加到$4$号的和<br>2、可以观察到树状数组和原始数组的大小一样<br>3、在树状数组中，每一个节点到包含它的父节点的方法就是加上$lowbit$，而求从$1$号到$x$号的节点和要从$x$号节点开始依次减去$lowbit$<br>单点修改代码<br>4、树状数组必须从$1$开始存储，从$0$开始的话$lowbit(0)=0$，会卡死循环</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> sum[maxn], ori[maxn];   <span class="comment">//sum为树状数组，ori为原始数据</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> val, <span class="keyword">int</span> n)</span> <span class="comment">//要把x号元素增加val，n为元素个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(x &lt; n)</span><br><span class="line">  &#123;</span><br><span class="line">    sum[x] += val;</span><br><span class="line">    x += lowbit(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>区间查询代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span>   <span class="comment">//求从1号元素到x号元素到和</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(x &gt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    ans += sum[x];</span><br><span class="line">    x -= lowbit(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="单点与区间的转换"><a href="#单点与区间的转换" class="headerlink" title="单点与区间的转换"></a>单点与区间的转换</h1><p>利用<a href="http://www.laughingtree.cn/2020/08/07/前缀和与差分/" target="_blank" rel="noopener">差分</a>，把单点的查询转换成从第一项开始的区间和查询，区间的修改转化为两个单点的修改</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> val, <span class="keyword">int</span> n)</span> <span class="comment">// 区间[l, r]内的所有数增加val</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  add(l, val, n);</span><br><span class="line">  add(r + <span class="number">1</span>, -val, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="题集"><a href="#题集" class="headerlink" title="题集"></a>题集</h1><h2 id="DFS序-树状数组"><a href="#DFS序-树状数组" class="headerlink" title="DFS序+树状数组"></a>DFS序+树状数组</h2><p><a href="https://ac.nowcoder.com/acm/contest/7199/A" target="_blank" rel="noopener">华华和月月种树</a></p>
<ol>
<li>先离线得到树所有的节点，利用<a href="http://www.laughingtree.cn/2019/11/09/搜索/" target="_blank" rel="noopener">DFS序</a>，把子树修改问题转化为区间修改问题，再利用差分，把区间修改问题转化为单点修改问题</li>
<li>操作时不管子树中的节点当时是否已经建立，但由于每个节点刚刚创建的时候权值为$0$，所以在节点创建的时候把这个新节点的权值清空即可</li>
<li>在获得了DFS序之后，相当于把点“离散”了，所有操作都是基于DFS序进行。修改时改的子树对应与连续的DFS序，相当于区间，查询的时候查的是节点的DFS序号的前缀和</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">query</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">int</span> index, a, o;</span><br><span class="line">&#125; queries[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (queries[i].o == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      update(dfsNum[queries[i].a], dfsNum[queries[i].a], - query(dfsNum[queries[i].a])); <span class="comment">// 新节点，权值清零</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (queries[i].o == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      update(dfsNum[queries[i].index], dfsNum[queries[i].index] + <span class="built_in">size</span>[queries[i].index] - <span class="number">1</span>, queries[i].a); <span class="comment">// 区间修改</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (queries[i].o == <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, query(dfsNum[queries[i].index])); <span class="comment">// 单点询问</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> m;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;queries[i].o, &amp;queries[i].index);</span><br><span class="line">        <span class="keyword">if</span> (queries[i].o == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sons[queries[i].index].pb(++cnt);</span><br><span class="line">            queries[i].a = cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (queries[i].o == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;queries[i].a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  dfs(<span class="number">0</span>); <span class="comment">// 获得DFS序</span></span><br><span class="line">  sovle(m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
        <category>区间问题</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>绪论</title>
    <url>/2019/07/15/%E7%BB%AA%E8%AE%BA/</url>
    <content><![CDATA[<h1 id="什么是算法"><a href="#什么是算法" class="headerlink" title="什么是算法"></a>什么是算法</h1><p>算法：特定计算模型下，旨在解决特定问题的指令序列</p>
<h2 id="算法的特点"><a href="#算法的特点" class="headerlink" title="算法的特点"></a>算法的特点</h2><ol>
<li>输入、输出</li>
<li>正确性</li>
<li>确定性</li>
<li>可行性</li>
<li>有穷性 <a id="more"></a>
</li>
</ol>
<h1 id="评价算法"><a href="#评价算法" class="headerlink" title="评价算法"></a>评价算法</h1><h2 id="评价内容"><a href="#评价内容" class="headerlink" title="评价内容"></a>评价内容</h2><ol>
<li>算法分析的两个主要方面：正确性和成本 (运行时间 + 所需存储空间)</li>
<li>评价度量：T<sub>A</sub>(n) = 算法A在求解某一问题所有规模为n的实例时所需要的最大成本</li>
</ol>
<h2 id="图灵机模型"><a href="#图灵机模型" class="headerlink" title="图灵机模型"></a>图灵机模型</h2><ol>
<li>要素：纸( 默认全为<code>#</code>，无限空间 )、表头、指令</li>
<li>图灵机就是表头在纸带上各个单元格中根据当前格的状态执行不同的指令</li>
<li>指令格式：<br>读写头当前状态(上一次移动的方向<code>&lt;</code> / <code>&gt;</code>q<br>读写头正对单元格的状态c<br>当前单元格修改后的状态d<br>读写头的移动方向L/R<br>读写头下一个状态(同q)p)</li>
<li>当图灵机达到特定的状态h时就停机</li>
<li>例子：二进制加一<br>&emsp;(&lt;, 1, 0, L, &lt;)     左行，1 -&gt; 0<br>&emsp;(&lt;, 0, 1, R, &gt;)     掉头，0 -&gt; 1<br>&emsp;(&lt;, #, 1, R, &gt;)     超出当前长度<br>&emsp;(&gt;, 0, 0, R, &gt;)     右行<br>&emsp;(&gt;, #, #, L, h)     复位</li>
<li>RAM模型：无限寄存器，每个寄存器内存储不同的内容，每次操作都是对不同的寄存器做一次常数时间的操作</li>
<li>算法所需的时间正比于执行的基本操作次数，所以取成本的计算方式为利用图灵机模型或RAM模型完成算法的基本操作的次数</li>
</ol>
<h1 id="渐进分析"><a href="#渐进分析" class="headerlink" title="渐进分析"></a>渐进分析</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol>
<li>渐进分析：问题规模足够大之后，计算成本如何增长，即n &gt;&gt; 2后，对于规模为n的输入的T(n)</li>
<li>渐进分析在n不够大，在局部细微的反面是不够精确的，但在n足够大的情况下，在宏观来看渐进分析是准确的。</li>
<li>渐进分析是对增长趋势的大致分析，不是对操作次数的精确分析</li>
</ol>
<h2 id="大O记号"><a href="#大O记号" class="headerlink" title="大O记号"></a>大O记号</h2><ol>
<li>定义：如果∃c，当n &gt;&gt; 2后，有T(n) &lt; c · f(n)，则记T(n) = O( f(n) )</li>
<li>大O记号的运算规则：O( c · f(n) ) = O( f(n) )      O( n<sup>a</sup> + n<sup>b</sup> ) = O( n<sup>b</sup> ) (当0 &lt; a &lt; b)</li>
<li>大O记号只有在n足够大的情况下才可以构成T(n)的上界，在小范围内T(n)可能大于f(n)</li>
<li>大Ω记号：如果∃c，当n &gt;&gt; 2后，有T(n) &gt; c · f(n)，则记<code>T(n) = Ω( f(n) )</code></li>
<li>大𝚯记号：如果∃c<sub>1</sub> &gt; c<sub>2</sub> &gt; 0，当n &gt;&gt; 2后，有c<sub>1</sub> · f(n) &gt; T(n) &gt; c<sub>2</sub> · f(n)，则记<code>T(n) = 𝚯( f(n) )</code></li>
</ol>
<h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><ol>
<li>两个主要任务：正确性(不变性、单调性)与复杂度</li>
<li>空间复杂度一般不考虑输入空间</li>
<li>就渐进复杂度的意义而言，在任一算法的任何一次运行过程中所消耗的存储空间，都不会多于其间所执行基本操作的累计次数</li>
<li>每次基本操作所涉及的存储空间都不会超过常数规模</li>
<li>时间复杂度本身就是空间复杂度的一个天然的上界</li>
</ol>
<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><ol>
<li>迭代：级数求和</li>
<li>递归：递归跟踪 + 递归方程</li>
</ol>
<h2 id="级数"><a href="#级数" class="headerlink" title="级数"></a>级数</h2><ol>
<li>算术级数：与末项平方同阶      e.g. T(n) = 1 + 2 + … + n = O(n)</li>
<li>幂方级数：比幂次高一阶         e.g. T(n) = 1<sup>2</sup> + 2<sup>2</sup> + … + n<sup>2</sup> = O(n<sup>3</sup>)</li>
<li>几何级数：与末项同阶             e.g. T(n) = a<sup>0</sup> + a<sup>1</sup> + … + a<sup>n</sup> = O(a<sup>n</sup>) </li>
<li>收敛级数：O(1)                        e.g. T(n) = 1/1/2 + 1/2/3 + … + 1/(n - 1) / n = 1 - 1 / n = O(1)</li>
<li>调和级数：𝚯(log n)                  e.g. T(n) = 1 + 1/2 + … + 1/n = 𝚯(log n)</li>
<li>对数级数：𝚯(nlog n)                e.g. T(n) = log 1 + log 2 + … + log n = log(n!) = 𝚯(nlog n)<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2></li>
<li>递归树</li>
<li>递归方程 + 递归基方程<br>e.g.T(n) = T(n - 1) + O(1)  递归方程<br>&emsp;  T(0) = O(1)  递归基方程</li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>数据结构 (清华大学邓俊辉)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>稳定婚姻匹配问题(GS算法)</title>
    <url>/2019/11/09/%E7%A8%B3%E5%AE%9A%E5%A9%9A%E5%A7%BB%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98-GS%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>有n个男生，m个女生，每个人都有自己心仪对象的榜单。若男生1和女生a在一起，男生2和女生b在一起，但男生1的榜单中b排在a前，女生b的榜单中1排在2前，则此时男生1和女生b就会私奔，1对a、2对b就会造成不稳定婚姻匹配。要求找出稳定婚姻匹配的方法</p>
<h1 id="GS算法"><a href="#GS算法" class="headerlink" title="GS算法"></a>GS算法</h1><p><strong>数据存储</strong>：两个二维数组boyExpect和girlExpect分别存储每个人对自己理想对象的排名，例如boy[1][0]表示1号男生最喜欢的女生；两个一维数组boyMatched和girlMatched分别存储男生和女生现在的对象；一个一维数组boyPos存储男生当前表白到他榜单上的第几个女生；一个栈Stack来存储现在还单身的男生；两个一维数组boyNum和girlNum存储每个男生和每个女生榜单上的人数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> boyExpect[maxn][maxn], girlExpect[maxn][maxn], boyMarched[maxn], girlMatched[maxn];</span><br><span class="line"><span class="keyword">int</span> boyPos[maxn], boyNum[maxn], girlNum[maxn];</span><br><span class="line">Stack&lt;<span class="keyword">int</span>&gt; singleBoy;</span><br></pre></td></tr></table></figure>
<p><strong>初始化</strong>：boyExpect和girlExpect、boyNum和girlNum随便初始化，boyMatched和girlMatched初始化成boy和girl里都没有的标号，表示尚未匹配，manPos初始化为0，Stack清空</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">memset</span>(boyPos, <span class="number">0</span>, <span class="keyword">sizeof</span>(boyPos));</span><br><span class="line"><span class="built_in">memset</span>(boyMatched, <span class="number">0</span>, <span class="keyword">sizeof</span>(boyMatched));</span><br><span class="line"><span class="built_in">memset</span>(girlMatched, <span class="number">0</span>, <span class="keyword">sizeof</span>(girlMatched));</span><br><span class="line"><span class="keyword">while</span>(!singleBoy.empty())</span><br><span class="line">	singleBoy.pop();</span><br></pre></td></tr></table></figure>
<p><strong>处理</strong>：(以下以男生追女生为例，编号从1开始)<br>首先对所有男生进行一次遍历，每个男生想他们最心仪的女生表白一次，若那个女生尚未被表白或当前男友不如这个男生排名高，则两人私奔，女生的前男友变回单身状态，被推了单身栈中<br>不断循环，每次男生都想没拒绝过他的最心仪女生表白，进行那个残酷的选择，直到所有男生都有女友(单身栈为空)，算法结束<br><strong>代码</strong>：<br>1、每次男生表白之后，若女生有男友，则需要把两个男生进行比较，比较就要先找到男生在女生心中的排行</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getPos</span><span class="params">(<span class="keyword">int</span> girl, <span class="keyword">int</span> boy)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; girlNum[girl]; i++)</span><br><span class="line">		<span class="keyword">if</span>(girlExpect[i] == boy)</span><br><span class="line">			<span class="keyword">return</span> i;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、男生向女生表白</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">match</span><span class="params">(<span class="keyword">int</span> boy)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> girl = boyExpect[boy][boyPos[boy]];</span><br><span class="line">	<span class="keyword">if</span>(!girlMatched[girl])   <span class="comment">//若女生尚未被表白</span></span><br><span class="line">	&#123;</span><br><span class="line">		girlMatched[girl] = boy;</span><br><span class="line">		boyMatched[boy] = girl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>    <span class="comment">//若女生已经有男友</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> oldPos = getPos(girl, girlMatched[girl]);   <span class="comment">//现男友的排名</span></span><br><span class="line">		<span class="keyword">int</span> newPos = getPos(girl, boy);    <span class="comment">//正在追求女生的男生的排名</span></span><br><span class="line">		<span class="keyword">if</span>(oldPos &lt; newPos)    <span class="comment">//若现男友的排名高(排名的数字小)</span></span><br><span class="line">		&#123;</span><br><span class="line">			boyPos[boy]++;    <span class="comment">//正在追求女生的男生的追求目标向下移一个</span></span><br><span class="line">			singleBoy.push(boy);    <span class="comment">//那个可怜的男生进入单身栈</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>     <span class="comment">//若正在追求女生的男生排名高(排名数字小)</span></span><br><span class="line">		&#123;</span><br><span class="line">			boyPos[girlMatched[girl]]++;    <span class="comment">//现男友要追求他榜单里的下一个女生</span></span><br><span class="line">			boyMatched[girlMatched[girl]] = <span class="number">0</span>;    <span class="comment">//被甩了，不再拥有女友</span></span><br><span class="line">			singleBoy.push(girlMatched[girl]);    <span class="comment">//可怜地被打入单身栈</span></span><br><span class="line">			boyMatched[boy] = girl;    <span class="comment">//人生赢家有了女友</span></span><br><span class="line">			girlMatched[girl] = boy;   <span class="comment">//女生换了一个更好的男友</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、主算法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GS</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		match(i);</span><br><span class="line">	<span class="keyword">int</span> boy;</span><br><span class="line">	<span class="keyword">while</span>(!singleBoy.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		boy = singleBoy.top();</span><br><span class="line">		singleBoy.pop();</span><br><span class="line">		match(boy);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
        <category>二分图</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>背包问题</title>
    <url>/2019/11/09/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>物品$n$种，背包最大容量为$m$，求背包能装的最大价值</p>
<h1 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h1><p>$01$背包的特点就是每一件物品要么选，要么不选<br>定义状态$dp[i][j]$表示的是只考虑前$i$个物品当最大背包容量为$j$时能装的最大价值<br>对于第$i$个物品，如果选的话就是$dp[i - 1][j - cost[i]] + weight[i]$    ，如果不选的话就是$dp[i - 1][j]$。就可以得到状态转移方程：<br />$dp[i][j] = max(dp[i - 1][j - cout[i]] + weight[i], dp[i - 1][j])$<br>此时的时间复杂度是$O(n  m)$， 空间复杂度为$O(n m)$<br>我们观察得：每次利用的$dp$数组仅仅是上一行的前半段，$dp[i][j]$要用的只有$dp[i - 1][j - cout[i]]$，再上一行，再后一个都不用。就可以想到对空间的优化——利用滚动数组，从后往前更新<br>初始化时，只需全部置为$0$即可</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> cost weight;</span><br><span class="line">&#125; things[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxm];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zeroOne</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = m; j &gt;= things[i].cost; j--) <span class="comment">//j - things[i].cost大于等于0才有意义</span></span><br><span class="line">		&#123;</span><br><span class="line">			dp[j] = max(dp[j - things[i].cost] + things[i].weight, dp[j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>进阶问题</strong>：如果背包一定要装满？$dp$数组除了$dp[0]$外都初始化为$-INF$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zeroOne</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dp, -INF, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">	dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = m; j &gt;= things[i].cost; j--) <span class="comment">//j - things[i].cost大于等于0才有意义</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (dp[j] &lt; dp[j - things[i].cost] + things[i].weight)</span><br><span class="line">			&#123;</span><br><span class="line">				dp[j] = dp[j - things[i].cost] + things[i].weight</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h1><p>完全背包的特点就是每件物品的个数都是不限量的<br>思考$01$背包为什么不从前往后遍历：假如在$dp[k]$的时候考虑过了第$i$件之后，在$dp[k + cost[i]]$还会再考虑一次第$i$件，所以从前往后遍历的问题就是重复考虑，$01$背包是不允许重复的，但完全背包的特点就是重复。所以完全背包可以从前往后遍历</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">complete</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = things[i].cost; j &lt;= m; j++) <span class="comment">//j - things[i].cost大于等于0才有意义</span></span><br><span class="line">		&#123;</span><br><span class="line">			dp[j] = max(dp[j - things[i].cost] + things[i].weight, dp[j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h1><p>多重背包就是每一种物品的个数不定，可能只有一个，也可能有多个<br><strong>朴素算法</strong>：把每一个物品都当成是一个独立的物种，变为$01$背包<br><strong>优化</strong>：朴素算法在物品个数多的时候时间复杂度太高，我们可以利用二进制压缩状态。例如第$i$种物品有$x$个，每个价值$y$。我们就可以合成$1$个价值$y$，$2$个价值$2y$，$4$个价值$4y$，我们就可以通过取不同的个数的组合，取得所有的个数可能</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> &amp; n, <span class="keyword">int</span> num, <span class="keyword">int</span> val, <span class="keyword">int</span> cost)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> bind = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		things[n].cost = bind * cost;</span><br><span class="line">		things[n].weight = bind * val;</span><br><span class="line">		n++;</span><br><span class="line">		num -= bind;</span><br><span class="line">		bind &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(num &lt; bind)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(num)</span><br><span class="line">	&#123;</span><br><span class="line">		things[n].cost = num * cost;</span><br><span class="line">		things[n].weight = num * val;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="二维价值背包"><a href="#二维价值背包" class="headerlink" title="二维价值背包"></a>二维价值背包</h1><p>每一件物品都有一个费用，两个价值，要求两个价值的最大/最小选法。二维费用的价值一般会有一个优先级别，即在价值1最大的情况下，如果价值$1$相等，就取价值$2$最大的<br>类似01背包，给$dp$数组加一维，$dp[i][j]$表示在背包容量为$i$，价值$1$为$j$时，价值$2$的值。仿照$01$背包，遍历容量时要倒序遍历，但遍历价值$1$的值的时候不必倒序</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> cost[maxn], value1[maxn], value2[maxn], dp[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twoDValue</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> value1Limit)</span> <span class="comment">//n为物品种数，m为背包容量</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = m; j &gt; <span class="number">0</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = value1[i]; k &lt; value1Limit; k++)</span><br><span class="line">			&#123;</span><br><span class="line">				dp[j][k] = max(dp[j][k], dp[j - cost[i]][k - value1[i]]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="分组背包"><a href="#分组背包" class="headerlink" title="分组背包"></a>分组背包</h1><p>分组背包的特点就是所有的物品被分入了若干组中，选的时候每个组至多只能选一件。我们可以把分组背包转化为$01$背包，每一个组变为$01$背包中的一个物品，然后尝试从中选择一件物品得到的最大价值</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">group</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> num; <span class="comment">//这个组内的物品个数</span></span><br><span class="line">	<span class="keyword">int</span> weight[MAXN], cost[MAXN];</span><br><span class="line">&#125; arr[MAXK];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">grouped</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> k)</span> <span class="comment">// k为组数，m为容量</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = m; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; arr[i].num; l++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (j &lt; arr[i].cost[l])</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				dp[j] = max(dp[j], dp[j - arr[i].cost[l]] + arr[i].weight[l]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="有依赖的背包"><a href="#有依赖的背包" class="headerlink" title="有依赖的背包"></a>有依赖的背包</h1><p>有依赖背包的特点就是有主件和附件之分，要买附件就一定要买主件，且不存在某种物品既依赖于一个物体又被另一个物体依赖。对于每一个主件及其附件的组合中，可以是只买主件、一个主件加一个附件……而且这其中只能选择一个方案加入最后的方案，就发现可以把每一个主件内的组合作为一个组，改变为上面的分组背包。但是这样每一个组内的物品种数为$2^{num} + 1$件($num$为附件个数)，导致复杂度有点高，但易知，对于同样花费的物品，我们只会选择其中价值最高的那种方案，所以我们可以对附件做一个$01$背包，再转化为分组背包求解。有时还可以优化：相同价值的物品，我们只会选择花费最小的那种，可以省下更多的空间，装更多的价值<br>模版题：<a href="https://www.luogu.org/problemnew/show/P1064" target="_blank" rel="noopener">洛谷 P1064</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mainObject</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>; <span class="comment">// 附件个数</span></span><br><span class="line">    <span class="keyword">int</span> mainWeight, mainCost; <span class="comment">// 主件的价值和花费</span></span><br><span class="line">    <span class="keyword">int</span> attachWeight[MAXM], attachCost[MAXM];</span><br><span class="line">    <span class="comment">// 先存储的是附件的价值和花费，01背包处理后变为该主件为代表的组内的选择方案</span></span><br><span class="line">    <span class="keyword">int</span> dp[MAXM]; <span class="comment">// 01背包记录</span></span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp; <span class="comment">// 记录当前价值是否已经记录过</span></span><br><span class="line">&#125; arr[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rely</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> n)</span> <span class="comment">// num为主件个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 01背包</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) <span class="comment">// 对每一个主件</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i].num == <span class="number">0</span>) <span class="comment">// 假如没有附件，该组别就只要加一个主件的方案</span></span><br><span class="line">        &#123;</span><br><span class="line">            arr[i].attachWeight[<span class="number">0</span>] = arr[i].mainWeight;</span><br><span class="line">            arr[i].attachCost[<span class="number">0</span>] = arr[i].mainCost;</span><br><span class="line">            arr[i].num++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        clr(arr[i].dp, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 对每一个附件</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr[i].num; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> cost = arr[i].attachCost[j];</span><br><span class="line">            <span class="keyword">int</span> weight = arr[i].attachWeight[j];</span><br><span class="line">            <span class="comment">// 注意！要给主件留出空间，所以k从n - 主件花费开始</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = n - arr[i].mainCost; k &gt;= cost; k--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i].dp[k] &lt; arr[i].dp[k - cost] + weight)</span><br><span class="line">                &#123;</span><br><span class="line">                    arr[i].dp[k] = arr[i].dp[k - cost] + weight;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[i].num = <span class="number">0</span>; <span class="comment">// 重置组内方案数，重新统计</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n - arr[i].mainCost; j++)</span><br><span class="line">        &#123;</span><br><span class="line">        	<span class="comment">// 如果这个价值在之前已经记录过，由于花费越往后越高，不必再记录</span></span><br><span class="line">            <span class="keyword">if</span>(arr[i].mp.count(arr[i].dp[j]))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//没记录过且价值不为0</span></span><br><span class="line">            <span class="keyword">if</span> (arr[i].dp[j])</span><br><span class="line">            &#123;</span><br><span class="line">            	<span class="comment">// 记得买附件一定要买主件，所以还要加上主件的价值和花费</span></span><br><span class="line">                arr[i].attachCost[arr[i].num] = j + arr[i].mainCost;</span><br><span class="line">                arr[i].attachWeight[arr[i].num] = arr[i].dp[j] + arr[i].mainWeight;</span><br><span class="line">                arr[i].mp[arr[i].dp[j]] = <span class="number">1</span>; <span class="comment">// 记录</span></span><br><span class="line">                arr[i].num++; <span class="comment">// 方案数加一</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最后还要几得把只买一个主件的方案加进去</span></span><br><span class="line">        arr[i].attachWeight[arr[i].num] = arr[i].mainWeight;</span><br><span class="line">        arr[i].attachCost[arr[i].num] = arr[i].mainCost;</span><br><span class="line">        arr[i].num++;</span><br><span class="line">        arr[i].mp.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 分组背包</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = n; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; arr[i].num; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &lt; arr[i].attachCost[k])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (dp[j] &lt; dp[j - arr[i].attachCost[k]] + arr[i].attachWeight[k])</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[j] = dp[j - arr[i].attachCost[k]] + arr[i].attachWeight[k];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="求方案种数"><a href="#求方案种数" class="headerlink" title="求方案种数"></a>求方案种数</h1><p>另外开一个一维数组记录方案种数，同样利用滚动数组，有$num[j] += num[j - cost[i]]$表示考虑前i件时，背包容量为j的方案种数。初始化时只需要设$num[0]= 1$表示什么都不选也有一种方法。更新方式和对应的背包更新一样，以下以$01$背包为例</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">	dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = m; j &gt;= cost[i]; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[j] += dp[j - cost[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="如果给的值的范围变了"><a href="#如果给的值的范围变了" class="headerlink" title="如果给的值的范围变了"></a>如果给的值的范围变了</h1><p>以上算法的复杂度为$O(mn)$为背包容量乘以物品种数，但如果给的背包容量可能非常大，但物品的价值范围较小的话上面的算法的时间复杂度显然不够了，这时就要换一种思路：一价值为基础来算花费。定义$dp[i][j]$表示考虑前$i$个物品时，价值为$j$时的最小重量，则有状态转移方程：$dp[i][j] = min(dp[i][j], dp[i][j - weight[i]] + cost[i])$，这样初始化的时候就要改一下了，全部初始化为$INF$，表示价值为$j$目前什么都不考虑是做不到的，或者说要无限个空物品才可以达到；但是$j = 0$是可达的，方案就是什么都不选，所以$dp[0] = 0$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// n为物品种数，m为背包容量，maxV为所有物品中的最大价值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> maxV)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	fill(dp, dp + n * maxV, INF);</span><br><span class="line">	dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = n * maxV; j &gt;= weight[i]; j--)</span><br><span class="line">		&#123;</span><br><span class="line">			dp[j] = min(dp[j], dp[j - weight[i]] + cost[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 答案就是最小花费小于背包容量中下标最大的</span></span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n * maxV; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (dp[i] &lt;= m)</span><br><span class="line">		&#123;</span><br><span class="line">			ans = i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="如果给的物品的价值不是定值"><a href="#如果给的物品的价值不是定值" class="headerlink" title="如果给的物品的价值不是定值"></a>如果给的物品的价值不是定值</h1><p>如果价值不是定值，如这题<a href="https://www.luogu.org/problemnew/show/P1417" target="_blank" rel="noopener">洛谷 P1417</a>，价值和时间有关，就不能直接套用$01$背包的模版了。$01$背包遍历物品从1到n表示的是每个物品在轮到被选择之前的所有选择都是正确的，由于$01$背包价值的固定性，并不在乎选择的顺序。但是这题不同，这题如果之前的选择不够优，就有可能在选择的时候由于暂时的dp值更大而而导致了如贪心算法一样的片面性，所以我们要保证在选择之前的正确性才可以开始按顺序选择。<br>考虑相邻两物品$x,y$。假设现在已经耗费$p$的时间，那么$x$、$y$先后做的价值：<br>$a[x] - (p + c[x]) <em> b[x] + a[y] - (p + c[x] + c[y]) </em> b[y]$(先做$x$后做$y$)<br>$a[y] - (p + c[y]) <em> b[y] + a[x] - (p + c[y] + c[x]) </em> b[x]$(先做$y$后做$x$)<br>为了让先考虑$x$再考虑$y$的顺序是最优解，我们就要让先$x$后$y$的价值更大，让$1式&gt;2式$解得：$c[x] <em> b[y] &lt; c[y] </em> b[x]$，先$i$项已经考虑过的物品就可以合成一个物品，所以我们只需要按这个顺序对物品进行排序，再按顺序求解就可以得到最优解<br>P.S. 最大值不一定出现在最大时间处</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll a, b, c;</span><br><span class="line">&#125; dish[MAXN];</span><br><span class="line">ll dp[MAXT];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(info a, info b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.c * b.b &lt; a.b * b.c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, n;</span><br><span class="line">    scTwoInt(t, n);</span><br><span class="line">    repLE(i, <span class="number">1</span>, n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;dish[i].a);</span><br><span class="line">    &#125;</span><br><span class="line">    repLE(i, <span class="number">1</span>, n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;dish[i].b);</span><br><span class="line">    &#125;</span><br><span class="line">    repLE(i, <span class="number">1</span>, n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;dish[i].c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(dish + <span class="number">1</span>, dish + <span class="number">1</span> + n, cmp);</span><br><span class="line">    repLE(i, <span class="number">1</span>, n)</span><br><span class="line">    &#123;</span><br><span class="line">        repME(j, t, dish[i].c)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[j] = max(dp[j], dp[j - dish[i].c] + dish[i].a - dish[i].b * j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    repLE(i, <span class="number">1</span>, t)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = max(ans, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="二维价值背包-1"><a href="#二维价值背包-1" class="headerlink" title="二维价值背包"></a>二维价值背包</h1><p><a href="https://vjudge.net/problem/POJ-1015" target="_blank" rel="noopener">POJ 1015</a><br>把所有人获得的得分的$d - p$作为价值$1$，$d + p$作为价值$2$，每个人的费用都是$1$。价值$1$的范围是$[-20m, 20m]$，所以为了防止$dp$数组的第二维访问错误，我们要把所有的价值$1$加$20m$。又要记录路径，我们可以利用一个二维的$vector$数组来存储路径，每对一个元素更新值的时候就更新对应的$vector$</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">200</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">20</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXSUB = <span class="number">800</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[MAXM][MAXSUB], diff[MAXN], sum[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path[MAXM][MAXSUB];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, d, p, kase = <span class="number">1</span>;;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) &amp;&amp; n &amp;&amp; m)</span><br><span class="line">    &#123;</span><br><span class="line">        rep(i, <span class="number">0</span>, m + <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            rep(j, <span class="number">0</span>, MAXSUB)</span><br><span class="line">            &#123;</span><br><span class="line">                path[i][j].<span class="built_in">clear</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        rep(i, <span class="number">0</span>, n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;p, &amp;d);</span><br><span class="line">            diff[i] = p - d;</span><br><span class="line">            sum[i] = p + d;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        clr(dp, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">int</span> add = <span class="number">20</span> * m;</span><br><span class="line">        dp[<span class="number">0</span>][add] = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = m; j &gt; <span class="number">0</span>; j--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span>  k = diff[i]; k &lt;= <span class="number">2</span> * add; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(k &lt; <span class="number">0</span> || k - diff[i] &gt; <span class="number">2</span> * add)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(dp[j - <span class="number">1</span>][k - diff[i]] == <span class="number">-1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(dp[j - <span class="number">1</span>][k - diff[i]] + sum[i] &gt; dp[j][k])</span><br><span class="line">                    &#123;</span><br><span class="line">                        dp[j][k] = dp[j - <span class="number">1</span>][k - diff[i]] + sum[i];</span><br><span class="line">                        <span class="comment">//更新路径</span></span><br><span class="line">                        path[j][k] = path[j - <span class="number">1</span>][k - diff[i]];</span><br><span class="line">                        path[j][k].push_back(i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> state = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(dp[m][add + state] == <span class="number">-1</span> &amp;&amp; dp[m][add - state] == <span class="number">-1</span>)  <span class="comment">//找出合法的最小价值1</span></span><br><span class="line">        &#123;</span><br><span class="line">            state++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">		<span class="comment">//更新成更大的那个价值2</span></span><br><span class="line">        <span class="keyword">if</span>(dp[m][add + state] &lt; dp[m][add - state])</span><br><span class="line">        &#123;</span><br><span class="line">            state = add - state;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            state = add + state;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> ansD = (dp[m][state] - (state - add)) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ansP = (dp[m][state] + (state - add)) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Jury #%d\n"</span>, kase++);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Best jury has value %d for prosecution and value %d for defence:\n"</span>, ansP, ansD);</span><br><span class="line">        rep(i, <span class="number">0</span>, path[m][state].<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" %d"</span>, path[m][state][i] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="背包的本质"><a href="#背包的本质" class="headerlink" title="背包的本质"></a>背包的本质</h1><p>背包问题的本质就是给定一系列物品，对于物品的选与不选的问题。而且物品的选择不会影响到下一个物品的选择范围(就算是分组背包和依赖背包也可以经过变化，变为不影响选择的问题，主要是要与数塔问题进行区分)<br>例题：<a href="https://www.luogu.org/problemnew/show/P1282" target="_blank" rel="noopener">洛谷 P1282</a><br>这题每一套多米诺骨牌就是一个物品，选与不选的问题就是翻与不翻的问题，这就可以转化为一个$01$背包。但是要注意的是这题翻与不翻可能会出现负价值，所以这题不能用滚动数组($01$背包能用滚动数组是因为只与两维都不大于当前的值有关，但这题负价值的存在就导致了第二维还与大于当前的值有关)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">12005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXA = <span class="number">6005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ori[MAXM][<span class="number">2</span>], dp[MAXM][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    scInt(n);</span><br><span class="line">    repLE(i, <span class="number">1</span>, n)</span><br><span class="line">    &#123;</span><br><span class="line">        scTwoInt(ori[i][<span class="number">0</span>], ori[i][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    fill(dp[<span class="number">0</span>], dp[<span class="number">0</span>] + MAXN, INF);</span><br><span class="line">    dp[<span class="number">0</span>][MAXA] = <span class="number">0</span>;</span><br><span class="line">    repLE(i, <span class="number">1</span>, n)</span><br><span class="line">    &#123;</span><br><span class="line">        repLE(j, <span class="number">-5000</span>, <span class="number">5000</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> dis = ori[i][<span class="number">0</span>] - ori[i][<span class="number">1</span>];</span><br><span class="line">            dp[i][j + MAXA] = min(dp[i - <span class="number">1</span>][j - dis + MAXA], dp[i - <span class="number">1</span>][j + dis + MAXA] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> ans = INF;</span><br><span class="line">    repLE(i, <span class="number">0</span>, <span class="number">5000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = min(dp[n][i + MAXA], dp[n][-i + MAXA]);</span><br><span class="line">        <span class="keyword">if</span>(ans &lt;= <span class="number">1e3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="二维费用背包"><a href="#二维费用背包" class="headerlink" title="二维费用背包"></a>二维费用背包</h1><p><a href="https://ac.nowcoder.com/acm/contest/911/H" target="_blank" rel="noopener">新疆省赛-H</a><br>这题对每个数只需要考虑$2$和$5$的因数个数，把个数记为费用$1$，因数$5$的个数记为费用$2$，求能得到的最多因数$2$的个数。费用$1$的界就是$k$，费用$2$的界是前$i$个数中因数$5$的个数的总和</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repLess(ele, init, lim) for(int ele = init; ele &lt; lim; ele++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repLE(ele, init, lim) for(int ele = init; ele &lt;= lim; ele++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repMore(ele, init, lim) for(int ele = init; ele &gt; lim; ele--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repME(ele, init, lim) for(int ele = init; ele &gt;= lim; ele--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> scInt(to) scanf(<span class="meta-string">"%d"</span>, &amp;to)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> scTwoInt(one, two) scanf(<span class="meta-string">"%d%d"</span>, &amp;one, &amp;two)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> scThreeInt(one, two, three) scanf(<span class="meta-string">"%d%d%d"</span>, &amp;one, &amp;two, &amp;three)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(arr, init) memset(arr, init, sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc ((o &lt;&lt; 1) + 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc (o &lt;&lt; 1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">205</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">num</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll a;</span><br><span class="line">    <span class="keyword">int</span> matchFive, matchEven;</span><br><span class="line">&#125; arr[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[MAXN][<span class="number">10000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k))</span><br><span class="line">    &#123;</span><br><span class="line">        repLess(i, <span class="number">0</span>, n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;arr[i].a);</span><br><span class="line">            arr[i].matchFive = arr[i].matchEven = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (arr[i].a % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[i].matchEven++;</span><br><span class="line">                arr[i].a /= <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (arr[i].a % <span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[i].matchFive++;</span><br><span class="line">                arr[i].a /= <span class="number">5</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        clr(dp, -INF);</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        repLess(i, <span class="number">0</span>, n)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += arr[i].matchFive;</span><br><span class="line">            repME(j, k, <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                repME(l, sum, arr[i].matchFive)</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[j][l] = max(dp[j - <span class="number">1</span>][l - arr[i].matchFive] + arr[i].matchEven, dp[j][l]);</span><br><span class="line">                    ans = max(min(l, dp[j][l]), ans);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="对每一个选择的物品还可以进行别的操作"><a href="#对每一个选择的物品还可以进行别的操作" class="headerlink" title="对每一个选择的物品还可以进行别的操作"></a>对每一个选择的物品还可以进行别的操作</h1><p>如<a href="https://www.luogu.com.cn/problem/P6433" target="_blank" rel="noopener">洛谷 P6433</a></p>
<p>如果出所有题需要的总时间小于等于$m$，则可以出完所有题，贪心地让父母拿走价值最小的题，让老师翻倍价值最大的$k$道题</p>
<p>如果出所有题需要的时间大于$m$，则至少有一道题出不完，贪心地让父母拿走出不完的题。对于所有的题就是一个背包，背包容量是$m$，每件物品的空间是$x$。贪心地知道，让老师翻倍的题必然都是出完的题 (或者所有出完的题都翻倍了还有多的老师，则多余的老师无所谓)。所以对于每一道题，都三种方案：不出这题，出这题不翻倍，出这题且翻倍</p>
<p>类似01背包，可得$dp[j][t]$表示时间$j$，翻倍$t$次的情况下的最佳答案</p>
<p>$dp[j][t] = max(dp[j][t],dp[j-x[i]][t] + a[i], dp[j-x[i]][t-1]+a[i]*2)$</p>
<p>对所有$t=0$的情况要特判一下</p>
<p>类似01背包的道理，$j$和$t$都要倒序枚举</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a, x;</span><br><span class="line"></span><br><span class="line">&#125; things[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(pack a, pack b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.a &gt; b.a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;things[i].a, &amp;things[i].x);</span><br><span class="line">        sum += things[i].x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sum &lt;= m)</span><br><span class="line">    &#123;</span><br><span class="line">        sort(things + <span class="number">1</span>, things + <span class="number">1</span> + n, cmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            things[i].a *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans += things[i].a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        clr(dp, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = m; j &gt;= things[i].x; j--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="built_in">min</span>(k, i); t &gt; <span class="number">0</span>; t--)</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[j][t] = <span class="built_in">max</span>(dp[j - things[i].x][t] + things[i].a, <span class="built_in">max</span>(dp[j][t], dp[j - things[i].x][t - <span class="number">1</span>] + things[i].a * <span class="number">2</span>));</span><br><span class="line">                    ans = <span class="built_in">max</span>(ans, dp[j][t]);</span><br><span class="line">                &#125;</span><br><span class="line">                dp[j][<span class="number">0</span>] = <span class="built_in">max</span>(dp[j - things[i].x][<span class="number">0</span>] + things[i].a, dp[j][<span class="number">0</span>]);</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, dp[j][<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>动态规划</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>线段树</title>
    <url>/2019/11/09/%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>线段树就是把一个区间(线段)二分，依据第几次分，把各个部分存储在树的不同层，直到区间内只剩下一个元素。线段树的实现是利用数组实现的完全二叉树，其所需节点个数不会超过原始数组的4倍</p>
<h1 id="完全二叉树-满树"><a href="#完全二叉树-满树" class="headerlink" title="完全二叉树(满树)"></a>完全二叉树(满树)</h1><p>1、<strong>定义</strong>：只有最后一层才有的叶子节点的二叉树<br>2、<strong>性质</strong>：完全二叉树可以用数组简单表示。若根节点是数组的0号元素，则对每一个节点k，如果有左右孩子，则左孩子是2k+1，右孩子是2k+2 = 2(k+1)<br>3、在线段树的实现中，若不幸地叶子节点出现在非最后一层，则一般会给其补两个虚拟的孩子，即直接跳过属于它的孩子的两个单元<br><img src="/img/线段树01.jpg" alt="20190328214250727.jpeg"></p>
<h1 id="线段树的建立"><a href="#线段树的建立" class="headerlink" title="线段树的建立"></a>线段树的建立</h1><p>由于二叉树天然的递归特性，故我们常常用递归来构建线段树(以下以求区间最大值为例)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> segment[maxn &lt;&lt; <span class="number">2</span>], ori[maxn]; <span class="comment">//第一个为线段树，定义大小为原始数组的4倍，第二个为原始数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span>    <span class="comment">//rt为当前建立区间的根节点，即当前区间存储的下标，l、r为区间范围</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l == r)</span><br><span class="line">	&#123;</span><br><span class="line">		segment[rt] = ori[l];</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> mid = l + ((r - l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">		build((rt &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, l, mid);    <span class="comment">//更新左子树</span></span><br><span class="line">		build((rt + <span class="number">1</span>) &lt;&lt; <span class="number">1</span>, mid + <span class="number">1</span>, r);     <span class="comment">//更新右子树</span></span><br><span class="line">		segment[rt] = <span class="built_in">max</span>(segment[(rt &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>], segment[(rt + <span class="number">1</span>) &lt;&lt; <span class="number">1</span>]);</span><br><span class="line">		<span class="comment">//根据左右子树就可以确定当前区间的值，则句根据线段树的作用不同而改变，例如求和，则改为左右子树和</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="单点修改，区间查询"><a href="#单点修改，区间查询" class="headerlink" title="单点修改，区间查询"></a>单点修改，区间查询</h1><p>单点修改则需要修改所有包含该点的区间，由于不知道该点的单点区间到底是几号，故可以从上往下，采用和建树类似的方式递归求解</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"><span class="comment">//rt为当前根节点在数组的下标，k为修改节点，l、r为当前查询节点，val为修改值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l == r)</span><br><span class="line">	&#123;</span><br><span class="line">		segment[rt] = val; <span class="comment">//单点区间直接修改值</span></span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> mid = l + ((r - l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(k &lt;= mid)   <span class="comment">//如果在左子树</span></span><br><span class="line">		update((rt &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, k, l, mid, val);</span><br><span class="line">	<span class="keyword">else</span>     <span class="comment">//如果在右子树</span></span><br><span class="line">		update((rt + <span class="number">1</span>) &lt;&lt; <span class="number">1</span>, k, mid + <span class="number">1</span>, r, val);</span><br><span class="line">	segment[rt] = <span class="built_in">max</span>(segmen[(rt &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>], segment[(rt + <span class="number">1</span>) &lt;&lt; <span class="number">1</span>]);</span><br><span class="line">	<span class="comment">//先更新子树再更新根节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>区间查询：若当前区间包含于查询区间内，则返回</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"><span class="comment">//L、R为查询节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)   <span class="comment">//当前区间包含于查询区间内</span></span><br><span class="line">		<span class="keyword">return</span> segment[rt];</span><br><span class="line">	<span class="keyword">int</span> mid = l + ((r - l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(L &lt;= mid)    <span class="comment">//如果有部分查询区间位于左子树，就递归询问左子树</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> temp = query((rt &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, l, mid, L, R);</span><br><span class="line">		ans = <span class="built_in">max</span>(ans, temp);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(R &gt; mid)   <span class="comment">//如果有部分查询区间位于右子树，就递归询问右子树</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> temp = query((rt + <span class="number">1</span>) &lt;&lt; <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R);</span><br><span class="line">		ans = <span class="built_in">max</span>(ans, temp);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="区间修改，区间查询"><a href="#区间修改，区间查询" class="headerlink" title="区间修改，区间查询"></a>区间修改，区间查询</h1><p>以下以求和为例<br>1、lazy标记：提高程序效率，更新时先不更新子树，先标记起来，说明这颗子树需要更新但还没更新，等以后访问到这颗子树时再更新。lazy标记存储的一般都是需要更新的大小</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> sum, lo, hi;   <span class="comment">//lo和hi分别表示这个节点表示的左闭右开区间</span></span><br><span class="line">	<span class="keyword">int</span> lazy = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、push down(向下更新)：只有在有lazy标记时才会更新，要向子树传值，和lazy标记</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushDown</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(segmen[rt].lazy)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> rc = (rt + <span class="number">1</span>) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> lc = (rt &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">		segment[rc].sum = segment[rt].lazy * (segment[rc].hi - segment[lc].lo);</span><br><span class="line">		segment[lc].sum = segment[rt].laze * (segment[lc].hi - segment[lc].lo);</span><br><span class="line">		<span class="comment">//注意！！！是左右子树全部更新，全段更新</span></span><br><span class="line">		segment[rc].lazy += segment[rt].lazy;</span><br><span class="line">		segment[lc].lazy += segment[rt].lazy;</span><br><span class="line">		segment[rt].lazy = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、push up(向上更新)：根据子树求根的值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	segment[rt].sum = segment[(rt &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>].sum + segment[(rt + <span class="number">1</span>) &lt;&lt; <span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、区间修改<br>当且仅当目前尝试修改区间被要求修改区间包含时才会修改，这时才会给节点增加lazy标记。则意味着所有有lazy标记的节点都是在要求修改区间内，其表示区间内的所有元素都会修改，自然其左右子树的所有元素也都要修改，这就解释了为什么在pushDown中左右子树和update中根节点修改时要乘的是节点表示的整个区间，而不是其中的某一段区间</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)   <span class="comment">//当前查询区间包含于修改区间</span></span><br><span class="line">	&#123;</span><br><span class="line">		segment[rt].sum += (segment[rt].hi - segment[rt].lo + <span class="number">1</span>) * val;  <span class="comment">//整个修改</span></span><br><span class="line">		segment[rt].lazy += val;   <span class="comment">//增加lazy标记</span></span><br><span class="line">		<span class="keyword">return</span> ;    <span class="comment">//不再继续更新</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(L &gt; r || R &lt; l)   <span class="comment">//若当前查询区间在修改区间外就不用做任何进一步操作</span></span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	pushDown(rt);    <span class="comment">//这个push down的作用是因为对同一段区间可能有多次修改</span></span><br><span class="line">	<span class="keyword">int</span> mid = l + ((r - l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(l &lt;= mid)   <span class="comment">//更新左子树</span></span><br><span class="line">		update((rt &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, l, mid, L, R, val);</span><br><span class="line">	<span class="keyword">if</span>(r &gt; mid)    <span class="comment">//更新右子树</span></span><br><span class="line">		update((rt + <span class="number">1</span>) &lt;&lt; <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R, val);</span><br><span class="line">	pushUp(rt);    <span class="comment">//回溯更新</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、区间查询</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)   <span class="comment">//如果当前区间被包含在查询区间内，显然应当全部返回</span></span><br><span class="line">		<span class="keyword">return</span> segment[rt].sum;</span><br><span class="line">	<span class="keyword">if</span>(r &lt; L || R &lt; l)     <span class="comment">//如果当前区间在查询区间外，返回0</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	pushDown(rt);</span><br><span class="line">	<span class="keyword">int</span> mid = l + ((r - l) &lt;&lt; <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> query((rt + <span class="number">1</span>) &lt;&lt; <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R) + query((rt &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, l, mid, L, R);</span><br><span class="line">	<span class="comment">//左子树的值加上右子树的值就是当前区间与查询区间交集的和</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h1><p>区间合并问题的特点就是每一次询问的问题可以分治——答案要么全部在左子区间，要么在右子区间，要么跨越左右子区间。这时候线段树就要维护这几个值：l(区间左端点)、r(区间右端点)、ans(区间内答案)、lans(从最左端开始满足要求的答案)、rans(从最右端开始满足要求的答案)。有时根据需要还得多加几个元素<br><strong>push up</strong>：<br>&emsp;ans：根据定义，很显然所选的就是左子树的答案、右子树的答案和左子树的rans+右子树的lans中的最值<br>&emsp;lans：基础就是左子树的lans，但是要注意，如果左子树的lans等于左子树表示的区间长度的话，就还要加上右子树的lans<br>&emsp;rans：与左子树同理<br>其他的根据题目的不同随机应变</p>
<h1 id="线段树基础三连"><a href="#线段树基础三连" class="headerlink" title="线段树基础三连"></a>线段树基础三连</h1><p>维护哪些值？<br>pushUp怎么写？<br>pushDown怎么写?</p>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
        <category>区间问题</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>贪心</title>
    <url>/2020/08/10/%E8%B4%AA%E5%BF%83/</url>
    <content><![CDATA[<h1 id="POJ-3614"><a href="#POJ-3614" class="headerlink" title="POJ 3614"></a>POJ 3614</h1><p><a href="https://ac.nowcoder.com/acm/contest/1003/A" target="_blank" rel="noopener">Sunscreen</a></p>
<p>目标：尽量不要浪费防晒霜<br />定义不浪费：对当前奶牛可用的任意两瓶防晒霜$x$与$y$，如果出现其后的奶牛只出现$x$、$y$都可以用，$x$、$y$都不可以用，$x$可以用，$y$不可以用三种情况之一，则选择$y$<br />可选策略</p>
<ol>
<li>按奶牛的$minSPF$升序排序，选择$SPF$最小的防晒霜，$SPF[y] &lt; SPF[x]$</li>
<li>按奶牛的$minSPF$降序排序，选择$SPF$最大的防晒霜，$SPF[x]&lt;SPF[y]$</li>
<li>按奶牛的$maxSPF$升序排序，选择$SPF$最小的防晒霜，$SPF[y]&lt;SPF[x]$</li>
<li>按奶牛的$maxSPF$降序排序，选择$SPF$最大的防晒霜，$SPF[x]&lt;SPF[y]$</li>
</ol>
<p><img src="\img\贪心01.jpeg" width="25%"><br />可知，策略$2$是正确的</p>
<h1 id="POJ-1328"><a href="#POJ-1328" class="headerlink" title="POJ 1328"></a>POJ 1328</h1><p>首先可以根据每一个建筑的坐标计算出可以覆盖该建筑的雷达的可选区间，在该区间内的雷达才可以覆盖该建筑<br />目标：让每一个雷达覆盖尽量多的区间<br />可选策略</p>
<ol>
<li>把区间按左端点升序排列，雷达尽量放在右端点</li>
<li>把区间按右端点降序排列，雷达尽量放在左端点<br>两种策略都可以</li>
</ol>
<h1 id="洛谷P1645"><a href="#洛谷P1645" class="headerlink" title="洛谷P1645"></a>洛谷P1645</h1><p><a href="https://www.luogu.com.cn/problem/P1645" target="_blank" rel="noopener">序列</a></p>
<p>目标：让每一个数都在尽量多的区间内<br />定义尽量多的区间内：对当前区间可选的两个数$x$，$y$，如果$x$所在的区间多于$y$，则选择$x$<br />可选策略</p>
<ol>
<li>把区间按左端点升序排列，数从最右边开始取</li>
<li>把区间按右端点升序排列，数从最右边开始取<br><img src="\img\贪心02.jpeg" width="12.5%"><br>可知第$2$种策略是正确的</li>
</ol>
<h1 id="NOIP2012-CH0701-微扰法"><a href="#NOIP2012-CH0701-微扰法" class="headerlink" title="NOIP2012 / CH0701 (微扰法)"></a>NOIP2012 / CH0701 (微扰法)</h1><p><a href="https://ac.nowcoder.com/acm/contest/1003/D" target="_blank" rel="noopener">国王的游戏</a></p>
<p>每个人的金币$coins[i] = \displaystyle\frac{\prod^{i-1}_{x=0}minister[x].left}{minister[i].right}$<br />目标：$max(coins)$尽量小<br />只要把最优排列任意交换两个大臣都会使得答案变动，所有的交换都可以通过多次交换两个相邻大臣来实现，所以我们只需要考虑交换两个相邻大臣</p>
<ol>
<li>交换前还是最优排列时，两个大臣的金币数分别时$\displaystyle\frac{\prod^{i-1}_{x=0}minister[x].left}{minister[i].right}$与$\displaystyle\frac{\prod^{i}_{x=0}minister[x].left}{minister[i+1].right}$</li>
<li>交换后他们的金币变为$\displaystyle\frac{\prod^{i-1}_{x=0}minister[x].left}{minister[i+1].right}$与$\displaystyle\frac{minister[i+1].left\times\prod^{i-1}_{x=0}minister[x].left}{minister[i].right}$</li>
<li>他们都有公因子$\displaystyle\prod^{i-1}_{x=0}minister[x].left$，所以最终是比较<br />$max(\displaystyle\frac{1}{minister[i].right},\frac{minister[i].left}{minister[i+1].right})$与$max(\displaystyle\frac{1}{minister[i+1].right},\frac{minister[i+1].left}{minster[i].right})$</li>
<li>同乘$minister[i].right\times minister[i+1].right$即为比较<br />$max(minister[i+1].right,minister[i].left\times minister[i].right)$与$max(minister[i].right, minister[i+1].left\times minister[i+1].right)$</li>
<li>又$minister[i+1].right≤minister[i+1].right\times minister[i+1].left$，$minister[i].right≤minister[i].right\times minister[i].left$</li>
<li>所以要使得交换前更优，则有$minister[i].left\times minister[i].right≤minister[i+1].left\times minister[i+1].right$<br>所以贪心策略为按大臣左右手数字乘积升序排列</li>
</ol>
<h1 id="POJ-2054"><a href="#POJ-2054" class="headerlink" title="POJ 2054"></a>POJ 2054</h1><p>由于有时间因子的存在，权值最大的点必须尽快上色，所以可以得出贪心的核心——权值最大的点必然会在其父节点被上色之后立即上色<br />对于树中的任意三个点$x$、$y$、$z$，假设$x$和$y$已经绑定，则只有三种染色顺序$x\rightarrow y\rightarrow z$和$z\rightarrow x\rightarrow y$<br />他们的代价分别是$x+2y+3z$和$z+2x+3y$<br />选择第一种染色顺序当且仅当$x+2y+3z≤z+2x+3y$，即$z≥\displaystyle\frac{x+y}2$<br />所以我们可以把$x$和$y$缩成一个点，并把他们权值的平均值作为新点的权值。每次都把单独权值最大的点和它的父节点缩成一个点，直到整个树都是一个点<br />这题有两种实现方法</p>
<ol>
<li>在初始的时候就先叠加一个基础倍率，即把每个点的权值加一遍。<br />后来每次缩点的时候，都加上子节点的权值与父节点中包含点的个数的乘积，意义是父节点染色后第几个染色，补上与父节点的倍率差<br />再把权值叠加到父节点上，之后享受和父节点一样的倍率<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1005</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> factor, father, t;</span><br><span class="line">    <span class="keyword">double</span> weight;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp; b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> weight &lt; b.weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; arr[MAXN];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, r;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;r))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!n || !r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            scan(arr[i].factor);</span><br><span class="line">            arr[i].weight = arr[i].factor;</span><br><span class="line">            arr[i].t = <span class="number">1</span>;</span><br><span class="line">            ans += arr[i].factor;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> v1, v2;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;v1, &amp;v2);</span><br><span class="line">            arr[v2].father = v1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> maxWeightIndex = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">double</span> maxWeight = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j].weight &gt; maxWeight &amp;&amp; j != r)</span><br><span class="line">                &#123;</span><br><span class="line">                    maxWeightIndex = j;</span><br><span class="line">                    maxWeight = arr[j].weight;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[maxWeightIndex].weight = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> father = arr[maxWeightIndex].father;</span><br><span class="line">            ans += arr[maxWeightIndex].factor * arr[father].t;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j].father == maxWeightIndex)</span><br><span class="line">                &#123;</span><br><span class="line">                    arr[j].father = father;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[father].factor += arr[maxWeightIndex].factor;</span><br><span class="line">            arr[father].t += arr[maxWeightIndex].t;</span><br><span class="line">            arr[father].weight = <span class="number">1.0</span> * arr[father].factor / arr[father].t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>还可以利用并查集和堆优化<br />堆存储所有待缩的点，根节点没有父节点，不用缩到另一个点上，所以不用入堆<br />利用并查集记录当前点缩到哪个点上<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1005</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> factor, father, t, index;</span><br><span class="line">    <span class="keyword">double</span> weight;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp; b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> weight &lt; b.weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; arr[MAXN];</span><br><span class="line"> </span><br><span class="line">priority_queue&lt;node&gt; pq;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> us[MAXN];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (us[x] != x)</span><br><span class="line">    &#123;</span><br><span class="line">        us[x] = <span class="built_in">find</span>(us[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> us[x];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> xx = <span class="built_in">find</span>(x);</span><br><span class="line">    <span class="keyword">int</span> yy = <span class="built_in">find</span>(y);</span><br><span class="line">    us[yy] = xx;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, r;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;r))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!n || !r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            scan(arr[i].factor);</span><br><span class="line">            arr[i].weight = arr[i].factor;</span><br><span class="line">            arr[i].t = <span class="number">1</span>;</span><br><span class="line">            arr[i].index = i;</span><br><span class="line">            ans += arr[i].factor;</span><br><span class="line">            us[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> v1, v2;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;v1, &amp;v2);</span><br><span class="line">            arr[v2].father = v1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != r)</span><br><span class="line">            &#123;</span><br><span class="line">                pq.push(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!pq.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> maxWeightIndex = pq.top().index;</span><br><span class="line">            pq.pop();</span><br><span class="line">            <span class="keyword">if</span> (arr[maxWeightIndex].weight == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[maxWeightIndex].weight = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> father = <span class="built_in">find</span>(arr[maxWeightIndex].father);</span><br><span class="line">            ans += arr[maxWeightIndex].factor * arr[father].t;</span><br><span class="line">            unite(father, maxWeightIndex);</span><br><span class="line">            arr[father].factor += arr[maxWeightIndex].factor;</span><br><span class="line">            arr[father].t += arr[maxWeightIndex].t;</span><br><span class="line">            arr[father].weight = <span class="number">1.0</span> * arr[father].factor / arr[father].t;</span><br><span class="line">            <span class="keyword">if</span> (father != r)</span><br><span class="line">            &#123;</span><br><span class="line">                pq.push(arr[father]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>算法</category>
        <category>基本算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>词典</title>
    <url>/2019/07/31/%E8%AF%8D%E5%85%B8/</url>
    <content><![CDATA[<h1 id="散列"><a href="#散列" class="headerlink" title="散列"></a>散列</h1><ol>
<li>散列就是为了把一个值可以迅速地和另一个值对应起来</li>
<li>蛮力算法一般非常容易实现，但其包含了所有的可能情况，需要的空间极大</li>
<li>组成：桶(数组)+散列函数</li>
<li>桶：直接存放或间接指向一个词条，所有的痛组成了一个桶数组，或称作散列表</li>
<li>对于桶数组的大小，要求：<code>待存放元素个数N &lt; 桶数组大小M &lt;&lt; 直接蛮力散列的空间大小R</code></li>
<li>散列函数：就是从关键码到桶地址的一个映射<a id="more"></a></li>
<li>每次把关键码通过散列函数得到一个桶地址，利用桶地址在散列表中得到对应的桶，在桶中找到对应的信息</li>
<li>装填因子：$λ = \frac{N}{M}$</li>
<li>冲突：由于散列表对蛮力算法的空间进行了压缩，其可以存储的空间远远少于所有情况，所以可能会出现两个不同的关键码通过散列函数得到同一个桶地址</li>
<li>冲突不可避免，但是可以通过合理设计散列函数来降低冲突的概率</li>
</ol>
<h1 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h1><p>散列函数也可以看成是从某一可能情况到桶地址的映射，不可能是单射，但是往往可以得到近似的单射</p>
<h2 id="散列函数的评价标准与设计原则"><a href="#散列函数的评价标准与设计原则" class="headerlink" title="散列函数的评价标准与设计原则"></a>散列函数的评价标准与设计原则</h2><ol>
<li>确定：每一个关键码都只有唯一的桶地址与之对应</li>
<li>快速</li>
<li>满射：尽可能充分地覆盖整个散列空间</li>
<li>均匀：关键码映射到散列表各个位置的概率尽可能接近，减少聚集现象</li>
</ol>
<h2 id="除余法"><a href="#除余法" class="headerlink" title="除余法"></a>除余法</h2><ol>
<li>散列函数：$hash(key) = key  \%   M$ (M为散列表长)</li>
<li>这种散列法就在于如何选取M</li>
<li>若选取$M=2^k$，则$key \%  M = key \&amp;  (M - 1)$，相当于取key的最后k位二进制，不够均匀</li>
<li>取M为素数时桶地址的分布最为充分，均匀</li>
<li>均匀性的判断：现实中的数据常常都具有局部性，典型的就是按照某一个步长单调变化，记步长为S，如果不断按此步长变化下去，最终可以遍历整个散列表，就说这个散列是均匀的</li>
<li>为了实现最大的均匀性，要使最多可能的步长S与散列表长M之间满足$gcd(S, M) = 1$，而最满足这个要求的就是素数</li>
<li>缺陷<br /><br>不动点：无论表长M取何值，都有$hash(0) = 0$，不太满足均等概率映射的原则<br /><br>零阶均匀：相邻的关键码的散列地址必相邻</li>
</ol>
<h2 id="MAD法"><a href="#MAD法" class="headerlink" title="MAD法"></a>MAD法</h2><ol>
<li>取M为素数，a &gt; 0, b &gt; 0, $a  \%   M ≠ 0$</li>
<li>$hash(key) = (a * key + b)  \%   M$</li>
<li>b：偏移量，消除不动点<br /><br>a：步长，使相邻关键码间隔为a</li>
</ol>
<h2 id="其余散列函数"><a href="#其余散列函数" class="headerlink" title="其余散列函数"></a>其余散列函数</h2><ol>
<li>数字分析：取关键码中的某几位构成桶地址。但是除了被选中的几位，其余数位对桶地址毫无贡献，不太均匀</li>
<li>平方取中法：取关键码的平方值中居中的几位。取居中的几位为了使每位都可以参与到桶地址的计算中(平方值的左右两端的数值由较少的位数决定)</li>
<li>折叠法：把关键码分割成等宽的若干段，取每一段代表值做一系列特定的运算</li>
</ol>
<h2 id="字符串转化为整数"><a href="#字符串转化为整数" class="headerlink" title="字符串转化为整数"></a>字符串转化为整数</h2><ol>
<li>以上所说的桶地址的计算都是基于整数的，但不是所有的关键码都是整数，这时就要先把关键码转化为整数，再进行散列</li>
<li>字符、浮点数都较容易转化为整数，但是字符串不容易</li>
</ol>
<h3 id="多项式法"><a href="#多项式法" class="headerlink" title="多项式法"></a>多项式法</h3><ol>
<li>事先确定一个数a，对于字符串$x_0x_1…x_n-1$，则<br>$hashValue = x_0a^n-1 + x_1a^n-2+…+x_n-2a+x_n-1$</li>
<li>等价计算：$(…( (x_0a + x_1) <em> a + x_2) </em> a + … x_n-2) * a + x_n-1$</li>
<li>近似计算：h初值为0，不断迭代，每次都先把h的前5位和后27位交换(<code>h = (h &lt;&lt; 5) | (h &lt;&lt; 27)</code>)，再给h加上$x_i$</li>
</ol>
<h1 id="排解冲突"><a href="#排解冲突" class="headerlink" title="排解冲突"></a>排解冲突</h1><p>冲突是不可能避免的，只能减少，降低概率。当发生冲突时，就需要一个预案来排解</p>
<h2 id="多槽位"><a href="#多槽位" class="headerlink" title="多槽位"></a>多槽位</h2><ol>
<li>将冲突节点都存储在同一个桶中，每次定位了一个桶后，还要进行一次搜索</li>
<li>只要桶中的槽位控制得当，还是可以在$O(1)$的时间内找到</li>
<li>但极端情况下，无论痛里有多少个槽位，都可能不够</li>
</ol>
<h2 id="独立链"><a href="#独立链" class="headerlink" title="独立链"></a>独立链</h2><ol>
<li>相比于多槽位方法在桶中存储数组，独立链在桶中存储一个列表</li>
<li>每多一个冲突节点，就在桶中的那个列表的后端加上一个元素</li>
<li>优点：无需为每个桶预备位置，任意多次的冲突都可以解决</li>
<li>缺点：节点动态申请费时。更重要的，空间未必连续，系统缓存几乎失效，当节点多时，要涉及到大量的I/O操作。这些也是列表的缺点</li>
</ol>
<h2 id="开放定址"><a href="#开放定址" class="headerlink" title="开放定址"></a>开放定址</h2><ol>
<li>封闭定址：每一个桶中能且只能存放和这个桶地址相关联的词条</li>
<li>开放定址：每一个桶对每一个节点都开放，如果一个节点的桶已经被占用了，就找过一个桶来存放这个词条</li>
<li>查找：从原配的节点开始，按照分配时的规则一路查找下去，直到找到目标词条表示成功或找到一个空桶表示失败</li>
</ol>
<h3 id="线性试探"><a href="#线性试探" class="headerlink" title="线性试探"></a>线性试探</h3><ol>
<li>每次有冲突的时候，就从原配的桶开始一个一个往下试探，直到找到第一个空桶，并把词条存入该桶中</li>
<li>缺点：常常会为了解决之前的冲突而制造了之后原本不必要的冲突</li>
<li>词条删除：利用懒惰删除法，给词条一个标记。在查找时，该标记表示越过当前节点向后继续；在插入时，表示这是一个空桶，可以插入</li>
</ol>
<h3 id="平方试探"><a href="#平方试探" class="headerlink" title="平方试探"></a>平方试探</h3><ol>
<li>如果有冲突<br /><br>&emsp;&emsp;第一次：$原配桶地址+1^2$<br><br /><br>&emsp;&emsp;第二次：$原配桶地址+2^2$<br /><br>&emsp;&emsp;第k次：$原配桶地址+k^2$<br><br /><br>直到找到一个空桶</li>
<li>缺陷1：冲突次数越多，存储内存增加约剧烈，若设计外存，I/O还是会激增<br /><br>这个解决方案比独立链法更好：设一个缓存页面1kB，一个指针4B，一个页面可以存储<br />256个指针，要连续冲突16次才会导致一次I/O</li>
<li>缺陷2：就算有空桶，也不一定可以找出来<br /><br>若取M为合数：$n^2  \%   M$的可能取值必然少于$⎡M/2⎤$种<br /><br>若取M为素数：$n^2  \%   M$的可能取值恰好有$⎡M/2⎤$种</li>
<li>定理：若M为素数，且装填因子λ ≤ 50%，就一定可以找到空桶<br /><br>证明：假设$∃0 ≤ a &lt; b &lt; ⎡\frac{M}{2}⎤$，使得第a次试探和第b次试探冲突<br /><br>则有$a^2$与$b^2$属于M的某一同余类，即<br /><br>$a^2  \%   M ≡ b^2  \%   M$<br /><br>$(b^2 - a^2)  \%   M = [(b + a) * (b - a)]  \%   M ≡ 0$<br /><br>$b - a ≡ 0 或 (b - a)  \%   M ≡ 0 或 (b + a)  \%   M ≡ 0$<br /><br>但是a和b不相等所以第一条不可能实现；M是素数，且$0 &lt; b - a &lt; b + a &lt; M$，所以后两条不可能实现。上述条件一个都不可能实现，所以假设不成立，得证</li>
</ol>
<h3 id="双向平方试探"><a href="#双向平方试探" class="headerlink" title="双向平方试探"></a>双向平方试探</h3><ol>
<li>如果有冲突，<br /><br>&emsp;&emsp;第一次：$原配桶地址+1^2$<br /><br>&emsp;&emsp;第二次：$原配桶地址 - 1^2$<br /><br>&emsp;&emsp;第三次：$原配桶地址+2^2$<br /><br>&emsp;&emsp;第四次：$原配桶地址 - 2^2$<br /><br>&emsp;&emsp;第2k - 1次：$原配桶地址+k^2$<br /><br>&emsp;&emsp;第2k次：$原配桶地址 - k^2$<br /><br>直到找到一个空桶</li>
<li>正向和逆向的子查找链各自包含$⎡\frac{M}{2}⎤$个互异的桶</li>
<li>素数一共可以分为两类，一类模4余3(4k+3)，一类模4余1(4k+1)</li>
<li>双平方定理：任一素数p可表示为一对整数的平方和，当且仅当$p  \%   4 = 1$</li>
<li><code>平方和的积</code>可以表示为<code>积和的平方+积差的平方</code>：$(u^2 + v^2)(s^2 + t^2) = (us + vt)^2 + (ut - vs)^2$<br /><br>由此可以得：如果一对自然数都分别可以表示为另一对数的平方和，那他们的乘积也可以表示为一对数的平方和</li>
<li>任一自然数n可表示为一对整数的平方和，当且仅当在其素分解中，模4余3(形如$M=4k+3$)的每一个素因子均为偶数次方</li>
<li>若取素数$M = 4k+3$，则可以得到正向和逆向子链除起点外没有别的公共元素，即可以取遍整个散列表<br /><br>证明：假设即使取了素数$M=4k+3$，∃a、b，使得第a次正试探和第b次负试探冲突<br /><br>因为正向查找链和逆向查找链各自只包含$⎡\frac{M}{2}⎤$个元素，所以得到a、b的范围：<br /><br>$0 &lt; a, b &lt; ⎡\frac{M}{2}⎤$<br /><br>因为有冲突，所以$-b^2$与$a^2$是M的同余类<br /><br>即$-b^2  \%   M = a^2  \%   M$<br /><br>$(a^2 + b^2)  \%   M = 0$<br /><br>记$a^2 + b^2 = n$，则M是n的素因子之一，又n可以分解为一对数的平方和，由<code>6</code>可知，M的幂次必为偶数次<br /><br>即$n = a^2 + b^2 ≥ M^2$<br /><br>但是由上面a、b的范围可知，$a^2 + b^2 ≤ \frac{M^2}{2}$，所以假设不成立，命题得证</li>
</ol>
<h1 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h1><ol>
<li>设待排序的数是n个属于$[0, M)$的数</li>
<li>过程：建立一个长度为M的散列表，表内的值初始化为0， 利用蛮力算法，直接把待排序对象对应的桶内的值加一，然后遍历一遍所有桶，把对应于这个桶的待排序对象的值输出桶内的值那么多次</li>
<li>时间复杂度是$O(n + M)$，在待排序的对象范围有限的情况下是$O(n)$</li>
</ol>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>数据结构 (清华大学邓俊辉)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>高效休息法</title>
    <url>/2020/08/03/%E9%AB%98%E6%95%88%E4%BC%91%E6%81%AF%E6%B3%95/</url>
    <content><![CDATA[<p><img src="\img\高效休息法.png" alt=""></p>
]]></content>
      <categories>
        <category>看过的书</category>
      </categories>
      <tags>
        <tag>书</tag>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title>高精度模版</title>
    <url>/2020/08/11/%E9%AB%98%E7%B2%BE%E5%BA%A6%E6%A8%A1%E7%89%88/</url>
    <content><![CDATA[<h1 id="高精度与低精度的乘除"><a href="#高精度与低精度的乘除" class="headerlink" title="高精度与低精度的乘除"></a>高精度与低精度的乘除</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">highAccuracy</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[MAXN];</span><br><span class="line"></span><br><span class="line">    highAccuracy()</span><br><span class="line">    &#123;</span><br><span class="line">        clr(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highAccuracy(<span class="keyword">int</span> x)</span><br><span class="line">    &#123;</span><br><span class="line">        clr(data);</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x)</span><br><span class="line">        &#123;</span><br><span class="line">            data[++len] = x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        data[<span class="number">0</span>] = len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highAccuracy <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">int</span> &amp; b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        highAccuracy ans = highAccuracy();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= data[<span class="number">0</span>]; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans.data[i] = data[i] * b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= data[<span class="number">0</span>] || ans.data[i]; len = ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            ans.data[i + <span class="number">1</span>] += ans.data[i] / <span class="number">10</span>;</span><br><span class="line">            ans.data[i] = ans.data[i] % <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans.data[<span class="number">0</span>] = ans.data[len] ? len : len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highAccuracy <span class="keyword">operator</span> / (<span class="keyword">const</span> <span class="keyword">int</span> &amp; b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        highAccuracy ans = highAccuracy();</span><br><span class="line">        <span class="keyword">int</span> rest = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = data[<span class="number">0</span>]; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            rest = rest * <span class="number">10</span> + data[i];</span><br><span class="line">            ans.data[i] = rest / b;</span><br><span class="line">            rest = rest % b;</span><br><span class="line">        &#125;</span><br><span class="line">        ans.data[<span class="number">0</span>] = data[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">while</span> (ans.data[ans.data[<span class="number">0</span>]] == <span class="number">0</span> &amp;&amp; ans.data[<span class="number">0</span>] &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans.data[<span class="number">0</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> highAccuracy &amp; b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (data[<span class="number">0</span>] == b.data[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = data[<span class="number">0</span>]; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (data[i] != b.data[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> data[i] &lt; b.data[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> data[<span class="number">0</span>] &lt; b.data[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = data[<span class="number">0</span>]; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, data[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>基本算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>高级搜索树</title>
    <url>/2019/07/29/%E9%AB%98%E7%BA%A7%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
    <content><![CDATA[<h1 id="伸展树"><a href="#伸展树" class="headerlink" title="伸展树"></a>伸展树</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ol>
<li>局部性：刚被访问的数据，极有可能很快地再次被访问，下一个将要访问的节点既有可能就在刚刚被访问过节点的附近</li>
<li>原则：节点v一旦被访问，随即转移至树根</li>
</ol>
<h2 id="逐层伸展"><a href="#逐层伸展" class="headerlink" title="逐层伸展"></a>逐层伸展</h2><p>若v是左孩子，绕其父节点做一次zig旋转；若v是右孩子，绕其父节点做一次zag旋转<br><a id="more"></a></p>
<h2 id="双层伸展"><a href="#双层伸展" class="headerlink" title="双层伸展"></a>双层伸展</h2><ol>
<li><p>逐层伸展的缺陷：当原本的树是一个单方向的单链(例如每个孩子都是父节点的左孩子)，如果每次都查找当前树型的叶子节点，n次之后就会恢复最初的树型</p>
</li>
<li><p>考虑当前节点v、v的父节点p、p的父节点g</p>
</li>
<li><p>zig-zag / zag-zig：这于AVL树的双旋、逐层伸展是等效的<br>p是g的右孩子，v是p的左孩子：先绕p做一次zig，再绕g做一次zag<br>p是g的左孩子，v是p的右孩子：先绕p做一次zag，再绕g做一次zig</p>
</li>
<li><p>zig-zig / zag-zag：先越级<br>p是g的左孩子，v是p的左孩子：先绕g做一次zig，再绕p做一次zig<br>p是g的右孩子，v是p的右孩子：先绕g做一次zag，再绕p做一次zag<br> <img src="/img/高级搜索树01.png" alt="双层伸展zig-zig"></p>
<p>这样伸展之后可以折叠路径，一旦访问一个坏节点，之后的访问路径将减半<br><img src="/img/高级搜索树02.png" alt="双层伸展实例"><br>在最后一次调整时，v可能不存在祖父节点，这是就做一次逐层伸展</p>
</li>
</ol>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>类似3+4重构，直接拼装</p>
<h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><ol>
<li>如果成功就把成功节点伸展至根</li>
<li>如果失败就把最后访问的有效节点伸展至根</li>
</ol>
<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><ol>
<li>先调用一次搜索待插入节点v，查找失败返回的最后访问的有效节点为t</li>
<li>若v &gt; t，把t作为v的左子树，t的右子树作为v的右子树</li>
<li>若v &lt; t，把t作为v的右子树，把t的左子树作为v的左子树<br>   <img src="/img/高级搜索树03.png" alt="Screen Shot 2019-07-29 at 5.39.26 PM.png"></li>
</ol>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ol>
<li>查找之后待删除节点就是根节点</li>
<li>可以把右子树的最小者和t交换，再删除t(与BST中的删除类似)</li>
</ol>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol>
<li>局部性强，缓存命中率高</li>
<li>不能保证单次最坏情况的出现</li>
<li>不适用于对效率敏感的场合</li>
</ol>
<h1 id="B-树"><a href="#B-树" class="headerlink" title="B-树"></a>B-树</h1><h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><ol>
<li>磁盘容量越大，读取速度越慢，且其中的差异极大</li>
<li>为了平衡读取速度和存储容量，采用多级存储，越高级的容量越小，速度越快，存的东西越常用</li>
<li>从同一级磁盘中读取任意多的内容使用的时间都是一样多的</li>
<li>B-树是为了更快速地利用I/O，只载入必需的节点，尽可能减少I/O次数</li>
</ol>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ol>
<li>B-树是一种平衡的多路搜索树，其本质是将多个二叉搜索树的节点适当合并之后得到超级节点<br><img src="/img/高级搜索树04.png" width="60%"></li>
<li>B-树的每一层(相同深度)的节点都存储在不同级的存储空间中，每一次向下一级存储内存中读取的单位是一个超级节点，就可以大大减少读取的次数</li>
<li>m阶B-树就是m路平衡搜索树</li>
<li>外部节点：叶节点的不存在的孩子节点</li>
<li>B-树的外部节点的深度统一相等，所有叶节点的深度统一相等</li>
<li>B-树的高度h = 外部节点的深度</li>
<li>对于m阶B-树，每个超级节点内含有不超过<code>m - 1</code>个关键码，不超过<code>m</code>个分支，树根节点的关键码至少<code>2</code>个分支，其余超级节点的分支数不能少于<code>⎡m/2⎤</code></li>
<li>也可以把m阶B-树称为<code>(⎡m/2⎤, m)-树</code></li>
</ol>
<h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><p>超级节点：要存储其父节点的引用，还要存储其中存储的所有关键码，以及其所有孩子节点。孩子节点总是比关键码多一个<br>为了于I/O操作的延迟相匹配，每一个超级节点的大小应该尽可能地设计为与一次I/O读取的磁盘页面大小相匹配，页面大小一般为4kB，关键码数目一般设计为几百</p>
<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><ol>
<li>在根部超级节点开始，对每个指向节点都对内部的目标关键码做一次查找，成功就返回，否则就沿着失败处(不大于关键码的最大者)的引用向下读取一个节点到内存中，并指向新读入的节点，重复上述过程</li>
<li>若失败在第r个节点，则r是不大于关键码的最大者，就沿着引用r+1读取。若目标关键码小于最小者，r = -1</li>
<li>B-树的查找所花费的时间大部分都在I/O上，所以没有必要对在内存中的快速访问的关键码查找做二分优化，实际上在上面所说的几百个关键码中的二分查找不但起不到正优化的效果，还是负优化</li>
</ol>
<h4 id="最大树高"><a href="#最大树高" class="headerlink" title="最大树高"></a>最大树高</h4><ol>
<li>含N个关键码的m阶B-树的树高要最大，内部节点应该尽可能地少</li>
<li>各层节点的关键码数<br>树根层(第0层)：n<sub>0</sub> = 1<br>第一层：n<sub>1</sub> = 2<br>第二层：n<sub>2</sub> = 2 <em> ⎡m/2⎤<br>……<br>第k层：n<sub>k</sub> = 2 </em> ⎡m/2⎤<sup>k-1</sup></li>
<li>外部节点所在层(第h层)：n<sub>h</sub> = N + 1 = 2 * ⎡m/2⎤<sup>h-1</sup></li>
<li>h = 1 + log<sub>⎡m/2⎤</sub>⎣(N+1)/2⎦ = O(log<sub>m</sub>N)</li>
<li>相比于BBST：log<sub>⎡m/2⎤</sub>⎣N/2⎦ / log<sub>2</sub>N = 1 / (log<sub>2</sub>m - 1)，若取m = 256，则树高(I/O次数)约降低1/7</li>
</ol>
<h4 id="最小树高"><a href="#最小树高" class="headerlink" title="最小树高"></a>最小树高</h4><ol>
<li><p>内部节点关键码应尽可能地多</p>
</li>
<li><p>各层节点的关键码数<br>树根层(第0层)：n<sub>0</sub> = 1</p>
<p>第一层：n<sub>1</sub> = m<br>第二层：n<sub>2</sub> = m<sup>2</sup><br>……<br>第k层：n<sub>k</sub> = m<sup>k</sup></p>
</li>
<li><p>考虑外部节点所在层(第h层)：n<sub>h</sub> = N + 1 = m<sup>h</sup></p>
</li>
<li><p>h = log<sub>m</sub>(N+1) = O(log<sub>m</sub>N)</p>
</li>
<li><p>相比于BBST：(log<sub>m</sub>N - 1) / log<sub>2</sub>N = log<sub>m</sub>2 - log<sub>N</sub>2 ≈ 1 / log<sub>2</sub>m，若取m = 256，树高(I/O次数)约降低至1/8</p>
</li>
</ol>
<h3 id="插入-1"><a href="#插入-1" class="headerlink" title="插入"></a>插入</h3><h4 id="过程-1"><a href="#过程-1" class="headerlink" title="过程"></a>过程</h4><ol>
<li>先用B-树的搜索算法查找目标关键码，结果必为失败，将返回最后访问的那个叶子节点</li>
<li>对叶子节点的内部关键码向量调用查找算法，返回不大于目标关键码的最大关键码位置r</li>
<li>把目标关键码插入在r+1的位置，并在孩子节点的r+2(为了好看，实际可在任意位置插入，因为都是空节点)的位置插入一个空指针</li>
<li>注意避免节点发生上溢，即内部关键码的数量多于m - 1</li>
</ol>
<h4 id="上溢处理"><a href="#上溢处理" class="headerlink" title="上溢处理"></a>上溢处理</h4><ol>
<li>如果发生上溢，上溢节点必然含有m各关键码，m + 1个分支</li>
<li>取中位数<code>s =⎣m / 2⎦</code>，以关键码k<sub>s</sub>为界，划分为k<sub>0</sub>, …, k<sub>s-1</sub> + k<sub>s</sub> + k<sub>s+1</sub>…k<sub>m-1</sub>三部分</li>
<li>关键码k<sub>s</sub>上升一层，并分裂原关键码向量的左半个和右半个分别作为左右孩子</li>
<li>父节点可能会在操作之后发现上溢，要循环处理知道一个父节点不发生上溢</li>
<li>若根节点发生上溢，就把提升的关键码k<sub>s</sub>作为新的根节点，B-树高度加一(唯一情况)。此时根节点的关键码数为1个<br><img src="/img/高级搜索树05.png" width="20%"></li>
</ol>
<h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><h4 id="过程-2"><a href="#过程-2" class="headerlink" title="过程"></a>过程</h4><ol>
<li>先用B-树的查找算法查找目标节点</li>
<li>如果目标节点是叶子节点就直接删除</li>
<li>如果目标节点不是叶子节点，就先和右后代的最小者交换(先取child[r+1]，再一直取child[0])</li>
<li>还要删除孩子节点(和插入一样，为了好看就删除r+1，可以随便删除一个)</li>
<li>如果当前节点的内部节点个数可能少于⎡m/2⎤ - 1，还要下溢处理</li>
</ol>
<h4 id="下溢处理"><a href="#下溢处理" class="headerlink" title="下溢处理"></a>下溢处理</h4><ol>
<li>发生下溢时，当前节点的内部节点数一定是⎡m/2⎤ - 2</li>
<li>若当前节点有一个左兄弟，且左兄弟的内部节点数至少是⎡m/2⎤，则父节点中的那个介于当前节点和其左兄弟之间的关键码移至当前节点的最前面，把左兄弟的最后一个关键码移至父节点刚刚被移至当前节点的关键码处顶替它留下的空缺<br><img src="/img/高级搜索树06.png" width="30%"></li>
<li>若当前节点有一个右兄弟，且右兄弟的内部节点数至少是⎡m/2⎤</li>
<li>若不满足以上条件，易知当前节点至少有一个兄弟，且该兄弟至多⎡m/2⎤ - 1个节点。所以我们可以把父节点中的那个介于当前节点和其某一个兄弟之间的关键码下移一层，把当前节点和其某一个兄弟节点连接起来，作为一个新的超级节点连接至父节点对应处，父节点也要删去一个对应的节点。注意，在这时父节点也有下溢的可能，重复处理<br> <img src="/img/高级搜索树07.png" width="30%"></li>
<li>根节点没有下溢的可能，但当根节点只有唯一一个关键码而且根节点的两个孩子节点中有一个发生了下溢的时候根节点就会下移一层，和其两个孩子节点一起成为一个新的根节点。这是B-树高度降低的唯一途径</li>
</ol>
<h1 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h1><h2 id="可持续化结构"><a href="#可持续化结构" class="headerlink" title="可持续化结构"></a>可持续化结构</h2><ol>
<li>持久性结构：支持对历史版本的搜索</li>
<li>蛮力实现：每个版本独立保存，若有h个版本，树高为n，单次操作时间O(log h + log n)，空间复杂度/时间复杂度下限O(h * n)</li>
<li>要求：相邻两个版本的树形结构的拓扑差异，不能超过O(1)，即相邻两个版本的树形拓扑结构都能在常数次旋转之后互相转换得到</li>
</ol>
<h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>为了便于实现理解，给每个节点增设一定量的外部节点，使每个节点都有两个孩子节点</p>
<h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ol>
<li>树根节点必为黑色</li>
<li>外部节点均为黑色</li>
<li>若一个节点为红色，则只能有黑孩子，即红节点的孩子、父节点必为黑色</li>
<li>外部节点到根的途中经过的黑节点数目相等</li>
</ol>
<p>为了体现规则4，在画图的时候常常将红节点提升至与其黑父亲同级，形成一个<code>(2, 4)-树</code></p>
<h3 id="红黑树是BBST"><a href="#红黑树是BBST" class="headerlink" title="红黑树是BBST"></a>红黑树是BBST</h3><ol>
<li>黑高度H：一条路上黑节点的个数</li>
<li>由规则4，黑高度H与节点个数n之间有H ≤ log<sub>⎡4/2⎤</sub>(n+1)/2 + 1 = log<sub>2</sub>(n + 1)</li>
<li>又一条路径上不可能出现连续的红节点，所以红节点的个数至多和黑节点一样多</li>
<li>所以树高h ≤ 2H</li>
<li>得log<sub>2</sub>(n+1) ≤ h ≤ 2 * log<sub>2</sub>(n + 1)</li>
<li>所以红黑树是一颗BBST树</li>
</ol>
<h2 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h2><h3 id="高度更新"><a href="#高度更新" class="headerlink" title="高度更新"></a>高度更新</h3><p>在红黑树中，高度计算的是黑高度<br>高度更新还是取两个后代中黑高度的最大者加一</p>
<h3 id="插入-2"><a href="#插入-2" class="headerlink" title="插入"></a>插入</h3><h4 id="过程-3"><a href="#过程-3" class="headerlink" title="过程"></a>过程</h4><ol>
<li>先调用查找操作，不妨设不存在目标节点，则会返回一个最后访问的有效叶节点</li>
<li>把待插入节点先设为红节点，以最后的有效叶节点为父节点插入树中</li>
<li>检测是否会因为新插入的节点出现双红缺陷(红节点的父节点还是红节点)</li>
</ol>
<h4 id="双红修正"><a href="#双红修正" class="headerlink" title="双红修正"></a>双红修正</h4><p>记待插入节点为x，x的父节点为p，p的父节点为g，g除p外还有一个孩子节点为u</p>
<p>则双红缺陷就是x为红，而p也为红，g必然为黑，但u的颜色不确定</p>
<h5 id="若u为黑色"><a href="#若u为黑色" class="headerlink" title="若u为黑色"></a>若u为黑色</h5><ol>
<li>将非法的关键码做一个提升变换，变成了一个超级节点内的三个节点为</li>
<li>这时的问题只是有两个相邻的红节点，只需在B-树的层面上把节点染为两边红中间黑的模式。为了保证规则4，不能染成两边黑中间红的模式</li>
<li>B-树中的染色对应在红黑树中就是黑节点就是红节点的父节点，所以要先利用旋转操作(可能一次，可能两次)，把中序遍历序列中间的那个节点转到父节点的位置，然后把它的两个孩子染红，它自己染黑。利用3+4重构很容易实现</li>
</ol>
<h5 id="若u为红色"><a href="#若u为红色" class="headerlink" title="若u为红色"></a>若u为红色</h5><ol>
<li>将非法的关键码做一个提升变换，变成一个含有x、p、g、u四个节点的超级节点</li>
<li>这时的问题就是B-树的节点上溢，只需将超级节点分裂</li>
<li>分裂时由于g的等级最高，所以被提升的节点只能是g，将超级节点分裂为p+x和u</li>
<li>B-树中节点的提升对应着红黑树中节点的颜色变为黑色，分裂后的两个子节点对应着红黑树中子节点中更高的节点变为黑色</li>
<li>即只需将g染为红色，p和u染为黑色</li>
<li>这时由于g被染红，但g的父节点颜色不定，所以双红缺陷可能会向上传播<br><img src="/img/高级搜索树08.png" width="50%"></li>
</ol>
<p>容易发现，在调整过程中重染色可能多达O(log n)次，但是结构调整至多一次，符合可持续化结构的要求</p>
<h3 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h3><h4 id="过程-4"><a href="#过程-4" class="headerlink" title="过程"></a>过程</h4><ol>
<li>先直接调用常规BST中的删除算法删除对应节点</li>
<li>这时被删除节点x会被它的某一个后代r替代</li>
<li>检测替代x的r会不会违反规则3或是规则4</li>
<li>若x和r之间至少有一个是红节点，只需要把r染为黑色即可。但是x和r可能都是黑色的，这就导致了黑高度发生了变化</li>
</ol>
<h4 id="双黑修正"><a href="#双黑修正" class="headerlink" title="双黑修正"></a>双黑修正</h4><p>在节点x被删除之前，x所在的分支至少有两个黑节点x、r，所以x兄弟节点s必存在且黑高度至少为2<br>记x和s的父节点为p，则易知p和s的颜色都不确定</p>
<h5 id="s为黑且至少有一个红孩子t"><a href="#s为黑且至少有一个红孩子t" class="headerlink" title="s为黑且至少有一个红孩子t"></a>s为黑且至少有一个红孩子t</h5><ol>
<li>在x删除之前，做一次提升变换，则x是一个只含有一个节点的超级节点，而x的兄弟s则是一个有两个节点的超级节点。在x被删除后，r替换前，节点发生下溢，这时只需要把p移给x曾经在的节点，s和t中靠后的那个继承p的颜色和位置</li>
<li>对应于红黑树，因为p是独立的节点，所以要把p变为黑色，而s和t中靠后的那个继承p原本的颜色，剩下的那个变为独立的节点，也要染为黑色</li>
<li>针对节点t、s、p做一次3+4重构，使其中序遍历序列中中间的那个节点作为父节点且继承p的颜色，而中序遍历中两边的两个节点作为中间节点的孩子，都是黑色<br><img src="/img/高级搜索树09.png" width="40%"></li>
</ol>
<h5 id="s为黑且s的两个孩子都是黑孩子且p为红"><a href="#s为黑且s的两个孩子都是黑孩子且p为红" class="headerlink" title="s为黑且s的两个孩子都是黑孩子且p为红"></a>s为黑且s的两个孩子都是黑孩子且p为红</h5><ol>
<li>提升变换后，x还是下溢，但是它的兄弟s不具有提供给他一个节点的能力，所以从父超级节点中把p拉出来和s组成一个超级节点，消除下溢</li>
<li>对应于红黑树，就是p从上层回到下层，由红变黑，而s和一个黑节点共用一个超级节点，所以s变为红，其余的不变</li>
<li>由于p原为红节点，所以p原本所在的超级节点一定还有一个黑节点，所以在p被拿下去之后还不至于下溢<br><img src="/img/高级搜索树10.png" width="40%"></li>
</ol>
<h5 id="s为黑且s的两个孩子都是黑孩子且p为黑"><a href="#s为黑且s的两个孩子都是黑孩子且p为黑" class="headerlink" title="s为黑且s的两个孩子都是黑孩子且p为黑"></a>s为黑且s的两个孩子都是黑孩子且p为黑</h5><p>和p为红色的情况一样操作，但是上溢会向上传播，要向上处理<br><img src="/img/高级搜索树11.png" width="40%"></p>
<h5 id="s为红色"><a href="#s为红色" class="headerlink" title="s为红色"></a>s为红色</h5><p>记s靠x方向的那个孩子为s’，且s为红色，所以s’必为黑色</p>
<ol>
<li>将局部按p做一次旋转，把s转为父节点，p为s的孩子节点，同时交换s和p的颜色</li>
<li>这时p的孩子是s’和x/r，x/r就有了一个黑兄弟，就转换为之前的几种情况，且x/r的父节点p是红色，所以只能是前两种情况<br><img src="/img/高级搜索树12.png" width="40%"></li>
</ol>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ol>
<li>第一种情况是O(1)次重构</li>
<li>第二种情况是O(1)次重染色</li>
<li>第三种情况是O(log n)次重染色</li>
<li>第四种情况要么是O(2)次重构，要么是O(1)次重构+O(1)次重染色</li>
</ol>
<p>综上，红黑树满足可持续化结构的要求</p>
]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>数据结构 (清华大学邓俊辉)</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>05. How To Talk About Various Practitioners</title>
    <url>/2020/08/17/05-How-To-Talk-About-Various-Practitioners/</url>
    <content><![CDATA[<style>
table th:first-of-type {
    width: 150px;
}
</style>

<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">psychologist</td>
</tr>
<tr>
<td style="text-align:center">psychoanalyst</td>
</tr>
<tr>
<td style="text-align:center">orthodontist</td>
</tr>
<tr>
<td style="text-align:center">optometrist</td>
</tr>
<tr>
<td style="text-align:center">optician</td>
</tr>
<tr>
<td style="text-align:center">osteopath</td>
</tr>
<tr>
<td style="text-align:center">chiropractor</td>
</tr>
<tr>
<td style="text-align:center">podiatrist</td>
</tr>
<tr>
<td style="text-align:center">graphologist</td>
</tr>
<tr>
<td style="text-align:center">gerontologist</td>
</tr>
</tbody>
</table>
</div>
<h1 id="Greek-psyche-spirit-soul-or-mind"><a href="#Greek-psyche-spirit-soul-or-mind" class="headerlink" title="Greek psyche: spirit, soul, or mind"></a>Greek psyche: spirit, soul, or mind</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">psychologist</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">psychology</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">psychological</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">psyche</td>
<td style="text-align:center"><strong><em>the spiritual or non-physical aspect of one’s existence</em></strong></td>
</tr>
<tr>
<td style="text-align:center">psychic</td>
<td style="text-align:center"><strong><em>an adjective that refers to phenomena or qualities that cannot be explained in purely physical terms</em></strong><br /><strong><em>People may be called psychic if they seem to possess some mysterious aptitudes that cannot be accounted for logically</em></strong><br /><strong><em>A person’s disturbance is psychic if it is emotional or mental, rather than physical</em></strong></td>
</tr>
<tr>
<td style="text-align:center">psychopathic</td>
<td style="text-align:center"><code>Greek pathos: suffering or disease</code><br /><strong><em>An adjective describes someone suffering from a severe mental or emotional disorder</em></strong></td>
</tr>
<tr>
<td style="text-align:center">psychopathy</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">psychopath</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sociopath</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">psychosomatic</td>
<td style="text-align:center"><code>Greek soma: body</code><br /><strong><em>an adjective that delineates the powerful influence that the mind, especially the unconscious, has on bodily diseases.</em></strong></td>
</tr>
<tr>
<td style="text-align:center">psychoanalysis</td>
<td style="text-align:center"><strong><em>a measure to treat psychosomatic. To work out the psychic cause.</em></strong></td>
</tr>
<tr>
<td style="text-align:center">psychoanalyst</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">psychoanalytical</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">psychogenic</td>
<td style="text-align:center"><strong><em>having a psychological origin or cause rather than a physical one</em></strong><br /><code>Greek genesis: birth or origin</code></td>
</tr>
<tr>
<td style="text-align:center">psychotherapy</td>
<td style="text-align:center"><strong><em>the indicated treatment for psychogenic disorders, or for any personality disturbances.</em></strong></td>
</tr>
<tr>
<td style="text-align:center">psychotherapist<br />therapist</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">psychotherapeutic</td>
<td style="text-align:center">&emsp;</td>
</tr>
</tbody>
</table>
</div>
<h1 id="odontos-tooth"><a href="#odontos-tooth" class="headerlink" title="odontos: tooth"></a>odontos: tooth</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">orthodontist</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">pedodontist</td>
<td style="text-align:center"><strong><em>A pedodontist specializes in the care of children’s teeth</em></strong><br /><code>paidos: child</code></td>
</tr>
<tr>
<td style="text-align:center">pedodontia</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">pedodontic</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">periodontist</td>
<td style="text-align:center"><strong><em>a gum specialist</em></strong><br /><code>peri-: around, surrounding</code></td>
</tr>
<tr>
<td style="text-align:center">periodontics</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">periodontic</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">endodontist</td>
<td style="text-align:center"><strong><em>An endodontist specializes in work on the pulp of the tooth and in root-canal therapy</em></strong><br /><code>Greek endon: inner, within</code></td>
</tr>
<tr>
<td style="text-align:center">endodontics</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">endodontic</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">exodontist</td>
<td style="text-align:center"><strong><em>An exodontist specializes in the extraction of teeth.</em></strong> <br /><code>ex-: out</code></td>
</tr>
<tr>
<td style="text-align:center">exodontics</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">exodontic</td>
<td style="text-align:center">&emsp;</td>
</tr>
</tbody>
</table>
</div>
<h1 id="metron-measurement"><a href="#metron-measurement" class="headerlink" title="metron: measurement"></a>metron: measurement</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">optometrist</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">thermometer</td>
<td style="text-align:center"><strong><em>an instrument to measure heat</em></strong><br /><code>Greek therme: heat</code></td>
</tr>
<tr>
<td style="text-align:center">barometer</td>
<td style="text-align:center"><strong><em>an instrument to measure atmospheric pressure</em></strong><br /><code>Greek baros: weight</code></td>
</tr>
<tr>
<td style="text-align:center">sphygmomanometer</td>
<td style="text-align:center"><strong><em>a device for measuring blood pressure</em></strong><br /><code>Greek sphygmos: pulse</code></td>
</tr>
<tr>
<td style="text-align:center">metric</td>
<td style="text-align:center"><strong><em>a decimal system of weights and measures</em></strong></td>
</tr>
</tbody>
</table>
</div>
<h1 id="Greek-osteon-bone"><a href="#Greek-osteon-bone" class="headerlink" title="Greek osteon: bone"></a>Greek osteon: bone</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">osteopath</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">osteopathy</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">osteopathic</td>
<td style="text-align:center">An osteopathic physician is not a bone specialist</td>
</tr>
</tbody>
</table>
</div>
<h1 id="Greek-pous-podos-foot"><a href="#Greek-pous-podos-foot" class="headerlink" title="Greek pous, podos: foot"></a>Greek pous, podos: foot</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">podiatrist</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">podiatry</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">podiatric</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">octopus</td>
<td style="text-align:center"><strong><em>the eight-armed (eight-footed) sea creature</em></strong><br /><code>Greek okto: eight</code></td>
</tr>
<tr>
<td style="text-align:center">platypus</td>
<td style="text-align:center"><code>Greek platys: broad, flat</code></td>
</tr>
<tr>
<td style="text-align:center">podium</td>
<td style="text-align:center"><strong><em>a speaker’s platform</em></strong><br /><code>-ium: place, where</code><br />a place for the feet</td>
</tr>
<tr>
<td style="text-align:center">tripod</td>
<td style="text-align:center"><strong><em>a three-leged stand for a camera or other device</em></strong><br /><code>tri-: three</code></td>
</tr>
</tbody>
</table>
</div>
<h1 id="Greek-cheir-chiro-hand"><a href="#Greek-cheir-chiro-hand" class="headerlink" title="Greek cheir, chiro-: hand"></a>Greek cheir, chiro-: hand</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">chiropodist</td>
<td style="text-align:center"><strong><em>earlier title for podiatrist</em></strong></td>
</tr>
<tr>
<td style="text-align:center">chiropody</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">chiropractor</td>
<td style="text-align:center"><strong><em>Chiropractors heal with their hands</em></strong></td>
</tr>
<tr>
<td style="text-align:center">chiropractic</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">chirography</td>
<td style="text-align:center"><code>graph: writing</code></td>
</tr>
<tr>
<td style="text-align:center">chirographer</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">chirographic</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">chiromancy</td>
<td style="text-align:center"><code>Greek -mancy: foretelling or prediction</code></td>
</tr>
<tr>
<td style="text-align:center">chiromancer</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">chiromantic</td>
<td style="text-align:center">&emsp;</td>
</tr>
</tbody>
</table>
</div>
<h1 id="Greek-graphein-to-write"><a href="#Greek-graphein-to-write" class="headerlink" title="Greek graphein: to write"></a>Greek graphein: to write</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">graphologist</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">graphology</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">graphological</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">calligraphy</td>
<td style="text-align:center"><strong><em>decorative handwriting</em></strong><br /><code>Greek kallos: beauty</code></td>
</tr>
<tr>
<td style="text-align:center">calligrapher</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">calligraphic</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">callipygian</td>
<td style="text-align:center"><strong><em>an adjective describing a shapely or attractive rear end, or a person so endowed</em></strong><br /><code>pyge: buttocks</code></td>
</tr>
<tr>
<td style="text-align:center">cacography</td>
<td style="text-align:center"><strong><em>bad handwriting</em></strong><br /><code>Greek kakos: bad, harsh</code></td>
</tr>
<tr>
<td style="text-align:center">cacographer</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">cacographic</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">cardiograph</td>
<td style="text-align:center"><strong><em>heart writer</em></strong></td>
</tr>
<tr>
<td style="text-align:center">photograph</td>
<td style="text-align:center"><strong><em>written by light</em></strong><br /><code>Greek photos: light</code></td>
</tr>
<tr>
<td style="text-align:center">phonograph</td>
<td style="text-align:center"><strong><em>sound writer</em></strong><br /><code>Greek phone: sound</code></td>
</tr>
<tr>
<td style="text-align:center">telegraph</td>
<td style="text-align:center"><strong><em>distance writer</em></strong><br /><code>Greek tele: distance</code></td>
</tr>
<tr>
<td style="text-align:center">biography</td>
<td style="text-align:center"><strong>life writer</strong><br /><code>Greek bios: life</code></td>
</tr>
</tbody>
</table>
</div>
<h1 id="Greek-geras-geron-old-age"><a href="#Greek-geras-geron-old-age" class="headerlink" title="Greek geras, geron: old age"></a>Greek geras, geron: old age</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">geriatrician</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gerontologist</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gerontology</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gerontological</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">senile</td>
<td style="text-align:center"><code>Latin senex: old</code><br /><strong><em>showing signs of the physical or mental deterioration that generally marks very old age</em></strong></td>
</tr>
<tr>
<td style="text-align:center">senility</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">senescent</td>
<td style="text-align:center"><strong><em>aging, growing old</em></strong><br /><code>-escent: forming adjectives denoting a developing state or action</code></td>
</tr>
<tr>
<td style="text-align:center">adolescent</td>
<td style="text-align:center"><strong><em>growing into an adult</em></strong></td>
</tr>
<tr>
<td style="text-align:center">convalescent</td>
<td style="text-align:center"><strong><em>growing healthy again</em></strong></td>
</tr>
<tr>
<td style="text-align:center">obsolescent</td>
<td style="text-align:center"><strong><em>growing or becoming obsolete</em></strong></td>
</tr>
<tr>
<td style="text-align:center">senior</td>
<td style="text-align:center"><strong><em>older</em></strong></td>
</tr>
<tr>
<td style="text-align:center">seniority</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">senate</td>
<td style="text-align:center"><strong><em>originally a council of older, and presumably wiser, citizens</em></strong></td>
</tr>
</tbody>
</table>
</div>
<h1 id="Amateur-Etymologist"><a href="#Amateur-Etymologist" class="headerlink" title="Amateur Etymologist"></a>Amateur Etymologist</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">octogenarian</td>
<td style="text-align:center"><code>Latin octoginta: eighty</code><br /><strong><em>80 - 89 years old</em></strong></td>
</tr>
<tr>
<td style="text-align:center">quinquagenarian</td>
<td style="text-align:center"><strong><em>50 - 59 years old</em></strong><br /><code>Latin quinquaginta: fifty</code></td>
</tr>
<tr>
<td style="text-align:center">sexagenarian</td>
<td style="text-align:center"><strong><em>60 - 69 years old</em></strong><br /><code>Latin sexaginta: sixty</code></td>
</tr>
<tr>
<td style="text-align:center">septuagenarian</td>
<td style="text-align:center"><strong><em>70 - 79 years old</em></strong><br /><code>Latin septuaginta: seventy</code></td>
</tr>
<tr>
<td style="text-align:center">nonagenarian</td>
<td style="text-align:center"><strong><em>90 - 99 years old</em></strong><br /><code>Latin noaginta: ninty</code></td>
</tr>
<tr>
<td style="text-align:center">centenarian</td>
<td style="text-align:center"><strong><em>100 and over year old</em></strong><br /><code>Latin centrum: one hundred</code></td>
</tr>
<tr>
<td style="text-align:center">cacophony</td>
<td style="text-align:center"><strong><em>harsh unpleasant sound</em></strong></td>
</tr>
<tr>
<td style="text-align:center">cacopygian</td>
<td style="text-align:center"><strong><em>un ugly, unshapely rear end</em></strong></td>
</tr>
<tr>
<td style="text-align:center">telescope</td>
<td style="text-align:center"><strong><em>a field glass that permits the viewer to see great distances</em></strong><br /><code>skopein: to view</code></td>
</tr>
<tr>
<td style="text-align:center">telebinoculars</td>
<td style="text-align:center"><strong><em>the instrument that transmits sound over a distance</em></strong></td>
</tr>
<tr>
<td style="text-align:center">television</td>
<td style="text-align:center"><strong><em>to view happenings that occur a great distance away</em></strong></td>
</tr>
</tbody>
</table>
</div>
<h1 id="intermission"><a href="#intermission" class="headerlink" title="intermission"></a>intermission</h1><ol>
<li>Ain’t I? is not such a good choice for that it fills a long-felt need. However am I not? is too prissy, amn’t I? if ridiculous, and aren’t I is unpopular. Avoid to make a choice between them. </li>
<li>When read a mathematical equation, if you think of “five-and-five” as a single concept, say is. If you see “five and five” as a plural idea, say are. Both of them are acceptable. </li>
<li>Mad can be used to describe someone is angry. Nevertheless, mad is a lot stronger than angry, though not quite as violent as furious and enraged. </li>
<li>When “every one “ is the subject, use is instead of are. </li>
<li>Prophecy means prediciton, a noun. While Prophesy means predict, a verb. There is also a distinction in the pronunciation of these two words. </li>
<li>Leave is a popular substitute for let. Let means allow; leave means depart. </li>
<li>An infinitive can be split by inserting another word between the to and the verb: to eventually succeed. Splitting infinitive is not only legal but also ethical, moral, and somtimes more effective. </li>
</ol>
]]></content>
      <categories>
        <category>英语</category>
        <category>Word Power Made Easy</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>单词</tag>
      </tags>
  </entry>
  <entry>
    <title>解读基金：我的投资观与实践</title>
    <url>/2020/08/24/%E8%A7%A3%E8%AF%BB%E5%9F%BA%E9%87%91%EF%BC%9A%E6%88%91%E7%9A%84%E6%8A%95%E8%B5%84%E8%A7%82%E4%B8%8E%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p><img src="\img\解读基金：我的投资观与实践.png" alt=""></p>
]]></content>
      <categories>
        <category>看过的书</category>
      </categories>
      <tags>
        <tag>书</tag>
        <tag>投资</tag>
      </tags>
  </entry>
  <entry>
    <title>栈</title>
    <url>/2020/08/26/%E6%A0%88/</url>
    <content><![CDATA[<h1 id="对顶栈"><a href="#对顶栈" class="headerlink" title="对顶栈"></a>对顶栈</h1><p><a href="https://ac.nowcoder.com/acm/contest/1005/A" target="_blank" rel="noopener">HDOJ 4699</a></p>
<ol>
<li>建立两个栈，一个栈存储光标前的内容，一个栈存储光标后的内容。两个数组$sum[i]$表示前$i$项前缀和，$ans[i]$表示前$i$项中最大前缀和</li>
<li>左移操作就把左栈栈顶的元素弹入右栈中</li>
<li>右移操作就把右栈栈顶的元素弹入左栈中，同时更新$sum$和$ans$</li>
<li>删除操作就把左栈栈顶元素弹出</li>
<li>插入操作就把插入的元素压入左栈中，同时更新$sum$和$ans$</li>
<li>询问操作就直接返回$ans[k]$</li>
<li>更新$sum$时直接叠加之前栈内已有所有元素和$sum[l.size()-1]$，即为$sum[l.size()]=sum[l.size()-1]+l.top()$</li>
<li>更新$ans$时取之前的最大前缀和和当前前缀和最大值，即为$ans[l.size()]=max(ans[l.size()-1],sum[l.size()])$</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> sum[MAXN], ans[MAXN];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; l, r;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum[l.<span class="built_in">size</span>()] = sum[l.<span class="built_in">size</span>() - <span class="number">1</span>] + l.top();</span><br><span class="line">    ans[l.<span class="built_in">size</span>()] = <span class="built_in">max</span>(ans[l.<span class="built_in">size</span>() - <span class="number">1</span>], sum[l.<span class="built_in">size</span>()]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">    <span class="keyword">char</span> op;</span><br><span class="line">    <span class="keyword">int</span> inp;</span><br><span class="line">    ans[<span class="number">0</span>] = -INF;</span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;op);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">'L'</span> &amp;&amp; !l.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            r.push(l.top());</span><br><span class="line">            l.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">'R'</span> &amp;&amp; !r.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            l.push(r.top());</span><br><span class="line">            r.pop();</span><br><span class="line">            update();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">'I'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;inp);</span><br><span class="line">            l.push(inp);</span><br><span class="line">            update();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">'Q'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;inp);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[inp]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">'D'</span> &amp;&amp; !l.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            l.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h1><p><a href="https://ac.nowcoder.com/acm/contest/1005/C" target="_blank" rel="noopener">POJ 2559</a></p>
<ol>
<li>我们对每一个矩形都考虑以这个矩形的高为高的最大面积</li>
<li>如果这个矩形比它前一个矩形矮，则以它前面的矩阵为基准的所有情况都不会包括这个矩形及其以后的矩形，可以直接计算出前面的结果。而且在以这个矩形为基准的时候，前面的矩形比它高的部分对答案都没有贡献，所以可以把前面的矩形都替换成和它一样高的矩形</li>
<li>如果这个矩形比它前一个矩形高，则以它为基准的答案可能包含后面的矩形，要继续遍历</li>
<li>由此，我们设计一个栈：<br />如果当前矩形的高度大于等于栈顶矩形的高度，则直接入栈<br />如果当前矩形的高度小于栈顶矩形的高度，则把所有高于它的矩形从栈中弹出，并计算它们的面积，再把累积的宽度和新矩形的高度压入栈中</li>
<li>从操作中可以看出栈内的元素必然是单调递增的，所以对于弹出计算面积时，只要累计弹出的第几个矩形，就是以这个矩形为基准的宽度</li>
<li>遍历完后再把栈内的元素一一弹出计算</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stack</span>&lt;pair&lt;ll, ll&gt;&gt; rects; <span class="comment">// 第一个为高度，第二个为宽度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        ll <span class="built_in">height</span>;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!rects.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            rects.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;<span class="built_in">height</span>);</span><br><span class="line">            <span class="keyword">if</span> (rects.empty()) <span class="comment">// 栈为空，直接压入</span></span><br><span class="line">            &#123;</span><br><span class="line">                ans = <span class="built_in">height</span>;</span><br><span class="line">                rects.push(make_pair(<span class="built_in">height</span>, <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (rects.top().first &gt; <span class="built_in">height</span>) <span class="comment">// 当前矩形的高度小于前一个矩形的高度</span></span><br><span class="line">            &#123;</span><br><span class="line">                ll accumulate = <span class="number">0</span>; <span class="comment">// 累计宽度</span></span><br><span class="line">                <span class="keyword">while</span> (!rects.empty() &amp;&amp; rects.top().first &gt; <span class="built_in">height</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    accumulate += rects.top().second;</span><br><span class="line">                    ans = <span class="built_in">max</span>(rects.top().first * accumulate, ans); <span class="comment">// 宽就是第几个出栈</span></span><br><span class="line">                    rects.pop();</span><br><span class="line">                &#125;</span><br><span class="line">                rects.push(make_pair(<span class="built_in">height</span>, accumulate + <span class="number">1</span>)); <span class="comment">// 把前面的都替换成和当前矩形一样高的</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">// 当前矩形的高度不低于前一个矩形，压入宽度为1</span></span><br><span class="line">            &#123;</span><br><span class="line">                rects.push(make_pair(<span class="built_in">height</span>, <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ll accumulate = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!rects.empty()) <span class="comment">// 最后再计算一次</span></span><br><span class="line">        &#123;</span><br><span class="line">            accumulate += rects.top().second;</span><br><span class="line">            ans = <span class="built_in">max</span>(rects.top().first * accumulate, ans);</span><br><span class="line">            rects.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://leetcode-cn.com/problems/maximal-rectangle/submissions/" target="_blank" rel="noopener">Leetcode 85</a></p>
<p>这题可以变形成单调栈问题</p>
<ol>
<li>把每一个$1$都想象成一个小方块，小方块叠加变成矩形</li>
<li>从第一行开始放置小方块，如果是$1$就放置一个小方块，如果是$0$就空着，最后要求的还是最大矩形的面积</li>
<li>但是这个问题一列可能有不只一个矩形，中间可能有$0$把多个矩形空开，易知每一列都只能有一个矩形参与到答案中，所以遇到$0$的时候可以把矩形长度清空，因为包含当前矩形的答案已经遍历过了</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maximalRectangle</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; matrix)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (matrix.empty())</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">h</span><span class="params">(matrix[<span class="number">0</span>].<span class="built_in">size</span>(), <span class="number">0</span>)</span></span>;</span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrix.<span class="built_in">size</span>(); i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; matrix[i].<span class="built_in">size</span>(); j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (matrix[i][j] == <span class="string">'0'</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        h[j] = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        h[j]++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="built_in">max</span>(ans, largestRectangleArea(h));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">largestRectangleArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; heights)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">stack</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; rects;</span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; heights.<span class="built_in">size</span>(); i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">height</span> = heights[i];</span><br><span class="line">    <span class="keyword">if</span> (rects.empty())</span><br><span class="line">    &#123;</span><br><span class="line">      ans = <span class="built_in">height</span>;</span><br><span class="line">      rects.push(make_pair(<span class="built_in">height</span>, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (rects.top().first &gt; <span class="built_in">height</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> accumulate = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> (!rects.empty() &amp;&amp; rects.top().first &gt; <span class="built_in">height</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        accumulate += rects.top().second;</span><br><span class="line">        ans = <span class="built_in">max</span>(rects.top().first * accumulate, ans);</span><br><span class="line">        rects.pop();</span><br><span class="line">      &#125;</span><br><span class="line">      rects.push(make_pair(<span class="built_in">height</span>, accumulate + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      rects.push(make_pair(<span class="built_in">height</span>, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> accumulate = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (!rects.empty())</span><br><span class="line">  &#123;</span><br><span class="line">    accumulate += rects.top().second;</span><br><span class="line">    ans = <span class="built_in">max</span>(rects.top().first * accumulate, ans);</span><br><span class="line">    rects.pop();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
        <category>基础数据结构</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>06. How To Talk About Science And Scientists</title>
    <url>/2020/08/27/06-How-To-Talk-About-Science-And-Scientists/</url>
    <content><![CDATA[<p><style><br>table th:first-of-type {<br>    width: 150px;<br>}
</style><br>|      Word      |<br>| :——————: |<br>| anthropologist |<br>|   astronomer   |<br>|   geologist    |<br>|   biologist    |<br>|    botanist    |<br>|   zoologist    |<br>|  entomologist  |<br>|  philologist   |<br>|  semanticist   |<br>|  sociologist   |</p>
<h1 id="Greek-astron-star"><a href="#Greek-astron-star" class="headerlink" title="Greek astron: star"></a>Greek astron: star</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">astronomer</td>
<td style="text-align:center"><code>nomos: arrangement, law, or order</code></td>
</tr>
<tr>
<td style="text-align:center">astronomy</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">astronomical</td>
<td style="text-align:center"><strong><em>It also means extremely large</em></strong></td>
</tr>
<tr>
<td style="text-align:center">astrology</td>
<td style="text-align:center"><strong><em>It assesses the influence of planets and stars on human event</em></strong></td>
</tr>
<tr>
<td style="text-align:center">astrologer</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">astrological</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">astronaut</td>
<td style="text-align:center"><code>Greek nautes: sailor</code><br /><strong><em>sailor among the stars</em></strong></td>
</tr>
<tr>
<td style="text-align:center">cosmonaut</td>
<td style="text-align:center"><code>Greek kosmos: universe</code></td>
</tr>
<tr>
<td style="text-align:center">nautical</td>
<td style="text-align:center"><strong><em>It relates to sailors, sailing, ships, or navigation</em></strong></td>
</tr>
<tr>
<td style="text-align:center">nausea</td>
<td style="text-align:center"><code>Greek naus: ship</code><br /><strong><em>ship-sickness or seasickness</em></strong></td>
</tr>
<tr>
<td style="text-align:center">aster</td>
<td style="text-align:center"><strong><em>a star shaped flower</em></strong></td>
</tr>
<tr>
<td style="text-align:center">asterisk</td>
<td style="text-align:center"><strong><em>a star-shaped symbol (\</em>)*</strong></td>
</tr>
<tr>
<td style="text-align:center">astrophysics</td>
<td style="text-align:center"><strong><em>a branch of physics dealing with heavenly bodies</em></strong></td>
</tr>
<tr>
<td style="text-align:center">disaster</td>
<td style="text-align:center"><strong><em>any misfortune or calamity happened to someone because the stars were in opposition</em></strong><br /><code>prefix dis-: against</code></td>
</tr>
<tr>
<td style="text-align:center">disastrous</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">autonomy</td>
<td style="text-align:center"><code>autos: self</code><br /><strong><em>self-law, self-government</em></strong><br />You can make your own laws for yourself, namely you are independent</td>
</tr>
<tr>
<td style="text-align:center">autonomous</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">metronome</td>
<td style="text-align:center"><strong><em>an instrument that beginners at the piano use to guide their timing, to govern the measure of the player.</em></strong></td>
</tr>
</tbody>
</table>
</div>
<h1 id="Greek-ge-geo-earth"><a href="#Greek-ge-geo-earth" class="headerlink" title="Greek ge (geo-): earth"></a>Greek ge (geo-): earth</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">geologist</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">geology</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">geological</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">geometry</td>
<td style="text-align:center">geo- + metron: measurement of the lands or the earth<br /><strong><em>a branch of mathematics treating of the measurement ans properties of solid ans plane figures.</em></strong></td>
</tr>
<tr>
<td style="text-align:center">geometrician</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">geometric</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">geography</td>
<td style="text-align:center"><strong><em>writing about, or mapping, the earth</em></strong></td>
</tr>
<tr>
<td style="text-align:center">geographer</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">geographic</td>
<td style="text-align:center">&emsp;</td>
</tr>
</tbody>
</table>
</div>
<h1 id="bios-life"><a href="#bios-life" class="headerlink" title="bios: life"></a>bios: life</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">biologist</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">biology</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">biological</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">biography</td>
<td style="text-align:center"><strong><em>writing about someone’s life</em></strong></td>
</tr>
<tr>
<td style="text-align:center">autobiography</td>
<td style="text-align:center"><strong><em>the story of one’s life written by oneself</em></strong></td>
</tr>
<tr>
<td style="text-align:center">biopsy</td>
<td style="text-align:center"><strong><em>a medical examination , or view, of living tissue</em></strong><br /><code>opsis, optilos: view, vision</code></td>
</tr>
<tr>
<td style="text-align:center">autopsy</td>
<td style="text-align:center"><strong><em>a medical examination of a corpse in order to discover the cause of death</em></strong><br />the surgeon or pathologist determines, by actual view or sight rather than by theorizing, namely by viewing or seeing for oneself</td>
</tr>
</tbody>
</table>
</div>
<h1 id="Greek-botane-plant"><a href="#Greek-botane-plant" class="headerlink" title="Greek botane: plant"></a>Greek botane: plant</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">botanist</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">botany</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">botanical</td>
<td style="text-align:center">&emsp;</td>
</tr>
</tbody>
</table>
</div>
<h1 id="Greek-zoion-animal"><a href="#Greek-zoion-animal" class="headerlink" title="Greek zoion: animal"></a>Greek zoion: animal</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">zoologist</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">zoology</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">zoological</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">zodiac</td>
<td style="text-align:center"><strong><em>a diagram, used in astrology, of the paths of the sun, moon, and planets</em></strong><br />It contains Latin names for various animals<br />scorpio: scorpion; leo: lion; cancer: crab; taurus: bull; aries: ram; pisces: fish</td>
</tr>
<tr>
<td style="text-align:center">zodiacal</td>
<td style="text-align:center">&emsp;</td>
</tr>
</tbody>
</table>
</div>
<h1 id="Greek-en-in"><a href="#Greek-en-in" class="headerlink" title="Greek en-: in"></a>Greek en-: in</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">entomology</td>
<td style="text-align:center"><strong><em>the branch of zoology dealing with insects</em></strong><br /><code>tome: a cutting</code><br />In the segmented creatures, where those parts join looks like a “cutting in” of the body</td>
</tr>
<tr>
<td style="text-align:center">entomological</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">insect</td>
<td style="text-align:center"><code>Latin in-: in</code><br /><code>sectus: to cut</code></td>
</tr>
<tr>
<td style="text-align:center">tonsillectomy</td>
<td style="text-align:center"><strong><em>a surgical operation to remove the tonsils</em></strong><br /><code>ec-, Greek ek-: out</code></td>
</tr>
<tr>
<td style="text-align:center">appendectomy</td>
<td style="text-align:center"><strong><em>a surgical operation toremove the appendix</em></strong></td>
</tr>
<tr>
<td style="text-align:center">mastectomy</td>
<td style="text-align:center"><strong><em>a surgical operation toremove the breast</em></strong><br /><code>Greek mastos: breast</code></td>
</tr>
<tr>
<td style="text-align:center">hysterectomy</td>
<td style="text-align:center"><strong><em>a surgical operation toremove the uterus</em></strong><br /><code>Greek hustera: womb</code></td>
</tr>
<tr>
<td style="text-align:center">prostatectomy</td>
<td style="text-align:center"><strong><em>a surgical operation toremove the prostate</em></strong></td>
</tr>
<tr>
<td style="text-align:center">eccentric</td>
<td style="text-align:center"><strong><em>out of center, hence deviating from the normal in behavior</em></strong><br /><code>Greek kentron, Latin centrum: center</code></td>
</tr>
<tr>
<td style="text-align:center">eccentricity</td>
<td style="text-align:center">&emsp;</td>
</tr>
</tbody>
</table>
</div>
<h1 id="Greek-tomy-cutting"><a href="#Greek-tomy-cutting" class="headerlink" title="Greek tomy: cutting"></a>Greek tomy: cutting</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">atom</td>
<td style="text-align:center"><code>Greek prefix a- makes a root negative</code><br /><strong><em>the smallest possible particle of an element that could not be cut any further</em></strong></td>
</tr>
<tr>
<td style="text-align:center">atomic</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">anatomy</td>
<td style="text-align:center"><code>Greek ana-: up</code><br /><strong><em>originally the cutting up of a plant or animal to determine its structure</em></strong><br /><strong><em>later the bodily structure</em></strong></td>
</tr>
<tr>
<td style="text-align:center">anatomical</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">tome</td>
<td style="text-align:center"><strong><em>originally any book that was part of a larger work of many volumes, a part cut from the whole</em></strong><br /><strong><em>today an exceptionally large book, or on that is heavy and dull in content, often disparagingly</em></strong></td>
</tr>
<tr>
<td style="text-align:center">dichotomy</td>
<td style="text-align:center"><code>Greek dicha-: in two</code><br /><strong><em>a splitting in two</em></strong></td>
</tr>
<tr>
<td style="text-align:center">dichotomize</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">dichotomous</td>
<td style="text-align:center"><strong><em>dichotomous thinking is the sort that divides everything into two parts</em></strong></td>
</tr>
<tr>
<td style="text-align:center">epitome</td>
<td style="text-align:center"><strong><em>a condendation of the whole</em></strong><br /><code>epi-: on, upon</code><br />cut on or through something complicated, so that you can get to its essence<br />the part that is representative cross-section of the whole</td>
</tr>
<tr>
<td style="text-align:center">epitomize</td>
<td style="text-align:center">&emsp;</td>
</tr>
</tbody>
</table>
</div>
<h1 id="logos-word-speech"><a href="#logos-word-speech" class="headerlink" title="logos: word, speech"></a>logos: word, speech</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">philology</td>
<td style="text-align:center"><code>Greek philein: to love</code><br /><strong><em>the love of words</em></strong></td>
</tr>
<tr>
<td style="text-align:center">philological</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">linguistics</td>
<td style="text-align:center"><code>Latin lingua: tongue</code></td>
</tr>
<tr>
<td style="text-align:center">semantics</td>
<td style="text-align:center"><strong><em>It’s singualar when we see it as a science or area of study. It’s plural when we see it as meanings.</em></strong></td>
</tr>
<tr>
<td style="text-align:center">semanticist</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">semantical</td>
</tr>
</tbody>
</table>
</div>
<h1 id="Greek-philein-to-love"><a href="#Greek-philein-to-love" class="headerlink" title="Greek philein: to love"></a>Greek philein: to love</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">philanthropy</td>
<td style="text-align:center"><strong><em>the love of mankind</em></strong></td>
</tr>
<tr>
<td style="text-align:center">philanthropist</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">philanthropic</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">philander</td>
<td style="text-align:center">philein + andros<br />originally from the proper name given to lovers in plays and romances</td>
</tr>
<tr>
<td style="text-align:center">philanderer</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">philosophy</td>
<td style="text-align:center"><strong><em>the love of wisdom</em></strong><br /><code>Greek sophos: wise</code></td>
</tr>
<tr>
<td style="text-align:center">philharmonic</td>
<td style="text-align:center"><strong><em>the love of music or harmony</em></strong><br /><code>Greek harmonia: harmony</code></td>
</tr>
<tr>
<td style="text-align:center">philter</td>
<td style="text-align:center"><strong><em>a love potion</em></strong></td>
</tr>
<tr>
<td style="text-align:center">aphrodisiac</td>
<td style="text-align:center"><strong><em>whatever arouses sexual desire</em></strong><br /><code>Aphrodite: the Greek  goddess of love and beauty</code></td>
</tr>
<tr>
<td style="text-align:center">aphrodisiacal</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">bibliophile</td>
<td style="text-align:center"><strong><em>one who loves books, a book collector</em></strong><br /><code>Greek biblion: book</code></td>
</tr>
<tr>
<td style="text-align:center">Anglophile</td>
<td style="text-align:center"><strong><em>one who admires ans is fond of the British people, customs, cultures, etc.</em></strong> <br /><code>Latin Anglus: English</code></td>
</tr>
</tbody>
</table>
</div>
<h1 id="Latin-socius-companion"><a href="#Latin-socius-companion" class="headerlink" title="Latin socius: companion"></a>Latin socius: companion</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">sociologist</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sociology</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sociological</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">companion</td>
<td style="text-align:center"><code>Latin com-: with</code><br /><code>Latin panis: bread</code><br /><strong><em>If you are social, you enjoy breaking bread with companions</em></strong></td>
</tr>
<tr>
<td style="text-align:center">pantry</td>
<td style="text-align:center"><strong><em>where the bread is stored</em></strong></td>
</tr>
<tr>
<td style="text-align:center">associate</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">social</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">socialize</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">society</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sociable</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">antisocial</td>
<td style="text-align:center"><code>anti-: against</code><br /><strong><em>The antisocial person actively dislikes people, and often behaves in ways that are detrimental or destructive to society or the social order.</em></strong></td>
</tr>
<tr>
<td style="text-align:center">asocial</td>
<td style="text-align:center"><strong><em>Someon who is asocial is withdrawn ans self-sentered, avoids contact with others, and feels completely indifferent to the interests or welfare of society.</em></strong> <br />The asocial person doesn’t want to “get involved”</td>
</tr>
</tbody>
</table>
</div>
<h1 id="Amateur-Etymologist"><a href="#Amateur-Etymologist" class="headerlink" title="Amateur Etymologist"></a>Amateur Etymologist</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Word</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">sophomore</td>
<td style="text-align:center"><strong><em>a second-year student in high school or college</em></strong><br /><code>moros: foolish</code><br />half wise and half foolish</td>
</tr>
<tr>
<td style="text-align:center">sophomoric</td>
<td style="text-align:center"><strong><em>immature, inexperienced, foolish</em></strong></td>
</tr>
<tr>
<td style="text-align:center">sophisticated</td>
<td style="text-align:center"><strong><em>wordly-wise</em></strong><br /><strong><em>highly developed, mature, or complicated</em></strong></td>
</tr>
<tr>
<td style="text-align:center">sophisticate</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sophistication</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">bibliomaniac</td>
<td style="text-align:center"><strong><em>one who is obsessed with books, especially with collecting books</em></strong></td>
</tr>
<tr>
<td style="text-align:center">monolingual</td>
<td style="text-align:center"><strong><em>speaking one language</em></strong></td>
</tr>
<tr>
<td style="text-align:center">bilingual</td>
<td style="text-align:center"><strong><em>speaking two languages</em></strong></td>
</tr>
<tr>
<td style="text-align:center">trilingual</td>
<td style="text-align:center"><strong><em>speaking three languages</em></strong></td>
</tr>
<tr>
<td style="text-align:center">multilingual</td>
<td style="text-align:center"><strong><em>speaking many languages</em></strong><br /><code>multus: many</code></td>
</tr>
<tr>
<td style="text-align:center">linguist</td>
<td style="text-align:center"><strong><em>one who is fluent in many languages, or else an expert in linguistics</em></strong></td>
</tr>
<tr>
<td style="text-align:center">multitude</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">multiply</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">multiple</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">multicolored</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">multifarious</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">multilanteral</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Francophile</td>
<td style="text-align:center"><strong><em>One who admires France</em></strong></td>
</tr>
<tr>
<td style="text-align:center">Russophile</td>
<td style="text-align:center"><strong><em>One who admires Russia</em></strong></td>
</tr>
<tr>
<td style="text-align:center">Hispanophile</td>
<td style="text-align:center"><strong><em>One who admires Spain</em></strong></td>
</tr>
<tr>
<td style="text-align:center">Germanophile</td>
<td style="text-align:center"><strong><em>One who admires Germany</em></strong></td>
</tr>
<tr>
<td style="text-align:center">Nipponophile</td>
<td style="text-align:center"><strong><em>One who admires Japan</em></strong></td>
</tr>
<tr>
<td style="text-align:center">Sinophile</td>
<td style="text-align:center"><strong><em>One who admires China</em></strong></td>
</tr>
<tr>
<td style="text-align:center">androphile</td>
<td style="text-align:center"><strong><em>One who loves males</em></strong></td>
</tr>
<tr>
<td style="text-align:center">gynephile<br />philogynist</td>
<td style="text-align:center"><strong><em>One who loves women</em></strong></td>
</tr>
<tr>
<td style="text-align:center">pedophile</td>
<td style="text-align:center"><strong><em>One who sexually molests children</em></strong></td>
</tr>
<tr>
<td style="text-align:center">zoophile</td>
<td style="text-align:center"><strong><em>One who loves animals</em></strong></td>
</tr>
<tr>
<td style="text-align:center">botanophile</td>
<td style="text-align:center"><strong><em>One who loves plants</em></strong></td>
</tr>
</tbody>
</table>
</div>
<h1 id="intermission"><a href="#intermission" class="headerlink" title="intermission"></a>intermission</h1><ol>
<li>Further and farther is interchangeable. </li>
<li>A principle is a rule. Principle and rule both end in -le. <br />Principal means main and it contains an “a”. The heads of schools, the money you have in the bank (the main financial assets), the stars of a play are all principals. </li>
</ol>
]]></content>
      <categories>
        <category>英语</category>
        <category>Word Power Made Easy</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>单词</tag>
      </tags>
  </entry>
  <entry>
    <title>01. 计算机系统概述</title>
    <url>/2020/08/28/01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Tags </title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/lib/pace/README.html</url>
    <content><![CDATA[<h1 align="center"><a href="https://github.com/HubSpot/pace" target="_blank" rel="noopener">Progress bar</a> for <a href="https://github.com/theme-next" target="_blank" rel="noopener">NexT</a></h1>

<h1 align="center">Installation</h1>

<h2>If you want to use the CDN instead of clone this repo, please jump to the Step 3.</h2>

<h2 align="center">Step 1 &rarr; Go to NexT dir</h2>

<p>Change dir to <strong>NexT</strong> directory. There must be <code>layout</code>, <code>source</code>, <code>languages</code> and other directories:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/next</span><br><span class="line">$ ls</span><br><span class="line">_config.yml  crowdin.yml  docs  gulpfile.js  languages  layout  LICENSE.md  package.json  README.md  scripts  <span class="built_in">source</span></span><br></pre></td></tr></table></figure>
<h2 align="center">Step 2 &rarr; Get module</h2>

<p>Install module to <code>source/lib</code> directory:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-pace <span class="built_in">source</span>/lib/pace</span><br></pre></td></tr></table></figure>
<h2 align="center">Step 3 &rarr; Set it up</h2>

<p>Enable module in <strong>NexT</strong> <code>_config.yml</code> file and select your theme:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pace:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Themes list:</span></span><br><span class="line">  <span class="comment"># big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span></span><br><span class="line">  <span class="comment"># corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">minimal</span></span><br></pre></td></tr></table></figure>
<p><strong>And, if you wants to use the CDN, then need to set:</strong> (you also need to find your corresponding theme css link in <a href="https://www.jsdelivr.com/package/npm/pace-js?path=themes" target="_blank" rel="noopener">jsdelivr</a>)</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">pace:</span> <span class="string">//cdn.jsdelivr.net/npm/pace-js@1/pace.min.js</span></span><br><span class="line">  <span class="attr">pace_css:</span> <span class="string">//cdn.jsdelivr.net/npm/pace-js@1/themes/blue/pace-theme-minimal.css</span></span><br></pre></td></tr></table></figure>
<h1 align="center">Update</h1>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/next/<span class="built_in">source</span>/lib/pace</span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/lib/pace/pace-theme-barber-shop.min.css</url>
    <content><![CDATA[.pace,.pace .pace-progress{width:100%;overflow:hidden}.pace,.pace .pace-activity{position:fixed;top:0;left:0}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;z-index:2000;height:12px;background:#fff}.pace-inactive{display:none}.pace .pace-progress{background-color:#29d;position:fixed;top:0;bottom:0;right:100%}.pace .pace-activity{right:-32px;bottom:0;-webkit-transform:translate3d(0,0,0);-moz-transform:translate3d(0,0,0);-ms-transform:translate3d(0,0,0);-o-transform:translate3d(0,0,0);transform:translate3d(0,0,0);background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(.25,rgba(255,255,255,.2)),color-stop(.25,transparent),color-stop(.5,transparent),color-stop(.5,rgba(255,255,255,.2)),color-stop(.75,rgba(255,255,255,.2)),color-stop(.75,transparent),to(transparent));background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.2) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.2) 50%,rgba(255,255,255,.2) 75%,transparent 75%,transparent);background-image:-moz-linear-gradient(45deg,rgba(255,255,255,.2) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.2) 50%,rgba(255,255,255,.2) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.2) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.2) 50%,rgba(255,255,255,.2) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,.2) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.2) 50%,rgba(255,255,255,.2) 75%,transparent 75%,transparent);-webkit-background-size:32px 32px;-moz-background-size:32px 32px;-o-background-size:32px 32px;background-size:32px 32px;-webkit-animation:pace-theme-barber-shop-motion .5s linear infinite;-moz-animation:pace-theme-barber-shop-motion .5s linear infinite;-ms-animation:pace-theme-barber-shop-motion .5s linear infinite;-o-animation:pace-theme-barber-shop-motion .5s linear infinite;animation:pace-theme-barber-shop-motion .5s linear infinite}@-webkit-keyframes pace-theme-barber-shop-motion{0%{-webkit-transform:none;transform:none}100%{-webkit-transform:translate(-32px,0);transform:translate(-32px,0)}}@-moz-keyframes pace-theme-barber-shop-motion{0%{-moz-transform:none;transform:none}100%{-moz-transform:translate(-32px,0);transform:translate(-32px,0)}}@-o-keyframes pace-theme-barber-shop-motion{0%{-o-transform:none;transform:none}100%{-o-transform:translate(-32px,0);transform:translate(-32px,0)}}@-ms-keyframes pace-theme-barber-shop-motion{0%{-ms-transform:none;transform:none}100%{-ms-transform:translate(-32px,0);transform:translate(-32px,0)}}@keyframes pace-theme-barber-shop-motion{0%{transform:none}100%{transform:translate(-32px,0)}}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/lib/pace/pace-theme-big-counter.min.css</url>
    <content><![CDATA[.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace.pace-inactive .pace-progress{display:none}.pace .pace-progress{position:fixed;z-index:2000;top:0;right:0;height:5rem;width:5rem;-webkit-transform:translate3d(0,0,0)!important;-ms-transform:translate3d(0,0,0)!important;transform:translate3d(0,0,0)!important}.pace .pace-progress:after{display:block;position:absolute;top:0;right:.5rem;content:attr(data-progress-text);font-family:"Helvetica Neue",sans-serif;font-weight:100;font-size:5rem;line-height:1;text-align:right;color:rgba(34,153,221,.19999999999999996)}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/lib/pace/pace-theme-center-circle.min.css</url>
    <content><![CDATA[.pace,.pace .pace-progress{z-index:2000;left:0;top:0;height:6rem}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;-webkit-perspective:12rem;-moz-perspective:12rem;-ms-perspective:12rem;-o-perspective:12rem;perspective:12rem;position:fixed;width:6rem;margin:auto;right:0;bottom:0}.pace.pace-inactive .pace-progress{display:none}.pace .pace-progress{display:block;position:absolute;width:6rem!important;line-height:6rem;font-size:2rem;border-radius:50%;background:rgba(34,153,221,.8);color:#fff;font-family:"Helvetica Neue",sans-serif;font-weight:100;text-align:center;-webkit-animation:pace-theme-center-circle-spin linear infinite 2s;-moz-animation:pace-theme-center-circle-spin linear infinite 2s;-ms-animation:pace-theme-center-circle-spin linear infinite 2s;-o-animation:pace-theme-center-circle-spin linear infinite 2s;animation:pace-theme-center-circle-spin linear infinite 2s;-webkit-transform-style:preserve-3d;-moz-transform-style:preserve-3d;-ms-transform-style:preserve-3d;-o-transform-style:preserve-3d;transform-style:preserve-3d}.pace .pace-progress:after{content:attr(data-progress-text);display:block}@-webkit-keyframes pace-theme-center-circle-spin{from{-webkit-transform:rotateY(0)}to{-webkit-transform:rotateY(360deg)}}@-moz-keyframes pace-theme-center-circle-spin{from{-moz-transform:rotateY(0)}to{-moz-transform:rotateY(360deg)}}@-ms-keyframes pace-theme-center-circle-spin{from{-ms-transform:rotateY(0)}to{-ms-transform:rotateY(360deg)}}@-o-keyframes pace-theme-center-circle-spin{from{-o-transform:rotateY(0)}to{-o-transform:rotateY(360deg)}}@keyframes pace-theme-center-circle-spin{from{transform:rotateY(0)}to{transform:rotateY(360deg)}}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/lib/pace/pace-theme-bounce.min.css</url>
    <content><![CDATA[.pace{width:140px;height:300px;position:fixed;top:-90px;right:-20px;z-index:2000;-webkit-transform:scale(0);-moz-transform:scale(0);-ms-transform:scale(0);-o-transform:scale(0);transform:scale(0);opacity:0;-webkit-transition:all 2s linear 0s;-moz-transition:all 2s linear 0s;transition:all 2s linear 0s}.pace.pace-active{-webkit-transform:scale(.25);-moz-transform:scale(.25);-ms-transform:scale(.25);-o-transform:scale(.25);transform:scale(.25);opacity:1}.pace .pace-activity{width:140px;height:140px;border-radius:70px;background:#29d;position:absolute;top:0;z-index:1911;-webkit-animation:pace-bounce 1s infinite;-moz-animation:pace-bounce 1s infinite;-o-animation:pace-bounce 1s infinite;-ms-animation:pace-bounce 1s infinite;animation:pace-bounce 1s infinite}.pace .pace-progress{position:absolute;display:block;left:50%;bottom:0;z-index:1910;margin-left:-30px;width:60px;height:75px;background:rgba(20,20,20,.1);box-shadow:0 0 20px 35px rgba(20,20,20,.1);border-radius:30px/40px;-webkit-transform:scaleY(.3)!important;-moz-transform:scaleY(.3)!important;-ms-transform:scaleY(.3)!important;-o-transform:scaleY(.3)!important;transform:scaleY(.3)!important;-webkit-animation:pace-compress .5s infinite alternate;-moz-animation:pace-compress .5s infinite alternate;-o-animation:pace-compress .5s infinite alternate;-ms-animation:pace-compress .5s infinite alternate;animation:pace-compress .5s infinite alternate}@-webkit-keyframes pace-bounce{0%,100%,95%{top:0;-webkit-animation-timing-function:ease-in}50%{top:140px;height:140px;-webkit-animation-timing-function:ease-out}55%{top:160px;height:120px;border-radius:70px/60px;-webkit-animation-timing-function:ease-in}65%{top:120px;height:140px;border-radius:70px;-webkit-animation-timing-function:ease-out}}@-moz-keyframes pace-bounce{0%,100%,95%{top:0;-moz-animation-timing-function:ease-in}50%{top:140px;height:140px;-moz-animation-timing-function:ease-out}55%{top:160px;height:120px;border-radius:70px/60px;-moz-animation-timing-function:ease-in}65%{top:120px;height:140px;border-radius:70px;-moz-animation-timing-function:ease-out}}@keyframes pace-bounce{0%,100%,95%{top:0;animation-timing-function:ease-in}50%{top:140px;height:140px;animation-timing-function:ease-out}55%{top:160px;height:120px;border-radius:70px/60px;animation-timing-function:ease-in}65%{top:120px;height:140px;border-radius:70px;animation-timing-function:ease-out}}@-webkit-keyframes pace-compress{0%{bottom:0;margin-left:-30px;width:60px;height:75px;background:rgba(20,20,20,.1);box-shadow:0 0 20px 35px rgba(20,20,20,.1);border-radius:30px/40px;-webkit-animation-timing-function:ease-in}100%{bottom:30px;margin-left:-10px;width:20px;height:5px;background:rgba(20,20,20,.3);box-shadow:0 0 20px 35px rgba(20,20,20,.3);border-radius:20px;-webkit-animation-timing-function:ease-out}}@-moz-keyframes pace-compress{0%{bottom:0;margin-left:-30px;width:60px;height:75px;background:rgba(20,20,20,.1);box-shadow:0 0 20px 35px rgba(20,20,20,.1);border-radius:30px/40px;-moz-animation-timing-function:ease-in}100%{bottom:30px;margin-left:-10px;width:20px;height:5px;background:rgba(20,20,20,.3);box-shadow:0 0 20px 35px rgba(20,20,20,.3);border-radius:20px;-moz-animation-timing-function:ease-out}}@keyframes pace-compress{0%{bottom:0;margin-left:-30px;width:60px;height:75px;background:rgba(20,20,20,.1);box-shadow:0 0 20px 35px rgba(20,20,20,.1);border-radius:30px/40px;animation-timing-function:ease-in}100%{bottom:30px;margin-left:-10px;width:20px;height:5px;background:rgba(20,20,20,.3);box-shadow:0 0 20px 35px rgba(20,20,20,.3);border-radius:20px;animation-timing-function:ease-out}}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/lib/pace/pace-theme-center-radar.min.css</url>
    <content><![CDATA[.pace,.pace .pace-activity{z-index:2000;height:90px;width:90px}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;position:fixed;margin:auto;top:0;left:0;right:0;bottom:0}.pace.pace-inactive .pace-activity{display:none}.pace .pace-activity,.pace .pace-activity:before{position:absolute;display:block;border-color:#29d transparent transparent;border-radius:50%}.pace .pace-activity{left:-30px;top:-30px;border-width:30px;border-style:double;-webkit-animation:spin 1s linear infinite;-moz-animation:spin 1s linear infinite;-o-animation:spin 1s linear infinite;animation:spin 1s linear infinite}.pace .pace-activity:before{content:' ';top:10px;left:10px;height:50px;width:50px;border-width:10px;border-style:solid}@-webkit-keyframes spin{100%{-webkit-transform:rotate(359deg)}}@-moz-keyframes spin{100%{-moz-transform:rotate(359deg)}}@-o-keyframes spin{100%{-moz-transform:rotate(359deg)}}@keyframes spin{100%{transform:rotate(359deg)}}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/lib/pace/pace-theme-center-atom.min.css</url>
    <content><![CDATA[.pace,.pace .pace-progress{z-index:2000;height:60px;width:100px}.pace .pace-activity,.pace .pace-progress:before{border-radius:50%;display:block;position:absolute}.pace.pace-inactive{display:none}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;position:fixed;margin:auto;top:0;left:0;right:0;bottom:0}.pace .pace-progress{position:absolute;-webkit-transform:translate3d(0,0,0)!important;-ms-transform:translate3d(0,0,0)!important;transform:translate3d(0,0,0)!important}.pace .pace-progress:before{content:attr(data-progress-text);text-align:center;color:#fff;background:#29d;font-family:"Helvetica Neue",sans-serif;font-size:14px;font-weight:100;line-height:1;padding:20% 0 7px;width:50%;height:40%;margin:10px 0 0 30px;z-index:999}.pace .pace-activity{font-size:15px;line-height:1;z-index:2000;-webkit-animation:pace-theme-center-atom-spin 2s linear infinite;-moz-animation:pace-theme-center-atom-spin 2s linear infinite;-o-animation:pace-theme-center-atom-spin 2s linear infinite;animation:pace-theme-center-atom-spin 2s linear infinite;border:5px solid #29d;content:' ';top:0;left:0;height:60px;width:100px}.pace .pace-activity:after,.pace .pace-activity:before{content:' ';display:block;position:absolute;top:-5px;left:-5px;height:60px;width:100px}.pace .pace-activity:after{border-radius:50%;border:5px solid #29d;-webkit-transform:rotate(60deg);-moz-transform:rotate(60deg);-o-transform:rotate(60deg);transform:rotate(60deg)}.pace .pace-activity:before{border-radius:50%;border:5px solid #29d;-webkit-transform:rotate(120deg);-moz-transform:rotate(120deg);-o-transform:rotate(120deg);transform:rotate(120deg)}@-webkit-keyframes pace-theme-center-atom-spin{0%{-webkit-transform:rotate(0)}100%{-webkit-transform:rotate(359deg)}}@-moz-keyframes pace-theme-center-atom-spin{0%{-moz-transform:rotate(0)}100%{-moz-transform:rotate(359deg)}}@-o-keyframes pace-theme-center-atom-spin{0%{-o-transform:rotate(0)}100%{-o-transform:rotate(359deg)}}@keyframes pace-theme-center-atom-spin{0%{transform:rotate(0)}100%{transform:rotate(359deg)}}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/lib/pace/pace-theme-center-simple.min.css</url>
    <content><![CDATA[.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;z-index:2000;position:fixed;margin:auto;top:0;left:0;right:0;bottom:0;height:5px;width:200px;background:#fff;border:1px solid #29d;overflow:hidden}.pace .pace-progress{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;-ms-box-sizing:border-box;-o-box-sizing:border-box;box-sizing:border-box;-webkit-transform:translate3d(0,0,0);-moz-transform:translate3d(0,0,0);-ms-transform:translate3d(0,0,0);-o-transform:translate3d(0,0,0);transform:translate3d(0,0,0);max-width:200px;z-index:2000;display:block;position:absolute;top:0;right:100%;height:100%;width:100%;background:#29d}.pace.pace-inactive{display:none}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/lib/pace/pace-theme-corner-indicator.min.css</url>
    <content><![CDATA[.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace .pace-activity{display:block;position:fixed;z-index:2000;top:0;right:0;width:300px;height:300px;background:#29d;-webkit-transition:-webkit-transform .3s;transition:transform .3s;-webkit-transform:translateX(100%) translateY(-100%) rotate(45deg);transform:translateX(100%) translateY(-100%) rotate(45deg);pointer-events:none}.pace.pace-active .pace-activity{-webkit-transform:translateX(50%) translateY(-50%) rotate(45deg);transform:translateX(50%) translateY(-50%) rotate(45deg)}.pace .pace-activity::after,.pace .pace-activity::before{-moz-box-sizing:border-box;box-sizing:border-box;position:absolute;bottom:30px;left:50%;display:block;border:5px solid #fff;border-radius:50%;content:''}.pace .pace-activity::before{margin-left:-40px;width:80px;height:80px;border-right-color:rgba(0,0,0,.2);border-left-color:rgba(0,0,0,.2);-webkit-animation:pace-theme-corner-indicator-spin 3s linear infinite;animation:pace-theme-corner-indicator-spin 3s linear infinite}.pace .pace-activity::after{bottom:50px;margin-left:-20px;width:40px;height:40px;border-top-color:rgba(0,0,0,.2);border-bottom-color:rgba(0,0,0,.2);-webkit-animation:pace-theme-corner-indicator-spin 1s linear infinite;animation:pace-theme-corner-indicator-spin 1s linear infinite}@-webkit-keyframes pace-theme-corner-indicator-spin{0%{-webkit-transform:rotate(0)}100%{-webkit-transform:rotate(359deg)}}@keyframes pace-theme-corner-indicator-spin{0%{transform:rotate(0)}100%{transform:rotate(359deg)}}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/lib/pace/pace-theme-fill-left.min.css</url>
    <content><![CDATA[.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace-inactive{display:none}.pace .pace-progress{background-color:rgba(34,153,221,.19999999999999996);position:fixed;z-index:-1;top:0;right:100%;bottom:0;width:100%}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/lib/pace/pace-theme-flash.min.css</url>
    <content><![CDATA[.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace-inactive{display:none}.pace .pace-progress{background:#29d;position:fixed;z-index:2000;top:0;right:100%;width:100%;height:2px}.pace .pace-progress-inner{display:block;position:absolute;right:0;width:100px;height:100%;box-shadow:0 0 10px #29d,0 0 5px #29d;opacity:1;-webkit-transform:rotate(3deg) translate(0,-4px);-moz-transform:rotate(3deg) translate(0,-4px);-ms-transform:rotate(3deg) translate(0,-4px);-o-transform:rotate(3deg) translate(0,-4px);transform:rotate(3deg) translate(0,-4px)}.pace .pace-activity{display:block;position:fixed;z-index:2000;top:15px;right:15px;width:14px;height:14px;border:2px solid transparent;border-top-color:#29d;border-left-color:#29d;border-radius:10px;-webkit-animation:pace-spinner .4s linear infinite;-moz-animation:pace-spinner .4s linear infinite;-ms-animation:pace-spinner .4s linear infinite;-o-animation:pace-spinner .4s linear infinite;animation:pace-spinner .4s linear infinite}@-webkit-keyframes pace-spinner{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@-moz-keyframes pace-spinner{0%{-moz-transform:rotate(0);transform:rotate(0)}100%{-moz-transform:rotate(360deg);transform:rotate(360deg)}}@-o-keyframes pace-spinner{0%{-o-transform:rotate(0);transform:rotate(0)}100%{-o-transform:rotate(360deg);transform:rotate(360deg)}}@-ms-keyframes pace-spinner{0%{-ms-transform:rotate(0);transform:rotate(0)}100%{-ms-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes pace-spinner{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/lib/pace/pace-theme-mac-osx.min.css</url>
    <content><![CDATA[.pace,.pace .pace-progress{width:100%;height:12px;overflow:hidden}.pace,.pace .pace-activity{position:fixed;top:0;left:0}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;z-index:2000;background:#fff}.pace-inactive{display:none}.pace .pace-progress{background-color:#0087E1;position:fixed;top:0;right:100%;-webkit-border-radius:0 0 4px;-moz-border-radius:0 0 4px;-o-border-radius:0 0 4px;border-radius:0 0 4px;-webkit-box-shadow:inset -1px 0 #00558F,inset 0 -1px #00558F,inset 0 2px rgba(255,255,255,.5),inset 0 6px rgba(255,255,255,.3);-moz-box-shadow:inset -1px 0 #00558F,inset 0 -1px #00558F,inset 0 2px rgba(255,255,255,.5),inset 0 6px rgba(255,255,255,.3);-o-box-shadow:inset -1px 0 #00558F,inset 0 -1px #00558F,inset 0 2px rgba(255,255,255,.5),inset 0 6px rgba(255,255,255,.3);box-shadow:inset -1px 0 #00558F,inset 0 -1px #00558F,inset 0 2px rgba(255,255,255,.5),inset 0 6px rgba(255,255,255,.3)}.pace .pace-activity{right:-28px;bottom:0;-webkit-background-image:radial-gradient(rgba(255,255,255,.65) 0,rgba(255,255,255,.15) 100%);-moz-background-image:radial-gradient(rgba(255,255,255,.65) 0,rgba(255,255,255,.15) 100%);-o-background-image:radial-gradient(rgba(255,255,255,.65) 0,rgba(255,255,255,.15) 100%);background-image:radial-gradient(rgba(255,255,255,.65) 0,rgba(255,255,255,.15) 100%);-webkit-background-size:28px 100%;-moz-background-size:28px 100%;-o-background-size:28px 100%;background-size:28px 100%;-webkit-animation:pace-theme-mac-osx-motion .5s linear infinite;-moz-animation:pace-theme-mac-osx-motion .5s linear infinite;-ms-animation:pace-theme-mac-osx-motion .5s linear infinite;-o-animation:pace-theme-mac-osx-motion .5s linear infinite;animation:pace-theme-mac-osx-motion .5s linear infinite}@-webkit-keyframes pace-theme-mac-osx-motion{0%{-webkit-transform:none;transform:none}100%{-webkit-transform:translate(-28px,0);transform:translate(-28px,0)}}@-moz-keyframes pace-theme-mac-osx-motion{0%{-moz-transform:none;transform:none}100%{-moz-transform:translate(-28px,0);transform:translate(-28px,0)}}@-o-keyframes pace-theme-mac-osx-motion{0%{-o-transform:none;transform:none}100%{-o-transform:translate(-28px,0);transform:translate(-28px,0)}}@-ms-keyframes pace-theme-mac-osx-motion{0%{-ms-transform:none;transform:none}100%{-ms-transform:translate(-28px,0);transform:translate(-28px,0)}}@keyframes pace-theme-mac-osx-motion{0%{transform:none}100%{transform:translate(-28px,0)}}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/lib/pace/pace-theme-loading-bar.min.css</url>
    <content><![CDATA[.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;-ms-box-sizing:border-box;-o-box-sizing:border-box;box-sizing:border-box;-webkit-border-radius:10px;-moz-border-radius:10px;border-radius:10px;-webkit-background-clip:padding-box;-moz-background-clip:padding;background-clip:padding-box;z-index:2000;position:fixed;margin:auto;top:12px;left:0;right:0;bottom:0;width:200px;height:50px;overflow:hidden}.pace .pace-progress{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;-ms-box-sizing:border-box;-o-box-sizing:border-box;box-sizing:border-box;-webkit-border-radius:2px;-moz-border-radius:2px;border-radius:2px;-webkit-background-clip:padding-box;-moz-background-clip:padding;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0);display:block;position:absolute;right:100%;margin-right:-7px;width:93%;top:7px;height:14px;font-size:12px;background:#29d;color:#29d;line-height:60px;font-weight:700;font-family:Helvetica,Arial,"Lucida Grande",sans-serif;-webkit-box-shadow:120px 0 #fff,240px 0 #fff;-ms-box-shadow:120px 0 #fff,240px 0 #fff;box-shadow:120px 0 #fff,240px 0 #fff}.pace .pace-progress:after{content:attr(data-progress-text);display:inline-block;position:fixed;width:45px;text-align:right;right:0;padding-right:16px;top:4px}.pace .pace-progress[data-progress-text="0%"]:after{right:-200px}.pace .pace-progress[data-progress-text="1%"]:after{right:-198.14px}.pace .pace-progress[data-progress-text="2%"]:after{right:-196.28px}.pace .pace-progress[data-progress-text="3%"]:after{right:-194.42px}.pace .pace-progress[data-progress-text="4%"]:after{right:-192.56px}.pace .pace-progress[data-progress-text="5%"]:after{right:-190.7px}.pace .pace-progress[data-progress-text="6%"]:after{right:-188.84px}.pace .pace-progress[data-progress-text="7%"]:after{right:-186.98px}.pace .pace-progress[data-progress-text="8%"]:after{right:-185.12px}.pace .pace-progress[data-progress-text="9%"]:after{right:-183.26px}.pace .pace-progress[data-progress-text="10%"]:after{right:-181.4px}.pace .pace-progress[data-progress-text="11%"]:after{right:-179.54px}.pace .pace-progress[data-progress-text="12%"]:after{right:-177.68px}.pace .pace-progress[data-progress-text="13%"]:after{right:-175.82px}.pace .pace-progress[data-progress-text="14%"]:after{right:-173.96px}.pace .pace-progress[data-progress-text="15%"]:after{right:-172.1px}.pace .pace-progress[data-progress-text="16%"]:after{right:-170.24px}.pace .pace-progress[data-progress-text="17%"]:after{right:-168.38px}.pace .pace-progress[data-progress-text="18%"]:after{right:-166.52px}.pace .pace-progress[data-progress-text="19%"]:after{right:-164.66px}.pace .pace-progress[data-progress-text="20%"]:after{right:-162.8px}.pace .pace-progress[data-progress-text="21%"]:after{right:-160.94px}.pace .pace-progress[data-progress-text="22%"]:after{right:-159.08px}.pace .pace-progress[data-progress-text="23%"]:after{right:-157.22px}.pace .pace-progress[data-progress-text="24%"]:after{right:-155.36px}.pace .pace-progress[data-progress-text="25%"]:after{right:-153.5px}.pace .pace-progress[data-progress-text="26%"]:after{right:-151.64px}.pace .pace-progress[data-progress-text="27%"]:after{right:-149.78px}.pace .pace-progress[data-progress-text="28%"]:after{right:-147.92px}.pace .pace-progress[data-progress-text="29%"]:after{right:-146.06px}.pace .pace-progress[data-progress-text="30%"]:after{right:-144.2px}.pace .pace-progress[data-progress-text="31%"]:after{right:-142.34px}.pace .pace-progress[data-progress-text="32%"]:after{right:-140.48px}.pace .pace-progress[data-progress-text="33%"]:after{right:-138.62px}.pace .pace-progress[data-progress-text="34%"]:after{right:-136.76px}.pace .pace-progress[data-progress-text="35%"]:after{right:-134.9px}.pace .pace-progress[data-progress-text="36%"]:after{right:-133.04px}.pace .pace-progress[data-progress-text="37%"]:after{right:-131.18px}.pace .pace-progress[data-progress-text="38%"]:after{right:-129.32px}.pace .pace-progress[data-progress-text="39%"]:after{right:-127.46px}.pace .pace-progress[data-progress-text="40%"]:after{right:-125.6px}.pace .pace-progress[data-progress-text="41%"]:after{right:-123.74px}.pace .pace-progress[data-progress-text="42%"]:after{right:-121.88px}.pace .pace-progress[data-progress-text="43%"]:after{right:-120.02px}.pace .pace-progress[data-progress-text="44%"]:after{right:-118.16px}.pace .pace-progress[data-progress-text="45%"]:after{right:-116.3px}.pace .pace-progress[data-progress-text="46%"]:after{right:-114.44px}.pace .pace-progress[data-progress-text="47%"]:after{right:-112.58px}.pace .pace-progress[data-progress-text="48%"]:after{right:-110.72px}.pace .pace-progress[data-progress-text="49%"]:after{right:-108.86px}.pace .pace-progress[data-progress-text="50%"]:after{right:-107px}.pace .pace-progress[data-progress-text="51%"]:after{right:-105.14px}.pace .pace-progress[data-progress-text="52%"]:after{right:-103.28px}.pace .pace-progress[data-progress-text="53%"]:after{right:-101.42px}.pace .pace-progress[data-progress-text="54%"]:after{right:-99.56px}.pace .pace-progress[data-progress-text="55%"]:after{right:-97.7px}.pace .pace-progress[data-progress-text="56%"]:after{right:-95.84px}.pace .pace-progress[data-progress-text="57%"]:after{right:-93.98px}.pace .pace-progress[data-progress-text="58%"]:after{right:-92.12px}.pace .pace-progress[data-progress-text="59%"]:after{right:-90.26px}.pace .pace-progress[data-progress-text="60%"]:after{right:-88.4px}.pace .pace-progress[data-progress-text="61%"]:after{right:-86.54px}.pace .pace-progress[data-progress-text="62%"]:after{right:-84.68px}.pace .pace-progress[data-progress-text="63%"]:after{right:-82.82px}.pace .pace-progress[data-progress-text="64%"]:after{right:-80.96px}.pace .pace-progress[data-progress-text="65%"]:after{right:-79.1px}.pace .pace-progress[data-progress-text="66%"]:after{right:-77.24px}.pace .pace-progress[data-progress-text="67%"]:after{right:-75.38px}.pace .pace-progress[data-progress-text="68%"]:after{right:-73.52px}.pace .pace-progress[data-progress-text="69%"]:after{right:-71.66px}.pace .pace-progress[data-progress-text="70%"]:after{right:-69.8px}.pace .pace-progress[data-progress-text="71%"]:after{right:-67.94px}.pace .pace-progress[data-progress-text="72%"]:after{right:-66.08px}.pace .pace-progress[data-progress-text="73%"]:after{right:-64.22px}.pace .pace-progress[data-progress-text="74%"]:after{right:-62.36px}.pace .pace-progress[data-progress-text="75%"]:after{right:-60.5px}.pace .pace-progress[data-progress-text="76%"]:after{right:-58.64px}.pace .pace-progress[data-progress-text="77%"]:after{right:-56.78px}.pace .pace-progress[data-progress-text="78%"]:after{right:-54.92px}.pace .pace-progress[data-progress-text="79%"]:after{right:-53.06px}.pace .pace-progress[data-progress-text="80%"]:after{right:-51.2px}.pace .pace-progress[data-progress-text="81%"]:after{right:-49.34px}.pace .pace-progress[data-progress-text="82%"]:after{right:-47.48px}.pace .pace-progress[data-progress-text="83%"]:after{right:-45.62px}.pace .pace-progress[data-progress-text="84%"]:after{right:-43.76px}.pace .pace-progress[data-progress-text="85%"]:after{right:-41.9px}.pace .pace-progress[data-progress-text="86%"]:after{right:-40.04px}.pace .pace-progress[data-progress-text="87%"]:after{right:-38.18px}.pace .pace-progress[data-progress-text="88%"]:after{right:-36.32px}.pace .pace-progress[data-progress-text="89%"]:after{right:-34.46px}.pace .pace-progress[data-progress-text="90%"]:after{right:-32.6px}.pace .pace-progress[data-progress-text="91%"]:after{right:-30.74px}.pace .pace-progress[data-progress-text="92%"]:after{right:-28.88px}.pace .pace-progress[data-progress-text="93%"]:after{right:-27.02px}.pace .pace-progress[data-progress-text="94%"]:after{right:-25.16px}.pace .pace-progress[data-progress-text="95%"]:after{right:-23.3px}.pace .pace-progress[data-progress-text="96%"]:after{right:-21.44px}.pace .pace-progress[data-progress-text="97%"]:after{right:-19.58px}.pace .pace-progress[data-progress-text="98%"]:after{right:-17.72px}.pace .pace-progress[data-progress-text="99%"]:after{right:-15.86px}.pace .pace-progress[data-progress-text="100%"]:after{right:-14px}.pace .pace-activity{position:absolute;width:100%;height:28px;z-index:2001;box-shadow:inset 0 0 0 2px #29d,inset 0 0 0 7px #FFF;border-radius:10px}.pace.pace-inactive{display:none}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/lib/pace/pace-theme-flat-top.min.css</url>
    <content><![CDATA[.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;position:fixed;top:0;left:0;width:100%;-webkit-transform:translate3d(0,-50px,0);-ms-transform:translate3d(0,-50px,0);transform:translate3d(0,-50px,0);-webkit-transition:-webkit-transform .5s ease-out;-ms-transition:-webkit-transform .5s ease-out;transition:transform .5s ease-out}.pace.pace-active{-webkit-transform:translate3d(0,0,0);-ms-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}.pace .pace-progress{display:block;position:fixed;z-index:2000;top:0;right:100%;width:100%;height:10px;background:#29d;pointer-events:none}
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/lib/pace/pace-theme-minimal.min.css</url>
    <content><![CDATA[.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace-inactive{display:none}.pace .pace-progress{background:#29d;position:fixed;z-index:2000;top:0;right:100%;width:100%;height:2px}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/lib/pace/pace-theme-material.min.css</url>
    <content><![CDATA[.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:#29d}.pace-progress{position:fixed;z-index:2000;top:50%;left:50%;margin-left:-2.5rem;margin-top:-2.5rem;height:5rem;width:5rem;opacity:1;-webkit-transition:opacity .1s;transition:opacity .1s;-webkit-transform:translate3d(0,0,0)!important;-ms-transform:translate3d(0,0,0)!important;transform:translate3d(0,0,0)!important}.pace-inactive .pace-progress,.pace-progress[data-progress="00"]{opacity:0}.pace-progress:after{height:5rem;width:5rem;text-align:center;line-height:5rem;content:attr(data-progress);display:block;font-size:1.8rem;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-weight:300}.pace-progress .pace-progress-inner{overflow:hidden;position:absolute;width:2.5rem;height:5rem;-webkit-transform-origin:left center;-ms-transform-origin:left center;transform-origin:left center;-webkit-transition:-webkit-transform .1s;transition:transform .1s;left:2.5rem;top:0}.pace-progress .pace-progress-inner:after,.pace-progress .pace-progress-inner:before{position:absolute;width:5rem;height:5rem;content:' ';left:-2.5rem;top:0;box-sizing:border-box;border:1px solid;border-radius:5rem}.pace-progress .pace-progress-inner:before{border-right-color:transparent;border-bottom-color:transparent;-webkit-transform:rotate(135deg);-ms-transform:rotate(135deg);transform:rotate(135deg)}.pace-progress .pace-progress-inner:after{border-left-color:transparent;border-top-color:transparent;display:none;-webkit-transform:rotate(315deg);-ms-transform:rotate(315deg);transform:rotate(315deg)}.pace-progress[data-progress="00"] .pace-progress-inner:before{-webkit-transform:rotate(-45deg);-ms-transform:rotate(-45deg);transform:rotate(-45deg)}.pace-progress[data-progress="01"] .pace-progress-inner:before{-webkit-transform:rotate(-41deg);-ms-transform:rotate(-41deg);transform:rotate(-41deg)}.pace-progress[data-progress="02"] .pace-progress-inner:before{-webkit-transform:rotate(-38deg);-ms-transform:rotate(-38deg);transform:rotate(-38deg)}.pace-progress[data-progress="03"] .pace-progress-inner:before{-webkit-transform:rotate(-34deg);-ms-transform:rotate(-34deg);transform:rotate(-34deg)}.pace-progress[data-progress="04"] .pace-progress-inner:before{-webkit-transform:rotate(-31deg);-ms-transform:rotate(-31deg);transform:rotate(-31deg)}.pace-progress[data-progress="05"] .pace-progress-inner:before{-webkit-transform:rotate(-27deg);-ms-transform:rotate(-27deg);transform:rotate(-27deg)}.pace-progress[data-progress="06"] .pace-progress-inner:before{-webkit-transform:rotate(-23deg);-ms-transform:rotate(-23deg);transform:rotate(-23deg)}.pace-progress[data-progress="07"] .pace-progress-inner:before{-webkit-transform:rotate(-20deg);-ms-transform:rotate(-20deg);transform:rotate(-20deg)}.pace-progress[data-progress="08"] .pace-progress-inner:before{-webkit-transform:rotate(-16deg);-ms-transform:rotate(-16deg);transform:rotate(-16deg)}.pace-progress[data-progress="09"] .pace-progress-inner:before{-webkit-transform:rotate(-13deg);-ms-transform:rotate(-13deg);transform:rotate(-13deg)}.pace-progress[data-progress="10"] .pace-progress-inner:before{-webkit-transform:rotate(-9deg);-ms-transform:rotate(-9deg);transform:rotate(-9deg)}.pace-progress[data-progress="11"] .pace-progress-inner:before{-webkit-transform:rotate(-5deg);-ms-transform:rotate(-5deg);transform:rotate(-5deg)}.pace-progress[data-progress="12"] .pace-progress-inner:before{-webkit-transform:rotate(-2deg);-ms-transform:rotate(-2deg);transform:rotate(-2deg)}.pace-progress[data-progress="13"] .pace-progress-inner:before{-webkit-transform:rotate(2deg);-ms-transform:rotate(2deg);transform:rotate(2deg)}.pace-progress[data-progress="14"] .pace-progress-inner:before{-webkit-transform:rotate(5deg);-ms-transform:rotate(5deg);transform:rotate(5deg)}.pace-progress[data-progress="15"] .pace-progress-inner:before{-webkit-transform:rotate(9deg);-ms-transform:rotate(9deg);transform:rotate(9deg)}.pace-progress[data-progress="16"] .pace-progress-inner:before{-webkit-transform:rotate(13deg);-ms-transform:rotate(13deg);transform:rotate(13deg)}.pace-progress[data-progress="17"] .pace-progress-inner:before{-webkit-transform:rotate(16deg);-ms-transform:rotate(16deg);transform:rotate(16deg)}.pace-progress[data-progress="18"] .pace-progress-inner:before{-webkit-transform:rotate(20deg);-ms-transform:rotate(20deg);transform:rotate(20deg)}.pace-progress[data-progress="19"] .pace-progress-inner:before{-webkit-transform:rotate(23deg);-ms-transform:rotate(23deg);transform:rotate(23deg)}.pace-progress[data-progress="20"] .pace-progress-inner:before{-webkit-transform:rotate(27deg);-ms-transform:rotate(27deg);transform:rotate(27deg)}.pace-progress[data-progress="21"] .pace-progress-inner:before{-webkit-transform:rotate(31deg);-ms-transform:rotate(31deg);transform:rotate(31deg)}.pace-progress[data-progress="22"] .pace-progress-inner:before{-webkit-transform:rotate(34deg);-ms-transform:rotate(34deg);transform:rotate(34deg)}.pace-progress[data-progress="23"] .pace-progress-inner:before{-webkit-transform:rotate(38deg);-ms-transform:rotate(38deg);transform:rotate(38deg)}.pace-progress[data-progress="24"] .pace-progress-inner:before{-webkit-transform:rotate(41deg);-ms-transform:rotate(41deg);transform:rotate(41deg)}.pace-progress[data-progress="25"] .pace-progress-inner:before{-webkit-transform:rotate(45deg);-ms-transform:rotate(45deg);transform:rotate(45deg)}.pace-progress[data-progress="26"] .pace-progress-inner:before{-webkit-transform:rotate(49deg);-ms-transform:rotate(49deg);transform:rotate(49deg)}.pace-progress[data-progress="27"] .pace-progress-inner:before{-webkit-transform:rotate(52deg);-ms-transform:rotate(52deg);transform:rotate(52deg)}.pace-progress[data-progress="28"] .pace-progress-inner:before{-webkit-transform:rotate(56deg);-ms-transform:rotate(56deg);transform:rotate(56deg)}.pace-progress[data-progress="29"] .pace-progress-inner:before{-webkit-transform:rotate(59deg);-ms-transform:rotate(59deg);transform:rotate(59deg)}.pace-progress[data-progress="30"] .pace-progress-inner:before{-webkit-transform:rotate(63deg);-ms-transform:rotate(63deg);transform:rotate(63deg)}.pace-progress[data-progress="31"] .pace-progress-inner:before{-webkit-transform:rotate(67deg);-ms-transform:rotate(67deg);transform:rotate(67deg)}.pace-progress[data-progress="32"] .pace-progress-inner:before{-webkit-transform:rotate(70deg);-ms-transform:rotate(70deg);transform:rotate(70deg)}.pace-progress[data-progress="33"] .pace-progress-inner:before{-webkit-transform:rotate(74deg);-ms-transform:rotate(74deg);transform:rotate(74deg)}.pace-progress[data-progress="34"] .pace-progress-inner:before{-webkit-transform:rotate(77deg);-ms-transform:rotate(77deg);transform:rotate(77deg)}.pace-progress[data-progress="35"] .pace-progress-inner:before{-webkit-transform:rotate(81deg);-ms-transform:rotate(81deg);transform:rotate(81deg)}.pace-progress[data-progress="36"] .pace-progress-inner:before{-webkit-transform:rotate(85deg);-ms-transform:rotate(85deg);transform:rotate(85deg)}.pace-progress[data-progress="37"] .pace-progress-inner:before{-webkit-transform:rotate(88deg);-ms-transform:rotate(88deg);transform:rotate(88deg)}.pace-progress[data-progress="38"] .pace-progress-inner:before{-webkit-transform:rotate(92deg);-ms-transform:rotate(92deg);transform:rotate(92deg)}.pace-progress[data-progress="39"] .pace-progress-inner:before{-webkit-transform:rotate(95deg);-ms-transform:rotate(95deg);transform:rotate(95deg)}.pace-progress[data-progress="40"] .pace-progress-inner:before{-webkit-transform:rotate(99deg);-ms-transform:rotate(99deg);transform:rotate(99deg)}.pace-progress[data-progress="41"] .pace-progress-inner:before{-webkit-transform:rotate(103deg);-ms-transform:rotate(103deg);transform:rotate(103deg)}.pace-progress[data-progress="42"] .pace-progress-inner:before{-webkit-transform:rotate(106deg);-ms-transform:rotate(106deg);transform:rotate(106deg)}.pace-progress[data-progress="43"] .pace-progress-inner:before{-webkit-transform:rotate(110deg);-ms-transform:rotate(110deg);transform:rotate(110deg)}.pace-progress[data-progress="44"] .pace-progress-inner:before{-webkit-transform:rotate(113deg);-ms-transform:rotate(113deg);transform:rotate(113deg)}.pace-progress[data-progress="45"] .pace-progress-inner:before{-webkit-transform:rotate(117deg);-ms-transform:rotate(117deg);transform:rotate(117deg)}.pace-progress[data-progress="46"] .pace-progress-inner:before{-webkit-transform:rotate(121deg);-ms-transform:rotate(121deg);transform:rotate(121deg)}.pace-progress[data-progress="47"] .pace-progress-inner:before{-webkit-transform:rotate(124deg);-ms-transform:rotate(124deg);transform:rotate(124deg)}.pace-progress[data-progress="48"] .pace-progress-inner:before{-webkit-transform:rotate(128deg);-ms-transform:rotate(128deg);transform:rotate(128deg)}.pace-progress[data-progress="49"] .pace-progress-inner:before{-webkit-transform:rotate(131deg);-ms-transform:rotate(131deg);transform:rotate(131deg)}.pace-progress[data-progress="50"] .pace-progress-inner:before{-webkit-transform:rotate(135deg);-ms-transform:rotate(135deg);transform:rotate(135deg)}.pace-progress[data-progress="50"] .pace-progress-inner:after{-webkit-transform:rotate(315deg);-ms-transform:rotate(315deg);transform:rotate(315deg);display:block}.pace-progress[data-progress="51"] .pace-progress-inner:after{-webkit-transform:rotate(319deg);-ms-transform:rotate(319deg);transform:rotate(319deg);display:block}.pace-progress[data-progress="52"] .pace-progress-inner:after{-webkit-transform:rotate(322deg);-ms-transform:rotate(322deg);transform:rotate(322deg);display:block}.pace-progress[data-progress="53"] .pace-progress-inner:after{-webkit-transform:rotate(326deg);-ms-transform:rotate(326deg);transform:rotate(326deg);display:block}.pace-progress[data-progress="54"] .pace-progress-inner:after{-webkit-transform:rotate(329deg);-ms-transform:rotate(329deg);transform:rotate(329deg);display:block}.pace-progress[data-progress="55"] .pace-progress-inner:after{-webkit-transform:rotate(333deg);-ms-transform:rotate(333deg);transform:rotate(333deg);display:block}.pace-progress[data-progress="56"] .pace-progress-inner:after{-webkit-transform:rotate(337deg);-ms-transform:rotate(337deg);transform:rotate(337deg);display:block}.pace-progress[data-progress="57"] .pace-progress-inner:after{-webkit-transform:rotate(340deg);-ms-transform:rotate(340deg);transform:rotate(340deg);display:block}.pace-progress[data-progress="58"] .pace-progress-inner:after{-webkit-transform:rotate(344deg);-ms-transform:rotate(344deg);transform:rotate(344deg);display:block}.pace-progress[data-progress="59"] .pace-progress-inner:after{-webkit-transform:rotate(347deg);-ms-transform:rotate(347deg);transform:rotate(347deg);display:block}.pace-progress[data-progress="60"] .pace-progress-inner:after{-webkit-transform:rotate(351deg);-ms-transform:rotate(351deg);transform:rotate(351deg);display:block}.pace-progress[data-progress="61"] .pace-progress-inner:after{-webkit-transform:rotate(355deg);-ms-transform:rotate(355deg);transform:rotate(355deg);display:block}.pace-progress[data-progress="62"] .pace-progress-inner:after{-webkit-transform:rotate(358deg);-ms-transform:rotate(358deg);transform:rotate(358deg);display:block}.pace-progress[data-progress="63"] .pace-progress-inner:after{-webkit-transform:rotate(362deg);-ms-transform:rotate(362deg);transform:rotate(362deg);display:block}.pace-progress[data-progress="64"] .pace-progress-inner:after{-webkit-transform:rotate(365deg);-ms-transform:rotate(365deg);transform:rotate(365deg);display:block}.pace-progress[data-progress="65"] .pace-progress-inner:after{-webkit-transform:rotate(369deg);-ms-transform:rotate(369deg);transform:rotate(369deg);display:block}.pace-progress[data-progress="66"] .pace-progress-inner:after{-webkit-transform:rotate(373deg);-ms-transform:rotate(373deg);transform:rotate(373deg);display:block}.pace-progress[data-progress="67"] .pace-progress-inner:after{-webkit-transform:rotate(376deg);-ms-transform:rotate(376deg);transform:rotate(376deg);display:block}.pace-progress[data-progress="68"] .pace-progress-inner:after{-webkit-transform:rotate(380deg);-ms-transform:rotate(380deg);transform:rotate(380deg);display:block}.pace-progress[data-progress="69"] .pace-progress-inner:after{-webkit-transform:rotate(383deg);-ms-transform:rotate(383deg);transform:rotate(383deg);display:block}.pace-progress[data-progress="70"] .pace-progress-inner:after{-webkit-transform:rotate(387deg);-ms-transform:rotate(387deg);transform:rotate(387deg);display:block}.pace-progress[data-progress="71"] .pace-progress-inner:after{-webkit-transform:rotate(391deg);-ms-transform:rotate(391deg);transform:rotate(391deg);display:block}.pace-progress[data-progress="72"] .pace-progress-inner:after{-webkit-transform:rotate(394deg);-ms-transform:rotate(394deg);transform:rotate(394deg);display:block}.pace-progress[data-progress="73"] .pace-progress-inner:after{-webkit-transform:rotate(398deg);-ms-transform:rotate(398deg);transform:rotate(398deg);display:block}.pace-progress[data-progress="74"] .pace-progress-inner:after{-webkit-transform:rotate(401deg);-ms-transform:rotate(401deg);transform:rotate(401deg);display:block}.pace-progress[data-progress="75"] .pace-progress-inner:after{-webkit-transform:rotate(405deg);-ms-transform:rotate(405deg);transform:rotate(405deg);display:block}.pace-progress[data-progress="76"] .pace-progress-inner:after{-webkit-transform:rotate(409deg);-ms-transform:rotate(409deg);transform:rotate(409deg);display:block}.pace-progress[data-progress="77"] .pace-progress-inner:after{-webkit-transform:rotate(412deg);-ms-transform:rotate(412deg);transform:rotate(412deg);display:block}.pace-progress[data-progress="78"] .pace-progress-inner:after{-webkit-transform:rotate(416deg);-ms-transform:rotate(416deg);transform:rotate(416deg);display:block}.pace-progress[data-progress="79"] .pace-progress-inner:after{-webkit-transform:rotate(419deg);-ms-transform:rotate(419deg);transform:rotate(419deg);display:block}.pace-progress[data-progress="80"] .pace-progress-inner:after{-webkit-transform:rotate(423deg);-ms-transform:rotate(423deg);transform:rotate(423deg);display:block}.pace-progress[data-progress="81"] .pace-progress-inner:after{-webkit-transform:rotate(427deg);-ms-transform:rotate(427deg);transform:rotate(427deg);display:block}.pace-progress[data-progress="82"] .pace-progress-inner:after{-webkit-transform:rotate(430deg);-ms-transform:rotate(430deg);transform:rotate(430deg);display:block}.pace-progress[data-progress="83"] .pace-progress-inner:after{-webkit-transform:rotate(434deg);-ms-transform:rotate(434deg);transform:rotate(434deg);display:block}.pace-progress[data-progress="84"] .pace-progress-inner:after{-webkit-transform:rotate(437deg);-ms-transform:rotate(437deg);transform:rotate(437deg);display:block}.pace-progress[data-progress="85"] .pace-progress-inner:after{-webkit-transform:rotate(441deg);-ms-transform:rotate(441deg);transform:rotate(441deg);display:block}.pace-progress[data-progress="86"] .pace-progress-inner:after{-webkit-transform:rotate(445deg);-ms-transform:rotate(445deg);transform:rotate(445deg);display:block}.pace-progress[data-progress="87"] .pace-progress-inner:after{-webkit-transform:rotate(448deg);-ms-transform:rotate(448deg);transform:rotate(448deg);display:block}.pace-progress[data-progress="88"] .pace-progress-inner:after{-webkit-transform:rotate(452deg);-ms-transform:rotate(452deg);transform:rotate(452deg);display:block}.pace-progress[data-progress="89"] .pace-progress-inner:after{-webkit-transform:rotate(455deg);-ms-transform:rotate(455deg);transform:rotate(455deg);display:block}.pace-progress[data-progress="90"] .pace-progress-inner:after{-webkit-transform:rotate(459deg);-ms-transform:rotate(459deg);transform:rotate(459deg);display:block}.pace-progress[data-progress="91"] .pace-progress-inner:after{-webkit-transform:rotate(463deg);-ms-transform:rotate(463deg);transform:rotate(463deg);display:block}.pace-progress[data-progress="92"] .pace-progress-inner:after{-webkit-transform:rotate(466deg);-ms-transform:rotate(466deg);transform:rotate(466deg);display:block}.pace-progress[data-progress="93"] .pace-progress-inner:after{-webkit-transform:rotate(470deg);-ms-transform:rotate(470deg);transform:rotate(470deg);display:block}.pace-progress[data-progress="94"] .pace-progress-inner:after{-webkit-transform:rotate(473deg);-ms-transform:rotate(473deg);transform:rotate(473deg);display:block}.pace-progress[data-progress="95"] .pace-progress-inner:after{-webkit-transform:rotate(477deg);-ms-transform:rotate(477deg);transform:rotate(477deg);display:block}.pace-progress[data-progress="96"] .pace-progress-inner:after{-webkit-transform:rotate(481deg);-ms-transform:rotate(481deg);transform:rotate(481deg);display:block}.pace-progress[data-progress="97"] .pace-progress-inner:after{-webkit-transform:rotate(484deg);-ms-transform:rotate(484deg);transform:rotate(484deg);display:block}.pace-progress[data-progress="98"] .pace-progress-inner:after{-webkit-transform:rotate(488deg);-ms-transform:rotate(488deg);transform:rotate(488deg);display:block}.pace-progress[data-progress="99"] .pace-progress-inner:after{-webkit-transform:rotate(491deg);-ms-transform:rotate(491deg);transform:rotate(491deg);display:block}.pace-progress[data-progress="100"] .pace-progress-inner:after{-webkit-transform:rotate(495deg);-ms-transform:rotate(495deg);transform:rotate(495deg);display:block}.pace-progress[data-progress="00"] .pace-progress-inner{-webkit-transform:rotate(0);-ms-transform:rotate(0);transform:rotate(0)}.pace-progress[data-progress="01"] .pace-progress-inner{-webkit-transform:rotate(4deg);-ms-transform:rotate(4deg);transform:rotate(4deg)}.pace-progress[data-progress="02"] .pace-progress-inner{-webkit-transform:rotate(7deg);-ms-transform:rotate(7deg);transform:rotate(7deg)}.pace-progress[data-progress="03"] .pace-progress-inner{-webkit-transform:rotate(11deg);-ms-transform:rotate(11deg);transform:rotate(11deg)}.pace-progress[data-progress="04"] .pace-progress-inner{-webkit-transform:rotate(14deg);-ms-transform:rotate(14deg);transform:rotate(14deg)}.pace-progress[data-progress="05"] .pace-progress-inner{-webkit-transform:rotate(18deg);-ms-transform:rotate(18deg);transform:rotate(18deg)}.pace-progress[data-progress="06"] .pace-progress-inner{-webkit-transform:rotate(22deg);-ms-transform:rotate(22deg);transform:rotate(22deg)}.pace-progress[data-progress="07"] .pace-progress-inner{-webkit-transform:rotate(25deg);-ms-transform:rotate(25deg);transform:rotate(25deg)}.pace-progress[data-progress="08"] .pace-progress-inner{-webkit-transform:rotate(29deg);-ms-transform:rotate(29deg);transform:rotate(29deg)}.pace-progress[data-progress="09"] .pace-progress-inner{-webkit-transform:rotate(32deg);-ms-transform:rotate(32deg);transform:rotate(32deg)}.pace-progress[data-progress="10"] .pace-progress-inner{-webkit-transform:rotate(36deg);-ms-transform:rotate(36deg);transform:rotate(36deg)}.pace-progress[data-progress="11"] .pace-progress-inner{-webkit-transform:rotate(40deg);-ms-transform:rotate(40deg);transform:rotate(40deg)}.pace-progress[data-progress="12"] .pace-progress-inner{-webkit-transform:rotate(43deg);-ms-transform:rotate(43deg);transform:rotate(43deg)}.pace-progress[data-progress="13"] .pace-progress-inner{-webkit-transform:rotate(47deg);-ms-transform:rotate(47deg);transform:rotate(47deg)}.pace-progress[data-progress="14"] .pace-progress-inner{-webkit-transform:rotate(50deg);-ms-transform:rotate(50deg);transform:rotate(50deg)}.pace-progress[data-progress="15"] .pace-progress-inner{-webkit-transform:rotate(54deg);-ms-transform:rotate(54deg);transform:rotate(54deg)}.pace-progress[data-progress="16"] .pace-progress-inner{-webkit-transform:rotate(58deg);-ms-transform:rotate(58deg);transform:rotate(58deg)}.pace-progress[data-progress="17"] .pace-progress-inner{-webkit-transform:rotate(61deg);-ms-transform:rotate(61deg);transform:rotate(61deg)}.pace-progress[data-progress="18"] .pace-progress-inner{-webkit-transform:rotate(65deg);-ms-transform:rotate(65deg);transform:rotate(65deg)}.pace-progress[data-progress="19"] .pace-progress-inner{-webkit-transform:rotate(68deg);-ms-transform:rotate(68deg);transform:rotate(68deg)}.pace-progress[data-progress="20"] .pace-progress-inner{-webkit-transform:rotate(72deg);-ms-transform:rotate(72deg);transform:rotate(72deg)}.pace-progress[data-progress="21"] .pace-progress-inner{-webkit-transform:rotate(76deg);-ms-transform:rotate(76deg);transform:rotate(76deg)}.pace-progress[data-progress="22"] .pace-progress-inner{-webkit-transform:rotate(79deg);-ms-transform:rotate(79deg);transform:rotate(79deg)}.pace-progress[data-progress="23"] .pace-progress-inner{-webkit-transform:rotate(83deg);-ms-transform:rotate(83deg);transform:rotate(83deg)}.pace-progress[data-progress="24"] .pace-progress-inner{-webkit-transform:rotate(86deg);-ms-transform:rotate(86deg);transform:rotate(86deg)}.pace-progress[data-progress="25"] .pace-progress-inner{-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);transform:rotate(90deg)}.pace-progress[data-progress="26"] .pace-progress-inner{-webkit-transform:rotate(94deg);-ms-transform:rotate(94deg);transform:rotate(94deg)}.pace-progress[data-progress="27"] .pace-progress-inner{-webkit-transform:rotate(97deg);-ms-transform:rotate(97deg);transform:rotate(97deg)}.pace-progress[data-progress="28"] .pace-progress-inner{-webkit-transform:rotate(101deg);-ms-transform:rotate(101deg);transform:rotate(101deg)}.pace-progress[data-progress="29"] .pace-progress-inner{-webkit-transform:rotate(104deg);-ms-transform:rotate(104deg);transform:rotate(104deg)}.pace-progress[data-progress="30"] .pace-progress-inner{-webkit-transform:rotate(108deg);-ms-transform:rotate(108deg);transform:rotate(108deg)}.pace-progress[data-progress="31"] .pace-progress-inner{-webkit-transform:rotate(112deg);-ms-transform:rotate(112deg);transform:rotate(112deg)}.pace-progress[data-progress="32"] .pace-progress-inner{-webkit-transform:rotate(115deg);-ms-transform:rotate(115deg);transform:rotate(115deg)}.pace-progress[data-progress="33"] .pace-progress-inner{-webkit-transform:rotate(119deg);-ms-transform:rotate(119deg);transform:rotate(119deg)}.pace-progress[data-progress="34"] .pace-progress-inner{-webkit-transform:rotate(122deg);-ms-transform:rotate(122deg);transform:rotate(122deg)}.pace-progress[data-progress="35"] .pace-progress-inner{-webkit-transform:rotate(126deg);-ms-transform:rotate(126deg);transform:rotate(126deg)}.pace-progress[data-progress="36"] .pace-progress-inner{-webkit-transform:rotate(130deg);-ms-transform:rotate(130deg);transform:rotate(130deg)}.pace-progress[data-progress="37"] .pace-progress-inner{-webkit-transform:rotate(133deg);-ms-transform:rotate(133deg);transform:rotate(133deg)}.pace-progress[data-progress="38"] .pace-progress-inner{-webkit-transform:rotate(137deg);-ms-transform:rotate(137deg);transform:rotate(137deg)}.pace-progress[data-progress="39"] .pace-progress-inner{-webkit-transform:rotate(140deg);-ms-transform:rotate(140deg);transform:rotate(140deg)}.pace-progress[data-progress="40"] .pace-progress-inner{-webkit-transform:rotate(144deg);-ms-transform:rotate(144deg);transform:rotate(144deg)}.pace-progress[data-progress="41"] .pace-progress-inner{-webkit-transform:rotate(148deg);-ms-transform:rotate(148deg);transform:rotate(148deg)}.pace-progress[data-progress="42"] .pace-progress-inner{-webkit-transform:rotate(151deg);-ms-transform:rotate(151deg);transform:rotate(151deg)}.pace-progress[data-progress="43"] .pace-progress-inner{-webkit-transform:rotate(155deg);-ms-transform:rotate(155deg);transform:rotate(155deg)}.pace-progress[data-progress="44"] .pace-progress-inner{-webkit-transform:rotate(158deg);-ms-transform:rotate(158deg);transform:rotate(158deg)}.pace-progress[data-progress="45"] .pace-progress-inner{-webkit-transform:rotate(162deg);-ms-transform:rotate(162deg);transform:rotate(162deg)}.pace-progress[data-progress="46"] .pace-progress-inner{-webkit-transform:rotate(166deg);-ms-transform:rotate(166deg);transform:rotate(166deg)}.pace-progress[data-progress="47"] .pace-progress-inner{-webkit-transform:rotate(169deg);-ms-transform:rotate(169deg);transform:rotate(169deg)}.pace-progress[data-progress="48"] .pace-progress-inner{-webkit-transform:rotate(173deg);-ms-transform:rotate(173deg);transform:rotate(173deg)}.pace-progress[data-progress="49"] .pace-progress-inner{-webkit-transform:rotate(176deg);-ms-transform:rotate(176deg);transform:rotate(176deg)}.pace-progress[data-progress="50"] .pace-progress-inner{-webkit-transform:rotate(180deg);-ms-transform:rotate(180deg);transform:rotate(180deg)}.pace-progress[data-progress="51"] .pace-progress-inner{-webkit-transform:rotate(184deg);-ms-transform:rotate(184deg);transform:rotate(184deg);overflow:visible}.pace-progress[data-progress="52"] .pace-progress-inner{-webkit-transform:rotate(187deg);-ms-transform:rotate(187deg);transform:rotate(187deg);overflow:visible}.pace-progress[data-progress="53"] .pace-progress-inner{-webkit-transform:rotate(191deg);-ms-transform:rotate(191deg);transform:rotate(191deg);overflow:visible}.pace-progress[data-progress="54"] .pace-progress-inner{-webkit-transform:rotate(194deg);-ms-transform:rotate(194deg);transform:rotate(194deg);overflow:visible}.pace-progress[data-progress="55"] .pace-progress-inner{-webkit-transform:rotate(198deg);-ms-transform:rotate(198deg);transform:rotate(198deg);overflow:visible}.pace-progress[data-progress="56"] .pace-progress-inner{-webkit-transform:rotate(202deg);-ms-transform:rotate(202deg);transform:rotate(202deg);overflow:visible}.pace-progress[data-progress="57"] .pace-progress-inner{-webkit-transform:rotate(205deg);-ms-transform:rotate(205deg);transform:rotate(205deg);overflow:visible}.pace-progress[data-progress="58"] .pace-progress-inner{-webkit-transform:rotate(209deg);-ms-transform:rotate(209deg);transform:rotate(209deg);overflow:visible}.pace-progress[data-progress="59"] .pace-progress-inner{-webkit-transform:rotate(212deg);-ms-transform:rotate(212deg);transform:rotate(212deg);overflow:visible}.pace-progress[data-progress="60"] .pace-progress-inner{-webkit-transform:rotate(216deg);-ms-transform:rotate(216deg);transform:rotate(216deg);overflow:visible}.pace-progress[data-progress="61"] .pace-progress-inner{-webkit-transform:rotate(220deg);-ms-transform:rotate(220deg);transform:rotate(220deg);overflow:visible}.pace-progress[data-progress="62"] .pace-progress-inner{-webkit-transform:rotate(223deg);-ms-transform:rotate(223deg);transform:rotate(223deg);overflow:visible}.pace-progress[data-progress="63"] .pace-progress-inner{-webkit-transform:rotate(227deg);-ms-transform:rotate(227deg);transform:rotate(227deg);overflow:visible}.pace-progress[data-progress="64"] .pace-progress-inner{-webkit-transform:rotate(230deg);-ms-transform:rotate(230deg);transform:rotate(230deg);overflow:visible}.pace-progress[data-progress="65"] .pace-progress-inner{-webkit-transform:rotate(234deg);-ms-transform:rotate(234deg);transform:rotate(234deg);overflow:visible}.pace-progress[data-progress="66"] .pace-progress-inner{-webkit-transform:rotate(238deg);-ms-transform:rotate(238deg);transform:rotate(238deg);overflow:visible}.pace-progress[data-progress="67"] .pace-progress-inner{-webkit-transform:rotate(241deg);-ms-transform:rotate(241deg);transform:rotate(241deg);overflow:visible}.pace-progress[data-progress="68"] .pace-progress-inner{-webkit-transform:rotate(245deg);-ms-transform:rotate(245deg);transform:rotate(245deg);overflow:visible}.pace-progress[data-progress="69"] .pace-progress-inner{-webkit-transform:rotate(248deg);-ms-transform:rotate(248deg);transform:rotate(248deg);overflow:visible}.pace-progress[data-progress="70"] .pace-progress-inner{-webkit-transform:rotate(252deg);-ms-transform:rotate(252deg);transform:rotate(252deg);overflow:visible}.pace-progress[data-progress="71"] .pace-progress-inner{-webkit-transform:rotate(256deg);-ms-transform:rotate(256deg);transform:rotate(256deg);overflow:visible}.pace-progress[data-progress="72"] .pace-progress-inner{-webkit-transform:rotate(259deg);-ms-transform:rotate(259deg);transform:rotate(259deg);overflow:visible}.pace-progress[data-progress="73"] .pace-progress-inner{-webkit-transform:rotate(263deg);-ms-transform:rotate(263deg);transform:rotate(263deg);overflow:visible}.pace-progress[data-progress="74"] .pace-progress-inner{-webkit-transform:rotate(266deg);-ms-transform:rotate(266deg);transform:rotate(266deg);overflow:visible}.pace-progress[data-progress="75"] .pace-progress-inner{-webkit-transform:rotate(270deg);-ms-transform:rotate(270deg);transform:rotate(270deg);overflow:visible}.pace-progress[data-progress="76"] .pace-progress-inner{-webkit-transform:rotate(274deg);-ms-transform:rotate(274deg);transform:rotate(274deg);overflow:visible}.pace-progress[data-progress="77"] .pace-progress-inner{-webkit-transform:rotate(277deg);-ms-transform:rotate(277deg);transform:rotate(277deg);overflow:visible}.pace-progress[data-progress="78"] .pace-progress-inner{-webkit-transform:rotate(281deg);-ms-transform:rotate(281deg);transform:rotate(281deg);overflow:visible}.pace-progress[data-progress="79"] .pace-progress-inner{-webkit-transform:rotate(284deg);-ms-transform:rotate(284deg);transform:rotate(284deg);overflow:visible}.pace-progress[data-progress="80"] .pace-progress-inner{-webkit-transform:rotate(288deg);-ms-transform:rotate(288deg);transform:rotate(288deg);overflow:visible}.pace-progress[data-progress="81"] .pace-progress-inner{-webkit-transform:rotate(292deg);-ms-transform:rotate(292deg);transform:rotate(292deg);overflow:visible}.pace-progress[data-progress="82"] .pace-progress-inner{-webkit-transform:rotate(295deg);-ms-transform:rotate(295deg);transform:rotate(295deg);overflow:visible}.pace-progress[data-progress="83"] .pace-progress-inner{-webkit-transform:rotate(299deg);-ms-transform:rotate(299deg);transform:rotate(299deg);overflow:visible}.pace-progress[data-progress="84"] .pace-progress-inner{-webkit-transform:rotate(302deg);-ms-transform:rotate(302deg);transform:rotate(302deg);overflow:visible}.pace-progress[data-progress="85"] .pace-progress-inner{-webkit-transform:rotate(306deg);-ms-transform:rotate(306deg);transform:rotate(306deg);overflow:visible}.pace-progress[data-progress="86"] .pace-progress-inner{-webkit-transform:rotate(310deg);-ms-transform:rotate(310deg);transform:rotate(310deg);overflow:visible}.pace-progress[data-progress="87"] .pace-progress-inner{-webkit-transform:rotate(313deg);-ms-transform:rotate(313deg);transform:rotate(313deg);overflow:visible}.pace-progress[data-progress="88"] .pace-progress-inner{-webkit-transform:rotate(317deg);-ms-transform:rotate(317deg);transform:rotate(317deg);overflow:visible}.pace-progress[data-progress="89"] .pace-progress-inner{-webkit-transform:rotate(320deg);-ms-transform:rotate(320deg);transform:rotate(320deg);overflow:visible}.pace-progress[data-progress="90"] .pace-progress-inner{-webkit-transform:rotate(324deg);-ms-transform:rotate(324deg);transform:rotate(324deg);overflow:visible}.pace-progress[data-progress="91"] .pace-progress-inner{-webkit-transform:rotate(328deg);-ms-transform:rotate(328deg);transform:rotate(328deg);overflow:visible}.pace-progress[data-progress="92"] .pace-progress-inner{-webkit-transform:rotate(331deg);-ms-transform:rotate(331deg);transform:rotate(331deg);overflow:visible}.pace-progress[data-progress="93"] .pace-progress-inner{-webkit-transform:rotate(335deg);-ms-transform:rotate(335deg);transform:rotate(335deg);overflow:visible}.pace-progress[data-progress="94"] .pace-progress-inner{-webkit-transform:rotate(338deg);-ms-transform:rotate(338deg);transform:rotate(338deg);overflow:visible}.pace-progress[data-progress="95"] .pace-progress-inner{-webkit-transform:rotate(342deg);-ms-transform:rotate(342deg);transform:rotate(342deg);overflow:visible}.pace-progress[data-progress="96"] .pace-progress-inner{-webkit-transform:rotate(346deg);-ms-transform:rotate(346deg);transform:rotate(346deg);overflow:visible}.pace-progress[data-progress="97"] .pace-progress-inner{-webkit-transform:rotate(349deg);-ms-transform:rotate(349deg);transform:rotate(349deg);overflow:visible}.pace-progress[data-progress="98"] .pace-progress-inner{-webkit-transform:rotate(353deg);-ms-transform:rotate(353deg);transform:rotate(353deg);overflow:visible}.pace-progress[data-progress="99"] .pace-progress-inner{-webkit-transform:rotate(356deg);-ms-transform:rotate(356deg);transform:rotate(356deg);overflow:visible}.pace-progress[data-progress="100"] .pace-progress-inner{-webkit-transform:rotate(360deg);-ms-transform:rotate(360deg);transform:rotate(360deg);overflow:visible}
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/lib/pace/pace.min.js</url>
    <content><![CDATA[/*! pace 1.0.2 */
(function(){var a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X=[].slice,Y={}.hasOwnProperty,Z=function(a,b){function c(){this.constructor=a}for(var d in b)Y.call(b,d)&&(a[d]=b[d]);return c.prototype=b.prototype,a.prototype=new c,a.__super__=b.prototype,a},$=[].indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(b in this&&this[b]===a)return b;return-1};for(u={catchupTime:100,initialRate:.03,minTime:250,ghostTime:100,maxProgressPerFrame:20,easeFactor:1.25,startOnPageLoad:!0,restartOnPushState:!0,restartOnRequestAfter:500,target:"body",elements:{checkInterval:100,selectors:["body"]},eventLag:{minSamples:10,sampleCount:3,lagThreshold:3},ajax:{trackMethods:["GET"],trackWebSockets:!0,ignoreURLs:[]}},C=function(){var a;return null!=(a="undefined"!=typeof performance&&null!==performance&&"function"==typeof performance.now?performance.now():void 0)?a:+new Date},E=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame,t=window.cancelAnimationFrame||window.mozCancelAnimationFrame,null==E&&(E=function(a){return setTimeout(a,50)},t=function(a){return clearTimeout(a)}),G=function(a){var b,c;return b=C(),(c=function(){var d;return d=C()-b,d>=33?(b=C(),a(d,function(){return E(c)})):setTimeout(c,33-d)})()},F=function(){var a,b,c;return c=arguments[0],b=arguments[1],a=3<=arguments.length?X.call(arguments,2):[],"function"==typeof c[b]?c[b].apply(c,a):c[b]},v=function(){var a,b,c,d,e,f,g;for(b=arguments[0],d=2<=arguments.length?X.call(arguments,1):[],f=0,g=d.length;g>f;f++)if(c=d[f])for(a in c)Y.call(c,a)&&(e=c[a],null!=b[a]&&"object"==typeof b[a]&&null!=e&&"object"==typeof e?v(b[a],e):b[a]=e);return b},q=function(a){var b,c,d,e,f;for(c=b=0,e=0,f=a.length;f>e;e++)d=a[e],c+=Math.abs(d),b++;return c/b},x=function(a,b){var c,d,e;if(null==a&&(a="options"),null==b&&(b=!0),e=document.querySelector("[data-pace-"+a+"]")){if(c=e.getAttribute("data-pace-"+a),!b)return c;try{return JSON.parse(c)}catch(f){return d=f,"undefined"!=typeof console&&null!==console?console.error("Error parsing inline pace options",d):void 0}}},g=function(){function a(){}return a.prototype.on=function(a,b,c,d){var e;return null==d&&(d=!1),null==this.bindings&&(this.bindings={}),null==(e=this.bindings)[a]&&(e[a]=[]),this.bindings[a].push({handler:b,ctx:c,once:d})},a.prototype.once=function(a,b,c){return this.on(a,b,c,!0)},a.prototype.off=function(a,b){var c,d,e;if(null!=(null!=(d=this.bindings)?d[a]:void 0)){if(null==b)return delete this.bindings[a];for(c=0,e=[];c<this.bindings[a].length;)e.push(this.bindings[a][c].handler===b?this.bindings[a].splice(c,1):c++);return e}},a.prototype.trigger=function(){var a,b,c,d,e,f,g,h,i;if(c=arguments[0],a=2<=arguments.length?X.call(arguments,1):[],null!=(g=this.bindings)?g[c]:void 0){for(e=0,i=[];e<this.bindings[c].length;)h=this.bindings[c][e],d=h.handler,b=h.ctx,f=h.once,d.apply(null!=b?b:this,a),i.push(f?this.bindings[c].splice(e,1):e++);return i}},a}(),j=window.Pace||{},window.Pace=j,v(j,g.prototype),D=j.options=v({},u,window.paceOptions,x()),U=["ajax","document","eventLag","elements"],Q=0,S=U.length;S>Q;Q++)K=U[Q],D[K]===!0&&(D[K]=u[K]);i=function(a){function b(){return V=b.__super__.constructor.apply(this,arguments)}return Z(b,a),b}(Error),b=function(){function a(){this.progress=0}return a.prototype.getElement=function(){var a;if(null==this.el){if(a=document.querySelector(D.target),!a)throw new i;this.el=document.createElement("div"),this.el.className="pace pace-active",document.body.className=document.body.className.replace(/pace-done/g,""),document.body.className+=" pace-running",this.el.innerHTML='<div class="pace-progress">\n  <div class="pace-progress-inner"></div>\n</div>\n<div class="pace-activity"></div>',null!=a.firstChild?a.insertBefore(this.el,a.firstChild):a.appendChild(this.el)}return this.el},a.prototype.finish=function(){var a;return a=this.getElement(),a.className=a.className.replace("pace-active",""),a.className+=" pace-inactive",document.body.className=document.body.className.replace("pace-running",""),document.body.className+=" pace-done"},a.prototype.update=function(a){return this.progress=a,this.render()},a.prototype.destroy=function(){try{this.getElement().parentNode.removeChild(this.getElement())}catch(a){i=a}return this.el=void 0},a.prototype.render=function(){var a,b,c,d,e,f,g;if(null==document.querySelector(D.target))return!1;for(a=this.getElement(),d="translate3d("+this.progress+"%, 0, 0)",g=["webkitTransform","msTransform","transform"],e=0,f=g.length;f>e;e++)b=g[e],a.children[0].style[b]=d;return(!this.lastRenderedProgress||this.lastRenderedProgress|0!==this.progress|0)&&(a.children[0].setAttribute("data-progress-text",""+(0|this.progress)+"%"),this.progress>=100?c="99":(c=this.progress<10?"0":"",c+=0|this.progress),a.children[0].setAttribute("data-progress",""+c)),this.lastRenderedProgress=this.progress},a.prototype.done=function(){return this.progress>=100},a}(),h=function(){function a(){this.bindings={}}return a.prototype.trigger=function(a,b){var c,d,e,f,g;if(null!=this.bindings[a]){for(f=this.bindings[a],g=[],d=0,e=f.length;e>d;d++)c=f[d],g.push(c.call(this,b));return g}},a.prototype.on=function(a,b){var c;return null==(c=this.bindings)[a]&&(c[a]=[]),this.bindings[a].push(b)},a}(),P=window.XMLHttpRequest,O=window.XDomainRequest,N=window.WebSocket,w=function(a,b){var c,d,e;e=[];for(d in b.prototype)try{e.push(null==a[d]&&"function"!=typeof b[d]?"function"==typeof Object.defineProperty?Object.defineProperty(a,d,{get:function(){return b.prototype[d]},configurable:!0,enumerable:!0}):a[d]=b.prototype[d]:void 0)}catch(f){c=f}return e},A=[],j.ignore=function(){var a,b,c;return b=arguments[0],a=2<=arguments.length?X.call(arguments,1):[],A.unshift("ignore"),c=b.apply(null,a),A.shift(),c},j.track=function(){var a,b,c;return b=arguments[0],a=2<=arguments.length?X.call(arguments,1):[],A.unshift("track"),c=b.apply(null,a),A.shift(),c},J=function(a){var b;if(null==a&&(a="GET"),"track"===A[0])return"force";if(!A.length&&D.ajax){if("socket"===a&&D.ajax.trackWebSockets)return!0;if(b=a.toUpperCase(),$.call(D.ajax.trackMethods,b)>=0)return!0}return!1},k=function(a){function b(){var a,c=this;b.__super__.constructor.apply(this,arguments),a=function(a){var b;return b=a.open,a.open=function(d,e){return J(d)&&c.trigger("request",{type:d,url:e,request:a}),b.apply(a,arguments)}},window.XMLHttpRequest=function(b){var c;return c=new P(b),a(c),c};try{w(window.XMLHttpRequest,P)}catch(d){}if(null!=O){window.XDomainRequest=function(){var b;return b=new O,a(b),b};try{w(window.XDomainRequest,O)}catch(d){}}if(null!=N&&D.ajax.trackWebSockets){window.WebSocket=function(a,b){var d;return d=null!=b?new N(a,b):new N(a),J("socket")&&c.trigger("request",{type:"socket",url:a,protocols:b,request:d}),d};try{w(window.WebSocket,N)}catch(d){}}}return Z(b,a),b}(h),R=null,y=function(){return null==R&&(R=new k),R},I=function(a){var b,c,d,e;for(e=D.ajax.ignoreURLs,c=0,d=e.length;d>c;c++)if(b=e[c],"string"==typeof b){if(-1!==a.indexOf(b))return!0}else if(b.test(a))return!0;return!1},y().on("request",function(b){var c,d,e,f,g;return f=b.type,e=b.request,g=b.url,I(g)?void 0:j.running||D.restartOnRequestAfter===!1&&"force"!==J(f)?void 0:(d=arguments,c=D.restartOnRequestAfter||0,"boolean"==typeof c&&(c=0),setTimeout(function(){var b,c,g,h,i,k;if(b="socket"===f?e.readyState<2:0<(h=e.readyState)&&4>h){for(j.restart(),i=j.sources,k=[],c=0,g=i.length;g>c;c++){if(K=i[c],K instanceof a){K.watch.apply(K,d);break}k.push(void 0)}return k}},c))}),a=function(){function a(){var a=this;this.elements=[],y().on("request",function(){return a.watch.apply(a,arguments)})}return a.prototype.watch=function(a){var b,c,d,e;return d=a.type,b=a.request,e=a.url,I(e)?void 0:(c="socket"===d?new n(b):new o(b),this.elements.push(c))},a}(),o=function(){function a(a){var b,c,d,e,f,g,h=this;if(this.progress=0,null!=window.ProgressEvent)for(c=null,a.addEventListener("progress",function(a){return h.progress=a.lengthComputable?100*a.loaded/a.total:h.progress+(100-h.progress)/2},!1),g=["load","abort","timeout","error"],d=0,e=g.length;e>d;d++)b=g[d],a.addEventListener(b,function(){return h.progress=100},!1);else f=a.onreadystatechange,a.onreadystatechange=function(){var b;return 0===(b=a.readyState)||4===b?h.progress=100:3===a.readyState&&(h.progress=50),"function"==typeof f?f.apply(null,arguments):void 0}}return a}(),n=function(){function a(a){var b,c,d,e,f=this;for(this.progress=0,e=["error","open"],c=0,d=e.length;d>c;c++)b=e[c],a.addEventListener(b,function(){return f.progress=100},!1)}return a}(),d=function(){function a(a){var b,c,d,f;for(null==a&&(a={}),this.elements=[],null==a.selectors&&(a.selectors=[]),f=a.selectors,c=0,d=f.length;d>c;c++)b=f[c],this.elements.push(new e(b))}return a}(),e=function(){function a(a){this.selector=a,this.progress=0,this.check()}return a.prototype.check=function(){var a=this;return document.querySelector(this.selector)?this.done():setTimeout(function(){return a.check()},D.elements.checkInterval)},a.prototype.done=function(){return this.progress=100},a}(),c=function(){function a(){var a,b,c=this;this.progress=null!=(b=this.states[document.readyState])?b:100,a=document.onreadystatechange,document.onreadystatechange=function(){return null!=c.states[document.readyState]&&(c.progress=c.states[document.readyState]),"function"==typeof a?a.apply(null,arguments):void 0}}return a.prototype.states={loading:0,interactive:50,complete:100},a}(),f=function(){function a(){var a,b,c,d,e,f=this;this.progress=0,a=0,e=[],d=0,c=C(),b=setInterval(function(){var g;return g=C()-c-50,c=C(),e.push(g),e.length>D.eventLag.sampleCount&&e.shift(),a=q(e),++d>=D.eventLag.minSamples&&a<D.eventLag.lagThreshold?(f.progress=100,clearInterval(b)):f.progress=100*(3/(a+3))},50)}return a}(),m=function(){function a(a){this.source=a,this.last=this.sinceLastUpdate=0,this.rate=D.initialRate,this.catchup=0,this.progress=this.lastProgress=0,null!=this.source&&(this.progress=F(this.source,"progress"))}return a.prototype.tick=function(a,b){var c;return null==b&&(b=F(this.source,"progress")),b>=100&&(this.done=!0),b===this.last?this.sinceLastUpdate+=a:(this.sinceLastUpdate&&(this.rate=(b-this.last)/this.sinceLastUpdate),this.catchup=(b-this.progress)/D.catchupTime,this.sinceLastUpdate=0,this.last=b),b>this.progress&&(this.progress+=this.catchup*a),c=1-Math.pow(this.progress/100,D.easeFactor),this.progress+=c*this.rate*a,this.progress=Math.min(this.lastProgress+D.maxProgressPerFrame,this.progress),this.progress=Math.max(0,this.progress),this.progress=Math.min(100,this.progress),this.lastProgress=this.progress,this.progress},a}(),L=null,H=null,r=null,M=null,p=null,s=null,j.running=!1,z=function(){return D.restartOnPushState?j.restart():void 0},null!=window.history.pushState&&(T=window.history.pushState,window.history.pushState=function(){return z(),T.apply(window.history,arguments)}),null!=window.history.replaceState&&(W=window.history.replaceState,window.history.replaceState=function(){return z(),W.apply(window.history,arguments)}),l={ajax:a,elements:d,document:c,eventLag:f},(B=function(){var a,c,d,e,f,g,h,i;for(j.sources=L=[],g=["ajax","elements","document","eventLag"],c=0,e=g.length;e>c;c++)a=g[c],D[a]!==!1&&L.push(new l[a](D[a]));for(i=null!=(h=D.extraSources)?h:[],d=0,f=i.length;f>d;d++)K=i[d],L.push(new K(D));return j.bar=r=new b,H=[],M=new m})(),j.stop=function(){return j.trigger("stop"),j.running=!1,r.destroy(),s=!0,null!=p&&("function"==typeof t&&t(p),p=null),B()},j.restart=function(){return j.trigger("restart"),j.stop(),j.start()},j.go=function(){var a;return j.running=!0,r.render(),a=C(),s=!1,p=G(function(b,c){var d,e,f,g,h,i,k,l,n,o,p,q,t,u,v,w;for(l=100-r.progress,e=p=0,f=!0,i=q=0,u=L.length;u>q;i=++q)for(K=L[i],o=null!=H[i]?H[i]:H[i]=[],h=null!=(w=K.elements)?w:[K],k=t=0,v=h.length;v>t;k=++t)g=h[k],n=null!=o[k]?o[k]:o[k]=new m(g),f&=n.done,n.done||(e++,p+=n.tick(b));return d=p/e,r.update(M.tick(b,d)),r.done()||f||s?(r.update(100),j.trigger("done"),setTimeout(function(){return r.finish(),j.running=!1,j.trigger("hide")},Math.max(D.ghostTime,Math.max(D.minTime-(C()-a),0)))):c()})},j.start=function(a){v(D,a),j.running=!0;try{r.render()}catch(b){i=b}return document.querySelector(".pace")?(j.trigger("start"),j.go()):setTimeout(j.start,50)},"function"==typeof define&&define.amd?define(["pace"],function(){return j}):"object"==typeof exports?module.exports=j:D.startOnPageLoad&&j.start()}).call(this);]]></content>
  </entry>
</search>
